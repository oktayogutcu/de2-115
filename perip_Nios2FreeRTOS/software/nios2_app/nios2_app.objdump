
nios2_app.elf:     file format elf32-littlenios2
nios2_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000374

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00016980 memsz 0x00016980 flags r-x
    LOAD off    0x000179a0 vaddr 0x080169a0 paddr 0x08018490 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00019f80 vaddr 0x08019f80 paddr 0x08019f80 align 2**12
         filesz 0x00000000 memsz 0x0080026c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000354  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000162b8  08000374  08000374  00001374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000374  0801662c  0801662c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  080169a0  08018490  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          008002f2  08019f80  08019f80  00019f80  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0881a1ec  0881a1ec  00019490  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00019490  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fd8  00000000  00000000  000194b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002789a  00000000  00000000  0001a490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a8e  00000000  00000000  00041d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d4cb  00000000  00000000  0004b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000034e8  00000000  00000000  00058c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000052fb  00000000  00000000  0005c16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00061467  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00078cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018f8  00000000  00000000  00078ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007edca  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007edcd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007edd9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007edda  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000005  00000000  00000000  0007eddb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  0007ede0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  0007ede5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0007edea  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  0007edf8  2**0
                  CONTENTS, READONLY
 26 .jdi          000050e2  00000000  00000000  0007ee41  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045f8d  00000000  00000000  00083f23  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000374 l    d  .text	00000000 .text
0801662c l    d  .rodata	00000000 .rodata
080169a0 l    d  .rwdata	00000000 .rwdata
08019f80 l    d  .bss	00000000 .bss
0881a1ec l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios2_app_bsp//obj/HAL/src/crt0.o
080003ac l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/portable/GCC/NiosII/port_asm.o
08000020 l       .exceptions	00000000 save_context
0800009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
08000104 l       .exceptions	00000000 irq_test_user
0800016c l       .exceptions	00000000 restore_context
08000124 l       .exceptions	00000000 soft_exceptions
08000134 l       .exceptions	00000000 call_scheduler
08000148 l       .exceptions	00000000 exceptions_unknown_user
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 event_groups.c
08000a40 l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
08000d40 l     F .text	0000002c prvReadGp
08000ea4 l     F .text	000000a4 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_1.c
08019ffc l     O .bss	00800000 ucHeap
08019f80 l     O .bss	00000004 xNextFreeByte
08019f84 l     O .bss	00000004 pucAlignedHeap.2630
00000000 l    df *ABS*	00000000 queue.c
080014b0 l     F .text	00000084 prvInitialiseNewQueue
08001534 l     F .text	00000060 prvInitialiseMutex
08002240 l     F .text	0000018c prvCopyDataToQueue
080025f4 l     F .text	00000058 prvIsQueueFull
08002468 l     F .text	000000f4 prvUnlockQueue
080023cc l     F .text	0000009c prvCopyDataFromQueue
0800255c l     F .text	00000050 prvIsQueueEmpty
080021f0 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 stream_buffer.c
08003540 l     F .text	00000080 prvInitialiseNewStreamBuffer
080034cc l     F .text	00000074 prvBytesInBuffer
08002ca0 l     F .text	000000d0 prvWriteMessageToBuffer
0800330c l     F .text	000000e0 prvWriteBytesToBuffer
08003048 l     F .text	000000e0 prvReadMessageFromBuffer
080033ec l     F .text	000000e0 prvReadBytesFromBuffer
00000000 l    df *ABS*	00000000 tasks.c
08819ffc l     O .bss	00000064 pxReadyTasksLists
0881a060 l     O .bss	00000014 xDelayedTaskList1
0881a074 l     O .bss	00000014 xDelayedTaskList2
08019f8c l     O .bss	00000004 pxDelayedTaskList
08019f90 l     O .bss	00000004 pxOverflowDelayedTaskList
0881a088 l     O .bss	00000014 xPendingReadyList
0881a09c l     O .bss	00000014 xTasksWaitingTermination
08019f94 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0881a0b0 l     O .bss	00000014 xSuspendedTaskList
08019f98 l     O .bss	00000004 uxCurrentNumberOfTasks
08019f9c l     O .bss	00000004 xTickCount
08019fa0 l     O .bss	00000004 uxTopReadyPriority
08019fa4 l     O .bss	00000004 xSchedulerRunning
08019fa8 l     O .bss	00000004 xPendedTicks
08019fac l     O .bss	00000004 xYieldPending
08019fb0 l     O .bss	00000004 xNumOfOverflows
08019fb4 l     O .bss	00000004 uxTaskNumber
08019fb8 l     O .bss	00000004 xNextTaskUnblockTime
08019fbc l     O .bss	00000004 xIdleTaskHandle
08019fc0 l     O .bss	00000004 uxSchedulerSuspended
080036b8 l     F .text	000001b8 prvInitialiseNewTask
08003870 l     F .text	000001c4 prvAddNewTaskToReadyList
080055a4 l     F .text	000000c0 prvInitialiseTaskLists
080057ec l     F .text	00000048 prvResetNextTaskUnblockTime
080057a8 l     F .text	00000044 prvDeleteTCB
08006dec l     F .text	00000150 prvAddCurrentTaskToDelayedList
080040bc l     F .text	0000006c prvTaskIsTaskSuspended
08005588 l     F .text	0000001c prvIdleTask
08005664 l     F .text	00000080 prvCheckTasksWaitingTermination
080056e4 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080166f6 l     O .rodata	00000010 zeroes.4404
08009994 l     F .text	000000bc __sbprintf
08016706 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08009ba4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800b6fc l     F .text	00000008 __fp_unlock
0800b710 l     F .text	0000019c __sinit.part.1
0800b8ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
080169a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08016de4 l     O .rwdata	00000020 lc_ctype_charset
08016dc4 l     O .rwdata	00000020 lc_message_charset
08016e04 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08016738 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800eb10 l     F .text	000000fc __sprint_r.part.0
0801685c l     O .rodata	00000010 zeroes.4349
0801014c l     F .text	000000bc __sbprintf
0801686c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08013fb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080140cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080140f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
080141ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080142d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080143c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0801459c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08018484 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08014810 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801494c l     F .text	00000034 alt_dev_reg
080173ec l     O .rwdata	00001060 debug
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08014c30 l     F .text	00000210 altera_avalon_jtag_uart_irq
08014e40 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08015478 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080156b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08015874 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_open.c
08015b54 l     F .text	0000003c alt_get_errno
08015b90 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08019ff8 g     O .bss	00000004 alt_instruction_exception_handler
0800e154 g     F .text	00000074 _mprec_log10
0800e240 g     F .text	0000008c __any_on
08010700 g     F .text	00000054 _isatty_r
08016744 g     O .rodata	00000028 __mprec_tinytens
080144d8 g     F .text	0000007c alt_main
08007530 g     F .text	000000c0 _puts_r
0881a0ec g     O .bss	00000100 alt_irq
08010754 g     F .text	00000060 _lseek_r
0800015c g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
08004df0 g     F .text	000000bc vTaskPlaceOnUnorderedEventList
0800123c g     F .text	0000002c xPortGetFreeHeapSize
08000798 g     F .text	0000003c xEventGroupGetBitsFromISR
08018490 g       *ABS*	00000000 __flash_rwdata_start
08012990 g     F .text	00000088 .hidden __eqdf2
0881a1ec g       *ABS*	00000000 __alt_heap_start
08003c74 g     F .text	00000058 uxTaskPriorityGet
080074f4 g     F .text	0000003c printf
0801096c g     F .text	0000009c _wcrtomb_r
0800e9d0 g     F .text	0000005c __sseek
0800ba5c g     F .text	00000010 __sinit
08010814 g     F .text	00000140 __swbuf_r
0800c530 g     F .text	0000007c _setlocale_r
0800b8b4 g     F .text	00000078 __sfmoreglue
08002d70 g     F .text	00000160 xStreamBufferReceive
08014578 g     F .text	00000024 __malloc_unlock
08003b28 g     F .text	000000f0 xTaskDelayUntil
08000404 g     F .text	00000184 xEventGroupSync
0800d0b8 g     F .text	0000015c memmove
08006d34 g     F .text	000000b8 ulTaskGenericNotifyValueClear
08005e44 g     F .text	00000054 vTaskEnterCritical
0800ba44 g     F .text	00000018 _cleanup
08001814 g     F .text	00000108 xQueueGenericSendFromISR
080048d0 g     F .text	00000040 pcTaskGetName
0800d214 g     F .text	000000a8 _Balloc
080028f8 g     F .text	000000a4 xStreamBufferSpacesAvailable
08012a18 g     F .text	000000dc .hidden __gtdf2
08015f7c g     F .text	00000024 altera_nios2_gen2_irq_init
080027d8 g     F .text	000000b4 xStreamBufferReset
08000000 g     F .entry	0000000c __reset
08019f88 g     O .bss	00000004 pxCurrentTCB
08000020 g       *ABS*	00000000 __flash_exceptions_start
080106a4 g     F .text	0000005c _fstat_r
08019fdc g     O .bss	00000004 errno
0800e94c g     F .text	00000008 __seofread
08002bac g     F .text	000000f4 xStreamBufferSendFromISR
08019fe8 g     O .bss	00000004 alt_argv
0802044c g       *ABS*	00000000 _gp
08003d18 g     F .text	00000274 vTaskPrioritySet
0800543c g     F .text	0000003c vTaskInternalSetTimeOutState
08000588 g     F .text	000001a8 xEventGroupWaitBits
08000f90 g     F .text	0000017c _alt_ic_isr_register
0801726c g     O .rwdata	00000180 alt_fd_list
08000e4c g     F .text	00000038 xPortStartScheduler
08004500 g     F .text	00000048 vTaskEndScheduler
08015fa0 g     F .text	00000090 alt_find_dev
08007254 g     F .text	00000148 memcpy
08004da0 g     F .text	00000050 vTaskPlaceOnEventList
08005194 g     F .text	0000025c vTaskRemoveFromUnorderedEventList
0800b704 g     F .text	0000000c _cleanup_r
08013dd0 g     F .text	000000dc .hidden __floatsidf
08015958 g     F .text	0000007c alt_io_redirect
08012af4 g     F .text	000000f4 .hidden __ltdf2
0800206c g     F .text	0000007c xQueuePeekFromISR
0801662c g       *ABS*	00000000 __DTOR_END__
080075f0 g     F .text	00000014 puts
080161fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
080011f4 g     F .text	00000024 vPortFree
0800e830 g     F .text	00000074 __fpclassifyd
0800e0b0 g     F .text	000000a4 __ratio
08010130 g     F .text	0000001c __vfiprintf_internal
08001bb4 g     F .text	00000210 xQueueSemaphoreTake
08015038 g     F .text	0000021c altera_avalon_jtag_uart_read
080074c4 g     F .text	00000030 _printf_r
08007170 g     F .text	00000064 .hidden __udivsi3
08014228 g     F .text	000000ac isatty
08016794 g     O .rodata	000000c8 __mprec_tens
08005748 g     F .text	00000060 uxTaskGetStackHighWaterMark
0800c5ac g     F .text	0000000c __locale_charset
08000b44 g     F .text	0000008c vListInsertEnd
08019fd8 g     O .bss	00000004 __malloc_top_pad
08005f74 g     F .text	0000011c ulTaskGenericNotifyTake
080003b0 g     F .text	00000054 xEventGroupCreate
08018458 g     O .rwdata	00000004 __mb_cur_max
0800c5dc g     F .text	0000000c _localeconv_r
0800d648 g     F .text	0000003c __i2b
0800bee0 g     F .text	000004c8 __sfvwrite_r
0800e8a4 g     F .text	00000054 _sbrk_r
080009c8 g     F .text	0000003c vEventGroupSetBitsCallback
080042bc g     F .text	000001b0 xTaskResumeFromISR
080107b4 g     F .text	00000060 _read_r
08000b18 g     F .text	0000002c vListInitialiseItem
08018478 g     O .rwdata	00000004 alt_max_fd
08000f48 g     F .text	00000048 vPortSysTickHandler
08010398 g     F .text	000000f0 _fclose_r
08001a0c g     F .text	000001a8 xQueueReceive
0800b6cc g     F .text	00000030 fflush
08019fd4 g     O .bss	00000004 __malloc_max_sbrked_mem
08003ccc g     F .text	0000004c uxTaskPriorityGetFromISR
080159d4 g     F .text	00000180 alt_irq_register
08011714 g     F .text	000008ac .hidden __adddf3
0800de58 g     F .text	0000010c __b2d
08011150 g     F .text	000005c4 .hidden __umoddi3
080143fc g     F .text	000000dc lseek
08018450 g     O .rwdata	00000004 _global_impure_ptr
080007d4 g     F .text	00000180 xEventGroupSetBits
0800e2cc g     F .text	00000564 _realloc_r
0881a1ec g       *ABS*	00000000 __bss_end
08015e74 g     F .text	00000108 alt_tick
08010b54 g     F .text	000005fc .hidden __udivdi3
08010600 g     F .text	00000024 _fputwc_r
0801676c g     O .rodata	00000028 __mprec_bigtens
0800d42c g     F .text	00000104 __s2b
08013eac g     F .text	000000a8 .hidden __floatunsidf
0800db98 g     F .text	00000060 __mcmp
0800110c g     F .text	000000e8 pvPortMalloc
0800ba7c g     F .text	00000018 __fp_lock_all
080021b4 g     F .text	0000003c vQueueDelete
08000e84 g     F .text	00000020 vPortEndScheduler
08000ab0 g     F .text	00000068 vListInitialise
08003128 g     F .text	00000058 xStreamBufferIsEmpty
08015dd8 g     F .text	0000009c alt_alarm_stop
08019fe0 g     O .bss	00000004 alt_irq_active
0800023c g     F .exceptions	000000d8 alt_irq_handler
08017244 g     O .rwdata	00000028 alt_dev_null
0800485c g     F .text	00000028 xTaskGetTickCount
08001660 g     F .text	000001b4 xQueueGenericSend
080029dc g     F .text	000001d0 xStreamBufferSend
08003284 g     F .text	00000088 xStreamBufferReceiveCompletedFromISR
08015694 g     F .text	00000020 alt_dcache_flush_all
0800d530 g     F .text	00000068 __hi0bits
080069ac g     F .text	000002f4 vTaskGenericNotifyGiveFromISR
08013d50 g     F .text	00000080 .hidden __fixdfsi
08002ed0 g     F .text	00000098 xStreamBufferNextMessageLengthBytes
08005a70 g     F .text	000001c4 xTaskPriorityDisinherit
08018490 g       *ABS*	00000000 __ram_rwdata_end
08018470 g     O .rwdata	00000008 alt_dev_list
0801484c g     F .text	00000100 write
08004eac g     F .text	000002e8 xTaskRemoveFromEventList
080169a0 g       *ABS*	00000000 __ram_rodata_end
08014134 g     F .text	000000b8 fstat
08000730 g     F .text	00000068 xEventGroupClearBits
08012af4 g     F .text	000000f4 .hidden __ledf2
08001dc4 g     F .text	000001b0 xQueuePeek
0800d910 g     F .text	00000140 __pow5mult
0800ec24 g     F .text	0000150c ___vfiprintf_internal_r
08019fcc g     O .bss	00000004 __nlocale_changed
080071d4 g     F .text	00000058 .hidden __umodsi3
0881a1ec g       *ABS*	00000000 end
08002f68 g     F .text	000000e0 xStreamBufferReceiveFromISR
08003a34 g     F .text	000000f4 vTaskDelete
08014b7c g     F .text	000000b4 altera_avalon_jtag_uart_init
08000314 g     F .exceptions	00000060 alt_instruction_exception_entry
08005f3c g     F .text	00000038 pvTaskIncrementMutexHeldCount
0801662c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080154f4 g     F .text	00000074 alt_avalon_timer_sc_init
08013f54 g     F .text	00000064 .hidden __clzsi2
08015254 g     F .text	00000224 altera_avalon_jtag_uart_write
0800ba6c g     F .text	00000004 __sfp_lock_acquire
0800cfd4 g     F .text	000000e4 memchr
0800769c g     F .text	000022dc ___vfprintf_internal_r
08006fc4 g     F .text	00000070 task1
08005478 g     F .text	000000e8 xTaskCheckForTimeOut
0800bbd0 g     F .text	00000310 _free_r
0800585c g     F .text	00000214 xTaskPriorityInherit
0800c5b8 g     F .text	00000010 __locale_mb_cur_max
08016478 g     F .text	00000180 __call_exitprocs
08006090 g     F .text	00000188 xTaskGenericNotifyWait
08002774 g     F .text	00000064 vStreamBufferDelete
08019fc8 g     O .bss	00000004 __mlocale_changed
0801845c g     O .rwdata	00000004 __malloc_sbrk_base
08000374 g     F .text	0000003c _start
08007034 g     F .text	00000044 task2
08019ff0 g     O .bss	00000004 _alt_tick_rate
08004548 g     F .text	0000002c vTaskSuspendAll
08003180 g     F .text	0000007c xStreamBufferIsFull
08004884 g     F .text	0000002c xTaskGetTickCountFromISR
0800da50 g     F .text	00000148 __lshift
08019ff4 g     O .bss	00000004 _alt_nticks
080145d8 g     F .text	00000104 read
080149b8 g     F .text	00000060 alt_sys_init
08000ca8 g     F .text	00000098 uxListRemove
08016360 g     F .text	00000118 __register_exitproc
0800269c g     F .text	000000d8 xStreamBufferGenericCreate
0800d684 g     F .text	0000028c __multiply
08014ee0 g     F .text	00000068 altera_avalon_jtag_uart_close
0800722c g     F .text	00000028 .hidden __mulsi3
080169a0 g       *ABS*	00000000 __ram_rwdata_start
0801662c g       *ABS*	00000000 __ram_rodata_start
0881a0c4 g     O .bss	00000028 __malloc_current_mallinfo
08004128 g     F .text	00000194 vTaskResume
0800df64 g     F .text	0000014c __d2b
08004ca8 g     F .text	000000f8 vTaskSwitchContext
08014a18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08016138 g     F .text	000000c4 alt_get_fd
08010268 g     F .text	00000054 _close_r
080162e4 g     F .text	0000007c memcmp
08014ad8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0881a1ec g       *ABS*	00000000 __alt_stack_base
08014b28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009a50 g     F .text	00000154 __swsetup_r
08003f8c g     F .text	00000130 vTaskSuspend
08011fc0 g     F .text	000009d0 .hidden __divdf3
0800b92c g     F .text	00000118 __sfp
0800e1c8 g     F .text	00000078 __copybits
08004910 g     F .text	00000050 xTaskCatchUpTicks
080048b0 g     F .text	00000020 uxTaskGetNumberOfTasks
08016e3c g     O .rwdata	00000408 __malloc_av_
0800ba78 g     F .text	00000004 __sinit_lock_release
08012be8 g     F .text	0000086c .hidden __muldf3
0800e8f8 g     F .text	00000054 __sread
08016030 g     F .text	00000108 alt_find_file
080156f0 g     F .text	000000a4 alt_dev_llist_insert
08014554 g     F .text	00000024 __malloc_lock
08014760 g     F .text	000000b0 sbrk
0800b670 g     F .text	0000005c _fflush_r
08000954 g     F .text	00000074 vEventGroupDelete
080102bc g     F .text	000000dc _calloc_r
08006218 g     F .text	0000037c xTaskGenericNotify
08019f80 g       *ABS*	00000000 __bss_start
0800739c g     F .text	00000128 memset
08006f3c g     F .text	00000088 main
08019fec g     O .bss	00000004 alt_envp
08019fd0 g     O .bss	00000004 __malloc_max_total_mem
08014a78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08010954 g     F .text	00000018 __swbuf
08000bd0 g     F .text	000000d8 vListInsert
0800ea2c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08010488 g     F .text	00000014 fclose
08009dcc g     F .text	00001688 _dtoa_r
0800c7c8 g     F .text	0000080c _malloc_r
08010ac8 g     F .text	00000030 __ascii_wctomb
0801847c g     O .rwdata	00000004 alt_errno
0800c3a8 g     F .text	000000c4 _fwalk
08001f74 g     F .text	000000f8 xQueueReceiveFromISR
08005834 g     F .text	00000028 xTaskGetCurrentTaskHandle
08007078 g     F .text	00000084 .hidden __divsi3
080013dc g     F .text	000000d4 xQueueGenericCreate
0800baac g     F .text	00000124 _malloc_trim_r
0801662c g       *ABS*	00000000 __CTOR_END__
0800ea34 g     F .text	000000dc strcmp
080015f0 g     F .text	00000070 xQueueCreateCountingSemaphore
0801662c g       *ABS*	00000000 __flash_rodata_start
0801662c g       *ABS*	00000000 __DTOR_LIST__
0800288c g     F .text	0000006c xStreamBufferSetTriggerLevel
08006594 g     F .text	00000418 xTaskGenericNotifyFromISR
08012990 g     F .text	00000088 .hidden __nedf2
08014980 g     F .text	00000038 alt_irq_init
080146dc g     F .text	00000084 alt_release_fd
08004574 g     F .text	000002e8 xTaskResumeAll
0801844c g     O .rwdata	00000004 uxTopUsedPriority
08002128 g     F .text	00000054 uxQueueSpacesAvailable
0801687c g     O .rodata	00000100 .hidden __clz_tab
0800446c g     F .text	00000094 vTaskStartScheduler
08019fc4 g     O .bss	00000004 _PathLocale
08016298 g     F .text	00000014 atexit
08010208 g     F .text	00000060 _write_r
0800c5e8 g     F .text	00000018 setlocale
0800264c g     F .text	00000050 xQueueIsQueueFullFromISR
08018454 g     O .rwdata	00000004 _impure_ptr
08019fe4 g     O .bss	00000004 alt_argc
0800b454 g     F .text	0000021c __sflush_r
080157f4 g     F .text	00000060 _do_dtors
0800c5d4 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
0800ddf4 g     F .text	00000064 __ulp
0800ba94 g     F .text	00000018 __fp_unlock_all
08005560 g     F .text	00000028 vTaskMissedYield
08018468 g     O .rwdata	00000008 alt_fs_list
080020e8 g     F .text	00000040 uxQueueMessagesWaiting
08004960 g     F .text	00000348 xTaskIncrementTick
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800c600 g     F .text	0000000c localeconv
08001268 g     F .text	00000174 xQueueGenericReset
08018490 g       *ABS*	00000000 _edata
0881a1ec g       *ABS*	00000000 _end
0801049c g     F .text	00000164 __fputwc
08000374 g       *ABS*	00000000 __ram_exceptions_end
08014f48 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080035c0 g     F .text	000000f8 xTaskCreate
08001218 g     F .text	00000024 vPortInitialiseBlocks
08006ca0 g     F .text	00000094 xTaskGenericNotifyStateClear
0800e954 g     F .text	0000007c __swrite
08018460 g     O .rwdata	00000004 __malloc_trim_threshold
0800c5c8 g     F .text	0000000c __locale_msgcharset
080162ac g     F .text	00000038 exit
0800c46c g     F .text	000000c4 _fwalk_reent
0800dbf8 g     F .text	000001fc __mdiff
080070fc g     F .text	00000074 .hidden __modsi3
08003c18 g     F .text	0000005c vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800ba70 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08005c34 g     F .text	00000210 vTaskPriorityDisinheritAfterTimeout
080165f8 g     F .text	00000034 _exit
08015568 g     F .text	0000012c alt_alarm_start
0800c60c g     F .text	000001bc __smakebuf_r
08005e98 g     F .text	00000060 vTaskExitCritical
08007604 g     F .text	00000098 strlen
08000d6c g     F .text	000000e0 pxPortInitialiseStack
08015c7c g     F .text	0000015c open
08012a18 g     F .text	000000dc .hidden __gedf2
08018464 g     O .rwdata	00000004 __wctomb
0800ec0c g     F .text	00000018 __sprint_r
08015854 g     F .text	00000020 alt_icache_flush_all
080053f0 g     F .text	0000004c vTaskSetTimeOutState
08018480 g     O .rwdata	00000004 alt_priority_mask
08009978 g     F .text	0000001c __vfprintf_internal
08010af8 g     F .text	0000005c _wctomb_r
0800217c g     F .text	00000038 uxQueueMessagesWaitingFromISR
080025ac g     F .text	00000048 xQueueIsQueueEmptyFromISR
0800299c g     F .text	00000040 xStreamBufferBytesAvailable
08013454 g     F .text	000008fc .hidden __subdf3
0800d598 g     F .text	000000b0 __lo0bits
08018488 g     O .rwdata	00000008 alt_alarm_list
08015794 g     F .text	00000060 _do_ctors
08005ef8 g     F .text	00000044 uxTaskResetEventItemValue
08010a08 g     F .text	000000c0 wcrtomb
08001594 g     F .text	0000005c xQueueCreateMutex
08013ff4 g     F .text	000000d8 close
0801433c g     F .text	00000084 alt_load
08000a04 g     F .text	0000003c vEventGroupClearBitsCallback
080031fc g     F .text	00000088 xStreamBufferSendCompletedFromISR
0800191c g     F .text	000000f0 xQueueGiveFromISR
08010624 g     F .text	00000080 fputwc
0800ba74 g     F .text	00000004 __sinit_lock_acquire
0800d2e4 g     F .text	00000148 __multadd
0800d2bc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	0840dd14 	ori	at,at,884
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:
# Entry point for exceptions.
.section .exceptions.entry.user, "xa"

# Save the entire context of a task.
save_context:
	addi	sp,	sp, -116		# Create space on the stack.
 8000020:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)
 8000028:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp)
 8000044:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp)
 8000048:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 800004c:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 8000050:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 8000054:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 8000058:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 800005c:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 8000060:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 8000064:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 8000068:	d9401115 	stw	r5,68(sp)
	addi	r15, ea, -4			# Instruction that caused exception
 800006c:	ebffff04 	addi	r15,ea,-4
	stw		r15, 72(sp)			# Save as EA
 8000070:	dbc01215 	stw	r15,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 8000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 8000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 800007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 8000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 8000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 8000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 800008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 8000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 8000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 8000098:	df001c15 	stw	fp,112(sp)

0800009c <save_sp_to_pxCurrentTCB>:
 800009c:	060200b4 	movhi	et,2050

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 80000a0:	c627e204 	addi	et,et,-24696
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 80000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 80000a8:	c6c00015 	stw	sp,0(et)

	br		irq_test_user		# skip the section .exceptions.entry
 80000ac:	00001506 	br	8000104 <irq_test_user>

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 80000b0:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 80000b4:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 80000b8:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 80000bc:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 80000c0:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 80000c4:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 80000c8:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 80000cc:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 80000d0:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 80000d4:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 80000d8:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 80000dc:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 80000e0:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 80000e4:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 80000e8:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 80000ec:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 80000f0:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 80000f4:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 80000f8:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 80000fc:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000100:	dbc01215 	stw	r15,72(sp)

08000104 <irq_test_user>:
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000104:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000108:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800010c:	10000326 	beq	r2,zero,800011c <irq_test_user+0x18>
        beq   r4, zero, .Lnot_irq
 8000110:	20000226 	beq	r4,zero,800011c <irq_test_user+0x18>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000114:	800023c0 	call	800023c <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000118:	00001006 	br	800015c <restore_sp_from_pxCurrentTCB>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800011c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000120:	e8bfff17 	ldw	r2,-4(ea)

08000124 <soft_exceptions>:

	eret					# Return to address ea, loading eStatus into Status.

	.section .exceptions.soft, "xa"
soft_exceptions:
	movhi	r3, 0x003b				/* upper half of trap opcode */
 8000124:	00c00ef4 	movhi	r3,59
	ori		r3, r3, 0x683a			/* lower half of trap opcode */
 8000128:	18da0e94 	ori	r3,r3,26682
	beq		r2, r3, call_scheduler
 800012c:	10c00126 	beq	r2,r3,8000134 <call_scheduler>
	br		exceptions_unknown_user			# its something else
 8000130:	00000506 	br	8000148 <exceptions_unknown_user>

08000134 <call_scheduler>:

call_scheduler:
	stw		ea, 72(sp)						# EA is PC+4 so will skip over instruction causing exception
 8000134:	df401215 	stw	ea,72(sp)
 8000138:	03c20034 	movhi	r15,2048
	movia	r15, vTaskSwitchContext			# Pick the next context - use long call version in place of "call"
 800013c:	7bd32a04 	addi	r15,r15,19624
	callr	r15
 8000140:	783ee83a 	callr	r15
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore.
 8000144:	00000506 	br	800015c <restore_sp_from_pxCurrentTCB>

08000148 <exceptions_unknown_user>:
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000148:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 800014c:	80003140 	call	8000314 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 8000150:	1000021e 	bne	r2,zero,800015c <restore_sp_from_pxCurrentTCB>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 8000154:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000158:	dbc01215 	stw	r15,72(sp)

0800015c <restore_sp_from_pxCurrentTCB>:
 800015c:	060200b4 	movhi	et,2050
	.section .exceptions.irqtest, "xa"
irq_test_user:

	.section .exceptions.exit.user, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 8000160:	c627e204 	addi	et,et,-24696
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 8000164:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 8000168:	c6c00017 	ldw	sp,0(et)

0800016c <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 800016c:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 8000170:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 8000174:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 8000178:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 800017c:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp)
 8000180:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp)
 8000184:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp)
 8000188:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp)
 800018c:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp)
 8000190:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 8000194:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 8000198:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 800019c:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 80001a0:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 80001a4:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 80001a8:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 80001ac:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 80001b0:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 80001b4:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 80001b8:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 80001bc:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 80001c0:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 80001c4:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 80001c8:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 80001cc:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 80001d0:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 80001d4:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 80001d8:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 80001dc:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 80001e0:	dec01d04 	addi	sp,sp,116

	eret					# Return to address ea, loading eStatus into Status.
 80001e4:	ef80083a 	eret
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80001e8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80001ec:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80001f0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80001f4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80001f8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80001fc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 8000200:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 8000204:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 8000208:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 800020c:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 8000210:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 8000214:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 8000218:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 800021c:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 8000220:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 8000224:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 8000228:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 800022c:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 8000230:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 8000234:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 8000238:	ef80083a 	eret

0800023c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 800023c:	defff904 	addi	sp,sp,-28
 8000240:	dfc00615 	stw	ra,24(sp)
 8000244:	df000515 	stw	fp,20(sp)
 8000248:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800024c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000250:	0005313a 	rdctl	r2,ipending
 8000254:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000258:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800025c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000260:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000264:	00800044 	movi	r2,1
 8000268:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800026c:	e0fffb17 	ldw	r3,-20(fp)
 8000270:	e0bffc17 	ldw	r2,-16(fp)
 8000274:	1884703a 	and	r2,r3,r2
 8000278:	10001526 	beq	r2,zero,80002d0 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 800027c:	008220b4 	movhi	r2,2178
 8000280:	10a83b04 	addi	r2,r2,-24340
 8000284:	e0fffd17 	ldw	r3,-12(fp)
 8000288:	180690fa 	slli	r3,r3,3
 800028c:	10c5883a 	add	r2,r2,r3
 8000290:	10c00017 	ldw	r3,0(r2)
 8000294:	008220b4 	movhi	r2,2178
 8000298:	10a83b04 	addi	r2,r2,-24340
 800029c:	e13ffd17 	ldw	r4,-12(fp)
 80002a0:	200890fa 	slli	r4,r4,3
 80002a4:	1105883a 	add	r2,r2,r4
 80002a8:	10800104 	addi	r2,r2,4
 80002ac:	10800017 	ldw	r2,0(r2)
 80002b0:	e17ffd17 	ldw	r5,-12(fp)
 80002b4:	1009883a 	mov	r4,r2
 80002b8:	183ee83a 	callr	r3
#endif
        break;
 80002bc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80002c0:	0005313a 	rdctl	r2,ipending
 80002c4:	e0bfff15 	stw	r2,-4(fp)

  return active;
 80002c8:	e0bfff17 	ldw	r2,-4(fp)
 80002cc:	00000706 	br	80002ec <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 80002d0:	e0bffc17 	ldw	r2,-16(fp)
 80002d4:	1085883a 	add	r2,r2,r2
 80002d8:	e0bffc15 	stw	r2,-16(fp)
      i++;
 80002dc:	e0bffd17 	ldw	r2,-12(fp)
 80002e0:	10800044 	addi	r2,r2,1
 80002e4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80002e8:	003fe006 	br	800026c <__alt_data_end+0xf800026c>

    active = alt_irq_pending ();
 80002ec:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80002f0:	e0bffb17 	ldw	r2,-20(fp)
 80002f4:	103fda1e 	bne	r2,zero,8000260 <__alt_data_end+0xf8000260>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80002f8:	0001883a 	nop
}
 80002fc:	0001883a 	nop
 8000300:	e037883a 	mov	sp,fp
 8000304:	dfc00117 	ldw	ra,4(sp)
 8000308:	df000017 	ldw	fp,0(sp)
 800030c:	dec00204 	addi	sp,sp,8
 8000310:	f800283a 	ret

08000314 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 8000314:	defffb04 	addi	sp,sp,-20
 8000318:	dfc00415 	stw	ra,16(sp)
 800031c:	df000315 	stw	fp,12(sp)
 8000320:	df000304 	addi	fp,sp,12
 8000324:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 8000328:	00bfffc4 	movi	r2,-1
 800032c:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 8000330:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000334:	d0a6eb17 	ldw	r2,-25684(gp)
 8000338:	10000726 	beq	r2,zero,8000358 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800033c:	d0a6eb17 	ldw	r2,-25684(gp)
 8000340:	e0fffd17 	ldw	r3,-12(fp)
 8000344:	e1bffe17 	ldw	r6,-8(fp)
 8000348:	e17fff17 	ldw	r5,-4(fp)
 800034c:	1809883a 	mov	r4,r3
 8000350:	103ee83a 	callr	r2
 8000354:	00000206 	br	8000360 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000358:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800035c:	0005883a 	mov	r2,zero
}
 8000360:	e037883a 	mov	sp,fp
 8000364:	dfc00117 	ldw	ra,4(sp)
 8000368:	df000017 	ldw	fp,0(sp)
 800036c:	dec00204 	addi	sp,sp,8
 8000370:	f800283a 	ret

Disassembly of section .text:

08000374 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000374:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000378:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800037c:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 8000380:	d6811314 	ori	gp,gp,1100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000384:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000388:	10a7e014 	ori	r2,r2,40832

    movhi r3, %hi(__bss_end)
 800038c:	00c22074 	movhi	r3,2177
    ori r3, r3, %lo(__bss_end)
 8000390:	18e87b14 	ori	r3,r3,41452

    beq r2, r3, 1f
 8000394:	10c00326 	beq	r2,r3,80003a4 <_start+0x30>

0:
    stw zero, (r2)
 8000398:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800039c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80003a0:	10fffd36 	bltu	r2,r3,8000398 <__alt_data_end+0xf8000398>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80003a4:	801433c0 	call	801433c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80003a8:	80144d80 	call	80144d8 <alt_main>

080003ac <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80003ac:	003fff06 	br	80003ac <__alt_data_end+0xf80003ac>

080003b0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 80003b0:	defffd04 	addi	sp,sp,-12
 80003b4:	dfc00215 	stw	ra,8(sp)
 80003b8:	df000115 	stw	fp,4(sp)
 80003bc:	df000104 	addi	fp,sp,4
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80003c0:	01000604 	movi	r4,24
 80003c4:	800110c0 	call	800110c <pvPortMalloc>
 80003c8:	e0bfff15 	stw	r2,-4(fp)

        if( pxEventBits != NULL )
 80003cc:	e0bfff17 	ldw	r2,-4(fp)
 80003d0:	10000626 	beq	r2,zero,80003ec <xEventGroupCreate+0x3c>
        {
            pxEventBits->uxEventBits = 0;
 80003d4:	e0bfff17 	ldw	r2,-4(fp)
 80003d8:	10000015 	stw	zero,0(r2)
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80003dc:	e0bfff17 	ldw	r2,-4(fp)
 80003e0:	10800104 	addi	r2,r2,4
 80003e4:	1009883a 	mov	r4,r2
 80003e8:	8000ab00 	call	8000ab0 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80003ec:	e0bfff17 	ldw	r2,-4(fp)
    }
 80003f0:	e037883a 	mov	sp,fp
 80003f4:	dfc00117 	ldw	ra,4(sp)
 80003f8:	df000017 	ldw	fp,0(sp)
 80003fc:	dec00204 	addi	sp,sp,8
 8000400:	f800283a 	ret

08000404 <xEventGroupSync>:

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                             const EventBits_t uxBitsToSet,
                             const EventBits_t uxBitsToWaitFor,
                             TickType_t xTicksToWait )
{
 8000404:	defff504 	addi	sp,sp,-44
 8000408:	dfc00a15 	stw	ra,40(sp)
 800040c:	df000915 	stw	fp,36(sp)
 8000410:	df000904 	addi	fp,sp,36
 8000414:	e13ffc15 	stw	r4,-16(fp)
 8000418:	e17ffd15 	stw	r5,-12(fp)
 800041c:	e1bffe15 	stw	r6,-8(fp)
 8000420:	e1ffff15 	stw	r7,-4(fp)
    EventBits_t uxOriginalBitValue, uxReturn;
    EventGroup_t * pxEventBits = xEventGroup;
 8000424:	e0bffc17 	ldw	r2,-16(fp)
 8000428:	e0bff815 	stw	r2,-32(fp)
    BaseType_t xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 800042c:	e03ff915 	stw	zero,-28(fp)
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    }
    #endif

    vTaskSuspendAll();
 8000430:	80045480 	call	8004548 <vTaskSuspendAll>
    {
        uxOriginalBitValue = pxEventBits->uxEventBits;
 8000434:	e0bff817 	ldw	r2,-32(fp)
 8000438:	10800017 	ldw	r2,0(r2)
 800043c:	e0bffa15 	stw	r2,-24(fp)

        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000440:	e17ffd17 	ldw	r5,-12(fp)
 8000444:	e13ffc17 	ldw	r4,-16(fp)
 8000448:	80007d40 	call	80007d4 <xEventGroupSetBits>

        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800044c:	e0fffa17 	ldw	r3,-24(fp)
 8000450:	e0bffd17 	ldw	r2,-12(fp)
 8000454:	1886b03a 	or	r3,r3,r2
 8000458:	e0bffe17 	ldw	r2,-8(fp)
 800045c:	1886703a 	and	r3,r3,r2
 8000460:	e0bffe17 	ldw	r2,-8(fp)
 8000464:	18800d1e 	bne	r3,r2,800049c <xEventGroupSync+0x98>
        {
            /* All the rendezvous bits are now set - no need to block. */
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000468:	e0fffa17 	ldw	r3,-24(fp)
 800046c:	e0bffd17 	ldw	r2,-12(fp)
 8000470:	1884b03a 	or	r2,r3,r2
 8000474:	e0bff715 	stw	r2,-36(fp)

            /* Rendezvous always clear the bits.  They will have been cleared
             * already unless this is the only task in the rendezvous. */
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000478:	e0bff817 	ldw	r2,-32(fp)
 800047c:	10c00017 	ldw	r3,0(r2)
 8000480:	e0bffe17 	ldw	r2,-8(fp)
 8000484:	0084303a 	nor	r2,zero,r2
 8000488:	1886703a 	and	r3,r3,r2
 800048c:	e0bff817 	ldw	r2,-32(fp)
 8000490:	10c00015 	stw	r3,0(r2)

            xTicksToWait = 0;
 8000494:	e03fff15 	stw	zero,-4(fp)
 8000498:	00001106 	br	80004e0 <xEventGroupSync+0xdc>
        }
        else
        {
            if( xTicksToWait != ( TickType_t ) 0 )
 800049c:	e0bfff17 	ldw	r2,-4(fp)
 80004a0:	10000a26 	beq	r2,zero,80004cc <xEventGroupSync+0xc8>
                traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 80004a4:	e0bff817 	ldw	r2,-32(fp)
 80004a8:	10c00104 	addi	r3,r2,4
 80004ac:	e0bffe17 	ldw	r2,-8(fp)
 80004b0:	10814034 	orhi	r2,r2,1280
 80004b4:	e1bfff17 	ldw	r6,-4(fp)
 80004b8:	100b883a 	mov	r5,r2
 80004bc:	1809883a 	mov	r4,r3
 80004c0:	8004df00 	call	8004df0 <vTaskPlaceOnUnorderedEventList>

                /* This assignment is obsolete as uxReturn will get set after
                 * the task unblocks, but some compilers mistakenly generate a
                 * warning about uxReturn being returned without being set if the
                 * assignment is omitted. */
                uxReturn = 0;
 80004c4:	e03ff715 	stw	zero,-36(fp)
 80004c8:	00000506 	br	80004e0 <xEventGroupSync+0xdc>
            }
            else
            {
                /* The rendezvous bits were not set, but no block time was
                 * specified - just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 80004cc:	e0bff817 	ldw	r2,-32(fp)
 80004d0:	10800017 	ldw	r2,0(r2)
 80004d4:	e0bff715 	stw	r2,-36(fp)
                xTimeoutOccurred = pdTRUE;
 80004d8:	00800044 	movi	r2,1
 80004dc:	e0bff915 	stw	r2,-28(fp)
            }
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 80004e0:	80045740 	call	8004574 <xTaskResumeAll>
 80004e4:	e0bffb15 	stw	r2,-20(fp)

    if( xTicksToWait != ( TickType_t ) 0 )
 80004e8:	e0bfff17 	ldw	r2,-4(fp)
 80004ec:	10002026 	beq	r2,zero,8000570 <xEventGroupSync+0x16c>
    {
        if( xAlreadyYielded == pdFALSE )
 80004f0:	e0bffb17 	ldw	r2,-20(fp)
 80004f4:	1000011e 	bne	r2,zero,80004fc <xEventGroupSync+0xf8>
        {
            portYIELD_WITHIN_API();
 80004f8:	003b683a 	trap	0

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 80004fc:	8005ef80 	call	8005ef8 <uxTaskResetEventItemValue>
 8000500:	e0bff715 	stw	r2,-36(fp)

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000504:	e0bff717 	ldw	r2,-36(fp)
 8000508:	1080802c 	andhi	r2,r2,512
 800050c:	1000131e 	bne	r2,zero,800055c <xEventGroupSync+0x158>
        {
            /* The task timed out, just return the current event bit value. */
            taskENTER_CRITICAL();
 8000510:	8005e440 	call	8005e44 <vTaskEnterCritical>
            {
                uxReturn = pxEventBits->uxEventBits;
 8000514:	e0bff817 	ldw	r2,-32(fp)
 8000518:	10800017 	ldw	r2,0(r2)
 800051c:	e0bff715 	stw	r2,-36(fp)

                /* Although the task got here because it timed out before the
                 * bits it was waiting for were set, it is possible that since it
                 * unblocked another task has set the bits.  If this is the case
                 * then it needs to clear the bits before exiting. */
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000520:	e0fff717 	ldw	r3,-36(fp)
 8000524:	e0bffe17 	ldw	r2,-8(fp)
 8000528:	1886703a 	and	r3,r3,r2
 800052c:	e0bffe17 	ldw	r2,-8(fp)
 8000530:	1880071e 	bne	r3,r2,8000550 <xEventGroupSync+0x14c>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000534:	e0bff817 	ldw	r2,-32(fp)
 8000538:	10c00017 	ldw	r3,0(r2)
 800053c:	e0bffe17 	ldw	r2,-8(fp)
 8000540:	0084303a 	nor	r2,zero,r2
 8000544:	1886703a 	and	r3,r3,r2
 8000548:	e0bff817 	ldw	r2,-32(fp)
 800054c:	10c00015 	stw	r3,0(r2)
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000550:	8005e980 	call	8005e98 <vTaskExitCritical>

            xTimeoutOccurred = pdTRUE;
 8000554:	00800044 	movi	r2,1
 8000558:	e0bff915 	stw	r2,-28(fp)
            /* The task unblocked because the bits were set. */
        }

        /* Control bits might be set as the task had blocked should not be
         * returned. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800055c:	e0fff717 	ldw	r3,-36(fp)
 8000560:	00804034 	movhi	r2,256
 8000564:	10bfffc4 	addi	r2,r2,-1
 8000568:	1884703a 	and	r2,r3,r2
 800056c:	e0bff715 	stw	r2,-36(fp)
    traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8000570:	e0bff717 	ldw	r2,-36(fp)
}
 8000574:	e037883a 	mov	sp,fp
 8000578:	dfc00117 	ldw	ra,4(sp)
 800057c:	df000017 	ldw	fp,0(sp)
 8000580:	dec00204 	addi	sp,sp,8
 8000584:	f800283a 	ret

08000588 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8000588:	defff304 	addi	sp,sp,-52
 800058c:	dfc00c15 	stw	ra,48(sp)
 8000590:	df000b15 	stw	fp,44(sp)
 8000594:	df000b04 	addi	fp,sp,44
 8000598:	e13ffc15 	stw	r4,-16(fp)
 800059c:	e17ffd15 	stw	r5,-12(fp)
 80005a0:	e1bffe15 	stw	r6,-8(fp)
 80005a4:	e1ffff15 	stw	r7,-4(fp)
    EventGroup_t * pxEventBits = xEventGroup;
 80005a8:	e0bffc17 	ldw	r2,-16(fp)
 80005ac:	e0bff715 	stw	r2,-36(fp)
    EventBits_t uxReturn, uxControlBits = 0;
 80005b0:	e03ff615 	stw	zero,-40(fp)
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 80005b4:	e03ff815 	stw	zero,-32(fp)
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    }
    #endif

    vTaskSuspendAll();
 80005b8:	80045480 	call	8004548 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80005bc:	e0bff717 	ldw	r2,-36(fp)
 80005c0:	10800017 	ldw	r2,0(r2)
 80005c4:	e0bff915 	stw	r2,-28(fp)

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80005c8:	e1bfff17 	ldw	r6,-4(fp)
 80005cc:	e17ffd17 	ldw	r5,-12(fp)
 80005d0:	e13ff917 	ldw	r4,-28(fp)
 80005d4:	8000a400 	call	8000a40 <prvTestWaitCondition>
 80005d8:	e0bffa15 	stw	r2,-24(fp)

        if( xWaitConditionMet != pdFALSE )
 80005dc:	e0bffa17 	ldw	r2,-24(fp)
 80005e0:	10000d26 	beq	r2,zero,8000618 <xEventGroupWaitBits+0x90>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 80005e4:	e0bff917 	ldw	r2,-28(fp)
 80005e8:	e0bff515 	stw	r2,-44(fp)
            xTicksToWait = ( TickType_t ) 0;
 80005ec:	e0000215 	stw	zero,8(fp)

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 80005f0:	e0bffe17 	ldw	r2,-8(fp)
 80005f4:	10002226 	beq	r2,zero,8000680 <xEventGroupWaitBits+0xf8>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80005f8:	e0bff717 	ldw	r2,-36(fp)
 80005fc:	10c00017 	ldw	r3,0(r2)
 8000600:	e0bffd17 	ldw	r2,-12(fp)
 8000604:	0084303a 	nor	r2,zero,r2
 8000608:	1886703a 	and	r3,r3,r2
 800060c:	e0bff717 	ldw	r2,-36(fp)
 8000610:	10c00015 	stw	r3,0(r2)
 8000614:	00001a06 	br	8000680 <xEventGroupWaitBits+0xf8>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8000618:	e0800217 	ldw	r2,8(fp)
 800061c:	1000051e 	bne	r2,zero,8000634 <xEventGroupWaitBits+0xac>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8000620:	e0bff917 	ldw	r2,-28(fp)
 8000624:	e0bff515 	stw	r2,-44(fp)
            xTimeoutOccurred = pdTRUE;
 8000628:	00800044 	movi	r2,1
 800062c:	e0bff815 	stw	r2,-32(fp)
 8000630:	00001306 	br	8000680 <xEventGroupWaitBits+0xf8>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8000634:	e0bffe17 	ldw	r2,-8(fp)
 8000638:	10000326 	beq	r2,zero,8000648 <xEventGroupWaitBits+0xc0>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800063c:	e0bff617 	ldw	r2,-40(fp)
 8000640:	10804034 	orhi	r2,r2,256
 8000644:	e0bff615 	stw	r2,-40(fp)
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8000648:	e0bfff17 	ldw	r2,-4(fp)
 800064c:	10000326 	beq	r2,zero,800065c <xEventGroupWaitBits+0xd4>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8000650:	e0bff617 	ldw	r2,-40(fp)
 8000654:	10810034 	orhi	r2,r2,1024
 8000658:	e0bff615 	stw	r2,-40(fp)
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800065c:	e0bff717 	ldw	r2,-36(fp)
 8000660:	11000104 	addi	r4,r2,4
 8000664:	e0fffd17 	ldw	r3,-12(fp)
 8000668:	e0bff617 	ldw	r2,-40(fp)
 800066c:	1884b03a 	or	r2,r3,r2
 8000670:	e1800217 	ldw	r6,8(fp)
 8000674:	100b883a 	mov	r5,r2
 8000678:	8004df00 	call	8004df0 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 800067c:	e03ff515 	stw	zero,-44(fp)

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8000680:	80045740 	call	8004574 <xTaskResumeAll>
 8000684:	e0bffb15 	stw	r2,-20(fp)

    if( xTicksToWait != ( TickType_t ) 0 )
 8000688:	e0800217 	ldw	r2,8(fp)
 800068c:	10002226 	beq	r2,zero,8000718 <xEventGroupWaitBits+0x190>
    {
        if( xAlreadyYielded == pdFALSE )
 8000690:	e0bffb17 	ldw	r2,-20(fp)
 8000694:	1000011e 	bne	r2,zero,800069c <xEventGroupWaitBits+0x114>
        {
            portYIELD_WITHIN_API();
 8000698:	003b683a 	trap	0

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800069c:	8005ef80 	call	8005ef8 <uxTaskResetEventItemValue>
 80006a0:	e0bff515 	stw	r2,-44(fp)

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80006a4:	e0bff517 	ldw	r2,-44(fp)
 80006a8:	1080802c 	andhi	r2,r2,512
 80006ac:	1000151e 	bne	r2,zero,8000704 <xEventGroupWaitBits+0x17c>
        {
            taskENTER_CRITICAL();
 80006b0:	8005e440 	call	8005e44 <vTaskEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 80006b4:	e0bff717 	ldw	r2,-36(fp)
 80006b8:	10800017 	ldw	r2,0(r2)
 80006bc:	e0bff515 	stw	r2,-44(fp)

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80006c0:	e1bfff17 	ldw	r6,-4(fp)
 80006c4:	e17ffd17 	ldw	r5,-12(fp)
 80006c8:	e13ff517 	ldw	r4,-44(fp)
 80006cc:	8000a400 	call	8000a40 <prvTestWaitCondition>
 80006d0:	10000926 	beq	r2,zero,80006f8 <xEventGroupWaitBits+0x170>
                {
                    if( xClearOnExit != pdFALSE )
 80006d4:	e0bffe17 	ldw	r2,-8(fp)
 80006d8:	10000726 	beq	r2,zero,80006f8 <xEventGroupWaitBits+0x170>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80006dc:	e0bff717 	ldw	r2,-36(fp)
 80006e0:	10c00017 	ldw	r3,0(r2)
 80006e4:	e0bffd17 	ldw	r2,-12(fp)
 80006e8:	0084303a 	nor	r2,zero,r2
 80006ec:	1886703a 	and	r3,r3,r2
 80006f0:	e0bff717 	ldw	r2,-36(fp)
 80006f4:	10c00015 	stw	r3,0(r2)
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80006f8:	00800044 	movi	r2,1
 80006fc:	e0bff815 	stw	r2,-32(fp)
            }
            taskEXIT_CRITICAL();
 8000700:	8005e980 	call	8005e98 <vTaskExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000704:	e0fff517 	ldw	r3,-44(fp)
 8000708:	00804034 	movhi	r2,256
 800070c:	10bfffc4 	addi	r2,r2,-1
 8000710:	1884703a 	and	r2,r3,r2
 8000714:	e0bff515 	stw	r2,-44(fp)
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8000718:	e0bff517 	ldw	r2,-44(fp)
}
 800071c:	e037883a 	mov	sp,fp
 8000720:	dfc00117 	ldw	ra,4(sp)
 8000724:	df000017 	ldw	fp,0(sp)
 8000728:	dec00204 	addi	sp,sp,8
 800072c:	f800283a 	ret

08000730 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8000730:	defffa04 	addi	sp,sp,-24
 8000734:	dfc00515 	stw	ra,20(sp)
 8000738:	df000415 	stw	fp,16(sp)
 800073c:	df000404 	addi	fp,sp,16
 8000740:	e13ffe15 	stw	r4,-8(fp)
 8000744:	e17fff15 	stw	r5,-4(fp)
    EventGroup_t * pxEventBits = xEventGroup;
 8000748:	e0bffe17 	ldw	r2,-8(fp)
 800074c:	e0bffc15 	stw	r2,-16(fp)
    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    taskENTER_CRITICAL();
 8000750:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8000754:	e0bffc17 	ldw	r2,-16(fp)
 8000758:	10800017 	ldw	r2,0(r2)
 800075c:	e0bffd15 	stw	r2,-12(fp)

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000760:	e0bffc17 	ldw	r2,-16(fp)
 8000764:	10c00017 	ldw	r3,0(r2)
 8000768:	e0bfff17 	ldw	r2,-4(fp)
 800076c:	0084303a 	nor	r2,zero,r2
 8000770:	1886703a 	and	r3,r3,r2
 8000774:	e0bffc17 	ldw	r2,-16(fp)
 8000778:	10c00015 	stw	r3,0(r2)
    }
    taskEXIT_CRITICAL();
 800077c:	8005e980 	call	8005e98 <vTaskExitCritical>

    return uxReturn;
 8000780:	e0bffd17 	ldw	r2,-12(fp)
}
 8000784:	e037883a 	mov	sp,fp
 8000788:	dfc00117 	ldw	ra,4(sp)
 800078c:	df000017 	ldw	fp,0(sp)
 8000790:	dec00204 	addi	sp,sp,8
 8000794:	f800283a 	ret

08000798 <xEventGroupGetBitsFromISR>:

#endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8000798:	defffb04 	addi	sp,sp,-20
 800079c:	df000415 	stw	fp,16(sp)
 80007a0:	df000404 	addi	fp,sp,16
 80007a4:	e13fff15 	stw	r4,-4(fp)
    UBaseType_t uxSavedInterruptStatus;
    EventGroup_t const * const pxEventBits = xEventGroup;
 80007a8:	e0bfff17 	ldw	r2,-4(fp)
 80007ac:	e0bffc15 	stw	r2,-16(fp)
    EventBits_t uxReturn;

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80007b0:	e03ffd15 	stw	zero,-12(fp)
    {
        uxReturn = pxEventBits->uxEventBits;
 80007b4:	e0bffc17 	ldw	r2,-16(fp)
 80007b8:	10800017 	ldw	r2,0(r2)
 80007bc:	e0bffe15 	stw	r2,-8(fp)
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
 80007c0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80007c4:	e037883a 	mov	sp,fp
 80007c8:	df000017 	ldw	fp,0(sp)
 80007cc:	dec00104 	addi	sp,sp,4
 80007d0:	f800283a 	ret

080007d4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80007d4:	defff304 	addi	sp,sp,-52
 80007d8:	dfc00c15 	stw	ra,48(sp)
 80007dc:	df000b15 	stw	fp,44(sp)
 80007e0:	df000b04 	addi	fp,sp,44
 80007e4:	e13ffe15 	stw	r4,-8(fp)
 80007e8:	e17fff15 	stw	r5,-4(fp)
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80007ec:	e03ff615 	stw	zero,-40(fp)
    EventGroup_t * pxEventBits = xEventGroup;
 80007f0:	e0bffe17 	ldw	r2,-8(fp)
 80007f4:	e0bff815 	stw	r2,-32(fp)
    BaseType_t xMatchFound = pdFALSE;
 80007f8:	e03ff715 	stw	zero,-36(fp)
    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80007fc:	e0bff817 	ldw	r2,-32(fp)
 8000800:	10800104 	addi	r2,r2,4
 8000804:	e0bff915 	stw	r2,-28(fp)
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000808:	e0bff917 	ldw	r2,-28(fp)
 800080c:	10800204 	addi	r2,r2,8
 8000810:	e0bffa15 	stw	r2,-24(fp)
    vTaskSuspendAll();
 8000814:	80045480 	call	8004548 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8000818:	e0bff917 	ldw	r2,-28(fp)
 800081c:	10800317 	ldw	r2,12(r2)
 8000820:	e0bff515 	stw	r2,-44(fp)

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8000824:	e0bff817 	ldw	r2,-32(fp)
 8000828:	10c00017 	ldw	r3,0(r2)
 800082c:	e0bfff17 	ldw	r2,-4(fp)
 8000830:	1886b03a 	or	r3,r3,r2
 8000834:	e0bff817 	ldw	r2,-32(fp)
 8000838:	10c00015 	stw	r3,0(r2)

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800083c:	00003306 	br	800090c <xEventGroupSetBits+0x138>
        {
            pxNext = listGET_NEXT( pxListItem );
 8000840:	e0bff517 	ldw	r2,-44(fp)
 8000844:	10800117 	ldw	r2,4(r2)
 8000848:	e0bffb15 	stw	r2,-20(fp)
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800084c:	e0bff517 	ldw	r2,-44(fp)
 8000850:	10800017 	ldw	r2,0(r2)
 8000854:	e0bffc15 	stw	r2,-16(fp)
            xMatchFound = pdFALSE;
 8000858:	e03ff715 	stw	zero,-36(fp)

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800085c:	e0bffc17 	ldw	r2,-16(fp)
 8000860:	10bfc02c 	andhi	r2,r2,65280
 8000864:	e0bffd15 	stw	r2,-12(fp)
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000868:	e0fffc17 	ldw	r3,-16(fp)
 800086c:	00804034 	movhi	r2,256
 8000870:	10bfffc4 	addi	r2,r2,-1
 8000874:	1884703a 	and	r2,r3,r2
 8000878:	e0bffc15 	stw	r2,-16(fp)

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800087c:	e0bffd17 	ldw	r2,-12(fp)
 8000880:	1081002c 	andhi	r2,r2,1024
 8000884:	1000081e 	bne	r2,zero,80008a8 <xEventGroupSetBits+0xd4>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000888:	e0bff817 	ldw	r2,-32(fp)
 800088c:	10c00017 	ldw	r3,0(r2)
 8000890:	e0bffc17 	ldw	r2,-16(fp)
 8000894:	1884703a 	and	r2,r3,r2
 8000898:	10000b26 	beq	r2,zero,80008c8 <xEventGroupSetBits+0xf4>
                {
                    xMatchFound = pdTRUE;
 800089c:	00800044 	movi	r2,1
 80008a0:	e0bff715 	stw	r2,-36(fp)
 80008a4:	00000806 	br	80008c8 <xEventGroupSetBits+0xf4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80008a8:	e0bff817 	ldw	r2,-32(fp)
 80008ac:	10c00017 	ldw	r3,0(r2)
 80008b0:	e0bffc17 	ldw	r2,-16(fp)
 80008b4:	1886703a 	and	r3,r3,r2
 80008b8:	e0bffc17 	ldw	r2,-16(fp)
 80008bc:	1880021e 	bne	r3,r2,80008c8 <xEventGroupSetBits+0xf4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 80008c0:	00800044 	movi	r2,1
 80008c4:	e0bff715 	stw	r2,-36(fp)
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 80008c8:	e0bff717 	ldw	r2,-36(fp)
 80008cc:	10000d26 	beq	r2,zero,8000904 <xEventGroupSetBits+0x130>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80008d0:	e0bffd17 	ldw	r2,-12(fp)
 80008d4:	1080402c 	andhi	r2,r2,256
 80008d8:	10000426 	beq	r2,zero,80008ec <xEventGroupSetBits+0x118>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 80008dc:	e0fff617 	ldw	r3,-40(fp)
 80008e0:	e0bffc17 	ldw	r2,-16(fp)
 80008e4:	1884b03a 	or	r2,r3,r2
 80008e8:	e0bff615 	stw	r2,-40(fp)
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80008ec:	e0bff817 	ldw	r2,-32(fp)
 80008f0:	10800017 	ldw	r2,0(r2)
 80008f4:	10808034 	orhi	r2,r2,512
 80008f8:	100b883a 	mov	r5,r2
 80008fc:	e13ff517 	ldw	r4,-44(fp)
 8000900:	80051940 	call	8005194 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8000904:	e0bffb17 	ldw	r2,-20(fp)
 8000908:	e0bff515 	stw	r2,-44(fp)

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800090c:	e0fff517 	ldw	r3,-44(fp)
 8000910:	e0bffa17 	ldw	r2,-24(fp)
 8000914:	18bfca1e 	bne	r3,r2,8000840 <__alt_data_end+0xf8000840>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000918:	e0bff817 	ldw	r2,-32(fp)
 800091c:	10c00017 	ldw	r3,0(r2)
 8000920:	e0bff617 	ldw	r2,-40(fp)
 8000924:	0084303a 	nor	r2,zero,r2
 8000928:	1886703a 	and	r3,r3,r2
 800092c:	e0bff817 	ldw	r2,-32(fp)
 8000930:	10c00015 	stw	r3,0(r2)
    }
    ( void ) xTaskResumeAll();
 8000934:	80045740 	call	8004574 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8000938:	e0bff817 	ldw	r2,-32(fp)
 800093c:	10800017 	ldw	r2,0(r2)
}
 8000940:	e037883a 	mov	sp,fp
 8000944:	dfc00117 	ldw	ra,4(sp)
 8000948:	df000017 	ldw	fp,0(sp)
 800094c:	dec00204 	addi	sp,sp,8
 8000950:	f800283a 	ret

08000954 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8000954:	defffb04 	addi	sp,sp,-20
 8000958:	dfc00415 	stw	ra,16(sp)
 800095c:	df000315 	stw	fp,12(sp)
 8000960:	df000304 	addi	fp,sp,12
 8000964:	e13fff15 	stw	r4,-4(fp)
    EventGroup_t * pxEventBits = xEventGroup;
 8000968:	e0bfff17 	ldw	r2,-4(fp)
 800096c:	e0bffd15 	stw	r2,-12(fp)
    const List_t * pxTasksWaitingForBits;

    configASSERT( pxEventBits );

    pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8000970:	e0bffd17 	ldw	r2,-12(fp)
 8000974:	10800104 	addi	r2,r2,4
 8000978:	e0bffe15 	stw	r2,-8(fp)

    vTaskSuspendAll();
 800097c:	80045480 	call	8004548 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000980:	00000506 	br	8000998 <vEventGroupDelete+0x44>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000984:	e0bffe17 	ldw	r2,-8(fp)
 8000988:	10800317 	ldw	r2,12(r2)
 800098c:	01408034 	movhi	r5,512
 8000990:	1009883a 	mov	r4,r2
 8000994:	80051940 	call	8005194 <vTaskRemoveFromUnorderedEventList>

    vTaskSuspendAll();
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000998:	e0bffe17 	ldw	r2,-8(fp)
 800099c:	10800017 	ldw	r2,0(r2)
 80009a0:	103ff81e 	bne	r2,zero,8000984 <__alt_data_end+0xf8000984>
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
        }
    }
    ( void ) xTaskResumeAll();
 80009a4:	80045740 	call	8004574 <xTaskResumeAll>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The event group can only have been allocated dynamically - free
         * it again. */
        vPortFree( pxEventBits );
 80009a8:	e13ffd17 	ldw	r4,-12(fp)
 80009ac:	80011f40 	call	80011f4 <vPortFree>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80009b0:	0001883a 	nop
 80009b4:	e037883a 	mov	sp,fp
 80009b8:	dfc00117 	ldw	ra,4(sp)
 80009bc:	df000017 	ldw	fp,0(sp)
 80009c0:	dec00204 	addi	sp,sp,8
 80009c4:	f800283a 	ret

080009c8 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
void vEventGroupSetBitsCallback( void * pvEventGroup,
                                 const uint32_t ulBitsToSet )
{
 80009c8:	defffc04 	addi	sp,sp,-16
 80009cc:	dfc00315 	stw	ra,12(sp)
 80009d0:	df000215 	stw	fp,8(sp)
 80009d4:	df000204 	addi	fp,sp,8
 80009d8:	e13ffe15 	stw	r4,-8(fp)
 80009dc:	e17fff15 	stw	r5,-4(fp)
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80009e0:	e17fff17 	ldw	r5,-4(fp)
 80009e4:	e13ffe17 	ldw	r4,-8(fp)
 80009e8:	80007d40 	call	80007d4 <xEventGroupSetBits>
}
 80009ec:	0001883a 	nop
 80009f0:	e037883a 	mov	sp,fp
 80009f4:	dfc00117 	ldw	ra,4(sp)
 80009f8:	df000017 	ldw	fp,0(sp)
 80009fc:	dec00204 	addi	sp,sp,8
 8000a00:	f800283a 	ret

08000a04 <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
 8000a04:	defffc04 	addi	sp,sp,-16
 8000a08:	dfc00315 	stw	ra,12(sp)
 8000a0c:	df000215 	stw	fp,8(sp)
 8000a10:	df000204 	addi	fp,sp,8
 8000a14:	e13ffe15 	stw	r4,-8(fp)
 8000a18:	e17fff15 	stw	r5,-4(fp)
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000a1c:	e17fff17 	ldw	r5,-4(fp)
 8000a20:	e13ffe17 	ldw	r4,-8(fp)
 8000a24:	80007300 	call	8000730 <xEventGroupClearBits>
}
 8000a28:	0001883a 	nop
 8000a2c:	e037883a 	mov	sp,fp
 8000a30:	dfc00117 	ldw	ra,4(sp)
 8000a34:	df000017 	ldw	fp,0(sp)
 8000a38:	dec00204 	addi	sp,sp,8
 8000a3c:	f800283a 	ret

08000a40 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8000a40:	defffb04 	addi	sp,sp,-20
 8000a44:	df000415 	stw	fp,16(sp)
 8000a48:	df000404 	addi	fp,sp,16
 8000a4c:	e13ffd15 	stw	r4,-12(fp)
 8000a50:	e17ffe15 	stw	r5,-8(fp)
 8000a54:	e1bfff15 	stw	r6,-4(fp)
    BaseType_t xWaitConditionMet = pdFALSE;
 8000a58:	e03ffc15 	stw	zero,-16(fp)

    if( xWaitForAllBits == pdFALSE )
 8000a5c:	e0bfff17 	ldw	r2,-4(fp)
 8000a60:	1000071e 	bne	r2,zero,8000a80 <prvTestWaitCondition+0x40>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000a64:	e0fffd17 	ldw	r3,-12(fp)
 8000a68:	e0bffe17 	ldw	r2,-8(fp)
 8000a6c:	1884703a 	and	r2,r3,r2
 8000a70:	10000a26 	beq	r2,zero,8000a9c <prvTestWaitCondition+0x5c>
        {
            xWaitConditionMet = pdTRUE;
 8000a74:	00800044 	movi	r2,1
 8000a78:	e0bffc15 	stw	r2,-16(fp)
 8000a7c:	00000706 	br	8000a9c <prvTestWaitCondition+0x5c>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000a80:	e0fffd17 	ldw	r3,-12(fp)
 8000a84:	e0bffe17 	ldw	r2,-8(fp)
 8000a88:	1886703a 	and	r3,r3,r2
 8000a8c:	e0bffe17 	ldw	r2,-8(fp)
 8000a90:	1880021e 	bne	r3,r2,8000a9c <prvTestWaitCondition+0x5c>
        {
            xWaitConditionMet = pdTRUE;
 8000a94:	00800044 	movi	r2,1
 8000a98:	e0bffc15 	stw	r2,-16(fp)
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8000a9c:	e0bffc17 	ldw	r2,-16(fp)
}
 8000aa0:	e037883a 	mov	sp,fp
 8000aa4:	df000017 	ldw	fp,0(sp)
 8000aa8:	dec00104 	addi	sp,sp,4
 8000aac:	f800283a 	ret

08000ab0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ab0:	defffe04 	addi	sp,sp,-8
 8000ab4:	df000115 	stw	fp,4(sp)
 8000ab8:	df000104 	addi	fp,sp,4
 8000abc:	e13fff15 	stw	r4,-4(fp)
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ac0:	e0bfff17 	ldw	r2,-4(fp)
 8000ac4:	10c00204 	addi	r3,r2,8
 8000ac8:	e0bfff17 	ldw	r2,-4(fp)
 8000acc:	10c00115 	stw	r3,4(r2)

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ad0:	e0bfff17 	ldw	r2,-4(fp)
 8000ad4:	00ffffc4 	movi	r3,-1
 8000ad8:	10c00215 	stw	r3,8(r2)

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000adc:	e0bfff17 	ldw	r2,-4(fp)
 8000ae0:	10c00204 	addi	r3,r2,8
 8000ae4:	e0bfff17 	ldw	r2,-4(fp)
 8000ae8:	10c00315 	stw	r3,12(r2)
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aec:	e0bfff17 	ldw	r2,-4(fp)
 8000af0:	10c00204 	addi	r3,r2,8
 8000af4:	e0bfff17 	ldw	r2,-4(fp)
 8000af8:	10c00415 	stw	r3,16(r2)
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000afc:	e0bfff17 	ldw	r2,-4(fp)
 8000b00:	10000015 	stw	zero,0(r2)

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b04:	0001883a 	nop
 8000b08:	e037883a 	mov	sp,fp
 8000b0c:	df000017 	ldw	fp,0(sp)
 8000b10:	dec00104 	addi	sp,sp,4
 8000b14:	f800283a 	ret

08000b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b18:	defffe04 	addi	sp,sp,-8
 8000b1c:	df000115 	stw	fp,4(sp)
 8000b20:	df000104 	addi	fp,sp,4
 8000b24:	e13fff15 	stw	r4,-4(fp)
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000b28:	e0bfff17 	ldw	r2,-4(fp)
 8000b2c:	10000415 	stw	zero,16(r2)

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b30:	0001883a 	nop
 8000b34:	e037883a 	mov	sp,fp
 8000b38:	df000017 	ldw	fp,0(sp)
 8000b3c:	dec00104 	addi	sp,sp,4
 8000b40:	f800283a 	ret

08000b44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000b44:	defffc04 	addi	sp,sp,-16
 8000b48:	df000315 	stw	fp,12(sp)
 8000b4c:	df000304 	addi	fp,sp,12
 8000b50:	e13ffe15 	stw	r4,-8(fp)
 8000b54:	e17fff15 	stw	r5,-4(fp)
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000b58:	e0bffe17 	ldw	r2,-8(fp)
 8000b5c:	10800117 	ldw	r2,4(r2)
 8000b60:	e0bffd15 	stw	r2,-12(fp)
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000b64:	e0bfff17 	ldw	r2,-4(fp)
 8000b68:	e0fffd17 	ldw	r3,-12(fp)
 8000b6c:	10c00115 	stw	r3,4(r2)
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b70:	e0bffd17 	ldw	r2,-12(fp)
 8000b74:	10c00217 	ldw	r3,8(r2)
 8000b78:	e0bfff17 	ldw	r2,-4(fp)
 8000b7c:	10c00215 	stw	r3,8(r2)

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b80:	e0bffd17 	ldw	r2,-12(fp)
 8000b84:	10800217 	ldw	r2,8(r2)
 8000b88:	e0ffff17 	ldw	r3,-4(fp)
 8000b8c:	10c00115 	stw	r3,4(r2)
    pxIndex->pxPrevious = pxNewListItem;
 8000b90:	e0bffd17 	ldw	r2,-12(fp)
 8000b94:	e0ffff17 	ldw	r3,-4(fp)
 8000b98:	10c00215 	stw	r3,8(r2)

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000b9c:	e0bfff17 	ldw	r2,-4(fp)
 8000ba0:	e0fffe17 	ldw	r3,-8(fp)
 8000ba4:	10c00415 	stw	r3,16(r2)

    ( pxList->uxNumberOfItems )++;
 8000ba8:	e0bffe17 	ldw	r2,-8(fp)
 8000bac:	10800017 	ldw	r2,0(r2)
 8000bb0:	10c00044 	addi	r3,r2,1
 8000bb4:	e0bffe17 	ldw	r2,-8(fp)
 8000bb8:	10c00015 	stw	r3,0(r2)
}
 8000bbc:	0001883a 	nop
 8000bc0:	e037883a 	mov	sp,fp
 8000bc4:	df000017 	ldw	fp,0(sp)
 8000bc8:	dec00104 	addi	sp,sp,4
 8000bcc:	f800283a 	ret

08000bd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000bd0:	defffb04 	addi	sp,sp,-20
 8000bd4:	df000415 	stw	fp,16(sp)
 8000bd8:	df000404 	addi	fp,sp,16
 8000bdc:	e13ffe15 	stw	r4,-8(fp)
 8000be0:	e17fff15 	stw	r5,-4(fp)
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000be4:	e0bfff17 	ldw	r2,-4(fp)
 8000be8:	10800017 	ldw	r2,0(r2)
 8000bec:	e0bffd15 	stw	r2,-12(fp)
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000bf0:	e0bffd17 	ldw	r2,-12(fp)
 8000bf4:	10bfffd8 	cmpnei	r2,r2,-1
 8000bf8:	1000041e 	bne	r2,zero,8000c0c <vListInsert+0x3c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000bfc:	e0bffe17 	ldw	r2,-8(fp)
 8000c00:	10800417 	ldw	r2,16(r2)
 8000c04:	e0bffc15 	stw	r2,-16(fp)
 8000c08:	00000c06 	br	8000c3c <vListInsert+0x6c>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c0c:	e0bffe17 	ldw	r2,-8(fp)
 8000c10:	10800204 	addi	r2,r2,8
 8000c14:	e0bffc15 	stw	r2,-16(fp)
 8000c18:	00000306 	br	8000c28 <vListInsert+0x58>
 8000c1c:	e0bffc17 	ldw	r2,-16(fp)
 8000c20:	10800117 	ldw	r2,4(r2)
 8000c24:	e0bffc15 	stw	r2,-16(fp)
 8000c28:	e0bffc17 	ldw	r2,-16(fp)
 8000c2c:	10800117 	ldw	r2,4(r2)
 8000c30:	10800017 	ldw	r2,0(r2)
 8000c34:	e0fffd17 	ldw	r3,-12(fp)
 8000c38:	18bff82e 	bgeu	r3,r2,8000c1c <__alt_data_end+0xf8000c1c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000c3c:	e0bffc17 	ldw	r2,-16(fp)
 8000c40:	10c00117 	ldw	r3,4(r2)
 8000c44:	e0bfff17 	ldw	r2,-4(fp)
 8000c48:	10c00115 	stw	r3,4(r2)
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c4c:	e0bfff17 	ldw	r2,-4(fp)
 8000c50:	10800117 	ldw	r2,4(r2)
 8000c54:	e0ffff17 	ldw	r3,-4(fp)
 8000c58:	10c00215 	stw	r3,8(r2)
    pxNewListItem->pxPrevious = pxIterator;
 8000c5c:	e0bfff17 	ldw	r2,-4(fp)
 8000c60:	e0fffc17 	ldw	r3,-16(fp)
 8000c64:	10c00215 	stw	r3,8(r2)
    pxIterator->pxNext = pxNewListItem;
 8000c68:	e0bffc17 	ldw	r2,-16(fp)
 8000c6c:	e0ffff17 	ldw	r3,-4(fp)
 8000c70:	10c00115 	stw	r3,4(r2)

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000c74:	e0bfff17 	ldw	r2,-4(fp)
 8000c78:	e0fffe17 	ldw	r3,-8(fp)
 8000c7c:	10c00415 	stw	r3,16(r2)

    ( pxList->uxNumberOfItems )++;
 8000c80:	e0bffe17 	ldw	r2,-8(fp)
 8000c84:	10800017 	ldw	r2,0(r2)
 8000c88:	10c00044 	addi	r3,r2,1
 8000c8c:	e0bffe17 	ldw	r2,-8(fp)
 8000c90:	10c00015 	stw	r3,0(r2)
}
 8000c94:	0001883a 	nop
 8000c98:	e037883a 	mov	sp,fp
 8000c9c:	df000017 	ldw	fp,0(sp)
 8000ca0:	dec00104 	addi	sp,sp,4
 8000ca4:	f800283a 	ret

08000ca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ca8:	defffd04 	addi	sp,sp,-12
 8000cac:	df000215 	stw	fp,8(sp)
 8000cb0:	df000204 	addi	fp,sp,8
 8000cb4:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000cb8:	e0bfff17 	ldw	r2,-4(fp)
 8000cbc:	10800417 	ldw	r2,16(r2)
 8000cc0:	e0bffe15 	stw	r2,-8(fp)

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cc4:	e0bfff17 	ldw	r2,-4(fp)
 8000cc8:	10800117 	ldw	r2,4(r2)
 8000ccc:	e0ffff17 	ldw	r3,-4(fp)
 8000cd0:	18c00217 	ldw	r3,8(r3)
 8000cd4:	10c00215 	stw	r3,8(r2)
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000cd8:	e0bfff17 	ldw	r2,-4(fp)
 8000cdc:	10800217 	ldw	r2,8(r2)
 8000ce0:	e0ffff17 	ldw	r3,-4(fp)
 8000ce4:	18c00117 	ldw	r3,4(r3)
 8000ce8:	10c00115 	stw	r3,4(r2)

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000cec:	e0bffe17 	ldw	r2,-8(fp)
 8000cf0:	10c00117 	ldw	r3,4(r2)
 8000cf4:	e0bfff17 	ldw	r2,-4(fp)
 8000cf8:	1880041e 	bne	r3,r2,8000d0c <uxListRemove+0x64>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000cfc:	e0bfff17 	ldw	r2,-4(fp)
 8000d00:	10c00217 	ldw	r3,8(r2)
 8000d04:	e0bffe17 	ldw	r2,-8(fp)
 8000d08:	10c00115 	stw	r3,4(r2)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000d0c:	e0bfff17 	ldw	r2,-4(fp)
 8000d10:	10000415 	stw	zero,16(r2)
    ( pxList->uxNumberOfItems )--;
 8000d14:	e0bffe17 	ldw	r2,-8(fp)
 8000d18:	10800017 	ldw	r2,0(r2)
 8000d1c:	10ffffc4 	addi	r3,r2,-1
 8000d20:	e0bffe17 	ldw	r2,-8(fp)
 8000d24:	10c00015 	stw	r3,0(r2)

    return pxList->uxNumberOfItems;
 8000d28:	e0bffe17 	ldw	r2,-8(fp)
 8000d2c:	10800017 	ldw	r2,0(r2)
}
 8000d30:	e037883a 	mov	sp,fp
 8000d34:	df000017 	ldw	fp,0(sp)
 8000d38:	dec00104 	addi	sp,sp,4
 8000d3c:	f800283a 	ret

08000d40 <prvReadGp>:
void vPortSysTickHandler( void * context);

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 8000d40:	defffe04 	addi	sp,sp,-8
 8000d44:	df000115 	stw	fp,4(sp)
 8000d48:	df000104 	addi	fp,sp,4
 8000d4c:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 8000d50:	e0bfff17 	ldw	r2,-4(fp)
 8000d54:	16800015 	stw	gp,0(r2)
}
 8000d58:	0001883a 	nop
 8000d5c:	e037883a 	mov	sp,fp
 8000d60:	df000017 	ldw	fp,0(sp)
 8000d64:	dec00104 	addi	sp,sp,4
 8000d68:	f800283a 	ret

08000d6c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 8000d6c:	defff904 	addi	sp,sp,-28
 8000d70:	dfc00615 	stw	ra,24(sp)
 8000d74:	df000515 	stw	fp,20(sp)
 8000d78:	df000504 	addi	fp,sp,20
 8000d7c:	e13ffd15 	stw	r4,-12(fp)
 8000d80:	e17ffe15 	stw	r5,-8(fp)
 8000d84:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 8000d88:	e0bffd17 	ldw	r2,-12(fp)
 8000d8c:	10bfff04 	addi	r2,r2,-4
 8000d90:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 8000d94:	e0bffc04 	addi	r2,fp,-16
 8000d98:	1009883a 	mov	r4,r2
 8000d9c:	8000d400 	call	8000d40 <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 8000da0:	e0fffd17 	ldw	r3,-12(fp)
 8000da4:	00b7abb4 	movhi	r2,57006
 8000da8:	10afbbc4 	addi	r2,r2,-16657
 8000dac:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 8000db0:	e0bffd17 	ldw	r2,-12(fp)
 8000db4:	10bfff04 	addi	r2,r2,-4
 8000db8:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 8000dbc:	e0fffb17 	ldw	r3,-20(fp)
 8000dc0:	e0bffd17 	ldw	r2,-12(fp)
 8000dc4:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 8000dc8:	e0bffd17 	ldw	r2,-12(fp)
 8000dcc:	10bfff04 	addi	r2,r2,-4
 8000dd0:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 8000dd4:	e0fffc17 	ldw	r3,-16(fp)
 8000dd8:	e0bffd17 	ldw	r2,-12(fp)
 8000ddc:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 8000de0:	e0bffd17 	ldw	r2,-12(fp)
 8000de4:	10bff704 	addi	r2,r2,-36
 8000de8:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 8000dec:	e0fffe17 	ldw	r3,-8(fp)
 8000df0:	e0bffd17 	ldw	r2,-12(fp)
 8000df4:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 8000df8:	e0bffd17 	ldw	r2,-12(fp)
 8000dfc:	10bfff04 	addi	r2,r2,-4
 8000e00:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 8000e04:	e0bffd17 	ldw	r2,-12(fp)
 8000e08:	00c00044 	movi	r3,1
 8000e0c:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 8000e10:	e0bffd17 	ldw	r2,-12(fp)
 8000e14:	10bff404 	addi	r2,r2,-48
 8000e18:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 8000e1c:	e0ffff17 	ldw	r3,-4(fp)
 8000e20:	e0bffd17 	ldw	r2,-12(fp)
 8000e24:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 8000e28:	e0bffd17 	ldw	r2,-12(fp)
 8000e2c:	10bffb04 	addi	r2,r2,-20
 8000e30:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 8000e34:	e0bffd17 	ldw	r2,-12(fp)
}
 8000e38:	e037883a 	mov	sp,fp
 8000e3c:	dfc00117 	ldw	ra,4(sp)
 8000e40:	df000017 	ldw	fp,0(sp)
 8000e44:	dec00204 	addi	sp,sp,8
 8000e48:	f800283a 	ret

08000e4c <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 8000e4c:	defffe04 	addi	sp,sp,-8
 8000e50:	dfc00115 	stw	ra,4(sp)
 8000e54:	df000015 	stw	fp,0(sp)
 8000e58:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8000e5c:	8000ea40 	call	8000ea4 <prvSetupTimerInterrupt>
 8000e60:	00820034 	movhi	r2,2048
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 8000e64:	10805704 	addi	r2,r2,348
 8000e68:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 8000e6c:	0005883a 	mov	r2,zero
}
 8000e70:	e037883a 	mov	sp,fp
 8000e74:	dfc00117 	ldw	ra,4(sp)
 8000e78:	df000017 	ldw	fp,0(sp)
 8000e7c:	dec00204 	addi	sp,sp,8
 8000e80:	f800283a 	ret

08000e84 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8000e84:	deffff04 	addi	sp,sp,-4
 8000e88:	df000015 	stw	fp,0(sp)
 8000e8c:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 8000e90:	0001883a 	nop
 8000e94:	e037883a 	mov	sp,fp
 8000e98:	df000017 	ldw	fp,0(sp)
 8000e9c:	dec00104 	addi	sp,sp,4
 8000ea0:	f800283a 	ret

08000ea4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8000ea4:	defffd04 	addi	sp,sp,-12
 8000ea8:	dfc00215 	stw	ra,8(sp)
 8000eac:	df000115 	stw	fp,4(sp)
 8000eb0:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	if ( -EINVAL == _alt_ic_isr_register( SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID, SYS_CLK_IRQ, vPortSysTickHandler, 0x0, 0x0 ) )
 8000eb4:	d8000015 	stw	zero,0(sp)
 8000eb8:	000f883a 	mov	r7,zero
 8000ebc:	01820034 	movhi	r6,2048
 8000ec0:	3183d204 	addi	r6,r6,3912
 8000ec4:	000b883a 	mov	r5,zero
 8000ec8:	0009883a 	mov	r4,zero
 8000ecc:	8000f900 	call	8000f90 <_alt_ic_isr_register>
 8000ed0:	10bffa98 	cmpnei	r2,r2,-22
 8000ed4:	1000021e 	bne	r2,zero,8000ee0 <prvSetupTimerInterrupt+0x3c>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 8000ed8:	003da03a 	break	0
 8000edc:	00001006 	br	8000f20 <prvSetupTimerInterrupt+0x7c>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 8000ee0:	00c00204 	movi	r3,8
 8000ee4:	00840034 	movhi	r2,4096
 8000ee8:	10840104 	addi	r2,r2,4100
 8000eec:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 8000ef0:	00f0d414 	movui	r3,50000
 8000ef4:	00840034 	movhi	r2,4096
 8000ef8:	10840204 	addi	r2,r2,4104
 8000efc:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 8000f00:	0007883a 	mov	r3,zero
 8000f04:	00840034 	movhi	r2,4096
 8000f08:	10840304 	addi	r2,r2,4108
 8000f0c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
 8000f10:	00c001c4 	movi	r3,7
 8000f14:	00840034 	movhi	r2,4096
 8000f18:	10840104 	addi	r2,r2,4100
 8000f1c:	10c00035 	stwio	r3,0(r2)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 8000f20:	00ffff84 	movi	r3,-2
 8000f24:	00840034 	movhi	r2,4096
 8000f28:	10840004 	addi	r2,r2,4096
 8000f2c:	10c00035 	stwio	r3,0(r2)
}
 8000f30:	0001883a 	nop
 8000f34:	e037883a 	mov	sp,fp
 8000f38:	dfc00117 	ldw	ra,4(sp)
 8000f3c:	df000017 	ldw	fp,0(sp)
 8000f40:	dec00204 	addi	sp,sp,8
 8000f44:	f800283a 	ret

08000f48 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context)
{
 8000f48:	defffd04 	addi	sp,sp,-12
 8000f4c:	dfc00215 	stw	ra,8(sp)
 8000f50:	df000115 	stw	fp,4(sp)
 8000f54:	df000104 	addi	fp,sp,4
 8000f58:	e13fff15 	stw	r4,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 8000f5c:	80049600 	call	8004960 <xTaskIncrementTick>
 8000f60:	10000126 	beq	r2,zero,8000f68 <vPortSysTickHandler+0x20>
	{
        vTaskSwitchContext();
 8000f64:	8004ca80 	call	8004ca8 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 8000f68:	00ffff84 	movi	r3,-2
 8000f6c:	00840034 	movhi	r2,4096
 8000f70:	10840004 	addi	r2,r2,4096
 8000f74:	10c00035 	stwio	r3,0(r2)
}
 8000f78:	0001883a 	nop
 8000f7c:	e037883a 	mov	sp,fp
 8000f80:	dfc00117 	ldw	ra,4(sp)
 8000f84:	df000017 	ldw	fp,0(sp)
 8000f88:	dec00204 	addi	sp,sp,8
 8000f8c:	f800283a 	ret

08000f90 <_alt_ic_isr_register>:
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int _alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
  void *isr_context, void *flags)
{
 8000f90:	deffef04 	addi	sp,sp,-68
 8000f94:	df001015 	stw	fp,64(sp)
 8000f98:	df001004 	addi	fp,sp,64
 8000f9c:	e13ffc15 	stw	r4,-16(fp)
 8000fa0:	e17ffd15 	stw	r5,-12(fp)
 8000fa4:	e1bffe15 	stw	r6,-8(fp)
 8000fa8:	e1ffff15 	stw	r7,-4(fp)
	int rc = -EINVAL;  
 8000fac:	00bffa84 	movi	r2,-22
 8000fb0:	e0bff015 	stw	r2,-64(fp)
	alt_irq_context status;
	int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8000fb4:	e0bffd17 	ldw	r2,-12(fp)
 8000fb8:	e0bff115 	stw	r2,-60(fp)

	if (id < ALT_NIRQ)
 8000fbc:	e0bff117 	ldw	r2,-60(fp)
 8000fc0:	10800808 	cmpgei	r2,r2,32
 8000fc4:	10004c1e 	bne	r2,zero,80010f8 <_alt_ic_isr_register+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000fc8:	0005303a 	rdctl	r2,status
 8000fcc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000fd0:	e0fff517 	ldw	r3,-44(fp)
 8000fd4:	00bfff84 	movi	r2,-2
 8000fd8:	1884703a 	and	r2,r3,r2
 8000fdc:	1001703a 	wrctl	status,r2
  
  return context;
 8000fe0:	e0bff517 	ldw	r2,-44(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistant
		 * state.
		 */
	
		status = alt_irq_disable_all ();
 8000fe4:	e0bff315 	stw	r2,-52(fp)
	
		alt_irq[id].handler = isr;
 8000fe8:	008220b4 	movhi	r2,2178
 8000fec:	10a83b04 	addi	r2,r2,-24340
 8000ff0:	e0fff117 	ldw	r3,-60(fp)
 8000ff4:	180690fa 	slli	r3,r3,3
 8000ff8:	10c5883a 	add	r2,r2,r3
 8000ffc:	e0fffe17 	ldw	r3,-8(fp)
 8001000:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = isr_context;
 8001004:	008220b4 	movhi	r2,2178
 8001008:	10a83b04 	addi	r2,r2,-24340
 800100c:	e0fff117 	ldw	r3,-60(fp)
 8001010:	180690fa 	slli	r3,r3,3
 8001014:	10c5883a 	add	r2,r2,r3
 8001018:	10800104 	addi	r2,r2,4
 800101c:	e0ffff17 	ldw	r3,-4(fp)
 8001020:	10c00015 	stw	r3,0(r2)
	
		rc = (isr) ? alt_irq_enable(id) : alt_irq_disable(id);
 8001024:	e0bffe17 	ldw	r2,-8(fp)
 8001028:	10001926 	beq	r2,zero,8001090 <_alt_ic_isr_register+0x100>
 800102c:	e0bff117 	ldw	r2,-60(fp)
 8001030:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001034:	0005303a 	rdctl	r2,status
 8001038:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800103c:	e0fff617 	ldw	r3,-40(fp)
 8001040:	00bfff84 	movi	r2,-2
 8001044:	1884703a 	and	r2,r3,r2
 8001048:	1001703a 	wrctl	status,r2
  
  return context;
 800104c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8001050:	e0bff715 	stw	r2,-36(fp)

  alt_irq_active |= (1 << id);
 8001054:	00c00044 	movi	r3,1
 8001058:	e0bff217 	ldw	r2,-56(fp)
 800105c:	1884983a 	sll	r2,r3,r2
 8001060:	1007883a 	mov	r3,r2
 8001064:	d0a6e517 	ldw	r2,-25708(gp)
 8001068:	1884b03a 	or	r2,r3,r2
 800106c:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001070:	d0a6e517 	ldw	r2,-25708(gp)
 8001074:	100170fa 	wrctl	ienable,r2
 8001078:	e0bff717 	ldw	r2,-36(fp)
 800107c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001080:	e0bff817 	ldw	r2,-32(fp)
 8001084:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8001088:	0005883a 	mov	r2,zero
 800108c:	00001906 	br	80010f4 <_alt_ic_isr_register+0x164>
 8001090:	e0bff117 	ldw	r2,-60(fp)
 8001094:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001098:	0005303a 	rdctl	r2,status
 800109c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80010a0:	e0fff917 	ldw	r3,-28(fp)
 80010a4:	00bfff84 	movi	r2,-2
 80010a8:	1884703a 	and	r2,r3,r2
 80010ac:	1001703a 	wrctl	status,r2
  
  return context;
 80010b0:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80010b4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 80010b8:	00c00044 	movi	r3,1
 80010bc:	e0bff417 	ldw	r2,-48(fp)
 80010c0:	1884983a 	sll	r2,r3,r2
 80010c4:	0084303a 	nor	r2,zero,r2
 80010c8:	1007883a 	mov	r3,r2
 80010cc:	d0a6e517 	ldw	r2,-25708(gp)
 80010d0:	1884703a 	and	r2,r3,r2
 80010d4:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80010d8:	d0a6e517 	ldw	r2,-25708(gp)
 80010dc:	100170fa 	wrctl	ienable,r2
 80010e0:	e0bffa17 	ldw	r2,-24(fp)
 80010e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80010e8:	e0bffb17 	ldw	r2,-20(fp)
 80010ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80010f0:	0005883a 	mov	r2,zero
 80010f4:	e0bff015 	stw	r2,-64(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
 80010f8:	e0bff017 	ldw	r2,-64(fp)
}
 80010fc:	e037883a 	mov	sp,fp
 8001100:	df000017 	ldw	fp,0(sp)
 8001104:	dec00104 	addi	sp,sp,4
 8001108:	f800283a 	ret

0800110c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800110c:	defffc04 	addi	sp,sp,-16
 8001110:	dfc00315 	stw	ra,12(sp)
 8001114:	df000215 	stw	fp,8(sp)
 8001118:	df000204 	addi	fp,sp,8
 800111c:	e13fff15 	stw	r4,-4(fp)
    void * pvReturn = NULL;
 8001120:	e03ffe15 	stw	zero,-8(fp)
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001124:	e0bfff17 	ldw	r2,-4(fp)
 8001128:	108000cc 	andi	r2,r2,3
 800112c:	10000d26 	beq	r2,zero,8001164 <pvPortMalloc+0x58>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001130:	e0ffff17 	ldw	r3,-4(fp)
 8001134:	00bfff04 	movi	r2,-4
 8001138:	1884703a 	and	r2,r3,r2
 800113c:	10800104 	addi	r2,r2,4
 8001140:	e0ffff17 	ldw	r3,-4(fp)
 8001144:	1880062e 	bgeu	r3,r2,8001160 <pvPortMalloc+0x54>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001148:	e0ffff17 	ldw	r3,-4(fp)
 800114c:	00bfff04 	movi	r2,-4
 8001150:	1884703a 	and	r2,r3,r2
 8001154:	10800104 	addi	r2,r2,4
 8001158:	e0bfff15 	stw	r2,-4(fp)
 800115c:	00000106 	br	8001164 <pvPortMalloc+0x58>
            }
            else
            {
                xWantedSize = 0;
 8001160:	e03fff15 	stw	zero,-4(fp)
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001164:	80045480 	call	8004548 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001168:	d0a6ce17 	ldw	r2,-25800(gp)
 800116c:	1000051e 	bne	r2,zero,8001184 <pvPortMalloc+0x78>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001170:	008200b4 	movhi	r2,2050
 8001174:	10a7ffc4 	addi	r2,r2,-24577
 8001178:	00ffff04 	movi	r3,-4
 800117c:	10c4703a 	and	r2,r2,r3
 8001180:	d0a6ce15 	stw	r2,-25800(gp)
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001184:	e0bfff17 	ldw	r2,-4(fp)
 8001188:	10001326 	beq	r2,zero,80011d8 <pvPortMalloc+0xcc>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800118c:	d0e6cd17 	ldw	r3,-25804(gp)
 8001190:	e0bfff17 	ldw	r2,-4(fp)
 8001194:	1887883a 	add	r3,r3,r2
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001198:	00802034 	movhi	r2,128
 800119c:	10bffec4 	addi	r2,r2,-5
 80011a0:	10c00d36 	bltu	r2,r3,80011d8 <pvPortMalloc+0xcc>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80011a4:	d0e6cd17 	ldw	r3,-25804(gp)
 80011a8:	e0bfff17 	ldw	r2,-4(fp)
 80011ac:	1885883a 	add	r2,r3,r2
 80011b0:	d0e6cd17 	ldw	r3,-25804(gp)
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80011b4:	1880082e 	bgeu	r3,r2,80011d8 <pvPortMalloc+0xcc>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80011b8:	d0e6ce17 	ldw	r3,-25800(gp)
 80011bc:	d0a6cd17 	ldw	r2,-25804(gp)
 80011c0:	1885883a 	add	r2,r3,r2
 80011c4:	e0bffe15 	stw	r2,-8(fp)
            xNextFreeByte += xWantedSize;
 80011c8:	d0e6cd17 	ldw	r3,-25804(gp)
 80011cc:	e0bfff17 	ldw	r2,-4(fp)
 80011d0:	1885883a 	add	r2,r3,r2
 80011d4:	d0a6cd15 	stw	r2,-25804(gp)
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80011d8:	80045740 	call	8004574 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80011dc:	e0bffe17 	ldw	r2,-8(fp)
}
 80011e0:	e037883a 	mov	sp,fp
 80011e4:	dfc00117 	ldw	ra,4(sp)
 80011e8:	df000017 	ldw	fp,0(sp)
 80011ec:	dec00204 	addi	sp,sp,8
 80011f0:	f800283a 	ret

080011f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80011f4:	defffe04 	addi	sp,sp,-8
 80011f8:	df000115 	stw	fp,4(sp)
 80011fc:	df000104 	addi	fp,sp,4
 8001200:	e13fff15 	stw	r4,-4(fp)
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8001204:	0001883a 	nop
 8001208:	e037883a 	mov	sp,fp
 800120c:	df000017 	ldw	fp,0(sp)
 8001210:	dec00104 	addi	sp,sp,4
 8001214:	f800283a 	ret

08001218 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8001218:	deffff04 	addi	sp,sp,-4
 800121c:	df000015 	stw	fp,0(sp)
 8001220:	d839883a 	mov	fp,sp
    /* Only required when static memory is not cleared. */
    xNextFreeByte = ( size_t ) 0;
 8001224:	d026cd15 	stw	zero,-25804(gp)
}
 8001228:	0001883a 	nop
 800122c:	e037883a 	mov	sp,fp
 8001230:	df000017 	ldw	fp,0(sp)
 8001234:	dec00104 	addi	sp,sp,4
 8001238:	f800283a 	ret

0800123c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800123c:	deffff04 	addi	sp,sp,-4
 8001240:	df000015 	stw	fp,0(sp)
 8001244:	d839883a 	mov	fp,sp
    return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001248:	d0e6cd17 	ldw	r3,-25804(gp)
 800124c:	00802034 	movhi	r2,128
 8001250:	10bfff04 	addi	r2,r2,-4
 8001254:	10c5c83a 	sub	r2,r2,r3
}
 8001258:	e037883a 	mov	sp,fp
 800125c:	df000017 	ldw	fp,0(sp)
 8001260:	dec00104 	addi	sp,sp,4
 8001264:	f800283a 	ret

08001268 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001268:	defff904 	addi	sp,sp,-28
 800126c:	dfc00615 	stw	ra,24(sp)
 8001270:	df000515 	stw	fp,20(sp)
 8001274:	dc000415 	stw	r16,16(sp)
 8001278:	df000504 	addi	fp,sp,20
 800127c:	e13ffd15 	stw	r4,-12(fp)
 8001280:	e17ffe15 	stw	r5,-8(fp)
    BaseType_t xReturn = pdPASS;
 8001284:	00800044 	movi	r2,1
 8001288:	e0bffb15 	stw	r2,-20(fp)
    Queue_t * const pxQueue = xQueue;
 800128c:	e0bffd17 	ldw	r2,-12(fp)
 8001290:	e0bffc15 	stw	r2,-16(fp)

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8001294:	e0bffc17 	ldw	r2,-16(fp)
 8001298:	10004826 	beq	r2,zero,80013bc <xQueueGenericReset+0x154>
        ( pxQueue->uxLength >= 1U ) &&
 800129c:	e0bffc17 	ldw	r2,-16(fp)
 80012a0:	10800f17 	ldw	r2,60(r2)
    BaseType_t xReturn = pdPASS;
    Queue_t * const pxQueue = xQueue;

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80012a4:	10004526 	beq	r2,zero,80013bc <xQueueGenericReset+0x154>
        ( pxQueue->uxLength >= 1U ) &&
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80012a8:	e0bffc17 	ldw	r2,-16(fp)
 80012ac:	10800f17 	ldw	r2,60(r2)
 80012b0:	100b883a 	mov	r5,r2
 80012b4:	013fffc4 	movi	r4,-1
 80012b8:	80071700 	call	8007170 <__udivsi3>
 80012bc:	1007883a 	mov	r3,r2
 80012c0:	e0bffc17 	ldw	r2,-16(fp)
 80012c4:	10801017 	ldw	r2,64(r2)
    Queue_t * const pxQueue = xQueue;

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
        ( pxQueue->uxLength >= 1U ) &&
 80012c8:	18803c36 	bltu	r3,r2,80013bc <xQueueGenericReset+0x154>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    {
        taskENTER_CRITICAL();
 80012cc:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80012d0:	e0bffc17 	ldw	r2,-16(fp)
 80012d4:	14000017 	ldw	r16,0(r2)
 80012d8:	e0bffc17 	ldw	r2,-16(fp)
 80012dc:	10c00f17 	ldw	r3,60(r2)
 80012e0:	e0bffc17 	ldw	r2,-16(fp)
 80012e4:	10801017 	ldw	r2,64(r2)
 80012e8:	100b883a 	mov	r5,r2
 80012ec:	1809883a 	mov	r4,r3
 80012f0:	800722c0 	call	800722c <__mulsi3>
 80012f4:	8087883a 	add	r3,r16,r2
 80012f8:	e0bffc17 	ldw	r2,-16(fp)
 80012fc:	10c00215 	stw	r3,8(r2)
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001300:	e0bffc17 	ldw	r2,-16(fp)
 8001304:	10000e15 	stw	zero,56(r2)
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001308:	e0bffc17 	ldw	r2,-16(fp)
 800130c:	10c00017 	ldw	r3,0(r2)
 8001310:	e0bffc17 	ldw	r2,-16(fp)
 8001314:	10c00115 	stw	r3,4(r2)
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001318:	e0bffc17 	ldw	r2,-16(fp)
 800131c:	14000017 	ldw	r16,0(r2)
 8001320:	e0bffc17 	ldw	r2,-16(fp)
 8001324:	10800f17 	ldw	r2,60(r2)
 8001328:	10ffffc4 	addi	r3,r2,-1
 800132c:	e0bffc17 	ldw	r2,-16(fp)
 8001330:	10801017 	ldw	r2,64(r2)
 8001334:	100b883a 	mov	r5,r2
 8001338:	1809883a 	mov	r4,r3
 800133c:	800722c0 	call	800722c <__mulsi3>
 8001340:	8087883a 	add	r3,r16,r2
 8001344:	e0bffc17 	ldw	r2,-16(fp)
 8001348:	10c00315 	stw	r3,12(r2)
            pxQueue->cRxLock = queueUNLOCKED;
 800134c:	e0bffc17 	ldw	r2,-16(fp)
 8001350:	00ffffc4 	movi	r3,-1
 8001354:	10c01105 	stb	r3,68(r2)
            pxQueue->cTxLock = queueUNLOCKED;
 8001358:	e0bffc17 	ldw	r2,-16(fp)
 800135c:	00ffffc4 	movi	r3,-1
 8001360:	10c01145 	stb	r3,69(r2)

            if( xNewQueue == pdFALSE )
 8001364:	e0bffe17 	ldw	r2,-8(fp)
 8001368:	10000a1e 	bne	r2,zero,8001394 <xQueueGenericReset+0x12c>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800136c:	e0bffc17 	ldw	r2,-16(fp)
 8001370:	10800417 	ldw	r2,16(r2)
 8001374:	10000f26 	beq	r2,zero,80013b4 <xQueueGenericReset+0x14c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001378:	e0bffc17 	ldw	r2,-16(fp)
 800137c:	10800404 	addi	r2,r2,16
 8001380:	1009883a 	mov	r4,r2
 8001384:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 8001388:	10000a26 	beq	r2,zero,80013b4 <xQueueGenericReset+0x14c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800138c:	003b683a 	trap	0
 8001390:	00000806 	br	80013b4 <xQueueGenericReset+0x14c>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001394:	e0bffc17 	ldw	r2,-16(fp)
 8001398:	10800404 	addi	r2,r2,16
 800139c:	1009883a 	mov	r4,r2
 80013a0:	8000ab00 	call	8000ab0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013a4:	e0bffc17 	ldw	r2,-16(fp)
 80013a8:	10800904 	addi	r2,r2,36
 80013ac:	1009883a 	mov	r4,r2
 80013b0:	8000ab00 	call	8000ab0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80013b4:	8005e980 	call	8005e98 <vTaskExitCritical>
 80013b8:	00000106 	br	80013c0 <xQueueGenericReset+0x158>
    }
    else
    {
        xReturn = pdFAIL;
 80013bc:	e03ffb15 	stw	zero,-20(fp)

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80013c0:	e0bffb17 	ldw	r2,-20(fp)
}
 80013c4:	e6ffff04 	addi	sp,fp,-4
 80013c8:	dfc00217 	ldw	ra,8(sp)
 80013cc:	df000117 	ldw	fp,4(sp)
 80013d0:	dc000017 	ldw	r16,0(sp)
 80013d4:	dec00304 	addi	sp,sp,12
 80013d8:	f800283a 	ret

080013dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80013dc:	defff704 	addi	sp,sp,-36
 80013e0:	dfc00815 	stw	ra,32(sp)
 80013e4:	df000715 	stw	fp,28(sp)
 80013e8:	df000704 	addi	fp,sp,28
 80013ec:	e13ffd15 	stw	r4,-12(fp)
 80013f0:	e17ffe15 	stw	r5,-8(fp)
 80013f4:	3005883a 	mov	r2,r6
 80013f8:	e0bfff05 	stb	r2,-4(fp)
        Queue_t * pxNewQueue = NULL;
 80013fc:	e03ffa15 	stw	zero,-24(fp)
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001400:	e0bffd17 	ldw	r2,-12(fp)
 8001404:	10002426 	beq	r2,zero,8001498 <xQueueGenericCreate+0xbc>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001408:	e17ffd17 	ldw	r5,-12(fp)
 800140c:	013fffc4 	movi	r4,-1
 8001410:	80071700 	call	8007170 <__udivsi3>
 8001414:	1007883a 	mov	r3,r2
    {
        Queue_t * pxNewQueue = NULL;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001418:	e0bffe17 	ldw	r2,-8(fp)
 800141c:	18801e36 	bltu	r3,r2,8001498 <xQueueGenericCreate+0xbc>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001420:	e17ffe17 	ldw	r5,-8(fp)
 8001424:	e13ffd17 	ldw	r4,-12(fp)
 8001428:	800722c0 	call	800722c <__mulsi3>
 800142c:	1007883a 	mov	r3,r2
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001430:	00bfedc4 	movi	r2,-73
 8001434:	10c01836 	bltu	r2,r3,8001498 <xQueueGenericCreate+0xbc>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001438:	e17ffe17 	ldw	r5,-8(fp)
 800143c:	e13ffd17 	ldw	r4,-12(fp)
 8001440:	800722c0 	call	800722c <__mulsi3>
 8001444:	e0bffb15 	stw	r2,-20(fp)
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001448:	e0bffb17 	ldw	r2,-20(fp)
 800144c:	10801204 	addi	r2,r2,72
 8001450:	1009883a 	mov	r4,r2
 8001454:	800110c0 	call	800110c <pvPortMalloc>
 8001458:	e0bffa15 	stw	r2,-24(fp)

            if( pxNewQueue != NULL )
 800145c:	e0bffa17 	ldw	r2,-24(fp)
 8001460:	10000d26 	beq	r2,zero,8001498 <xQueueGenericCreate+0xbc>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001464:	e0bffa17 	ldw	r2,-24(fp)
 8001468:	e0bffc15 	stw	r2,-16(fp)
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800146c:	e0bffc17 	ldw	r2,-16(fp)
 8001470:	10801204 	addi	r2,r2,72
 8001474:	e0bffc15 	stw	r2,-16(fp)
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001478:	e0ffff03 	ldbu	r3,-4(fp)
 800147c:	e0bffa17 	ldw	r2,-24(fp)
 8001480:	d8800015 	stw	r2,0(sp)
 8001484:	180f883a 	mov	r7,r3
 8001488:	e1bffc17 	ldw	r6,-16(fp)
 800148c:	e17ffe17 	ldw	r5,-8(fp)
 8001490:	e13ffd17 	ldw	r4,-12(fp)
 8001494:	80014b00 	call	80014b0 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001498:	e0bffa17 	ldw	r2,-24(fp)
    }
 800149c:	e037883a 	mov	sp,fp
 80014a0:	dfc00117 	ldw	ra,4(sp)
 80014a4:	df000017 	ldw	fp,0(sp)
 80014a8:	dec00204 	addi	sp,sp,8
 80014ac:	f800283a 	ret

080014b0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80014b0:	defffa04 	addi	sp,sp,-24
 80014b4:	dfc00515 	stw	ra,20(sp)
 80014b8:	df000415 	stw	fp,16(sp)
 80014bc:	df000404 	addi	fp,sp,16
 80014c0:	e13ffc15 	stw	r4,-16(fp)
 80014c4:	e17ffd15 	stw	r5,-12(fp)
 80014c8:	e1bffe15 	stw	r6,-8(fp)
 80014cc:	3805883a 	mov	r2,r7
 80014d0:	e0bfff05 	stb	r2,-4(fp)
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80014d4:	e0bffd17 	ldw	r2,-12(fp)
 80014d8:	1000041e 	bne	r2,zero,80014ec <prvInitialiseNewQueue+0x3c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80014dc:	e0800217 	ldw	r2,8(fp)
 80014e0:	e0c00217 	ldw	r3,8(fp)
 80014e4:	10c00015 	stw	r3,0(r2)
 80014e8:	00000306 	br	80014f8 <prvInitialiseNewQueue+0x48>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80014ec:	e0800217 	ldw	r2,8(fp)
 80014f0:	e0fffe17 	ldw	r3,-8(fp)
 80014f4:	10c00015 	stw	r3,0(r2)
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80014f8:	e0800217 	ldw	r2,8(fp)
 80014fc:	e0fffc17 	ldw	r3,-16(fp)
 8001500:	10c00f15 	stw	r3,60(r2)
    pxNewQueue->uxItemSize = uxItemSize;
 8001504:	e0800217 	ldw	r2,8(fp)
 8001508:	e0fffd17 	ldw	r3,-12(fp)
 800150c:	10c01015 	stw	r3,64(r2)
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001510:	01400044 	movi	r5,1
 8001514:	e1000217 	ldw	r4,8(fp)
 8001518:	80012680 	call	8001268 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800151c:	0001883a 	nop
 8001520:	e037883a 	mov	sp,fp
 8001524:	dfc00117 	ldw	ra,4(sp)
 8001528:	df000017 	ldw	fp,0(sp)
 800152c:	dec00204 	addi	sp,sp,8
 8001530:	f800283a 	ret

08001534 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8001534:	defffd04 	addi	sp,sp,-12
 8001538:	dfc00215 	stw	ra,8(sp)
 800153c:	df000115 	stw	fp,4(sp)
 8001540:	df000104 	addi	fp,sp,4
 8001544:	e13fff15 	stw	r4,-4(fp)
        if( pxNewQueue != NULL )
 8001548:	e0bfff17 	ldw	r2,-4(fp)
 800154c:	10000b26 	beq	r2,zero,800157c <prvInitialiseMutex+0x48>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001550:	e0bfff17 	ldw	r2,-4(fp)
 8001554:	10000215 	stw	zero,8(r2)
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001558:	e0bfff17 	ldw	r2,-4(fp)
 800155c:	10000015 	stw	zero,0(r2)

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001560:	e0bfff17 	ldw	r2,-4(fp)
 8001564:	10000315 	stw	zero,12(r2)

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001568:	000f883a 	mov	r7,zero
 800156c:	000d883a 	mov	r6,zero
 8001570:	000b883a 	mov	r5,zero
 8001574:	e13fff17 	ldw	r4,-4(fp)
 8001578:	80016600 	call	8001660 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800157c:	0001883a 	nop
 8001580:	e037883a 	mov	sp,fp
 8001584:	dfc00117 	ldw	ra,4(sp)
 8001588:	df000017 	ldw	fp,0(sp)
 800158c:	dec00204 	addi	sp,sp,8
 8001590:	f800283a 	ret

08001594 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8001594:	defffa04 	addi	sp,sp,-24
 8001598:	dfc00515 	stw	ra,20(sp)
 800159c:	df000415 	stw	fp,16(sp)
 80015a0:	df000404 	addi	fp,sp,16
 80015a4:	2005883a 	mov	r2,r4
 80015a8:	e0bfff05 	stb	r2,-4(fp)
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80015ac:	00800044 	movi	r2,1
 80015b0:	e0bffc15 	stw	r2,-16(fp)
 80015b4:	e03ffd15 	stw	zero,-12(fp)

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80015b8:	e0bfff03 	ldbu	r2,-4(fp)
 80015bc:	100d883a 	mov	r6,r2
 80015c0:	e17ffd17 	ldw	r5,-12(fp)
 80015c4:	e13ffc17 	ldw	r4,-16(fp)
 80015c8:	80013dc0 	call	80013dc <xQueueGenericCreate>
 80015cc:	e0bffe15 	stw	r2,-8(fp)
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80015d0:	e13ffe17 	ldw	r4,-8(fp)
 80015d4:	80015340 	call	8001534 <prvInitialiseMutex>

        return xNewQueue;
 80015d8:	e0bffe17 	ldw	r2,-8(fp)
    }
 80015dc:	e037883a 	mov	sp,fp
 80015e0:	dfc00117 	ldw	ra,4(sp)
 80015e4:	df000017 	ldw	fp,0(sp)
 80015e8:	dec00204 	addi	sp,sp,8
 80015ec:	f800283a 	ret

080015f0 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80015f0:	defffb04 	addi	sp,sp,-20
 80015f4:	dfc00415 	stw	ra,16(sp)
 80015f8:	df000315 	stw	fp,12(sp)
 80015fc:	df000304 	addi	fp,sp,12
 8001600:	e13ffe15 	stw	r4,-8(fp)
 8001604:	e17fff15 	stw	r5,-4(fp)
        QueueHandle_t xHandle = NULL;
 8001608:	e03ffd15 	stw	zero,-12(fp)

        if( ( uxMaxCount != 0 ) &&
 800160c:	e0bffe17 	ldw	r2,-8(fp)
 8001610:	10000d26 	beq	r2,zero,8001648 <xQueueCreateCountingSemaphore+0x58>
 8001614:	e0bfff17 	ldw	r2,-4(fp)
 8001618:	e0fffe17 	ldw	r3,-8(fp)
 800161c:	18800a36 	bltu	r3,r2,8001648 <xQueueCreateCountingSemaphore+0x58>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001620:	01800084 	movi	r6,2
 8001624:	000b883a 	mov	r5,zero
 8001628:	e13ffe17 	ldw	r4,-8(fp)
 800162c:	80013dc0 	call	80013dc <xQueueGenericCreate>
 8001630:	e0bffd15 	stw	r2,-12(fp)

            if( xHandle != NULL )
 8001634:	e0bffd17 	ldw	r2,-12(fp)
 8001638:	10000326 	beq	r2,zero,8001648 <xQueueCreateCountingSemaphore+0x58>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800163c:	e0bffd17 	ldw	r2,-12(fp)
 8001640:	e0ffff17 	ldw	r3,-4(fp)
 8001644:	10c00e15 	stw	r3,56(r2)
        {
            configASSERT( xHandle );
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8001648:	e0bffd17 	ldw	r2,-12(fp)
    }
 800164c:	e037883a 	mov	sp,fp
 8001650:	dfc00117 	ldw	ra,4(sp)
 8001654:	df000017 	ldw	fp,0(sp)
 8001658:	dec00204 	addi	sp,sp,8
 800165c:	f800283a 	ret

08001660 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001660:	defff504 	addi	sp,sp,-44
 8001664:	dfc00a15 	stw	ra,40(sp)
 8001668:	df000915 	stw	fp,36(sp)
 800166c:	df000904 	addi	fp,sp,36
 8001670:	e13ffc15 	stw	r4,-16(fp)
 8001674:	e17ffd15 	stw	r5,-12(fp)
 8001678:	e1bffe15 	stw	r6,-8(fp)
 800167c:	e1ffff15 	stw	r7,-4(fp)
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001680:	e03ff715 	stw	zero,-36(fp)
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001684:	e0bffc17 	ldw	r2,-16(fp)
 8001688:	e0bff815 	stw	r2,-32(fp)
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800168c:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001690:	e0bff817 	ldw	r2,-32(fp)
 8001694:	10c00e17 	ldw	r3,56(r2)
 8001698:	e0bff817 	ldw	r2,-32(fp)
 800169c:	10800f17 	ldw	r2,60(r2)
 80016a0:	18800336 	bltu	r3,r2,80016b0 <xQueueGenericSend+0x50>
 80016a4:	e0bfff17 	ldw	r2,-4(fp)
 80016a8:	10800098 	cmpnei	r2,r2,2
 80016ac:	1000151e 	bne	r2,zero,8001704 <xQueueGenericSend+0xa4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016b0:	e1bfff17 	ldw	r6,-4(fp)
 80016b4:	e17ffd17 	ldw	r5,-12(fp)
 80016b8:	e13ff817 	ldw	r4,-32(fp)
 80016bc:	80022400 	call	8002240 <prvCopyDataToQueue>
 80016c0:	e0bff915 	stw	r2,-28(fp)

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016c4:	e0bff817 	ldw	r2,-32(fp)
 80016c8:	10800917 	ldw	r2,36(r2)
 80016cc:	10000726 	beq	r2,zero,80016ec <xQueueGenericSend+0x8c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016d0:	e0bff817 	ldw	r2,-32(fp)
 80016d4:	10800904 	addi	r2,r2,36
 80016d8:	1009883a 	mov	r4,r2
 80016dc:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 80016e0:	10000526 	beq	r2,zero,80016f8 <xQueueGenericSend+0x98>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80016e4:	003b683a 	trap	0
 80016e8:	00000306 	br	80016f8 <xQueueGenericSend+0x98>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80016ec:	e0bff917 	ldw	r2,-28(fp)
 80016f0:	10000126 	beq	r2,zero,80016f8 <xQueueGenericSend+0x98>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80016f4:	003b683a 	trap	0
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80016f8:	8005e980 	call	8005e98 <vTaskExitCritical>
                return pdPASS;
 80016fc:	00800044 	movi	r2,1
 8001700:	00003f06 	br	8001800 <xQueueGenericSend+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001704:	e0bffe17 	ldw	r2,-8(fp)
 8001708:	1000031e 	bne	r2,zero,8001718 <xQueueGenericSend+0xb8>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800170c:	8005e980 	call	8005e98 <vTaskExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001710:	0005883a 	mov	r2,zero
 8001714:	00003a06 	br	8001800 <xQueueGenericSend+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001718:	e0bff717 	ldw	r2,-36(fp)
 800171c:	1000051e 	bne	r2,zero,8001734 <xQueueGenericSend+0xd4>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001720:	e0bffa04 	addi	r2,fp,-24
 8001724:	1009883a 	mov	r4,r2
 8001728:	800543c0 	call	800543c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800172c:	00800044 	movi	r2,1
 8001730:	e0bff715 	stw	r2,-36(fp)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001734:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001738:	80045480 	call	8004548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800173c:	8005e440 	call	8005e44 <vTaskEnterCritical>
 8001740:	e0bff817 	ldw	r2,-32(fp)
 8001744:	10801103 	ldbu	r2,68(r2)
 8001748:	10803fcc 	andi	r2,r2,255
 800174c:	1080201c 	xori	r2,r2,128
 8001750:	10bfe004 	addi	r2,r2,-128
 8001754:	10bfffd8 	cmpnei	r2,r2,-1
 8001758:	1000021e 	bne	r2,zero,8001764 <xQueueGenericSend+0x104>
 800175c:	e0bff817 	ldw	r2,-32(fp)
 8001760:	10001105 	stb	zero,68(r2)
 8001764:	e0bff817 	ldw	r2,-32(fp)
 8001768:	10801143 	ldbu	r2,69(r2)
 800176c:	10803fcc 	andi	r2,r2,255
 8001770:	1080201c 	xori	r2,r2,128
 8001774:	10bfe004 	addi	r2,r2,-128
 8001778:	10bfffd8 	cmpnei	r2,r2,-1
 800177c:	1000021e 	bne	r2,zero,8001788 <xQueueGenericSend+0x128>
 8001780:	e0bff817 	ldw	r2,-32(fp)
 8001784:	10001145 	stb	zero,69(r2)
 8001788:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800178c:	e0fffe04 	addi	r3,fp,-8
 8001790:	e0bffa04 	addi	r2,fp,-24
 8001794:	180b883a 	mov	r5,r3
 8001798:	1009883a 	mov	r4,r2
 800179c:	80054780 	call	8005478 <xTaskCheckForTimeOut>
 80017a0:	1000131e 	bne	r2,zero,80017f0 <xQueueGenericSend+0x190>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80017a4:	e13ff817 	ldw	r4,-32(fp)
 80017a8:	80025f40 	call	80025f4 <prvIsQueueFull>
 80017ac:	10000c26 	beq	r2,zero,80017e0 <xQueueGenericSend+0x180>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80017b0:	e0bff817 	ldw	r2,-32(fp)
 80017b4:	10800404 	addi	r2,r2,16
 80017b8:	e0fffe17 	ldw	r3,-8(fp)
 80017bc:	180b883a 	mov	r5,r3
 80017c0:	1009883a 	mov	r4,r2
 80017c4:	8004da00 	call	8004da0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80017c8:	e13ff817 	ldw	r4,-32(fp)
 80017cc:	80024680 	call	8002468 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80017d0:	80045740 	call	8004574 <xTaskResumeAll>
 80017d4:	103fad1e 	bne	r2,zero,800168c <__alt_data_end+0xf800168c>
                {
                    portYIELD_WITHIN_API();
 80017d8:	003b683a 	trap	0
 80017dc:	003fab06 	br	800168c <__alt_data_end+0xf800168c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80017e0:	e13ff817 	ldw	r4,-32(fp)
 80017e4:	80024680 	call	8002468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017e8:	80045740 	call	8004574 <xTaskResumeAll>
 80017ec:	003fa706 	br	800168c <__alt_data_end+0xf800168c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80017f0:	e13ff817 	ldw	r4,-32(fp)
 80017f4:	80024680 	call	8002468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017f8:	80045740 	call	8004574 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80017fc:	0005883a 	mov	r2,zero
        }
    } /*lint -restore */
}
 8001800:	e037883a 	mov	sp,fp
 8001804:	dfc00117 	ldw	ra,4(sp)
 8001808:	df000017 	ldw	fp,0(sp)
 800180c:	dec00204 	addi	sp,sp,8
 8001810:	f800283a 	ret

08001814 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001814:	defff404 	addi	sp,sp,-48
 8001818:	dfc00b15 	stw	ra,44(sp)
 800181c:	df000a15 	stw	fp,40(sp)
 8001820:	df000a04 	addi	fp,sp,40
 8001824:	e13ffc15 	stw	r4,-16(fp)
 8001828:	e17ffd15 	stw	r5,-12(fp)
 800182c:	e1bffe15 	stw	r6,-8(fp)
 8001830:	e1ffff15 	stw	r7,-4(fp)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001834:	e0bffc17 	ldw	r2,-16(fp)
 8001838:	e0bff715 	stw	r2,-36(fp)
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800183c:	e03ff815 	stw	zero,-32(fp)
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001840:	e0bff717 	ldw	r2,-36(fp)
 8001844:	10c00e17 	ldw	r3,56(r2)
 8001848:	e0bff717 	ldw	r2,-36(fp)
 800184c:	10800f17 	ldw	r2,60(r2)
 8001850:	18800336 	bltu	r3,r2,8001860 <xQueueGenericSendFromISR+0x4c>
 8001854:	e0bfff17 	ldw	r2,-4(fp)
 8001858:	10800098 	cmpnei	r2,r2,2
 800185c:	1000281e 	bne	r2,zero,8001900 <xQueueGenericSendFromISR+0xec>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001860:	e0bff717 	ldw	r2,-36(fp)
 8001864:	10801143 	ldbu	r2,69(r2)
 8001868:	e0bff905 	stb	r2,-28(fp)
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800186c:	e0bff717 	ldw	r2,-36(fp)
 8001870:	10800e17 	ldw	r2,56(r2)
 8001874:	e0bffa15 	stw	r2,-24(fp)
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001878:	e1bfff17 	ldw	r6,-4(fp)
 800187c:	e17ffd17 	ldw	r5,-12(fp)
 8001880:	e13ff717 	ldw	r4,-36(fp)
 8001884:	80022400 	call	8002240 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001888:	e0bff907 	ldb	r2,-28(fp)
 800188c:	10bfffd8 	cmpnei	r2,r2,-1
 8001890:	10000e1e 	bne	r2,zero,80018cc <xQueueGenericSendFromISR+0xb8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001894:	e0bff717 	ldw	r2,-36(fp)
 8001898:	10800917 	ldw	r2,36(r2)
 800189c:	10001526 	beq	r2,zero,80018f4 <xQueueGenericSendFromISR+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018a0:	e0bff717 	ldw	r2,-36(fp)
 80018a4:	10800904 	addi	r2,r2,36
 80018a8:	1009883a 	mov	r4,r2
 80018ac:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 80018b0:	10001026 	beq	r2,zero,80018f4 <xQueueGenericSendFromISR+0xe0>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80018b4:	e0bffe17 	ldw	r2,-8(fp)
 80018b8:	10000e26 	beq	r2,zero,80018f4 <xQueueGenericSendFromISR+0xe0>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80018bc:	e0bffe17 	ldw	r2,-8(fp)
 80018c0:	00c00044 	movi	r3,1
 80018c4:	10c00015 	stw	r3,0(r2)
 80018c8:	00000a06 	br	80018f4 <xQueueGenericSendFromISR+0xe0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80018cc:	80048b00 	call	80048b0 <uxTaskGetNumberOfTasks>
 80018d0:	e0bffb15 	stw	r2,-20(fp)
 80018d4:	e0fff907 	ldb	r3,-28(fp)
 80018d8:	e0bffb17 	ldw	r2,-20(fp)
 80018dc:	1880052e 	bgeu	r3,r2,80018f4 <xQueueGenericSendFromISR+0xe0>
 80018e0:	e0bff903 	ldbu	r2,-28(fp)
 80018e4:	10800044 	addi	r2,r2,1
 80018e8:	1007883a 	mov	r3,r2
 80018ec:	e0bff717 	ldw	r2,-36(fp)
 80018f0:	10c01145 	stb	r3,69(r2)
            }

            xReturn = pdPASS;
 80018f4:	00800044 	movi	r2,1
 80018f8:	e0bff615 	stw	r2,-40(fp)
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
        {
 80018fc:	00000106 	br	8001904 <xQueueGenericSendFromISR+0xf0>
            xReturn = pdPASS;
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001900:	e03ff615 	stw	zero,-40(fp)
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001904:	e0bff617 	ldw	r2,-40(fp)
}
 8001908:	e037883a 	mov	sp,fp
 800190c:	dfc00117 	ldw	ra,4(sp)
 8001910:	df000017 	ldw	fp,0(sp)
 8001914:	dec00204 	addi	sp,sp,8
 8001918:	f800283a 	ret

0800191c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800191c:	defff604 	addi	sp,sp,-40
 8001920:	dfc00915 	stw	ra,36(sp)
 8001924:	df000815 	stw	fp,32(sp)
 8001928:	df000804 	addi	fp,sp,32
 800192c:	e13ffe15 	stw	r4,-8(fp)
 8001930:	e17fff15 	stw	r5,-4(fp)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001934:	e0bffe17 	ldw	r2,-8(fp)
 8001938:	e0bff915 	stw	r2,-28(fp)
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800193c:	e03ffa15 	stw	zero,-24(fp)
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001940:	e0bff917 	ldw	r2,-28(fp)
 8001944:	10800e17 	ldw	r2,56(r2)
 8001948:	e0bffb15 	stw	r2,-20(fp)

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800194c:	e0bff917 	ldw	r2,-28(fp)
 8001950:	10800f17 	ldw	r2,60(r2)
 8001954:	e0fffb17 	ldw	r3,-20(fp)
 8001958:	1880252e 	bgeu	r3,r2,80019f0 <xQueueGiveFromISR+0xd4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800195c:	e0bff917 	ldw	r2,-28(fp)
 8001960:	10801143 	ldbu	r2,69(r2)
 8001964:	e0bffc05 	stb	r2,-16(fp)
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001968:	e0bffb17 	ldw	r2,-20(fp)
 800196c:	10c00044 	addi	r3,r2,1
 8001970:	e0bff917 	ldw	r2,-28(fp)
 8001974:	10c00e15 	stw	r3,56(r2)

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001978:	e0bffc07 	ldb	r2,-16(fp)
 800197c:	10bfffd8 	cmpnei	r2,r2,-1
 8001980:	10000e1e 	bne	r2,zero,80019bc <xQueueGiveFromISR+0xa0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001984:	e0bff917 	ldw	r2,-28(fp)
 8001988:	10800917 	ldw	r2,36(r2)
 800198c:	10001526 	beq	r2,zero,80019e4 <xQueueGiveFromISR+0xc8>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001990:	e0bff917 	ldw	r2,-28(fp)
 8001994:	10800904 	addi	r2,r2,36
 8001998:	1009883a 	mov	r4,r2
 800199c:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 80019a0:	10001026 	beq	r2,zero,80019e4 <xQueueGiveFromISR+0xc8>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80019a4:	e0bfff17 	ldw	r2,-4(fp)
 80019a8:	10000e26 	beq	r2,zero,80019e4 <xQueueGiveFromISR+0xc8>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80019ac:	e0bfff17 	ldw	r2,-4(fp)
 80019b0:	00c00044 	movi	r3,1
 80019b4:	10c00015 	stw	r3,0(r2)
 80019b8:	00000a06 	br	80019e4 <xQueueGiveFromISR+0xc8>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80019bc:	80048b00 	call	80048b0 <uxTaskGetNumberOfTasks>
 80019c0:	e0bffd15 	stw	r2,-12(fp)
 80019c4:	e0fffc07 	ldb	r3,-16(fp)
 80019c8:	e0bffd17 	ldw	r2,-12(fp)
 80019cc:	1880052e 	bgeu	r3,r2,80019e4 <xQueueGiveFromISR+0xc8>
 80019d0:	e0bffc03 	ldbu	r2,-16(fp)
 80019d4:	10800044 	addi	r2,r2,1
 80019d8:	1007883a 	mov	r3,r2
 80019dc:	e0bff917 	ldw	r2,-28(fp)
 80019e0:	10c01145 	stb	r3,69(r2)
            }

            xReturn = pdPASS;
 80019e4:	00800044 	movi	r2,1
 80019e8:	e0bff815 	stw	r2,-32(fp)
 80019ec:	00000106 	br	80019f4 <xQueueGiveFromISR+0xd8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80019f0:	e03ff815 	stw	zero,-32(fp)
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80019f4:	e0bff817 	ldw	r2,-32(fp)
}
 80019f8:	e037883a 	mov	sp,fp
 80019fc:	dfc00117 	ldw	ra,4(sp)
 8001a00:	df000017 	ldw	fp,0(sp)
 8001a04:	dec00204 	addi	sp,sp,8
 8001a08:	f800283a 	ret

08001a0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001a0c:	defff604 	addi	sp,sp,-40
 8001a10:	dfc00915 	stw	ra,36(sp)
 8001a14:	df000815 	stw	fp,32(sp)
 8001a18:	df000804 	addi	fp,sp,32
 8001a1c:	e13ffd15 	stw	r4,-12(fp)
 8001a20:	e17ffe15 	stw	r5,-8(fp)
 8001a24:	e1bfff15 	stw	r6,-4(fp)
    BaseType_t xEntryTimeSet = pdFALSE;
 8001a28:	e03ff815 	stw	zero,-32(fp)
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001a2c:	e0bffd17 	ldw	r2,-12(fp)
 8001a30:	e0bff915 	stw	r2,-28(fp)
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001a34:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a38:	e0bff917 	ldw	r2,-28(fp)
 8001a3c:	10800e17 	ldw	r2,56(r2)
 8001a40:	e0bffa15 	stw	r2,-24(fp)

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a44:	e0bffa17 	ldw	r2,-24(fp)
 8001a48:	10001326 	beq	r2,zero,8001a98 <xQueueReceive+0x8c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a4c:	e17ffe17 	ldw	r5,-8(fp)
 8001a50:	e13ff917 	ldw	r4,-28(fp)
 8001a54:	80023cc0 	call	80023cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001a58:	e0bffa17 	ldw	r2,-24(fp)
 8001a5c:	10ffffc4 	addi	r3,r2,-1
 8001a60:	e0bff917 	ldw	r2,-28(fp)
 8001a64:	10c00e15 	stw	r3,56(r2)

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a68:	e0bff917 	ldw	r2,-28(fp)
 8001a6c:	10800417 	ldw	r2,16(r2)
 8001a70:	10000626 	beq	r2,zero,8001a8c <xQueueReceive+0x80>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a74:	e0bff917 	ldw	r2,-28(fp)
 8001a78:	10800404 	addi	r2,r2,16
 8001a7c:	1009883a 	mov	r4,r2
 8001a80:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 8001a84:	10000126 	beq	r2,zero,8001a8c <xQueueReceive+0x80>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001a88:	003b683a 	trap	0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001a8c:	8005e980 	call	8005e98 <vTaskExitCritical>
                return pdPASS;
 8001a90:	00800044 	movi	r2,1
 8001a94:	00004206 	br	8001ba0 <xQueueReceive+0x194>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001a98:	e0bfff17 	ldw	r2,-4(fp)
 8001a9c:	1000031e 	bne	r2,zero,8001aac <xQueueReceive+0xa0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001aa0:	8005e980 	call	8005e98 <vTaskExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001aa4:	0005883a 	mov	r2,zero
 8001aa8:	00003d06 	br	8001ba0 <xQueueReceive+0x194>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001aac:	e0bff817 	ldw	r2,-32(fp)
 8001ab0:	1000051e 	bne	r2,zero,8001ac8 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ab4:	e0bffb04 	addi	r2,fp,-20
 8001ab8:	1009883a 	mov	r4,r2
 8001abc:	800543c0 	call	800543c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ac0:	00800044 	movi	r2,1
 8001ac4:	e0bff815 	stw	r2,-32(fp)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001ac8:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001acc:	80045480 	call	8004548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001ad0:	8005e440 	call	8005e44 <vTaskEnterCritical>
 8001ad4:	e0bff917 	ldw	r2,-28(fp)
 8001ad8:	10801103 	ldbu	r2,68(r2)
 8001adc:	10803fcc 	andi	r2,r2,255
 8001ae0:	1080201c 	xori	r2,r2,128
 8001ae4:	10bfe004 	addi	r2,r2,-128
 8001ae8:	10bfffd8 	cmpnei	r2,r2,-1
 8001aec:	1000021e 	bne	r2,zero,8001af8 <xQueueReceive+0xec>
 8001af0:	e0bff917 	ldw	r2,-28(fp)
 8001af4:	10001105 	stb	zero,68(r2)
 8001af8:	e0bff917 	ldw	r2,-28(fp)
 8001afc:	10801143 	ldbu	r2,69(r2)
 8001b00:	10803fcc 	andi	r2,r2,255
 8001b04:	1080201c 	xori	r2,r2,128
 8001b08:	10bfe004 	addi	r2,r2,-128
 8001b0c:	10bfffd8 	cmpnei	r2,r2,-1
 8001b10:	1000021e 	bne	r2,zero,8001b1c <xQueueReceive+0x110>
 8001b14:	e0bff917 	ldw	r2,-28(fp)
 8001b18:	10001145 	stb	zero,69(r2)
 8001b1c:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b20:	e0ffff04 	addi	r3,fp,-4
 8001b24:	e0bffb04 	addi	r2,fp,-20
 8001b28:	180b883a 	mov	r5,r3
 8001b2c:	1009883a 	mov	r4,r2
 8001b30:	80054780 	call	8005478 <xTaskCheckForTimeOut>
 8001b34:	1000131e 	bne	r2,zero,8001b84 <xQueueReceive+0x178>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b38:	e13ff917 	ldw	r4,-28(fp)
 8001b3c:	800255c0 	call	800255c <prvIsQueueEmpty>
 8001b40:	10000c26 	beq	r2,zero,8001b74 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b44:	e0bff917 	ldw	r2,-28(fp)
 8001b48:	10800904 	addi	r2,r2,36
 8001b4c:	e0ffff17 	ldw	r3,-4(fp)
 8001b50:	180b883a 	mov	r5,r3
 8001b54:	1009883a 	mov	r4,r2
 8001b58:	8004da00 	call	8004da0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001b5c:	e13ff917 	ldw	r4,-28(fp)
 8001b60:	80024680 	call	8002468 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001b64:	80045740 	call	8004574 <xTaskResumeAll>
 8001b68:	103fb21e 	bne	r2,zero,8001a34 <__alt_data_end+0xf8001a34>
                {
                    portYIELD_WITHIN_API();
 8001b6c:	003b683a 	trap	0
 8001b70:	003fb006 	br	8001a34 <__alt_data_end+0xf8001a34>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001b74:	e13ff917 	ldw	r4,-28(fp)
 8001b78:	80024680 	call	8002468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001b7c:	80045740 	call	8004574 <xTaskResumeAll>
 8001b80:	003fac06 	br	8001a34 <__alt_data_end+0xf8001a34>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001b84:	e13ff917 	ldw	r4,-28(fp)
 8001b88:	80024680 	call	8002468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001b8c:	80045740 	call	8004574 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b90:	e13ff917 	ldw	r4,-28(fp)
 8001b94:	800255c0 	call	800255c <prvIsQueueEmpty>
 8001b98:	103fa626 	beq	r2,zero,8001a34 <__alt_data_end+0xf8001a34>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001b9c:	0005883a 	mov	r2,zero
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001ba0:	e037883a 	mov	sp,fp
 8001ba4:	dfc00117 	ldw	ra,4(sp)
 8001ba8:	df000017 	ldw	fp,0(sp)
 8001bac:	dec00204 	addi	sp,sp,8
 8001bb0:	f800283a 	ret

08001bb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001bb4:	defff504 	addi	sp,sp,-44
 8001bb8:	dfc00a15 	stw	ra,40(sp)
 8001bbc:	df000915 	stw	fp,36(sp)
 8001bc0:	df000904 	addi	fp,sp,36
 8001bc4:	e13ffe15 	stw	r4,-8(fp)
 8001bc8:	e17fff15 	stw	r5,-4(fp)
    BaseType_t xEntryTimeSet = pdFALSE;
 8001bcc:	e03ff715 	stw	zero,-36(fp)
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001bd0:	e0bffe17 	ldw	r2,-8(fp)
 8001bd4:	e0bff915 	stw	r2,-28(fp)

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001bd8:	e03ff815 	stw	zero,-32(fp)
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001bdc:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001be0:	e0bff917 	ldw	r2,-28(fp)
 8001be4:	10800e17 	ldw	r2,56(r2)
 8001be8:	e0bffa15 	stw	r2,-24(fp)

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001bec:	e0bffa17 	ldw	r2,-24(fp)
 8001bf0:	10001726 	beq	r2,zero,8001c50 <xQueueSemaphoreTake+0x9c>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001bf4:	e0bffa17 	ldw	r2,-24(fp)
 8001bf8:	10ffffc4 	addi	r3,r2,-1
 8001bfc:	e0bff917 	ldw	r2,-28(fp)
 8001c00:	10c00e15 	stw	r3,56(r2)

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c04:	e0bff917 	ldw	r2,-28(fp)
 8001c08:	10800017 	ldw	r2,0(r2)
 8001c0c:	1000041e 	bne	r2,zero,8001c20 <xQueueSemaphoreTake+0x6c>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001c10:	8005f3c0 	call	8005f3c <pvTaskIncrementMutexHeldCount>
 8001c14:	1007883a 	mov	r3,r2
 8001c18:	e0bff917 	ldw	r2,-28(fp)
 8001c1c:	10c00215 	stw	r3,8(r2)
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c20:	e0bff917 	ldw	r2,-28(fp)
 8001c24:	10800417 	ldw	r2,16(r2)
 8001c28:	10000626 	beq	r2,zero,8001c44 <xQueueSemaphoreTake+0x90>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c2c:	e0bff917 	ldw	r2,-28(fp)
 8001c30:	10800404 	addi	r2,r2,16
 8001c34:	1009883a 	mov	r4,r2
 8001c38:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 8001c3c:	10000126 	beq	r2,zero,8001c44 <xQueueSemaphoreTake+0x90>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001c40:	003b683a 	trap	0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001c44:	8005e980 	call	8005e98 <vTaskExitCritical>
                return pdPASS;
 8001c48:	00800044 	movi	r2,1
 8001c4c:	00005806 	br	8001db0 <xQueueSemaphoreTake+0x1fc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001c50:	e0bfff17 	ldw	r2,-4(fp)
 8001c54:	1000031e 	bne	r2,zero,8001c64 <xQueueSemaphoreTake+0xb0>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001c58:	8005e980 	call	8005e98 <vTaskExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001c5c:	0005883a 	mov	r2,zero
 8001c60:	00005306 	br	8001db0 <xQueueSemaphoreTake+0x1fc>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001c64:	e0bff717 	ldw	r2,-36(fp)
 8001c68:	1000051e 	bne	r2,zero,8001c80 <xQueueSemaphoreTake+0xcc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001c6c:	e0bffc04 	addi	r2,fp,-16
 8001c70:	1009883a 	mov	r4,r2
 8001c74:	800543c0 	call	800543c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001c78:	00800044 	movi	r2,1
 8001c7c:	e0bff715 	stw	r2,-36(fp)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001c80:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001c84:	80045480 	call	8004548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001c88:	8005e440 	call	8005e44 <vTaskEnterCritical>
 8001c8c:	e0bff917 	ldw	r2,-28(fp)
 8001c90:	10801103 	ldbu	r2,68(r2)
 8001c94:	10803fcc 	andi	r2,r2,255
 8001c98:	1080201c 	xori	r2,r2,128
 8001c9c:	10bfe004 	addi	r2,r2,-128
 8001ca0:	10bfffd8 	cmpnei	r2,r2,-1
 8001ca4:	1000021e 	bne	r2,zero,8001cb0 <xQueueSemaphoreTake+0xfc>
 8001ca8:	e0bff917 	ldw	r2,-28(fp)
 8001cac:	10001105 	stb	zero,68(r2)
 8001cb0:	e0bff917 	ldw	r2,-28(fp)
 8001cb4:	10801143 	ldbu	r2,69(r2)
 8001cb8:	10803fcc 	andi	r2,r2,255
 8001cbc:	1080201c 	xori	r2,r2,128
 8001cc0:	10bfe004 	addi	r2,r2,-128
 8001cc4:	10bfffd8 	cmpnei	r2,r2,-1
 8001cc8:	1000021e 	bne	r2,zero,8001cd4 <xQueueSemaphoreTake+0x120>
 8001ccc:	e0bff917 	ldw	r2,-28(fp)
 8001cd0:	10001145 	stb	zero,69(r2)
 8001cd4:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cd8:	e0ffff04 	addi	r3,fp,-4
 8001cdc:	e0bffc04 	addi	r2,fp,-16
 8001ce0:	180b883a 	mov	r5,r3
 8001ce4:	1009883a 	mov	r4,r2
 8001ce8:	80054780 	call	8005478 <xTaskCheckForTimeOut>
 8001cec:	10001d1e 	bne	r2,zero,8001d64 <xQueueSemaphoreTake+0x1b0>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cf0:	e13ff917 	ldw	r4,-28(fp)
 8001cf4:	800255c0 	call	800255c <prvIsQueueEmpty>
 8001cf8:	10001626 	beq	r2,zero,8001d54 <xQueueSemaphoreTake+0x1a0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001cfc:	e0bff917 	ldw	r2,-28(fp)
 8001d00:	10800017 	ldw	r2,0(r2)
 8001d04:	1000071e 	bne	r2,zero,8001d24 <xQueueSemaphoreTake+0x170>
                    {
                        taskENTER_CRITICAL();
 8001d08:	8005e440 	call	8005e44 <vTaskEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001d0c:	e0bff917 	ldw	r2,-28(fp)
 8001d10:	10800217 	ldw	r2,8(r2)
 8001d14:	1009883a 	mov	r4,r2
 8001d18:	800585c0 	call	800585c <xTaskPriorityInherit>
 8001d1c:	e0bff815 	stw	r2,-32(fp)
                        }
                        taskEXIT_CRITICAL();
 8001d20:	8005e980 	call	8005e98 <vTaskExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d24:	e0bff917 	ldw	r2,-28(fp)
 8001d28:	10800904 	addi	r2,r2,36
 8001d2c:	e0ffff17 	ldw	r3,-4(fp)
 8001d30:	180b883a 	mov	r5,r3
 8001d34:	1009883a 	mov	r4,r2
 8001d38:	8004da00 	call	8004da0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001d3c:	e13ff917 	ldw	r4,-28(fp)
 8001d40:	80024680 	call	8002468 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001d44:	80045740 	call	8004574 <xTaskResumeAll>
 8001d48:	103fa41e 	bne	r2,zero,8001bdc <__alt_data_end+0xf8001bdc>
                {
                    portYIELD_WITHIN_API();
 8001d4c:	003b683a 	trap	0
 8001d50:	003fa206 	br	8001bdc <__alt_data_end+0xf8001bdc>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001d54:	e13ff917 	ldw	r4,-28(fp)
 8001d58:	80024680 	call	8002468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001d5c:	80045740 	call	8004574 <xTaskResumeAll>
 8001d60:	003f9e06 	br	8001bdc <__alt_data_end+0xf8001bdc>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001d64:	e13ff917 	ldw	r4,-28(fp)
 8001d68:	80024680 	call	8002468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001d6c:	80045740 	call	8004574 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d70:	e13ff917 	ldw	r4,-28(fp)
 8001d74:	800255c0 	call	800255c <prvIsQueueEmpty>
 8001d78:	103f9826 	beq	r2,zero,8001bdc <__alt_data_end+0xf8001bdc>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8001d7c:	e0bff817 	ldw	r2,-32(fp)
 8001d80:	10000a26 	beq	r2,zero,8001dac <xQueueSemaphoreTake+0x1f8>
                    {
                        taskENTER_CRITICAL();
 8001d84:	8005e440 	call	8005e44 <vTaskEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001d88:	e13ff917 	ldw	r4,-28(fp)
 8001d8c:	80021f00 	call	80021f0 <prvGetDisinheritPriorityAfterTimeout>
 8001d90:	e0bffb15 	stw	r2,-20(fp)
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001d94:	e0bff917 	ldw	r2,-28(fp)
 8001d98:	10800217 	ldw	r2,8(r2)
 8001d9c:	e17ffb17 	ldw	r5,-20(fp)
 8001da0:	1009883a 	mov	r4,r2
 8001da4:	8005c340 	call	8005c34 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8001da8:	8005e980 	call	8005e98 <vTaskExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001dac:	0005883a 	mov	r2,zero
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001db0:	e037883a 	mov	sp,fp
 8001db4:	dfc00117 	ldw	ra,4(sp)
 8001db8:	df000017 	ldw	fp,0(sp)
 8001dbc:	dec00204 	addi	sp,sp,8
 8001dc0:	f800283a 	ret

08001dc4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8001dc4:	defff504 	addi	sp,sp,-44
 8001dc8:	dfc00a15 	stw	ra,40(sp)
 8001dcc:	df000915 	stw	fp,36(sp)
 8001dd0:	df000904 	addi	fp,sp,36
 8001dd4:	e13ffd15 	stw	r4,-12(fp)
 8001dd8:	e17ffe15 	stw	r5,-8(fp)
 8001ddc:	e1bfff15 	stw	r6,-4(fp)
    BaseType_t xEntryTimeSet = pdFALSE;
 8001de0:	e03ff715 	stw	zero,-36(fp)
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8001de4:	e0bffd17 	ldw	r2,-12(fp)
 8001de8:	e0bff815 	stw	r2,-32(fp)
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001dec:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001df0:	e0bff817 	ldw	r2,-32(fp)
 8001df4:	10800e17 	ldw	r2,56(r2)
 8001df8:	e0bff915 	stw	r2,-28(fp)

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dfc:	e0bff917 	ldw	r2,-28(fp)
 8001e00:	10001526 	beq	r2,zero,8001e58 <xQueuePeek+0x94>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001e04:	e0bff817 	ldw	r2,-32(fp)
 8001e08:	10800317 	ldw	r2,12(r2)
 8001e0c:	e0bffa15 	stw	r2,-24(fp)

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e10:	e17ffe17 	ldw	r5,-8(fp)
 8001e14:	e13ff817 	ldw	r4,-32(fp)
 8001e18:	80023cc0 	call	80023cc <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001e1c:	e0bff817 	ldw	r2,-32(fp)
 8001e20:	e0fffa17 	ldw	r3,-24(fp)
 8001e24:	10c00315 	stw	r3,12(r2)

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e28:	e0bff817 	ldw	r2,-32(fp)
 8001e2c:	10800917 	ldw	r2,36(r2)
 8001e30:	10000626 	beq	r2,zero,8001e4c <xQueuePeek+0x88>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e34:	e0bff817 	ldw	r2,-32(fp)
 8001e38:	10800904 	addi	r2,r2,36
 8001e3c:	1009883a 	mov	r4,r2
 8001e40:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 8001e44:	10000126 	beq	r2,zero,8001e4c <xQueuePeek+0x88>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001e48:	003b683a 	trap	0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001e4c:	8005e980 	call	8005e98 <vTaskExitCritical>
                return pdPASS;
 8001e50:	00800044 	movi	r2,1
 8001e54:	00004206 	br	8001f60 <xQueuePeek+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e58:	e0bfff17 	ldw	r2,-4(fp)
 8001e5c:	1000031e 	bne	r2,zero,8001e6c <xQueuePeek+0xa8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e60:	8005e980 	call	8005e98 <vTaskExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001e64:	0005883a 	mov	r2,zero
 8001e68:	00003d06 	br	8001f60 <xQueuePeek+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e6c:	e0bff717 	ldw	r2,-36(fp)
 8001e70:	1000051e 	bne	r2,zero,8001e88 <xQueuePeek+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e74:	e0bffb04 	addi	r2,fp,-20
 8001e78:	1009883a 	mov	r4,r2
 8001e7c:	800543c0 	call	800543c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e80:	00800044 	movi	r2,1
 8001e84:	e0bff715 	stw	r2,-36(fp)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e88:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8001e8c:	80045480 	call	8004548 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e90:	8005e440 	call	8005e44 <vTaskEnterCritical>
 8001e94:	e0bff817 	ldw	r2,-32(fp)
 8001e98:	10801103 	ldbu	r2,68(r2)
 8001e9c:	10803fcc 	andi	r2,r2,255
 8001ea0:	1080201c 	xori	r2,r2,128
 8001ea4:	10bfe004 	addi	r2,r2,-128
 8001ea8:	10bfffd8 	cmpnei	r2,r2,-1
 8001eac:	1000021e 	bne	r2,zero,8001eb8 <xQueuePeek+0xf4>
 8001eb0:	e0bff817 	ldw	r2,-32(fp)
 8001eb4:	10001105 	stb	zero,68(r2)
 8001eb8:	e0bff817 	ldw	r2,-32(fp)
 8001ebc:	10801143 	ldbu	r2,69(r2)
 8001ec0:	10803fcc 	andi	r2,r2,255
 8001ec4:	1080201c 	xori	r2,r2,128
 8001ec8:	10bfe004 	addi	r2,r2,-128
 8001ecc:	10bfffd8 	cmpnei	r2,r2,-1
 8001ed0:	1000021e 	bne	r2,zero,8001edc <xQueuePeek+0x118>
 8001ed4:	e0bff817 	ldw	r2,-32(fp)
 8001ed8:	10001145 	stb	zero,69(r2)
 8001edc:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ee0:	e0ffff04 	addi	r3,fp,-4
 8001ee4:	e0bffb04 	addi	r2,fp,-20
 8001ee8:	180b883a 	mov	r5,r3
 8001eec:	1009883a 	mov	r4,r2
 8001ef0:	80054780 	call	8005478 <xTaskCheckForTimeOut>
 8001ef4:	1000131e 	bne	r2,zero,8001f44 <xQueuePeek+0x180>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ef8:	e13ff817 	ldw	r4,-32(fp)
 8001efc:	800255c0 	call	800255c <prvIsQueueEmpty>
 8001f00:	10000c26 	beq	r2,zero,8001f34 <xQueuePeek+0x170>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f04:	e0bff817 	ldw	r2,-32(fp)
 8001f08:	10800904 	addi	r2,r2,36
 8001f0c:	e0ffff17 	ldw	r3,-4(fp)
 8001f10:	180b883a 	mov	r5,r3
 8001f14:	1009883a 	mov	r4,r2
 8001f18:	8004da00 	call	8004da0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f1c:	e13ff817 	ldw	r4,-32(fp)
 8001f20:	80024680 	call	8002468 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f24:	80045740 	call	8004574 <xTaskResumeAll>
 8001f28:	103fb01e 	bne	r2,zero,8001dec <__alt_data_end+0xf8001dec>
                {
                    portYIELD_WITHIN_API();
 8001f2c:	003b683a 	trap	0
 8001f30:	003fae06 	br	8001dec <__alt_data_end+0xf8001dec>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8001f34:	e13ff817 	ldw	r4,-32(fp)
 8001f38:	80024680 	call	8002468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f3c:	80045740 	call	8004574 <xTaskResumeAll>
 8001f40:	003faa06 	br	8001dec <__alt_data_end+0xf8001dec>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8001f44:	e13ff817 	ldw	r4,-32(fp)
 8001f48:	80024680 	call	8002468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f4c:	80045740 	call	8004574 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f50:	e13ff817 	ldw	r4,-32(fp)
 8001f54:	800255c0 	call	800255c <prvIsQueueEmpty>
 8001f58:	103fa426 	beq	r2,zero,8001dec <__alt_data_end+0xf8001dec>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001f5c:	0005883a 	mov	r2,zero
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001f60:	e037883a 	mov	sp,fp
 8001f64:	dfc00117 	ldw	ra,4(sp)
 8001f68:	df000017 	ldw	fp,0(sp)
 8001f6c:	dec00204 	addi	sp,sp,8
 8001f70:	f800283a 	ret

08001f74 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001f74:	defff504 	addi	sp,sp,-44
 8001f78:	dfc00a15 	stw	ra,40(sp)
 8001f7c:	df000915 	stw	fp,36(sp)
 8001f80:	df000904 	addi	fp,sp,36
 8001f84:	e13ffd15 	stw	r4,-12(fp)
 8001f88:	e17ffe15 	stw	r5,-8(fp)
 8001f8c:	e1bfff15 	stw	r6,-4(fp)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001f90:	e0bffd17 	ldw	r2,-12(fp)
 8001f94:	e0bff815 	stw	r2,-32(fp)
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f98:	e03ff915 	stw	zero,-28(fp)
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f9c:	e0bff817 	ldw	r2,-32(fp)
 8001fa0:	10800e17 	ldw	r2,56(r2)
 8001fa4:	e0bffa15 	stw	r2,-24(fp)

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fa8:	e0bffa17 	ldw	r2,-24(fp)
 8001fac:	10002826 	beq	r2,zero,8002050 <xQueueReceiveFromISR+0xdc>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8001fb0:	e0bff817 	ldw	r2,-32(fp)
 8001fb4:	10801103 	ldbu	r2,68(r2)
 8001fb8:	e0bffb05 	stb	r2,-20(fp)

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fbc:	e17ffe17 	ldw	r5,-8(fp)
 8001fc0:	e13ff817 	ldw	r4,-32(fp)
 8001fc4:	80023cc0 	call	80023cc <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fc8:	e0bffa17 	ldw	r2,-24(fp)
 8001fcc:	10ffffc4 	addi	r3,r2,-1
 8001fd0:	e0bff817 	ldw	r2,-32(fp)
 8001fd4:	10c00e15 	stw	r3,56(r2)

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8001fd8:	e0bffb07 	ldb	r2,-20(fp)
 8001fdc:	10bfffd8 	cmpnei	r2,r2,-1
 8001fe0:	10000e1e 	bne	r2,zero,800201c <xQueueReceiveFromISR+0xa8>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fe4:	e0bff817 	ldw	r2,-32(fp)
 8001fe8:	10800417 	ldw	r2,16(r2)
 8001fec:	10001526 	beq	r2,zero,8002044 <xQueueReceiveFromISR+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ff0:	e0bff817 	ldw	r2,-32(fp)
 8001ff4:	10800404 	addi	r2,r2,16
 8001ff8:	1009883a 	mov	r4,r2
 8001ffc:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 8002000:	10001026 	beq	r2,zero,8002044 <xQueueReceiveFromISR+0xd0>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8002004:	e0bfff17 	ldw	r2,-4(fp)
 8002008:	10000e26 	beq	r2,zero,8002044 <xQueueReceiveFromISR+0xd0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800200c:	e0bfff17 	ldw	r2,-4(fp)
 8002010:	00c00044 	movi	r3,1
 8002014:	10c00015 	stw	r3,0(r2)
 8002018:	00000a06 	br	8002044 <xQueueReceiveFromISR+0xd0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800201c:	80048b00 	call	80048b0 <uxTaskGetNumberOfTasks>
 8002020:	e0bffc15 	stw	r2,-16(fp)
 8002024:	e0fffb07 	ldb	r3,-20(fp)
 8002028:	e0bffc17 	ldw	r2,-16(fp)
 800202c:	1880052e 	bgeu	r3,r2,8002044 <xQueueReceiveFromISR+0xd0>
 8002030:	e0bffb03 	ldbu	r2,-20(fp)
 8002034:	10800044 	addi	r2,r2,1
 8002038:	1007883a 	mov	r3,r2
 800203c:	e0bff817 	ldw	r2,-32(fp)
 8002040:	10c01105 	stb	r3,68(r2)
            }

            xReturn = pdPASS;
 8002044:	00800044 	movi	r2,1
 8002048:	e0bff715 	stw	r2,-36(fp)
 800204c:	00000106 	br	8002054 <xQueueReceiveFromISR+0xe0>
        }
        else
        {
            xReturn = pdFAIL;
 8002050:	e03ff715 	stw	zero,-36(fp)
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002054:	e0bff717 	ldw	r2,-36(fp)
}
 8002058:	e037883a 	mov	sp,fp
 800205c:	dfc00117 	ldw	ra,4(sp)
 8002060:	df000017 	ldw	fp,0(sp)
 8002064:	dec00204 	addi	sp,sp,8
 8002068:	f800283a 	ret

0800206c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 800206c:	defff804 	addi	sp,sp,-32
 8002070:	dfc00715 	stw	ra,28(sp)
 8002074:	df000615 	stw	fp,24(sp)
 8002078:	df000604 	addi	fp,sp,24
 800207c:	e13ffe15 	stw	r4,-8(fp)
 8002080:	e17fff15 	stw	r5,-4(fp)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8002084:	e0bffe17 	ldw	r2,-8(fp)
 8002088:	e0bffb15 	stw	r2,-20(fp)
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800208c:	e03ffc15 	stw	zero,-16(fp)
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002090:	e0bffb17 	ldw	r2,-20(fp)
 8002094:	10800e17 	ldw	r2,56(r2)
 8002098:	10000c26 	beq	r2,zero,80020cc <xQueuePeekFromISR+0x60>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800209c:	e0bffb17 	ldw	r2,-20(fp)
 80020a0:	10800317 	ldw	r2,12(r2)
 80020a4:	e0bffd15 	stw	r2,-12(fp)
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020a8:	e17fff17 	ldw	r5,-4(fp)
 80020ac:	e13ffb17 	ldw	r4,-20(fp)
 80020b0:	80023cc0 	call	80023cc <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80020b4:	e0bffb17 	ldw	r2,-20(fp)
 80020b8:	e0fffd17 	ldw	r3,-12(fp)
 80020bc:	10c00315 	stw	r3,12(r2)

            xReturn = pdPASS;
 80020c0:	00800044 	movi	r2,1
 80020c4:	e0bffa15 	stw	r2,-24(fp)
 80020c8:	00000106 	br	80020d0 <xQueuePeekFromISR+0x64>
        }
        else
        {
            xReturn = pdFAIL;
 80020cc:	e03ffa15 	stw	zero,-24(fp)
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80020d0:	e0bffa17 	ldw	r2,-24(fp)
}
 80020d4:	e037883a 	mov	sp,fp
 80020d8:	dfc00117 	ldw	ra,4(sp)
 80020dc:	df000017 	ldw	fp,0(sp)
 80020e0:	dec00204 	addi	sp,sp,8
 80020e4:	f800283a 	ret

080020e8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80020e8:	defffc04 	addi	sp,sp,-16
 80020ec:	dfc00315 	stw	ra,12(sp)
 80020f0:	df000215 	stw	fp,8(sp)
 80020f4:	df000204 	addi	fp,sp,8
 80020f8:	e13fff15 	stw	r4,-4(fp)
    UBaseType_t uxReturn;

    configASSERT( xQueue );

    taskENTER_CRITICAL();
 80020fc:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002100:	e0bfff17 	ldw	r2,-4(fp)
 8002104:	10800e17 	ldw	r2,56(r2)
 8002108:	e0bffe15 	stw	r2,-8(fp)
    }
    taskEXIT_CRITICAL();
 800210c:	8005e980 	call	8005e98 <vTaskExitCritical>

    return uxReturn;
 8002110:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002114:	e037883a 	mov	sp,fp
 8002118:	dfc00117 	ldw	ra,4(sp)
 800211c:	df000017 	ldw	fp,0(sp)
 8002120:	dec00204 	addi	sp,sp,8
 8002124:	f800283a 	ret

08002128 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8002128:	defffb04 	addi	sp,sp,-20
 800212c:	dfc00415 	stw	ra,16(sp)
 8002130:	df000315 	stw	fp,12(sp)
 8002134:	df000304 	addi	fp,sp,12
 8002138:	e13fff15 	stw	r4,-4(fp)
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800213c:	e0bfff17 	ldw	r2,-4(fp)
 8002140:	e0bffd15 	stw	r2,-12(fp)

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
 8002144:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8002148:	e0bffd17 	ldw	r2,-12(fp)
 800214c:	10c00f17 	ldw	r3,60(r2)
 8002150:	e0bffd17 	ldw	r2,-12(fp)
 8002154:	10800e17 	ldw	r2,56(r2)
 8002158:	1885c83a 	sub	r2,r3,r2
 800215c:	e0bffe15 	stw	r2,-8(fp)
    }
    taskEXIT_CRITICAL();
 8002160:	8005e980 	call	8005e98 <vTaskExitCritical>

    return uxReturn;
 8002164:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002168:	e037883a 	mov	sp,fp
 800216c:	dfc00117 	ldw	ra,4(sp)
 8002170:	df000017 	ldw	fp,0(sp)
 8002174:	dec00204 	addi	sp,sp,8
 8002178:	f800283a 	ret

0800217c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800217c:	defffc04 	addi	sp,sp,-16
 8002180:	df000315 	stw	fp,12(sp)
 8002184:	df000304 	addi	fp,sp,12
 8002188:	e13fff15 	stw	r4,-4(fp)
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800218c:	e0bfff17 	ldw	r2,-4(fp)
 8002190:	e0bffd15 	stw	r2,-12(fp)

    configASSERT( pxQueue );
    uxReturn = pxQueue->uxMessagesWaiting;
 8002194:	e0bffd17 	ldw	r2,-12(fp)
 8002198:	10800e17 	ldw	r2,56(r2)
 800219c:	e0bffe15 	stw	r2,-8(fp)

    return uxReturn;
 80021a0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80021a4:	e037883a 	mov	sp,fp
 80021a8:	df000017 	ldw	fp,0(sp)
 80021ac:	dec00104 	addi	sp,sp,4
 80021b0:	f800283a 	ret

080021b4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80021b4:	defffc04 	addi	sp,sp,-16
 80021b8:	dfc00315 	stw	ra,12(sp)
 80021bc:	df000215 	stw	fp,8(sp)
 80021c0:	df000204 	addi	fp,sp,8
 80021c4:	e13fff15 	stw	r4,-4(fp)
    Queue_t * const pxQueue = xQueue;
 80021c8:	e0bfff17 	ldw	r2,-4(fp)
 80021cc:	e0bffe15 	stw	r2,-8(fp)

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 80021d0:	e13ffe17 	ldw	r4,-8(fp)
 80021d4:	80011f40 	call	80011f4 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80021d8:	0001883a 	nop
 80021dc:	e037883a 	mov	sp,fp
 80021e0:	dfc00117 	ldw	ra,4(sp)
 80021e4:	df000017 	ldw	fp,0(sp)
 80021e8:	dec00204 	addi	sp,sp,8
 80021ec:	f800283a 	ret

080021f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80021f0:	defffd04 	addi	sp,sp,-12
 80021f4:	df000215 	stw	fp,8(sp)
 80021f8:	df000204 	addi	fp,sp,8
 80021fc:	e13fff15 	stw	r4,-4(fp)
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002200:	e0bfff17 	ldw	r2,-4(fp)
 8002204:	10800917 	ldw	r2,36(r2)
 8002208:	10000726 	beq	r2,zero,8002228 <prvGetDisinheritPriorityAfterTimeout+0x38>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800220c:	e0bfff17 	ldw	r2,-4(fp)
 8002210:	10800c17 	ldw	r2,48(r2)
 8002214:	10800017 	ldw	r2,0(r2)
 8002218:	00c00144 	movi	r3,5
 800221c:	1885c83a 	sub	r2,r3,r2
 8002220:	e0bffe15 	stw	r2,-8(fp)
 8002224:	00000106 	br	800222c <prvGetDisinheritPriorityAfterTimeout+0x3c>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002228:	e03ffe15 	stw	zero,-8(fp)
        }

        return uxHighestPriorityOfWaitingTasks;
 800222c:	e0bffe17 	ldw	r2,-8(fp)
    }
 8002230:	e037883a 	mov	sp,fp
 8002234:	df000017 	ldw	fp,0(sp)
 8002238:	dec00104 	addi	sp,sp,4
 800223c:	f800283a 	ret

08002240 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002240:	defff904 	addi	sp,sp,-28
 8002244:	dfc00615 	stw	ra,24(sp)
 8002248:	df000515 	stw	fp,20(sp)
 800224c:	df000504 	addi	fp,sp,20
 8002250:	e13ffd15 	stw	r4,-12(fp)
 8002254:	e17ffe15 	stw	r5,-8(fp)
 8002258:	e1bfff15 	stw	r6,-4(fp)
    BaseType_t xReturn = pdFALSE;
 800225c:	e03ffb15 	stw	zero,-20(fp)
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002260:	e0bffd17 	ldw	r2,-12(fp)
 8002264:	10800e17 	ldw	r2,56(r2)
 8002268:	e0bffc15 	stw	r2,-16(fp)

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800226c:	e0bffd17 	ldw	r2,-12(fp)
 8002270:	10801017 	ldw	r2,64(r2)
 8002274:	10000b1e 	bne	r2,zero,80022a4 <prvCopyDataToQueue+0x64>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002278:	e0bffd17 	ldw	r2,-12(fp)
 800227c:	10800017 	ldw	r2,0(r2)
 8002280:	1000481e 	bne	r2,zero,80023a4 <prvCopyDataToQueue+0x164>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002284:	e0bffd17 	ldw	r2,-12(fp)
 8002288:	10800217 	ldw	r2,8(r2)
 800228c:	1009883a 	mov	r4,r2
 8002290:	8005a700 	call	8005a70 <xTaskPriorityDisinherit>
 8002294:	e0bffb15 	stw	r2,-20(fp)
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002298:	e0bffd17 	ldw	r2,-12(fp)
 800229c:	10000215 	stw	zero,8(r2)
 80022a0:	00004006 	br	80023a4 <prvCopyDataToQueue+0x164>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80022a4:	e0bfff17 	ldw	r2,-4(fp)
 80022a8:	1000191e 	bne	r2,zero,8002310 <prvCopyDataToQueue+0xd0>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022ac:	e0bffd17 	ldw	r2,-12(fp)
 80022b0:	10c00117 	ldw	r3,4(r2)
 80022b4:	e0bffd17 	ldw	r2,-12(fp)
 80022b8:	10801017 	ldw	r2,64(r2)
 80022bc:	100d883a 	mov	r6,r2
 80022c0:	e17ffe17 	ldw	r5,-8(fp)
 80022c4:	1809883a 	mov	r4,r3
 80022c8:	80072540 	call	8007254 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022cc:	e0bffd17 	ldw	r2,-12(fp)
 80022d0:	10c00117 	ldw	r3,4(r2)
 80022d4:	e0bffd17 	ldw	r2,-12(fp)
 80022d8:	10801017 	ldw	r2,64(r2)
 80022dc:	1887883a 	add	r3,r3,r2
 80022e0:	e0bffd17 	ldw	r2,-12(fp)
 80022e4:	10c00115 	stw	r3,4(r2)

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022e8:	e0bffd17 	ldw	r2,-12(fp)
 80022ec:	10c00117 	ldw	r3,4(r2)
 80022f0:	e0bffd17 	ldw	r2,-12(fp)
 80022f4:	10800217 	ldw	r2,8(r2)
 80022f8:	18802a36 	bltu	r3,r2,80023a4 <prvCopyDataToQueue+0x164>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022fc:	e0bffd17 	ldw	r2,-12(fp)
 8002300:	10c00017 	ldw	r3,0(r2)
 8002304:	e0bffd17 	ldw	r2,-12(fp)
 8002308:	10c00115 	stw	r3,4(r2)
 800230c:	00002506 	br	80023a4 <prvCopyDataToQueue+0x164>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002310:	e0bffd17 	ldw	r2,-12(fp)
 8002314:	10c00317 	ldw	r3,12(r2)
 8002318:	e0bffd17 	ldw	r2,-12(fp)
 800231c:	10801017 	ldw	r2,64(r2)
 8002320:	100d883a 	mov	r6,r2
 8002324:	e17ffe17 	ldw	r5,-8(fp)
 8002328:	1809883a 	mov	r4,r3
 800232c:	80072540 	call	8007254 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002330:	e0bffd17 	ldw	r2,-12(fp)
 8002334:	10c00317 	ldw	r3,12(r2)
 8002338:	e0bffd17 	ldw	r2,-12(fp)
 800233c:	10801017 	ldw	r2,64(r2)
 8002340:	0085c83a 	sub	r2,zero,r2
 8002344:	1887883a 	add	r3,r3,r2
 8002348:	e0bffd17 	ldw	r2,-12(fp)
 800234c:	10c00315 	stw	r3,12(r2)

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002350:	e0bffd17 	ldw	r2,-12(fp)
 8002354:	10c00317 	ldw	r3,12(r2)
 8002358:	e0bffd17 	ldw	r2,-12(fp)
 800235c:	10800017 	ldw	r2,0(r2)
 8002360:	1880082e 	bgeu	r3,r2,8002384 <prvCopyDataToQueue+0x144>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002364:	e0bffd17 	ldw	r2,-12(fp)
 8002368:	10c00217 	ldw	r3,8(r2)
 800236c:	e0bffd17 	ldw	r2,-12(fp)
 8002370:	10801017 	ldw	r2,64(r2)
 8002374:	0085c83a 	sub	r2,zero,r2
 8002378:	1887883a 	add	r3,r3,r2
 800237c:	e0bffd17 	ldw	r2,-12(fp)
 8002380:	10c00315 	stw	r3,12(r2)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002384:	e0bfff17 	ldw	r2,-4(fp)
 8002388:	10800098 	cmpnei	r2,r2,2
 800238c:	1000051e 	bne	r2,zero,80023a4 <prvCopyDataToQueue+0x164>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002390:	e0bffc17 	ldw	r2,-16(fp)
 8002394:	10000326 	beq	r2,zero,80023a4 <prvCopyDataToQueue+0x164>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002398:	e0bffc17 	ldw	r2,-16(fp)
 800239c:	10bfffc4 	addi	r2,r2,-1
 80023a0:	e0bffc15 	stw	r2,-16(fp)
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023a4:	e0bffc17 	ldw	r2,-16(fp)
 80023a8:	10c00044 	addi	r3,r2,1
 80023ac:	e0bffd17 	ldw	r2,-12(fp)
 80023b0:	10c00e15 	stw	r3,56(r2)

    return xReturn;
 80023b4:	e0bffb17 	ldw	r2,-20(fp)
}
 80023b8:	e037883a 	mov	sp,fp
 80023bc:	dfc00117 	ldw	ra,4(sp)
 80023c0:	df000017 	ldw	fp,0(sp)
 80023c4:	dec00204 	addi	sp,sp,8
 80023c8:	f800283a 	ret

080023cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80023cc:	defffc04 	addi	sp,sp,-16
 80023d0:	dfc00315 	stw	ra,12(sp)
 80023d4:	df000215 	stw	fp,8(sp)
 80023d8:	df000204 	addi	fp,sp,8
 80023dc:	e13ffe15 	stw	r4,-8(fp)
 80023e0:	e17fff15 	stw	r5,-4(fp)
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023e4:	e0bffe17 	ldw	r2,-8(fp)
 80023e8:	10801017 	ldw	r2,64(r2)
 80023ec:	10001826 	beq	r2,zero,8002450 <prvCopyDataFromQueue+0x84>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023f0:	e0bffe17 	ldw	r2,-8(fp)
 80023f4:	10c00317 	ldw	r3,12(r2)
 80023f8:	e0bffe17 	ldw	r2,-8(fp)
 80023fc:	10801017 	ldw	r2,64(r2)
 8002400:	1887883a 	add	r3,r3,r2
 8002404:	e0bffe17 	ldw	r2,-8(fp)
 8002408:	10c00315 	stw	r3,12(r2)

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800240c:	e0bffe17 	ldw	r2,-8(fp)
 8002410:	10c00317 	ldw	r3,12(r2)
 8002414:	e0bffe17 	ldw	r2,-8(fp)
 8002418:	10800217 	ldw	r2,8(r2)
 800241c:	18800436 	bltu	r3,r2,8002430 <prvCopyDataFromQueue+0x64>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002420:	e0bffe17 	ldw	r2,-8(fp)
 8002424:	10c00017 	ldw	r3,0(r2)
 8002428:	e0bffe17 	ldw	r2,-8(fp)
 800242c:	10c00315 	stw	r3,12(r2)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002430:	e0bffe17 	ldw	r2,-8(fp)
 8002434:	10c00317 	ldw	r3,12(r2)
 8002438:	e0bffe17 	ldw	r2,-8(fp)
 800243c:	10801017 	ldw	r2,64(r2)
 8002440:	100d883a 	mov	r6,r2
 8002444:	180b883a 	mov	r5,r3
 8002448:	e13fff17 	ldw	r4,-4(fp)
 800244c:	80072540 	call	8007254 <memcpy>
    }
}
 8002450:	0001883a 	nop
 8002454:	e037883a 	mov	sp,fp
 8002458:	dfc00117 	ldw	ra,4(sp)
 800245c:	df000017 	ldw	fp,0(sp)
 8002460:	dec00204 	addi	sp,sp,8
 8002464:	f800283a 	ret

08002468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002468:	defffc04 	addi	sp,sp,-16
 800246c:	dfc00315 	stw	ra,12(sp)
 8002470:	df000215 	stw	fp,8(sp)
 8002474:	df000204 	addi	fp,sp,8
 8002478:	e13fff15 	stw	r4,-4(fp)

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800247c:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002480:	e0bfff17 	ldw	r2,-4(fp)
 8002484:	10801143 	ldbu	r2,69(r2)
 8002488:	e0bffe05 	stb	r2,-8(fp)

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800248c:	00000c06 	br	80024c0 <prvUnlockQueue+0x58>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002490:	e0bfff17 	ldw	r2,-4(fp)
 8002494:	10800917 	ldw	r2,36(r2)
 8002498:	10000c26 	beq	r2,zero,80024cc <prvUnlockQueue+0x64>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800249c:	e0bfff17 	ldw	r2,-4(fp)
 80024a0:	10800904 	addi	r2,r2,36
 80024a4:	1009883a 	mov	r4,r2
 80024a8:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 80024ac:	10000126 	beq	r2,zero,80024b4 <prvUnlockQueue+0x4c>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80024b0:	80055600 	call	8005560 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024b4:	e0bffe03 	ldbu	r2,-8(fp)
 80024b8:	10bfffc4 	addi	r2,r2,-1
 80024bc:	e0bffe05 	stb	r2,-8(fp)
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024c0:	e0bffe07 	ldb	r2,-8(fp)
 80024c4:	00bff216 	blt	zero,r2,8002490 <__alt_data_end+0xf8002490>
 80024c8:	00000106 	br	80024d0 <prvUnlockQueue+0x68>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else
                {
                    break;
 80024cc:	0001883a 	nop
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024d0:	e0bfff17 	ldw	r2,-4(fp)
 80024d4:	00ffffc4 	movi	r3,-1
 80024d8:	10c01145 	stb	r3,69(r2)
    }
    taskEXIT_CRITICAL();
 80024dc:	8005e980 	call	8005e98 <vTaskExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024e0:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024e4:	e0bfff17 	ldw	r2,-4(fp)
 80024e8:	10801103 	ldbu	r2,68(r2)
 80024ec:	e0bffe45 	stb	r2,-7(fp)

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024f0:	00000c06 	br	8002524 <prvUnlockQueue+0xbc>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f4:	e0bfff17 	ldw	r2,-4(fp)
 80024f8:	10800417 	ldw	r2,16(r2)
 80024fc:	10000c26 	beq	r2,zero,8002530 <prvUnlockQueue+0xc8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002500:	e0bfff17 	ldw	r2,-4(fp)
 8002504:	10800404 	addi	r2,r2,16
 8002508:	1009883a 	mov	r4,r2
 800250c:	8004eac0 	call	8004eac <xTaskRemoveFromEventList>
 8002510:	10000126 	beq	r2,zero,8002518 <prvUnlockQueue+0xb0>
                {
                    vTaskMissedYield();
 8002514:	80055600 	call	8005560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002518:	e0bffe43 	ldbu	r2,-7(fp)
 800251c:	10bfffc4 	addi	r2,r2,-1
 8002520:	e0bffe45 	stb	r2,-7(fp)
    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    {
        int8_t cRxLock = pxQueue->cRxLock;

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002524:	e0bffe47 	ldb	r2,-7(fp)
 8002528:	00bff216 	blt	zero,r2,80024f4 <__alt_data_end+0xf80024f4>
 800252c:	00000106 	br	8002534 <prvUnlockQueue+0xcc>

                --cRxLock;
            }
            else
            {
                break;
 8002530:	0001883a 	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002534:	e0bfff17 	ldw	r2,-4(fp)
 8002538:	00ffffc4 	movi	r3,-1
 800253c:	10c01105 	stb	r3,68(r2)
    }
    taskEXIT_CRITICAL();
 8002540:	8005e980 	call	8005e98 <vTaskExitCritical>
}
 8002544:	0001883a 	nop
 8002548:	e037883a 	mov	sp,fp
 800254c:	dfc00117 	ldw	ra,4(sp)
 8002550:	df000017 	ldw	fp,0(sp)
 8002554:	dec00204 	addi	sp,sp,8
 8002558:	f800283a 	ret

0800255c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800255c:	defffc04 	addi	sp,sp,-16
 8002560:	dfc00315 	stw	ra,12(sp)
 8002564:	df000215 	stw	fp,8(sp)
 8002568:	df000204 	addi	fp,sp,8
 800256c:	e13fff15 	stw	r4,-4(fp)
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002570:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002574:	e0bfff17 	ldw	r2,-4(fp)
 8002578:	10800e17 	ldw	r2,56(r2)
 800257c:	1000031e 	bne	r2,zero,800258c <prvIsQueueEmpty+0x30>
        {
            xReturn = pdTRUE;
 8002580:	00800044 	movi	r2,1
 8002584:	e0bffe15 	stw	r2,-8(fp)
 8002588:	00000106 	br	8002590 <prvIsQueueEmpty+0x34>
        }
        else
        {
            xReturn = pdFALSE;
 800258c:	e03ffe15 	stw	zero,-8(fp)
        }
    }
    taskEXIT_CRITICAL();
 8002590:	8005e980 	call	8005e98 <vTaskExitCritical>

    return xReturn;
 8002594:	e0bffe17 	ldw	r2,-8(fp)
}
 8002598:	e037883a 	mov	sp,fp
 800259c:	dfc00117 	ldw	ra,4(sp)
 80025a0:	df000017 	ldw	fp,0(sp)
 80025a4:	dec00204 	addi	sp,sp,8
 80025a8:	f800283a 	ret

080025ac <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80025ac:	defffc04 	addi	sp,sp,-16
 80025b0:	df000315 	stw	fp,12(sp)
 80025b4:	df000304 	addi	fp,sp,12
 80025b8:	e13fff15 	stw	r4,-4(fp)
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80025bc:	e0bfff17 	ldw	r2,-4(fp)
 80025c0:	e0bffe15 	stw	r2,-8(fp)

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80025c4:	e0bffe17 	ldw	r2,-8(fp)
 80025c8:	10800e17 	ldw	r2,56(r2)
 80025cc:	1000031e 	bne	r2,zero,80025dc <xQueueIsQueueEmptyFromISR+0x30>
    {
        xReturn = pdTRUE;
 80025d0:	00800044 	movi	r2,1
 80025d4:	e0bffd15 	stw	r2,-12(fp)
 80025d8:	00000106 	br	80025e0 <xQueueIsQueueEmptyFromISR+0x34>
    }
    else
    {
        xReturn = pdFALSE;
 80025dc:	e03ffd15 	stw	zero,-12(fp)
    }

    return xReturn;
 80025e0:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80025e4:	e037883a 	mov	sp,fp
 80025e8:	df000017 	ldw	fp,0(sp)
 80025ec:	dec00104 	addi	sp,sp,4
 80025f0:	f800283a 	ret

080025f4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80025f4:	defffc04 	addi	sp,sp,-16
 80025f8:	dfc00315 	stw	ra,12(sp)
 80025fc:	df000215 	stw	fp,8(sp)
 8002600:	df000204 	addi	fp,sp,8
 8002604:	e13fff15 	stw	r4,-4(fp)
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002608:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800260c:	e0bfff17 	ldw	r2,-4(fp)
 8002610:	10c00e17 	ldw	r3,56(r2)
 8002614:	e0bfff17 	ldw	r2,-4(fp)
 8002618:	10800f17 	ldw	r2,60(r2)
 800261c:	1880031e 	bne	r3,r2,800262c <prvIsQueueFull+0x38>
        {
            xReturn = pdTRUE;
 8002620:	00800044 	movi	r2,1
 8002624:	e0bffe15 	stw	r2,-8(fp)
 8002628:	00000106 	br	8002630 <prvIsQueueFull+0x3c>
        }
        else
        {
            xReturn = pdFALSE;
 800262c:	e03ffe15 	stw	zero,-8(fp)
        }
    }
    taskEXIT_CRITICAL();
 8002630:	8005e980 	call	8005e98 <vTaskExitCritical>

    return xReturn;
 8002634:	e0bffe17 	ldw	r2,-8(fp)
}
 8002638:	e037883a 	mov	sp,fp
 800263c:	dfc00117 	ldw	ra,4(sp)
 8002640:	df000017 	ldw	fp,0(sp)
 8002644:	dec00204 	addi	sp,sp,8
 8002648:	f800283a 	ret

0800264c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800264c:	defffc04 	addi	sp,sp,-16
 8002650:	df000315 	stw	fp,12(sp)
 8002654:	df000304 	addi	fp,sp,12
 8002658:	e13fff15 	stw	r4,-4(fp)
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800265c:	e0bfff17 	ldw	r2,-4(fp)
 8002660:	e0bffe15 	stw	r2,-8(fp)

    configASSERT( pxQueue );

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002664:	e0bffe17 	ldw	r2,-8(fp)
 8002668:	10c00e17 	ldw	r3,56(r2)
 800266c:	e0bffe17 	ldw	r2,-8(fp)
 8002670:	10800f17 	ldw	r2,60(r2)
 8002674:	1880031e 	bne	r3,r2,8002684 <xQueueIsQueueFullFromISR+0x38>
    {
        xReturn = pdTRUE;
 8002678:	00800044 	movi	r2,1
 800267c:	e0bffd15 	stw	r2,-12(fp)
 8002680:	00000106 	br	8002688 <xQueueIsQueueFullFromISR+0x3c>
    }
    else
    {
        xReturn = pdFALSE;
 8002684:	e03ffd15 	stw	zero,-12(fp)
    }

    return xReturn;
 8002688:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800268c:	e037883a 	mov	sp,fp
 8002690:	df000017 	ldw	fp,0(sp)
 8002694:	dec00104 	addi	sp,sp,4
 8002698:	f800283a 	ret

0800269c <xStreamBufferGenericCreate>:
    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer,
                                                     StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                                     StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
    {
 800269c:	defff504 	addi	sp,sp,-44
 80026a0:	dfc00a15 	stw	ra,40(sp)
 80026a4:	df000915 	stw	fp,36(sp)
 80026a8:	df000904 	addi	fp,sp,36
 80026ac:	e13ffc15 	stw	r4,-16(fp)
 80026b0:	e17ffd15 	stw	r5,-12(fp)
 80026b4:	e1bffe15 	stw	r6,-8(fp)
 80026b8:	e1ffff15 	stw	r7,-4(fp)

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
 80026bc:	e0bffe17 	ldw	r2,-8(fp)
 80026c0:	10800058 	cmpnei	r2,r2,1
 80026c4:	1000031e 	bne	r2,zero,80026d4 <xStreamBufferGenericCreate+0x38>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80026c8:	00800044 	movi	r2,1
 80026cc:	e0bffb05 	stb	r2,-20(fp)
 80026d0:	00000106 	br	80026d8 <xStreamBufferGenericCreate+0x3c>
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
 80026d4:	e03ffb05 	stb	zero,-20(fp)

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
 80026d8:	e0bffd17 	ldw	r2,-12(fp)
 80026dc:	1000021e 	bne	r2,zero,80026e8 <xStreamBufferGenericCreate+0x4c>
        {
            xTriggerLevelBytes = ( size_t ) 1;
 80026e0:	00800044 	movi	r2,1
 80026e4:	e0bffd15 	stw	r2,-12(fp)
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 80026e8:	e0bffc17 	ldw	r2,-16(fp)
 80026ec:	10800844 	addi	r2,r2,33
 80026f0:	e0fffc17 	ldw	r3,-16(fp)
 80026f4:	1880092e 	bgeu	r3,r2,800271c <xStreamBufferGenericCreate+0x80>
        {
            xBufferSizeBytes++;
 80026f8:	e0bffc17 	ldw	r2,-16(fp)
 80026fc:	10800044 	addi	r2,r2,1
 8002700:	e0bffc15 	stw	r2,-16(fp)
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8002704:	e0bffc17 	ldw	r2,-16(fp)
 8002708:	10800804 	addi	r2,r2,32
 800270c:	1009883a 	mov	r4,r2
 8002710:	800110c0 	call	800110c <pvPortMalloc>
 8002714:	e0bffa15 	stw	r2,-24(fp)
 8002718:	00000106 	br	8002720 <xStreamBufferGenericCreate+0x84>
        }
        else
        {
            pucAllocatedMemory = NULL;
 800271c:	e03ffa15 	stw	zero,-24(fp)
        }

        if( pucAllocatedMemory != NULL )
 8002720:	e0bffa17 	ldw	r2,-24(fp)
 8002724:	10000d26 	beq	r2,zero,800275c <xStreamBufferGenericCreate+0xc0>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002728:	e0bffa17 	ldw	r2,-24(fp)
 800272c:	11000804 	addi	r4,r2,32
 8002730:	e0bffb03 	ldbu	r2,-20(fp)
 8002734:	e0c00217 	ldw	r3,8(fp)
 8002738:	d8c00215 	stw	r3,8(sp)
 800273c:	e0ffff17 	ldw	r3,-4(fp)
 8002740:	d8c00115 	stw	r3,4(sp)
 8002744:	d8800015 	stw	r2,0(sp)
 8002748:	e1fffd17 	ldw	r7,-12(fp)
 800274c:	e1bffc17 	ldw	r6,-16(fp)
 8002750:	200b883a 	mov	r5,r4
 8002754:	e13ffa17 	ldw	r4,-24(fp)
 8002758:	80035400 	call	8003540 <prvInitialiseNewStreamBuffer>
        else
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800275c:	e0bffa17 	ldw	r2,-24(fp)
    }
 8002760:	e037883a 	mov	sp,fp
 8002764:	dfc00117 	ldw	ra,4(sp)
 8002768:	df000017 	ldw	fp,0(sp)
 800276c:	dec00204 	addi	sp,sp,8
 8002770:	f800283a 	ret

08002774 <vStreamBufferDelete>:
    }
#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 8002774:	defffc04 	addi	sp,sp,-16
 8002778:	dfc00315 	stw	ra,12(sp)
 800277c:	df000215 	stw	fp,8(sp)
 8002780:	df000204 	addi	fp,sp,8
 8002784:	e13fff15 	stw	r4,-4(fp)
    StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 8002788:	e0bfff17 	ldw	r2,-4(fp)
 800278c:	e0bffe15 	stw	r2,-8(fp)

    configASSERT( pxStreamBuffer );

    traceSTREAM_BUFFER_DELETE( xStreamBuffer );

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 8002790:	e0bffe17 	ldw	r2,-8(fp)
 8002794:	10800703 	ldbu	r2,28(r2)
 8002798:	10803fcc 	andi	r2,r2,255
 800279c:	1080008c 	andi	r2,r2,2
 80027a0:	1000031e 	bne	r2,zero,80027b0 <vStreamBufferDelete+0x3c>
    {
        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Both the structure and the buffer were allocated using a single call
            * to pvPortMalloc(), hence only one call to vPortFree() is required. */
            vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 80027a4:	e13ffe17 	ldw	r4,-8(fp)
 80027a8:	80011f40 	call	80011f4 <vPortFree>
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    }
}
 80027ac:	00000406 	br	80027c0 <vStreamBufferDelete+0x4c>
    }
    else
    {
        /* The structure and buffer were not allocated dynamically and cannot be
         * freed - just scrub the structure so future use will assert. */
        ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 80027b0:	01800804 	movi	r6,32
 80027b4:	000b883a 	mov	r5,zero
 80027b8:	e13ffe17 	ldw	r4,-8(fp)
 80027bc:	800739c0 	call	800739c <memset>
    }
}
 80027c0:	0001883a 	nop
 80027c4:	e037883a 	mov	sp,fp
 80027c8:	dfc00117 	ldw	ra,4(sp)
 80027cc:	df000017 	ldw	fp,0(sp)
 80027d0:	dec00204 	addi	sp,sp,8
 80027d4:	f800283a 	ret

080027d8 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 80027d8:	defff604 	addi	sp,sp,-40
 80027dc:	dfc00915 	stw	ra,36(sp)
 80027e0:	df000815 	stw	fp,32(sp)
 80027e4:	df000804 	addi	fp,sp,32
 80027e8:	e13fff15 	stw	r4,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80027ec:	e0bfff17 	ldw	r2,-4(fp)
 80027f0:	e0bffc15 	stw	r2,-16(fp)
    BaseType_t xReturn = pdFAIL;
 80027f4:	e03ffb15 	stw	zero,-20(fp)
    StreamBufferCallbackFunction_t pxSendCallback = NULL, pxReceiveCallback = NULL;
 80027f8:	e03ffd15 	stw	zero,-12(fp)
 80027fc:	e03ffe15 	stw	zero,-8(fp)
        uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    }
    #endif

    /* Can only reset a message buffer if there are no tasks blocked on it. */
    taskENTER_CRITICAL();
 8002800:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
 8002804:	e0bffc17 	ldw	r2,-16(fp)
 8002808:	10800417 	ldw	r2,16(r2)
 800280c:	1000181e 	bne	r2,zero,8002870 <xStreamBufferReset+0x98>
 8002810:	e0bffc17 	ldw	r2,-16(fp)
 8002814:	10800517 	ldw	r2,20(r2)
 8002818:	1000151e 	bne	r2,zero,8002870 <xStreamBufferReset+0x98>
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 800281c:	e0bffc17 	ldw	r2,-16(fp)
 8002820:	11000617 	ldw	r4,24(r2)
 8002824:	e0bffc17 	ldw	r2,-16(fp)
 8002828:	11400217 	ldw	r5,8(r2)
 800282c:	e0bffc17 	ldw	r2,-16(fp)
 8002830:	11800317 	ldw	r6,12(r2)
                                          pxStreamBuffer->pucBuffer,
                                          pxStreamBuffer->xLength,
                                          pxStreamBuffer->xTriggerLevelBytes,
                                          pxStreamBuffer->ucFlags,
 8002834:	e0bffc17 	ldw	r2,-16(fp)
 8002838:	10800703 	ldbu	r2,28(r2)
                pxSendCallback = pxStreamBuffer->pxSendCompletedCallback;
                pxReceiveCallback = pxStreamBuffer->pxReceiveCompletedCallback;
            }
            #endif

            prvInitialiseNewStreamBuffer( pxStreamBuffer,
 800283c:	10803fcc 	andi	r2,r2,255
 8002840:	e0fffe17 	ldw	r3,-8(fp)
 8002844:	d8c00215 	stw	r3,8(sp)
 8002848:	e0fffd17 	ldw	r3,-12(fp)
 800284c:	d8c00115 	stw	r3,4(sp)
 8002850:	d8800015 	stw	r2,0(sp)
 8002854:	300f883a 	mov	r7,r6
 8002858:	280d883a 	mov	r6,r5
 800285c:	200b883a 	mov	r5,r4
 8002860:	e13ffc17 	ldw	r4,-16(fp)
 8002864:	80035400 	call	8003540 <prvInitialiseNewStreamBuffer>
            }
            #endif

            traceSTREAM_BUFFER_RESET( xStreamBuffer );

            xReturn = pdPASS;
 8002868:	00800044 	movi	r2,1
 800286c:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    taskEXIT_CRITICAL();
 8002870:	8005e980 	call	8005e98 <vTaskExitCritical>

    return xReturn;
 8002874:	e0bffb17 	ldw	r2,-20(fp)
}
 8002878:	e037883a 	mov	sp,fp
 800287c:	dfc00117 	ldw	ra,4(sp)
 8002880:	df000017 	ldw	fp,0(sp)
 8002884:	dec00204 	addi	sp,sp,8
 8002888:	f800283a 	ret

0800288c <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
                                         size_t xTriggerLevel )
{
 800288c:	defffb04 	addi	sp,sp,-20
 8002890:	df000415 	stw	fp,16(sp)
 8002894:	df000404 	addi	fp,sp,16
 8002898:	e13ffe15 	stw	r4,-8(fp)
 800289c:	e17fff15 	stw	r5,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80028a0:	e0bffe17 	ldw	r2,-8(fp)
 80028a4:	e0bffd15 	stw	r2,-12(fp)
    BaseType_t xReturn;

    configASSERT( pxStreamBuffer );

    /* It is not valid for the trigger level to be 0. */
    if( xTriggerLevel == ( size_t ) 0 )
 80028a8:	e0bfff17 	ldw	r2,-4(fp)
 80028ac:	1000021e 	bne	r2,zero,80028b8 <xStreamBufferSetTriggerLevel+0x2c>
    {
        xTriggerLevel = ( size_t ) 1;
 80028b0:	00800044 	movi	r2,1
 80028b4:	e0bfff15 	stw	r2,-4(fp)
    }

    /* The trigger level is the number of bytes that must be in the stream
     * buffer before a task that is waiting for data is unblocked. */
    if( xTriggerLevel < pxStreamBuffer->xLength )
 80028b8:	e0bffd17 	ldw	r2,-12(fp)
 80028bc:	10800217 	ldw	r2,8(r2)
 80028c0:	e0ffff17 	ldw	r3,-4(fp)
 80028c4:	1880062e 	bgeu	r3,r2,80028e0 <xStreamBufferSetTriggerLevel+0x54>
    {
        pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 80028c8:	e0bffd17 	ldw	r2,-12(fp)
 80028cc:	e0ffff17 	ldw	r3,-4(fp)
 80028d0:	10c00315 	stw	r3,12(r2)
        xReturn = pdPASS;
 80028d4:	00800044 	movi	r2,1
 80028d8:	e0bffc15 	stw	r2,-16(fp)
 80028dc:	00000106 	br	80028e4 <xStreamBufferSetTriggerLevel+0x58>
    }
    else
    {
        xReturn = pdFALSE;
 80028e0:	e03ffc15 	stw	zero,-16(fp)
    }

    return xReturn;
 80028e4:	e0bffc17 	ldw	r2,-16(fp)
}
 80028e8:	e037883a 	mov	sp,fp
 80028ec:	df000017 	ldw	fp,0(sp)
 80028f0:	dec00104 	addi	sp,sp,4
 80028f4:	f800283a 	ret

080028f8 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80028f8:	defffb04 	addi	sp,sp,-20
 80028fc:	df000415 	stw	fp,16(sp)
 8002900:	df000404 	addi	fp,sp,16
 8002904:	e13fff15 	stw	r4,-4(fp)
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002908:	e0bfff17 	ldw	r2,-4(fp)
 800290c:	e0bffd15 	stw	r2,-12(fp)
    /* The code below reads xTail and then xHead.  This is safe if the stream
     * buffer is updated once between the two reads - but not if the stream buffer
     * is updated more than once between the two reads - hence the loop. */
    do
    {
        xOriginalTail = pxStreamBuffer->xTail;
 8002910:	e0bffd17 	ldw	r2,-12(fp)
 8002914:	10800017 	ldw	r2,0(r2)
 8002918:	e0bffe15 	stw	r2,-8(fp)
        xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800291c:	e0bffd17 	ldw	r2,-12(fp)
 8002920:	10c00217 	ldw	r3,8(r2)
 8002924:	e0bffd17 	ldw	r2,-12(fp)
 8002928:	10800017 	ldw	r2,0(r2)
 800292c:	1885883a 	add	r2,r3,r2
 8002930:	e0bffc15 	stw	r2,-16(fp)
        xSpace -= pxStreamBuffer->xHead;
 8002934:	e0bffd17 	ldw	r2,-12(fp)
 8002938:	10800117 	ldw	r2,4(r2)
 800293c:	e0fffc17 	ldw	r3,-16(fp)
 8002940:	1885c83a 	sub	r2,r3,r2
 8002944:	e0bffc15 	stw	r2,-16(fp)
    } while( xOriginalTail != pxStreamBuffer->xTail );
 8002948:	e0bffd17 	ldw	r2,-12(fp)
 800294c:	10c00017 	ldw	r3,0(r2)
 8002950:	e0bffe17 	ldw	r2,-8(fp)
 8002954:	18bfee1e 	bne	r3,r2,8002910 <__alt_data_end+0xf8002910>

    xSpace -= ( size_t ) 1;
 8002958:	e0bffc17 	ldw	r2,-16(fp)
 800295c:	10bfffc4 	addi	r2,r2,-1
 8002960:	e0bffc15 	stw	r2,-16(fp)

    if( xSpace >= pxStreamBuffer->xLength )
 8002964:	e0bffd17 	ldw	r2,-12(fp)
 8002968:	10800217 	ldw	r2,8(r2)
 800296c:	e0fffc17 	ldw	r3,-16(fp)
 8002970:	18800536 	bltu	r3,r2,8002988 <xStreamBufferSpacesAvailable+0x90>
    {
        xSpace -= pxStreamBuffer->xLength;
 8002974:	e0bffd17 	ldw	r2,-12(fp)
 8002978:	10800217 	ldw	r2,8(r2)
 800297c:	e0fffc17 	ldw	r3,-16(fp)
 8002980:	1885c83a 	sub	r2,r3,r2
 8002984:	e0bffc15 	stw	r2,-16(fp)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xSpace;
 8002988:	e0bffc17 	ldw	r2,-16(fp)
}
 800298c:	e037883a 	mov	sp,fp
 8002990:	df000017 	ldw	fp,0(sp)
 8002994:	dec00104 	addi	sp,sp,4
 8002998:	f800283a 	ret

0800299c <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800299c:	defffb04 	addi	sp,sp,-20
 80029a0:	dfc00415 	stw	ra,16(sp)
 80029a4:	df000315 	stw	fp,12(sp)
 80029a8:	df000304 	addi	fp,sp,12
 80029ac:	e13fff15 	stw	r4,-4(fp)
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80029b0:	e0bfff17 	ldw	r2,-4(fp)
 80029b4:	e0bffd15 	stw	r2,-12(fp)
    size_t xReturn;

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
 80029b8:	e13ffd17 	ldw	r4,-12(fp)
 80029bc:	80034cc0 	call	80034cc <prvBytesInBuffer>
 80029c0:	e0bffe15 	stw	r2,-8(fp)
    return xReturn;
 80029c4:	e0bffe17 	ldw	r2,-8(fp)
}
 80029c8:	e037883a 	mov	sp,fp
 80029cc:	dfc00117 	ldw	ra,4(sp)
 80029d0:	df000017 	ldw	fp,0(sp)
 80029d4:	dec00204 	addi	sp,sp,8
 80029d8:	f800283a 	ret

080029dc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 80029dc:	defff204 	addi	sp,sp,-56
 80029e0:	dfc00d15 	stw	ra,52(sp)
 80029e4:	df000c15 	stw	fp,48(sp)
 80029e8:	df000c04 	addi	fp,sp,48
 80029ec:	e13ffc15 	stw	r4,-16(fp)
 80029f0:	e17ffd15 	stw	r5,-12(fp)
 80029f4:	e1bffe15 	stw	r6,-8(fp)
 80029f8:	e1ffff15 	stw	r7,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80029fc:	e0bffc17 	ldw	r2,-16(fp)
 8002a00:	e0bff715 	stw	r2,-36(fp)
    size_t xReturn, xSpace = 0;
 8002a04:	e03ff515 	stw	zero,-44(fp)
    size_t xRequiredSpace = xDataLengthBytes;
 8002a08:	e0bffe17 	ldw	r2,-8(fp)
 8002a0c:	e0bff615 	stw	r2,-40(fp)
    TimeOut_t xTimeOut;
    size_t xMaxReportedSpace = 0;
 8002a10:	e03ff815 	stw	zero,-32(fp)
    configASSERT( pvTxData );
    configASSERT( pxStreamBuffer );

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8002a14:	e0bff717 	ldw	r2,-36(fp)
 8002a18:	10800217 	ldw	r2,8(r2)
 8002a1c:	10bfffc4 	addi	r2,r2,-1
 8002a20:	e0bff815 	stw	r2,-32(fp)

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002a24:	e0bff717 	ldw	r2,-36(fp)
 8002a28:	10800703 	ldbu	r2,28(r2)
 8002a2c:	10803fcc 	andi	r2,r2,255
 8002a30:	1080004c 	andi	r2,r2,1
 8002a34:	10000826 	beq	r2,zero,8002a58 <xStreamBufferSend+0x7c>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002a38:	e0bff617 	ldw	r2,-40(fp)
 8002a3c:	10800104 	addi	r2,r2,4
 8002a40:	e0bff615 	stw	r2,-40(fp)
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 8002a44:	e0bff617 	ldw	r2,-40(fp)
 8002a48:	e0fff817 	ldw	r3,-32(fp)
 8002a4c:	1880072e 	bgeu	r3,r2,8002a6c <xStreamBufferSend+0x90>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8002a50:	e03fff15 	stw	zero,-4(fp)
 8002a54:	00000506 	br	8002a6c <xStreamBufferSend+0x90>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 8002a58:	e0bff617 	ldw	r2,-40(fp)
 8002a5c:	e0fff817 	ldw	r3,-32(fp)
 8002a60:	1880022e 	bgeu	r3,r2,8002a6c <xStreamBufferSend+0x90>
        {
            xRequiredSpace = xMaxReportedSpace;
 8002a64:	e0bff817 	ldw	r2,-32(fp)
 8002a68:	e0bff615 	stw	r2,-40(fp)
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002a6c:	e0bfff17 	ldw	r2,-4(fp)
 8002a70:	10002426 	beq	r2,zero,8002b04 <xStreamBufferSend+0x128>
    {
        vTaskSetTimeOutState( &xTimeOut );
 8002a74:	e0bffa04 	addi	r2,fp,-24
 8002a78:	1009883a 	mov	r4,r2
 8002a7c:	80053f00 	call	80053f0 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8002a80:	8005e440 	call	8005e44 <vTaskEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002a84:	e13ff717 	ldw	r4,-36(fp)
 8002a88:	80028f80 	call	80028f8 <xStreamBufferSpacesAvailable>
 8002a8c:	e0bff515 	stw	r2,-44(fp)

                if( xSpace < xRequiredSpace )
 8002a90:	e0fff517 	ldw	r3,-44(fp)
 8002a94:	e0bff617 	ldw	r2,-40(fp)
 8002a98:	1880082e 	bgeu	r3,r2,8002abc <xStreamBufferSend+0xe0>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 8002a9c:	000b883a 	mov	r5,zero
 8002aa0:	0009883a 	mov	r4,zero
 8002aa4:	8006ca00 	call	8006ca0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8002aa8:	80058340 	call	8005834 <xTaskGetCurrentTaskHandle>
 8002aac:	1007883a 	mov	r3,r2
 8002ab0:	e0bff717 	ldw	r2,-36(fp)
 8002ab4:	10c00515 	stw	r3,20(r2)
 8002ab8:	00000206 	br	8002ac4 <xStreamBufferSend+0xe8>
                }
                else
                {
                    taskEXIT_CRITICAL();
 8002abc:	8005e980 	call	8005e98 <vTaskExitCritical>
                    break;
 8002ac0:	00001006 	br	8002b04 <xStreamBufferSend+0x128>
                }
            }
            taskEXIT_CRITICAL();
 8002ac4:	8005e980 	call	8005e98 <vTaskExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002ac8:	e0bfff17 	ldw	r2,-4(fp)
 8002acc:	d8800015 	stw	r2,0(sp)
 8002ad0:	000f883a 	mov	r7,zero
 8002ad4:	000d883a 	mov	r6,zero
 8002ad8:	000b883a 	mov	r5,zero
 8002adc:	0009883a 	mov	r4,zero
 8002ae0:	80060900 	call	8006090 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 8002ae4:	e0bff717 	ldw	r2,-36(fp)
 8002ae8:	10000515 	stw	zero,20(r2)
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8002aec:	e0ffff04 	addi	r3,fp,-4
 8002af0:	e0bffa04 	addi	r2,fp,-24
 8002af4:	180b883a 	mov	r5,r3
 8002af8:	1009883a 	mov	r4,r2
 8002afc:	80054780 	call	8005478 <xTaskCheckForTimeOut>
 8002b00:	103fdf26 	beq	r2,zero,8002a80 <__alt_data_end+0xf8002a80>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 8002b04:	e0bff517 	ldw	r2,-44(fp)
 8002b08:	1000031e 	bne	r2,zero,8002b18 <xStreamBufferSend+0x13c>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002b0c:	e13ff717 	ldw	r4,-36(fp)
 8002b10:	80028f80 	call	80028f8 <xStreamBufferSpacesAvailable>
 8002b14:	e0bff515 	stw	r2,-44(fp)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002b18:	e0bff617 	ldw	r2,-40(fp)
 8002b1c:	d8800015 	stw	r2,0(sp)
 8002b20:	e1fff517 	ldw	r7,-44(fp)
 8002b24:	e1bffe17 	ldw	r6,-8(fp)
 8002b28:	e17ffd17 	ldw	r5,-12(fp)
 8002b2c:	e13ff717 	ldw	r4,-36(fp)
 8002b30:	8002ca00 	call	8002ca0 <prvWriteMessageToBuffer>
 8002b34:	e0bff915 	stw	r2,-28(fp)

    if( xReturn > ( size_t ) 0 )
 8002b38:	e0bff917 	ldw	r2,-28(fp)
 8002b3c:	10001526 	beq	r2,zero,8002b94 <xStreamBufferSend+0x1b8>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002b40:	e13ff717 	ldw	r4,-36(fp)
 8002b44:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002b48:	1007883a 	mov	r3,r2
 8002b4c:	e0bff717 	ldw	r2,-36(fp)
 8002b50:	10800317 	ldw	r2,12(r2)
 8002b54:	18800f36 	bltu	r3,r2,8002b94 <xStreamBufferSend+0x1b8>
        {
            prvSEND_COMPLETED( pxStreamBuffer );
 8002b58:	80045480 	call	8004548 <vTaskSuspendAll>
 8002b5c:	e0bff717 	ldw	r2,-36(fp)
 8002b60:	10800417 	ldw	r2,16(r2)
 8002b64:	10000a26 	beq	r2,zero,8002b90 <xStreamBufferSend+0x1b4>
 8002b68:	e0bff717 	ldw	r2,-36(fp)
 8002b6c:	10800417 	ldw	r2,16(r2)
 8002b70:	d8000015 	stw	zero,0(sp)
 8002b74:	000f883a 	mov	r7,zero
 8002b78:	000d883a 	mov	r6,zero
 8002b7c:	000b883a 	mov	r5,zero
 8002b80:	1009883a 	mov	r4,r2
 8002b84:	80062180 	call	8006218 <xTaskGenericNotify>
 8002b88:	e0bff717 	ldw	r2,-36(fp)
 8002b8c:	10000415 	stw	zero,16(r2)
 8002b90:	80045740 	call	8004574 <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8002b94:	e0bff917 	ldw	r2,-28(fp)
}
 8002b98:	e037883a 	mov	sp,fp
 8002b9c:	dfc00117 	ldw	ra,4(sp)
 8002ba0:	df000017 	ldw	fp,0(sp)
 8002ba4:	dec00204 	addi	sp,sp,8
 8002ba8:	f800283a 	ret

08002bac <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002bac:	defff304 	addi	sp,sp,-52
 8002bb0:	dfc00c15 	stw	ra,48(sp)
 8002bb4:	df000b15 	stw	fp,44(sp)
 8002bb8:	df000b04 	addi	fp,sp,44
 8002bbc:	e13ffc15 	stw	r4,-16(fp)
 8002bc0:	e17ffd15 	stw	r5,-12(fp)
 8002bc4:	e1bffe15 	stw	r6,-8(fp)
 8002bc8:	e1ffff15 	stw	r7,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002bcc:	e0bffc17 	ldw	r2,-16(fp)
 8002bd0:	e0bff815 	stw	r2,-32(fp)
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 8002bd4:	e0bffe17 	ldw	r2,-8(fp)
 8002bd8:	e0bff715 	stw	r2,-36(fp)

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002bdc:	e0bff817 	ldw	r2,-32(fp)
 8002be0:	10800703 	ldbu	r2,28(r2)
 8002be4:	10803fcc 	andi	r2,r2,255
 8002be8:	1080004c 	andi	r2,r2,1
 8002bec:	10000326 	beq	r2,zero,8002bfc <xStreamBufferSendFromISR+0x50>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002bf0:	e0bff717 	ldw	r2,-36(fp)
 8002bf4:	10800104 	addi	r2,r2,4
 8002bf8:	e0bff715 	stw	r2,-36(fp)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002bfc:	e13ff817 	ldw	r4,-32(fp)
 8002c00:	80028f80 	call	80028f8 <xStreamBufferSpacesAvailable>
 8002c04:	e0bff915 	stw	r2,-28(fp)
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002c08:	e0bff717 	ldw	r2,-36(fp)
 8002c0c:	d8800015 	stw	r2,0(sp)
 8002c10:	e1fff917 	ldw	r7,-28(fp)
 8002c14:	e1bffe17 	ldw	r6,-8(fp)
 8002c18:	e17ffd17 	ldw	r5,-12(fp)
 8002c1c:	e13ff817 	ldw	r4,-32(fp)
 8002c20:	8002ca00 	call	8002ca0 <prvWriteMessageToBuffer>
 8002c24:	e0bffa15 	stw	r2,-24(fp)

    if( xReturn > ( size_t ) 0 )
 8002c28:	e0bffa17 	ldw	r2,-24(fp)
 8002c2c:	10001626 	beq	r2,zero,8002c88 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002c30:	e13ff817 	ldw	r4,-32(fp)
 8002c34:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002c38:	1007883a 	mov	r3,r2
 8002c3c:	e0bff817 	ldw	r2,-32(fp)
 8002c40:	10800317 	ldw	r2,12(r2)
 8002c44:	18801036 	bltu	r3,r2,8002c88 <xStreamBufferSendFromISR+0xdc>
        {
            prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002c48:	e03ffb15 	stw	zero,-20(fp)
 8002c4c:	e0bff817 	ldw	r2,-32(fp)
 8002c50:	10800417 	ldw	r2,16(r2)
 8002c54:	10000c26 	beq	r2,zero,8002c88 <xStreamBufferSendFromISR+0xdc>
 8002c58:	e0bff817 	ldw	r2,-32(fp)
 8002c5c:	10c00417 	ldw	r3,16(r2)
 8002c60:	e0bfff17 	ldw	r2,-4(fp)
 8002c64:	d8800115 	stw	r2,4(sp)
 8002c68:	d8000015 	stw	zero,0(sp)
 8002c6c:	000f883a 	mov	r7,zero
 8002c70:	000d883a 	mov	r6,zero
 8002c74:	000b883a 	mov	r5,zero
 8002c78:	1809883a 	mov	r4,r3
 8002c7c:	80065940 	call	8006594 <xTaskGenericNotifyFromISR>
 8002c80:	e0bff817 	ldw	r2,-32(fp)
 8002c84:	10000415 	stw	zero,16(r2)
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
 8002c88:	e0bffa17 	ldw	r2,-24(fp)
}
 8002c8c:	e037883a 	mov	sp,fp
 8002c90:	dfc00117 	ldw	ra,4(sp)
 8002c94:	df000017 	ldw	fp,0(sp)
 8002c98:	dec00204 	addi	sp,sp,8
 8002c9c:	f800283a 	ret

08002ca0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
 8002ca0:	defff804 	addi	sp,sp,-32
 8002ca4:	dfc00715 	stw	ra,28(sp)
 8002ca8:	df000615 	stw	fp,24(sp)
 8002cac:	df000604 	addi	fp,sp,24
 8002cb0:	e13ffc15 	stw	r4,-16(fp)
 8002cb4:	e17ffd15 	stw	r5,-12(fp)
 8002cb8:	e1bffe15 	stw	r6,-8(fp)
 8002cbc:	e1ffff15 	stw	r7,-4(fp)
    size_t xNextHead = pxStreamBuffer->xHead;
 8002cc0:	e0bffc17 	ldw	r2,-16(fp)
 8002cc4:	10800117 	ldw	r2,4(r2)
 8002cc8:	e0bffa15 	stw	r2,-24(fp)
    configMESSAGE_BUFFER_LENGTH_TYPE xMessageLength;

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002ccc:	e0bffc17 	ldw	r2,-16(fp)
 8002cd0:	10800703 	ldbu	r2,28(r2)
 8002cd4:	10803fcc 	andi	r2,r2,255
 8002cd8:	1080004c 	andi	r2,r2,1
 8002cdc:	10000f26 	beq	r2,zero,8002d1c <prvWriteMessageToBuffer+0x7c>
    {
        /* This is a message buffer, as opposed to a stream buffer. */

        /* Convert xDataLengthBytes to the message length type. */
        xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
 8002ce0:	e0bffe17 	ldw	r2,-8(fp)
 8002ce4:	e0bffb15 	stw	r2,-20(fp)

        /* Ensure the data length given fits within configMESSAGE_BUFFER_LENGTH_TYPE. */
        configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );

        if( xSpace >= xRequiredSpace )
 8002ce8:	e0ffff17 	ldw	r3,-4(fp)
 8002cec:	e0800217 	ldw	r2,8(fp)
 8002cf0:	18800836 	bltu	r3,r2,8002d14 <prvWriteMessageToBuffer+0x74>
        {
            /* There is enough space to write both the message length and the message
             * itself into the buffer.  Start by writing the length of the data, the data
             * itself will be written later in this function. */
            xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 8002cf4:	e0bffb04 	addi	r2,fp,-20
 8002cf8:	e1fffa17 	ldw	r7,-24(fp)
 8002cfc:	01800104 	movi	r6,4
 8002d00:	100b883a 	mov	r5,r2
 8002d04:	e13ffc17 	ldw	r4,-16(fp)
 8002d08:	800330c0 	call	800330c <prvWriteBytesToBuffer>
 8002d0c:	e0bffa15 	stw	r2,-24(fp)
 8002d10:	00000706 	br	8002d30 <prvWriteMessageToBuffer+0x90>
        }
        else
        {
            /* Not enough space, so do not write data to the buffer. */
            xDataLengthBytes = 0;
 8002d14:	e03ffe15 	stw	zero,-8(fp)
 8002d18:	00000506 	br	8002d30 <prvWriteMessageToBuffer+0x90>
    else
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Plan to write as many
         * bytes as possible. */
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002d1c:	e0fffe17 	ldw	r3,-8(fp)
 8002d20:	e0bfff17 	ldw	r2,-4(fp)
 8002d24:	1880012e 	bgeu	r3,r2,8002d2c <prvWriteMessageToBuffer+0x8c>
 8002d28:	1805883a 	mov	r2,r3
 8002d2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if( xDataLengthBytes != ( size_t ) 0 )
 8002d30:	e0bffe17 	ldw	r2,-8(fp)
 8002d34:	10000826 	beq	r2,zero,8002d58 <prvWriteMessageToBuffer+0xb8>
    {
        /* Write the data to the buffer. */
        pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8002d38:	e1fffa17 	ldw	r7,-24(fp)
 8002d3c:	e1bffe17 	ldw	r6,-8(fp)
 8002d40:	e17ffd17 	ldw	r5,-12(fp)
 8002d44:	e13ffc17 	ldw	r4,-16(fp)
 8002d48:	800330c0 	call	800330c <prvWriteBytesToBuffer>
 8002d4c:	1007883a 	mov	r3,r2
 8002d50:	e0bffc17 	ldw	r2,-16(fp)
 8002d54:	10c00115 	stw	r3,4(r2)
    }

    return xDataLengthBytes;
 8002d58:	e0bffe17 	ldw	r2,-8(fp)
}
 8002d5c:	e037883a 	mov	sp,fp
 8002d60:	dfc00117 	ldw	ra,4(sp)
 8002d64:	df000017 	ldw	fp,0(sp)
 8002d68:	dec00204 	addi	sp,sp,8
 8002d6c:	f800283a 	ret

08002d70 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8002d70:	defff504 	addi	sp,sp,-44
 8002d74:	dfc00a15 	stw	ra,40(sp)
 8002d78:	df000915 	stw	fp,36(sp)
 8002d7c:	df000904 	addi	fp,sp,36
 8002d80:	e13ffc15 	stw	r4,-16(fp)
 8002d84:	e17ffd15 	stw	r5,-12(fp)
 8002d88:	e1bffe15 	stw	r6,-8(fp)
 8002d8c:	e1ffff15 	stw	r7,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002d90:	e0bffc17 	ldw	r2,-16(fp)
 8002d94:	e0bffb15 	stw	r2,-20(fp)
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002d98:	e03ff815 	stw	zero,-32(fp)
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002d9c:	e0bffb17 	ldw	r2,-20(fp)
 8002da0:	10800703 	ldbu	r2,28(r2)
 8002da4:	10803fcc 	andi	r2,r2,255
 8002da8:	1080004c 	andi	r2,r2,1
 8002dac:	10000326 	beq	r2,zero,8002dbc <xStreamBufferReceive+0x4c>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002db0:	00800104 	movi	r2,4
 8002db4:	e0bffa15 	stw	r2,-24(fp)
 8002db8:	00000106 	br	8002dc0 <xStreamBufferReceive+0x50>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002dbc:	e03ffa15 	stw	zero,-24(fp)
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8002dc0:	e0bfff17 	ldw	r2,-4(fp)
 8002dc4:	10001f26 	beq	r2,zero,8002e44 <xStreamBufferReceive+0xd4>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 8002dc8:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002dcc:	e13ffb17 	ldw	r4,-20(fp)
 8002dd0:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002dd4:	e0bff915 	stw	r2,-28(fp)
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 8002dd8:	e0bff917 	ldw	r2,-28(fp)
 8002ddc:	e0fffa17 	ldw	r3,-24(fp)
 8002de0:	18800736 	bltu	r3,r2,8002e00 <xStreamBufferReceive+0x90>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 8002de4:	000b883a 	mov	r5,zero
 8002de8:	0009883a 	mov	r4,zero
 8002dec:	8006ca00 	call	8006ca0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8002df0:	80058340 	call	8005834 <xTaskGetCurrentTaskHandle>
 8002df4:	1007883a 	mov	r3,r2
 8002df8:	e0bffb17 	ldw	r2,-20(fp)
 8002dfc:	10c00415 	stw	r3,16(r2)
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e00:	8005e980 	call	8005e98 <vTaskExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 8002e04:	e0bff917 	ldw	r2,-28(fp)
 8002e08:	e0fffa17 	ldw	r3,-24(fp)
 8002e0c:	18801036 	bltu	r3,r2,8002e50 <xStreamBufferReceive+0xe0>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002e10:	e0bfff17 	ldw	r2,-4(fp)
 8002e14:	d8800015 	stw	r2,0(sp)
 8002e18:	000f883a 	mov	r7,zero
 8002e1c:	000d883a 	mov	r6,zero
 8002e20:	000b883a 	mov	r5,zero
 8002e24:	0009883a 	mov	r4,zero
 8002e28:	80060900 	call	8006090 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8002e2c:	e0bffb17 	ldw	r2,-20(fp)
 8002e30:	10000415 	stw	zero,16(r2)

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002e34:	e13ffb17 	ldw	r4,-20(fp)
 8002e38:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002e3c:	e0bff915 	stw	r2,-28(fp)
 8002e40:	00000306 	br	8002e50 <xStreamBufferReceive+0xe0>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002e44:	e13ffb17 	ldw	r4,-20(fp)
 8002e48:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002e4c:	e0bff915 	stw	r2,-28(fp)
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002e50:	e0bff917 	ldw	r2,-28(fp)
 8002e54:	e0fffa17 	ldw	r3,-24(fp)
 8002e58:	1880172e 	bgeu	r3,r2,8002eb8 <xStreamBufferReceive+0x148>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 8002e5c:	e1fff917 	ldw	r7,-28(fp)
 8002e60:	e1bffe17 	ldw	r6,-8(fp)
 8002e64:	e17ffd17 	ldw	r5,-12(fp)
 8002e68:	e13ffb17 	ldw	r4,-20(fp)
 8002e6c:	80030480 	call	8003048 <prvReadMessageFromBuffer>
 8002e70:	e0bff815 	stw	r2,-32(fp)

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002e74:	e0bff817 	ldw	r2,-32(fp)
 8002e78:	10000f26 	beq	r2,zero,8002eb8 <xStreamBufferReceive+0x148>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            prvRECEIVE_COMPLETED( xStreamBuffer );
 8002e7c:	80045480 	call	8004548 <vTaskSuspendAll>
 8002e80:	e0bffc17 	ldw	r2,-16(fp)
 8002e84:	10800517 	ldw	r2,20(r2)
 8002e88:	10000a26 	beq	r2,zero,8002eb4 <xStreamBufferReceive+0x144>
 8002e8c:	e0bffc17 	ldw	r2,-16(fp)
 8002e90:	10800517 	ldw	r2,20(r2)
 8002e94:	d8000015 	stw	zero,0(sp)
 8002e98:	000f883a 	mov	r7,zero
 8002e9c:	000d883a 	mov	r6,zero
 8002ea0:	000b883a 	mov	r5,zero
 8002ea4:	1009883a 	mov	r4,r2
 8002ea8:	80062180 	call	8006218 <xTaskGenericNotify>
 8002eac:	e0bffc17 	ldw	r2,-16(fp)
 8002eb0:	10000515 	stw	zero,20(r2)
 8002eb4:	80045740 	call	8004574 <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8002eb8:	e0bff817 	ldw	r2,-32(fp)
}
 8002ebc:	e037883a 	mov	sp,fp
 8002ec0:	dfc00117 	ldw	ra,4(sp)
 8002ec4:	df000017 	ldw	fp,0(sp)
 8002ec8:	dec00204 	addi	sp,sp,8
 8002ecc:	f800283a 	ret

08002ed0 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 8002ed0:	defff904 	addi	sp,sp,-28
 8002ed4:	dfc00615 	stw	ra,24(sp)
 8002ed8:	df000515 	stw	fp,20(sp)
 8002edc:	df000504 	addi	fp,sp,20
 8002ee0:	e13fff15 	stw	r4,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ee4:	e0bfff17 	ldw	r2,-4(fp)
 8002ee8:	e0bffc15 	stw	r2,-16(fp)
    configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

    configASSERT( pxStreamBuffer );

    /* Ensure the stream buffer is being used as a message buffer. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002eec:	e0bffc17 	ldw	r2,-16(fp)
 8002ef0:	10800703 	ldbu	r2,28(r2)
 8002ef4:	10803fcc 	andi	r2,r2,255
 8002ef8:	1080004c 	andi	r2,r2,1
 8002efc:	10001326 	beq	r2,zero,8002f4c <xStreamBufferNextMessageLengthBytes+0x7c>
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002f00:	e13ffc17 	ldw	r4,-16(fp)
 8002f04:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002f08:	e0bffd15 	stw	r2,-12(fp)

        if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002f0c:	e0bffd17 	ldw	r2,-12(fp)
 8002f10:	10800170 	cmpltui	r2,r2,5
 8002f14:	10000b1e 	bne	r2,zero,8002f44 <xStreamBufferNextMessageLengthBytes+0x74>
        {
            /* The number of bytes available is greater than the number of bytes
             * required to hold the length of the next message, so another message
             * is available. */
            ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 8002f18:	e0bffc17 	ldw	r2,-16(fp)
 8002f1c:	10c00017 	ldw	r3,0(r2)
 8002f20:	e0bffe04 	addi	r2,fp,-8
 8002f24:	180f883a 	mov	r7,r3
 8002f28:	01800104 	movi	r6,4
 8002f2c:	100b883a 	mov	r5,r2
 8002f30:	e13ffc17 	ldw	r4,-16(fp)
 8002f34:	80033ec0 	call	80033ec <prvReadBytesFromBuffer>
            xReturn = ( size_t ) xTempReturn;
 8002f38:	e0bffe17 	ldw	r2,-8(fp)
 8002f3c:	e0bffb15 	stw	r2,-20(fp)
 8002f40:	00000306 	br	8002f50 <xStreamBufferNextMessageLengthBytes+0x80>
            /* The minimum amount of bytes in a message buffer is
             * ( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
             * less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
             * value is 0. */
            configASSERT( xBytesAvailable == 0 );
            xReturn = 0;
 8002f44:	e03ffb15 	stw	zero,-20(fp)
 8002f48:	00000106 	br	8002f50 <xStreamBufferNextMessageLengthBytes+0x80>
        }
    }
    else
    {
        xReturn = 0;
 8002f4c:	e03ffb15 	stw	zero,-20(fp)
    }

    return xReturn;
 8002f50:	e0bffb17 	ldw	r2,-20(fp)
}
 8002f54:	e037883a 	mov	sp,fp
 8002f58:	dfc00117 	ldw	ra,4(sp)
 8002f5c:	df000017 	ldw	fp,0(sp)
 8002f60:	dec00204 	addi	sp,sp,8
 8002f64:	f800283a 	ret

08002f68 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void * pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f68:	defff304 	addi	sp,sp,-52
 8002f6c:	dfc00c15 	stw	ra,48(sp)
 8002f70:	df000b15 	stw	fp,44(sp)
 8002f74:	df000b04 	addi	fp,sp,44
 8002f78:	e13ffc15 	stw	r4,-16(fp)
 8002f7c:	e17ffd15 	stw	r5,-12(fp)
 8002f80:	e1bffe15 	stw	r6,-8(fp)
 8002f84:	e1ffff15 	stw	r7,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002f88:	e0bffc17 	ldw	r2,-16(fp)
 8002f8c:	e0bff915 	stw	r2,-28(fp)
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002f90:	e03ff715 	stw	zero,-36(fp)
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002f94:	e0bff917 	ldw	r2,-28(fp)
 8002f98:	10800703 	ldbu	r2,28(r2)
 8002f9c:	10803fcc 	andi	r2,r2,255
 8002fa0:	1080004c 	andi	r2,r2,1
 8002fa4:	10000326 	beq	r2,zero,8002fb4 <xStreamBufferReceiveFromISR+0x4c>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002fa8:	00800104 	movi	r2,4
 8002fac:	e0bff815 	stw	r2,-32(fp)
 8002fb0:	00000106 	br	8002fb8 <xStreamBufferReceiveFromISR+0x50>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8002fb4:	e03ff815 	stw	zero,-32(fp)
    }

    xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002fb8:	e13ff917 	ldw	r4,-28(fp)
 8002fbc:	80034cc0 	call	80034cc <prvBytesInBuffer>
 8002fc0:	e0bffa15 	stw	r2,-24(fp)
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8002fc4:	e0bffa17 	ldw	r2,-24(fp)
 8002fc8:	e0fff817 	ldw	r3,-32(fp)
 8002fcc:	1880182e 	bgeu	r3,r2,8003030 <xStreamBufferReceiveFromISR+0xc8>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 8002fd0:	e1fffa17 	ldw	r7,-24(fp)
 8002fd4:	e1bffe17 	ldw	r6,-8(fp)
 8002fd8:	e17ffd17 	ldw	r5,-12(fp)
 8002fdc:	e13ff917 	ldw	r4,-28(fp)
 8002fe0:	80030480 	call	8003048 <prvReadMessageFromBuffer>
 8002fe4:	e0bff715 	stw	r2,-36(fp)

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8002fe8:	e0bff717 	ldw	r2,-36(fp)
 8002fec:	10001026 	beq	r2,zero,8003030 <xStreamBufferReceiveFromISR+0xc8>
        {
            prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002ff0:	e03ffb15 	stw	zero,-20(fp)
 8002ff4:	e0bff917 	ldw	r2,-28(fp)
 8002ff8:	10800517 	ldw	r2,20(r2)
 8002ffc:	10000c26 	beq	r2,zero,8003030 <xStreamBufferReceiveFromISR+0xc8>
 8003000:	e0bff917 	ldw	r2,-28(fp)
 8003004:	10c00517 	ldw	r3,20(r2)
 8003008:	e0bfff17 	ldw	r2,-4(fp)
 800300c:	d8800115 	stw	r2,4(sp)
 8003010:	d8000015 	stw	zero,0(sp)
 8003014:	000f883a 	mov	r7,zero
 8003018:	000d883a 	mov	r6,zero
 800301c:	000b883a 	mov	r5,zero
 8003020:	1809883a 	mov	r4,r3
 8003024:	80065940 	call	8006594 <xTaskGenericNotifyFromISR>
 8003028:	e0bff917 	ldw	r2,-28(fp)
 800302c:	10000515 	stw	zero,20(r2)
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

    return xReceivedLength;
 8003030:	e0bff717 	ldw	r2,-36(fp)
}
 8003034:	e037883a 	mov	sp,fp
 8003038:	dfc00117 	ldw	ra,4(sp)
 800303c:	df000017 	ldw	fp,0(sp)
 8003040:	dec00204 	addi	sp,sp,8
 8003044:	f800283a 	ret

08003048 <prvReadMessageFromBuffer>:

static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable )
{
 8003048:	defff604 	addi	sp,sp,-40
 800304c:	dfc00915 	stw	ra,36(sp)
 8003050:	df000815 	stw	fp,32(sp)
 8003054:	df000804 	addi	fp,sp,32
 8003058:	e13ffc15 	stw	r4,-16(fp)
 800305c:	e17ffd15 	stw	r5,-12(fp)
 8003060:	e1bffe15 	stw	r6,-8(fp)
 8003064:	e1ffff15 	stw	r7,-4(fp)
    size_t xCount, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
    size_t xNextTail = pxStreamBuffer->xTail;
 8003068:	e0bffc17 	ldw	r2,-16(fp)
 800306c:	10800017 	ldw	r2,0(r2)
 8003070:	e0bff915 	stw	r2,-28(fp)

    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003074:	e0bffc17 	ldw	r2,-16(fp)
 8003078:	10800703 	ldbu	r2,28(r2)
 800307c:	10803fcc 	andi	r2,r2,255
 8003080:	1080004c 	andi	r2,r2,1
 8003084:	10001126 	beq	r2,zero,80030cc <prvReadMessageFromBuffer+0x84>
    {
        /* A discrete message is being received.  First receive the length
         * of the message. */
        xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 8003088:	e0bffb04 	addi	r2,fp,-20
 800308c:	e1fff917 	ldw	r7,-28(fp)
 8003090:	01800104 	movi	r6,4
 8003094:	100b883a 	mov	r5,r2
 8003098:	e13ffc17 	ldw	r4,-16(fp)
 800309c:	80033ec0 	call	80033ec <prvReadBytesFromBuffer>
 80030a0:	e0bff915 	stw	r2,-28(fp)
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80030a4:	e0bffb17 	ldw	r2,-20(fp)
 80030a8:	e0bff815 	stw	r2,-32(fp)

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80030ac:	e0bfff17 	ldw	r2,-4(fp)
 80030b0:	10bfff04 	addi	r2,r2,-4
 80030b4:	e0bfff15 	stw	r2,-4(fp)

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
 80030b8:	e0bff817 	ldw	r2,-32(fp)
 80030bc:	e0fffe17 	ldw	r3,-8(fp)
 80030c0:	1880042e 	bgeu	r3,r2,80030d4 <prvReadMessageFromBuffer+0x8c>
        {
            /* The user has provided insufficient space to read the message. */
            xNextMessageLength = 0;
 80030c4:	e03ff815 	stw	zero,-32(fp)
 80030c8:	00000206 	br	80030d4 <prvReadMessageFromBuffer+0x8c>
    }
    else
    {
        /* A stream of bytes is being received (as opposed to a discrete
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
 80030cc:	e0bffe17 	ldw	r2,-8(fp)
 80030d0:	e0bff815 	stw	r2,-32(fp)
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xNextMessageLength, xBytesAvailable );
 80030d4:	e0fff817 	ldw	r3,-32(fp)
 80030d8:	e0bfff17 	ldw	r2,-4(fp)
 80030dc:	1880012e 	bgeu	r3,r2,80030e4 <prvReadMessageFromBuffer+0x9c>
 80030e0:	1805883a 	mov	r2,r3
 80030e4:	e0bffa15 	stw	r2,-24(fp)

    if( xCount != ( size_t ) 0 )
 80030e8:	e0bffa17 	ldw	r2,-24(fp)
 80030ec:	10000826 	beq	r2,zero,8003110 <prvReadMessageFromBuffer+0xc8>
    {
        /* Read the actual data and update the tail to mark the data as officially consumed. */
        pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80030f0:	e1fff917 	ldw	r7,-28(fp)
 80030f4:	e1bffa17 	ldw	r6,-24(fp)
 80030f8:	e17ffd17 	ldw	r5,-12(fp)
 80030fc:	e13ffc17 	ldw	r4,-16(fp)
 8003100:	80033ec0 	call	80033ec <prvReadBytesFromBuffer>
 8003104:	1007883a 	mov	r3,r2
 8003108:	e0bffc17 	ldw	r2,-16(fp)
 800310c:	10c00015 	stw	r3,0(r2)
    }

    return xCount;
 8003110:	e0bffa17 	ldw	r2,-24(fp)
}
 8003114:	e037883a 	mov	sp,fp
 8003118:	dfc00117 	ldw	ra,4(sp)
 800311c:	df000017 	ldw	fp,0(sp)
 8003120:	dec00204 	addi	sp,sp,8
 8003124:	f800283a 	ret

08003128 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 8003128:	defffb04 	addi	sp,sp,-20
 800312c:	df000415 	stw	fp,16(sp)
 8003130:	df000404 	addi	fp,sp,16
 8003134:	e13fff15 	stw	r4,-4(fp)
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003138:	e0bfff17 	ldw	r2,-4(fp)
 800313c:	e0bffd15 	stw	r2,-12(fp)
    size_t xTail;

    configASSERT( pxStreamBuffer );

    /* True if no bytes are available. */
    xTail = pxStreamBuffer->xTail;
 8003140:	e0bffd17 	ldw	r2,-12(fp)
 8003144:	10800017 	ldw	r2,0(r2)
 8003148:	e0bffe15 	stw	r2,-8(fp)

    if( pxStreamBuffer->xHead == xTail )
 800314c:	e0bffd17 	ldw	r2,-12(fp)
 8003150:	10c00117 	ldw	r3,4(r2)
 8003154:	e0bffe17 	ldw	r2,-8(fp)
 8003158:	1880031e 	bne	r3,r2,8003168 <xStreamBufferIsEmpty+0x40>
    {
        xReturn = pdTRUE;
 800315c:	00800044 	movi	r2,1
 8003160:	e0bffc15 	stw	r2,-16(fp)
 8003164:	00000106 	br	800316c <xStreamBufferIsEmpty+0x44>
    }
    else
    {
        xReturn = pdFALSE;
 8003168:	e03ffc15 	stw	zero,-16(fp)
    }

    return xReturn;
 800316c:	e0bffc17 	ldw	r2,-16(fp)
}
 8003170:	e037883a 	mov	sp,fp
 8003174:	df000017 	ldw	fp,0(sp)
 8003178:	dec00104 	addi	sp,sp,4
 800317c:	f800283a 	ret

08003180 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 8003180:	defffa04 	addi	sp,sp,-24
 8003184:	dfc00515 	stw	ra,20(sp)
 8003188:	df000415 	stw	fp,16(sp)
 800318c:	df000404 	addi	fp,sp,16
 8003190:	e13fff15 	stw	r4,-4(fp)
    BaseType_t xReturn;
    size_t xBytesToStoreMessageLength;
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003194:	e0bfff17 	ldw	r2,-4(fp)
 8003198:	e0bffe15 	stw	r2,-8(fp)

    /* This generic version of the receive function is used by both message
     * buffers, which store discrete messages, and stream buffers, which store a
     * continuous stream of bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800319c:	e0bffe17 	ldw	r2,-8(fp)
 80031a0:	10800703 	ldbu	r2,28(r2)
 80031a4:	10803fcc 	andi	r2,r2,255
 80031a8:	1080004c 	andi	r2,r2,1
 80031ac:	10000326 	beq	r2,zero,80031bc <xStreamBufferIsFull+0x3c>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80031b0:	00800104 	movi	r2,4
 80031b4:	e0bffd15 	stw	r2,-12(fp)
 80031b8:	00000106 	br	80031c0 <xStreamBufferIsFull+0x40>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 80031bc:	e03ffd15 	stw	zero,-12(fp)
    }

    /* True if the available space equals zero. */
    if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 80031c0:	e13fff17 	ldw	r4,-4(fp)
 80031c4:	80028f80 	call	80028f8 <xStreamBufferSpacesAvailable>
 80031c8:	1007883a 	mov	r3,r2
 80031cc:	e0bffd17 	ldw	r2,-12(fp)
 80031d0:	10c00336 	bltu	r2,r3,80031e0 <xStreamBufferIsFull+0x60>
    {
        xReturn = pdTRUE;
 80031d4:	00800044 	movi	r2,1
 80031d8:	e0bffc15 	stw	r2,-16(fp)
 80031dc:	00000106 	br	80031e4 <xStreamBufferIsFull+0x64>
    }
    else
    {
        xReturn = pdFALSE;
 80031e0:	e03ffc15 	stw	zero,-16(fp)
    }

    return xReturn;
 80031e4:	e0bffc17 	ldw	r2,-16(fp)
}
 80031e8:	e037883a 	mov	sp,fp
 80031ec:	dfc00117 	ldw	ra,4(sp)
 80031f0:	df000017 	ldw	fp,0(sp)
 80031f4:	dec00204 	addi	sp,sp,8
 80031f8:	f800283a 	ret

080031fc <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                              BaseType_t * pxHigherPriorityTaskWoken )
{
 80031fc:	defff704 	addi	sp,sp,-36
 8003200:	dfc00815 	stw	ra,32(sp)
 8003204:	df000715 	stw	fp,28(sp)
 8003208:	df000704 	addi	fp,sp,28
 800320c:	e13ffe15 	stw	r4,-8(fp)
 8003210:	e17fff15 	stw	r5,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003214:	e0bffe17 	ldw	r2,-8(fp)
 8003218:	e0bffc15 	stw	r2,-16(fp)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 800321c:	e03ffd15 	stw	zero,-12(fp)
    {
        if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8003220:	e0bffc17 	ldw	r2,-16(fp)
 8003224:	10800417 	ldw	r2,16(r2)
 8003228:	10000f26 	beq	r2,zero,8003268 <xStreamBufferSendCompletedFromISR+0x6c>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 800322c:	e0bffc17 	ldw	r2,-16(fp)
 8003230:	10c00417 	ldw	r3,16(r2)
 8003234:	e0bfff17 	ldw	r2,-4(fp)
 8003238:	d8800115 	stw	r2,4(sp)
 800323c:	d8000015 	stw	zero,0(sp)
 8003240:	000f883a 	mov	r7,zero
 8003244:	000d883a 	mov	r6,zero
 8003248:	000b883a 	mov	r5,zero
 800324c:	1809883a 	mov	r4,r3
 8003250:	80065940 	call	8006594 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8003254:	e0bffc17 	ldw	r2,-16(fp)
 8003258:	10000415 	stw	zero,16(r2)
            xReturn = pdTRUE;
 800325c:	00800044 	movi	r2,1
 8003260:	e0bffb15 	stw	r2,-20(fp)
 8003264:	00000106 	br	800326c <xStreamBufferSendCompletedFromISR+0x70>
        }
        else
        {
            xReturn = pdFALSE;
 8003268:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800326c:	e0bffb17 	ldw	r2,-20(fp)
}
 8003270:	e037883a 	mov	sp,fp
 8003274:	dfc00117 	ldw	ra,4(sp)
 8003278:	df000017 	ldw	fp,0(sp)
 800327c:	dec00204 	addi	sp,sp,8
 8003280:	f800283a 	ret

08003284 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
                                                 BaseType_t * pxHigherPriorityTaskWoken )
{
 8003284:	defff704 	addi	sp,sp,-36
 8003288:	dfc00815 	stw	ra,32(sp)
 800328c:	df000715 	stw	fp,28(sp)
 8003290:	df000704 	addi	fp,sp,28
 8003294:	e13ffe15 	stw	r4,-8(fp)
 8003298:	e17fff15 	stw	r5,-4(fp)
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800329c:	e0bffe17 	ldw	r2,-8(fp)
 80032a0:	e0bffc15 	stw	r2,-16(fp)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;

    configASSERT( pxStreamBuffer );

    uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 80032a4:	e03ffd15 	stw	zero,-12(fp)
    {
        if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 80032a8:	e0bffc17 	ldw	r2,-16(fp)
 80032ac:	10800517 	ldw	r2,20(r2)
 80032b0:	10000f26 	beq	r2,zero,80032f0 <xStreamBufferReceiveCompletedFromISR+0x6c>
        {
            ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 80032b4:	e0bffc17 	ldw	r2,-16(fp)
 80032b8:	10c00517 	ldw	r3,20(r2)
 80032bc:	e0bfff17 	ldw	r2,-4(fp)
 80032c0:	d8800115 	stw	r2,4(sp)
 80032c4:	d8000015 	stw	zero,0(sp)
 80032c8:	000f883a 	mov	r7,zero
 80032cc:	000d883a 	mov	r6,zero
 80032d0:	000b883a 	mov	r5,zero
 80032d4:	1809883a 	mov	r4,r3
 80032d8:	80065940 	call	8006594 <xTaskGenericNotifyFromISR>
                                         ( uint32_t ) 0,
                                         eNoAction,
                                         pxHigherPriorityTaskWoken );
            ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 80032dc:	e0bffc17 	ldw	r2,-16(fp)
 80032e0:	10000515 	stw	zero,20(r2)
            xReturn = pdTRUE;
 80032e4:	00800044 	movi	r2,1
 80032e8:	e0bffb15 	stw	r2,-20(fp)
 80032ec:	00000106 	br	80032f4 <xStreamBufferReceiveCompletedFromISR+0x70>
        }
        else
        {
            xReturn = pdFALSE;
 80032f0:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032f4:	e0bffb17 	ldw	r2,-20(fp)
}
 80032f8:	e037883a 	mov	sp,fp
 80032fc:	dfc00117 	ldw	ra,4(sp)
 8003300:	df000017 	ldw	fp,0(sp)
 8003304:	dec00204 	addi	sp,sp,8
 8003308:	f800283a 	ret

0800330c <prvWriteBytesToBuffer>:

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount,
                                     size_t xHead )
{
 800330c:	defff904 	addi	sp,sp,-28
 8003310:	dfc00615 	stw	ra,24(sp)
 8003314:	df000515 	stw	fp,20(sp)
 8003318:	df000504 	addi	fp,sp,20
 800331c:	e13ffc15 	stw	r4,-16(fp)
 8003320:	e17ffd15 	stw	r5,-12(fp)
 8003324:	e1bffe15 	stw	r6,-8(fp)
 8003328:	e1ffff15 	stw	r7,-4(fp)
    configASSERT( xCount > ( size_t ) 0 );

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 800332c:	e0bffc17 	ldw	r2,-16(fp)
 8003330:	10c00217 	ldw	r3,8(r2)
 8003334:	e0bfff17 	ldw	r2,-4(fp)
 8003338:	1885c83a 	sub	r2,r3,r2
 800333c:	e0fffe17 	ldw	r3,-8(fp)
 8003340:	1880012e 	bgeu	r3,r2,8003348 <prvWriteBytesToBuffer+0x3c>
 8003344:	1805883a 	mov	r2,r3
 8003348:	e0bffb15 	stw	r2,-20(fp)

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800334c:	e0bffc17 	ldw	r2,-16(fp)
 8003350:	10c00617 	ldw	r3,24(r2)
 8003354:	e0bfff17 	ldw	r2,-4(fp)
 8003358:	1885883a 	add	r2,r3,r2
 800335c:	e1bffb17 	ldw	r6,-20(fp)
 8003360:	e17ffd17 	ldw	r5,-12(fp)
 8003364:	1009883a 	mov	r4,r2
 8003368:	80072540 	call	8007254 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 800336c:	e0bffe17 	ldw	r2,-8(fp)
 8003370:	e0fffb17 	ldw	r3,-20(fp)
 8003374:	18800a2e 	bgeu	r3,r2,80033a0 <prvWriteBytesToBuffer+0x94>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003378:	e0bffc17 	ldw	r2,-16(fp)
 800337c:	11000617 	ldw	r4,24(r2)
 8003380:	e0fffd17 	ldw	r3,-12(fp)
 8003384:	e0bffb17 	ldw	r2,-20(fp)
 8003388:	188b883a 	add	r5,r3,r2
 800338c:	e0fffe17 	ldw	r3,-8(fp)
 8003390:	e0bffb17 	ldw	r2,-20(fp)
 8003394:	1885c83a 	sub	r2,r3,r2
 8003398:	100d883a 	mov	r6,r2
 800339c:	80072540 	call	8007254 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xHead += xCount;
 80033a0:	e0ffff17 	ldw	r3,-4(fp)
 80033a4:	e0bffe17 	ldw	r2,-8(fp)
 80033a8:	1885883a 	add	r2,r3,r2
 80033ac:	e0bfff15 	stw	r2,-4(fp)

    if( xHead >= pxStreamBuffer->xLength )
 80033b0:	e0bffc17 	ldw	r2,-16(fp)
 80033b4:	10800217 	ldw	r2,8(r2)
 80033b8:	e0ffff17 	ldw	r3,-4(fp)
 80033bc:	18800536 	bltu	r3,r2,80033d4 <prvWriteBytesToBuffer+0xc8>
    {
        xHead -= pxStreamBuffer->xLength;
 80033c0:	e0bffc17 	ldw	r2,-16(fp)
 80033c4:	10800217 	ldw	r2,8(r2)
 80033c8:	e0ffff17 	ldw	r3,-4(fp)
 80033cc:	1885c83a 	sub	r2,r3,r2
 80033d0:	e0bfff15 	stw	r2,-4(fp)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xHead;
 80033d4:	e0bfff17 	ldw	r2,-4(fp)
}
 80033d8:	e037883a 	mov	sp,fp
 80033dc:	dfc00117 	ldw	ra,4(sp)
 80033e0:	df000017 	ldw	fp,0(sp)
 80033e4:	dec00204 	addi	sp,sp,8
 80033e8:	f800283a 	ret

080033ec <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xCount,
                                      size_t xTail )
{
 80033ec:	defff904 	addi	sp,sp,-28
 80033f0:	dfc00615 	stw	ra,24(sp)
 80033f4:	df000515 	stw	fp,20(sp)
 80033f8:	df000504 	addi	fp,sp,20
 80033fc:	e13ffc15 	stw	r4,-16(fp)
 8003400:	e17ffd15 	stw	r5,-12(fp)
 8003404:	e1bffe15 	stw	r6,-8(fp)
 8003408:	e1ffff15 	stw	r7,-4(fp)
    configASSERT( xCount != ( size_t ) 0 );

    /* Calculate the number of bytes that can be read - which may be
     * less than the number wanted if the data wraps around to the start of
     * the buffer. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 800340c:	e0bffc17 	ldw	r2,-16(fp)
 8003410:	10c00217 	ldw	r3,8(r2)
 8003414:	e0bfff17 	ldw	r2,-4(fp)
 8003418:	1885c83a 	sub	r2,r3,r2
 800341c:	e0fffe17 	ldw	r3,-8(fp)
 8003420:	1880012e 	bgeu	r3,r2,8003428 <prvReadBytesFromBuffer+0x3c>
 8003424:	1805883a 	mov	r2,r3
 8003428:	e0bffb15 	stw	r2,-20(fp)

    /* Obtain the number of bytes it is possible to obtain in the first
     * read.  Asserts check bounds of read and write. */
    configASSERT( xFirstLength <= xCount );
    configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800342c:	e0bffc17 	ldw	r2,-16(fp)
 8003430:	10c00617 	ldw	r3,24(r2)
 8003434:	e0bfff17 	ldw	r2,-4(fp)
 8003438:	1885883a 	add	r2,r3,r2
 800343c:	e1bffb17 	ldw	r6,-20(fp)
 8003440:	100b883a 	mov	r5,r2
 8003444:	e13ffd17 	ldw	r4,-12(fp)
 8003448:	80072540 	call	8007254 <memcpy>

    /* If the total number of wanted bytes is greater than the number
     * that could be read in the first read... */
    if( xCount > xFirstLength )
 800344c:	e0bffe17 	ldw	r2,-8(fp)
 8003450:	e0fffb17 	ldw	r3,-20(fp)
 8003454:	18800a2e 	bgeu	r3,r2,8003480 <prvReadBytesFromBuffer+0x94>
    {
        /* ...then read the remaining bytes from the start of the buffer. */
        ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003458:	e0fffd17 	ldw	r3,-12(fp)
 800345c:	e0bffb17 	ldw	r2,-20(fp)
 8003460:	1889883a 	add	r4,r3,r2
 8003464:	e0bffc17 	ldw	r2,-16(fp)
 8003468:	11400617 	ldw	r5,24(r2)
 800346c:	e0fffe17 	ldw	r3,-8(fp)
 8003470:	e0bffb17 	ldw	r2,-20(fp)
 8003474:	1885c83a 	sub	r2,r3,r2
 8003478:	100d883a 	mov	r6,r2
 800347c:	80072540 	call	8007254 <memcpy>
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* Move the tail pointer to effectively remove the data read from the buffer. */
    xTail += xCount;
 8003480:	e0ffff17 	ldw	r3,-4(fp)
 8003484:	e0bffe17 	ldw	r2,-8(fp)
 8003488:	1885883a 	add	r2,r3,r2
 800348c:	e0bfff15 	stw	r2,-4(fp)

    if( xTail >= pxStreamBuffer->xLength )
 8003490:	e0bffc17 	ldw	r2,-16(fp)
 8003494:	10800217 	ldw	r2,8(r2)
 8003498:	e0ffff17 	ldw	r3,-4(fp)
 800349c:	18800536 	bltu	r3,r2,80034b4 <prvReadBytesFromBuffer+0xc8>
    {
        xTail -= pxStreamBuffer->xLength;
 80034a0:	e0bffc17 	ldw	r2,-16(fp)
 80034a4:	10800217 	ldw	r2,8(r2)
 80034a8:	e0ffff17 	ldw	r3,-4(fp)
 80034ac:	1885c83a 	sub	r2,r3,r2
 80034b0:	e0bfff15 	stw	r2,-4(fp)
    }

    return xTail;
 80034b4:	e0bfff17 	ldw	r2,-4(fp)
}
 80034b8:	e037883a 	mov	sp,fp
 80034bc:	dfc00117 	ldw	ra,4(sp)
 80034c0:	df000017 	ldw	fp,0(sp)
 80034c4:	dec00204 	addi	sp,sp,8
 80034c8:	f800283a 	ret

080034cc <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80034cc:	defffd04 	addi	sp,sp,-12
 80034d0:	df000215 	stw	fp,8(sp)
 80034d4:	df000204 	addi	fp,sp,8
 80034d8:	e13fff15 	stw	r4,-4(fp)
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80034dc:	e0bfff17 	ldw	r2,-4(fp)
 80034e0:	10c00217 	ldw	r3,8(r2)
 80034e4:	e0bfff17 	ldw	r2,-4(fp)
 80034e8:	10800117 	ldw	r2,4(r2)
 80034ec:	1885883a 	add	r2,r3,r2
 80034f0:	e0bffe15 	stw	r2,-8(fp)
    xCount -= pxStreamBuffer->xTail;
 80034f4:	e0bfff17 	ldw	r2,-4(fp)
 80034f8:	10800017 	ldw	r2,0(r2)
 80034fc:	e0fffe17 	ldw	r3,-8(fp)
 8003500:	1885c83a 	sub	r2,r3,r2
 8003504:	e0bffe15 	stw	r2,-8(fp)

    if( xCount >= pxStreamBuffer->xLength )
 8003508:	e0bfff17 	ldw	r2,-4(fp)
 800350c:	10800217 	ldw	r2,8(r2)
 8003510:	e0fffe17 	ldw	r3,-8(fp)
 8003514:	18800536 	bltu	r3,r2,800352c <prvBytesInBuffer+0x60>
    {
        xCount -= pxStreamBuffer->xLength;
 8003518:	e0bfff17 	ldw	r2,-4(fp)
 800351c:	10800217 	ldw	r2,8(r2)
 8003520:	e0fffe17 	ldw	r3,-8(fp)
 8003524:	1885c83a 	sub	r2,r3,r2
 8003528:	e0bffe15 	stw	r2,-8(fp)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 800352c:	e0bffe17 	ldw	r2,-8(fp)
}
 8003530:	e037883a 	mov	sp,fp
 8003534:	df000017 	ldw	fp,0(sp)
 8003538:	dec00104 	addi	sp,sp,4
 800353c:	f800283a 	ret

08003540 <prvInitialiseNewStreamBuffer>:
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags,
                                          StreamBufferCallbackFunction_t pxSendCompletedCallback,
                                          StreamBufferCallbackFunction_t pxReceiveCompletedCallback )
{
 8003540:	defff904 	addi	sp,sp,-28
 8003544:	dfc00615 	stw	ra,24(sp)
 8003548:	df000515 	stw	fp,20(sp)
 800354c:	df000504 	addi	fp,sp,20
 8003550:	e13ffb15 	stw	r4,-20(fp)
 8003554:	e17ffc15 	stw	r5,-16(fp)
 8003558:	e1bffd15 	stw	r6,-12(fp)
 800355c:	e1fffe15 	stw	r7,-8(fp)
 8003560:	e0800217 	ldw	r2,8(fp)
 8003564:	e0bfff05 	stb	r2,-4(fp)
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003568:	01800804 	movi	r6,32
 800356c:	000b883a 	mov	r5,zero
 8003570:	e13ffb17 	ldw	r4,-20(fp)
 8003574:	800739c0 	call	800739c <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 8003578:	e0bffb17 	ldw	r2,-20(fp)
 800357c:	e0fffc17 	ldw	r3,-16(fp)
 8003580:	10c00615 	stw	r3,24(r2)
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8003584:	e0bffb17 	ldw	r2,-20(fp)
 8003588:	e0fffd17 	ldw	r3,-12(fp)
 800358c:	10c00215 	stw	r3,8(r2)
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003590:	e0bffb17 	ldw	r2,-20(fp)
 8003594:	e0fffe17 	ldw	r3,-8(fp)
 8003598:	10c00315 	stw	r3,12(r2)
    pxStreamBuffer->ucFlags = ucFlags;
 800359c:	e0bffb17 	ldw	r2,-20(fp)
 80035a0:	e0ffff03 	ldbu	r3,-4(fp)
 80035a4:	10c00705 	stb	r3,28(r2)
    {
        ( void ) pxSendCompletedCallback;
        ( void ) pxReceiveCompletedCallback;
    }
    #endif
}
 80035a8:	0001883a 	nop
 80035ac:	e037883a 	mov	sp,fp
 80035b0:	dfc00117 	ldw	ra,4(sp)
 80035b4:	df000017 	ldw	fp,0(sp)
 80035b8:	dec00204 	addi	sp,sp,8
 80035bc:	f800283a 	ret

080035c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80035c0:	defff304 	addi	sp,sp,-52
 80035c4:	dfc00c15 	stw	ra,48(sp)
 80035c8:	df000b15 	stw	fp,44(sp)
 80035cc:	df000b04 	addi	fp,sp,44
 80035d0:	e13ffc15 	stw	r4,-16(fp)
 80035d4:	e17ffd15 	stw	r5,-12(fp)
 80035d8:	3005883a 	mov	r2,r6
 80035dc:	e1ffff15 	stw	r7,-4(fp)
 80035e0:	e0bffe0d 	sth	r2,-8(fp)
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035e4:	e0bffe0b 	ldhu	r2,-8(fp)
 80035e8:	1085883a 	add	r2,r2,r2
 80035ec:	1085883a 	add	r2,r2,r2
 80035f0:	1009883a 	mov	r4,r2
 80035f4:	800110c0 	call	800110c <pvPortMalloc>
 80035f8:	e0bffb15 	stw	r2,-20(fp)

            if( pxStack != NULL )
 80035fc:	e0bffb17 	ldw	r2,-20(fp)
 8003600:	10001026 	beq	r2,zero,8003644 <xTaskCreate+0x84>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003604:	01001404 	movi	r4,80
 8003608:	800110c0 	call	800110c <pvPortMalloc>
 800360c:	e0bff915 	stw	r2,-28(fp)

                if( pxNewTCB != NULL )
 8003610:	e0bff917 	ldw	r2,-28(fp)
 8003614:	10000826 	beq	r2,zero,8003638 <xTaskCreate+0x78>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003618:	01801404 	movi	r6,80
 800361c:	000b883a 	mov	r5,zero
 8003620:	e13ff917 	ldw	r4,-28(fp)
 8003624:	800739c0 	call	800739c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003628:	e0bff917 	ldw	r2,-28(fp)
 800362c:	e0fffb17 	ldw	r3,-20(fp)
 8003630:	10c00c15 	stw	r3,48(r2)
 8003634:	00000406 	br	8003648 <xTaskCreate+0x88>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003638:	e13ffb17 	ldw	r4,-20(fp)
 800363c:	80011f40 	call	80011f4 <vPortFree>
 8003640:	00000106 	br	8003648 <xTaskCreate+0x88>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003644:	e03ff915 	stw	zero,-28(fp)
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003648:	e0bff917 	ldw	r2,-28(fp)
 800364c:	10001226 	beq	r2,zero,8003698 <xTaskCreate+0xd8>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003650:	e0fffe0b 	ldhu	r3,-8(fp)
 8003654:	d8000315 	stw	zero,12(sp)
 8003658:	e0bff917 	ldw	r2,-28(fp)
 800365c:	d8800215 	stw	r2,8(sp)
 8003660:	e0800317 	ldw	r2,12(fp)
 8003664:	d8800115 	stw	r2,4(sp)
 8003668:	e0800217 	ldw	r2,8(fp)
 800366c:	d8800015 	stw	r2,0(sp)
 8003670:	e1ffff17 	ldw	r7,-4(fp)
 8003674:	180d883a 	mov	r6,r3
 8003678:	e17ffd17 	ldw	r5,-12(fp)
 800367c:	e13ffc17 	ldw	r4,-16(fp)
 8003680:	80036b80 	call	80036b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003684:	e13ff917 	ldw	r4,-28(fp)
 8003688:	80038700 	call	8003870 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800368c:	00800044 	movi	r2,1
 8003690:	e0bffa15 	stw	r2,-24(fp)
 8003694:	00000206 	br	80036a0 <xTaskCreate+0xe0>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003698:	00bfffc4 	movi	r2,-1
 800369c:	e0bffa15 	stw	r2,-24(fp)
        }

        return xReturn;
 80036a0:	e0bffa17 	ldw	r2,-24(fp)
    }
 80036a4:	e037883a 	mov	sp,fp
 80036a8:	dfc00117 	ldw	ra,4(sp)
 80036ac:	df000017 	ldw	fp,0(sp)
 80036b0:	dec00204 	addi	sp,sp,8
 80036b4:	f800283a 	ret

080036b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036b8:	defff804 	addi	sp,sp,-32
 80036bc:	dfc00715 	stw	ra,28(sp)
 80036c0:	df000615 	stw	fp,24(sp)
 80036c4:	df000604 	addi	fp,sp,24
 80036c8:	e13ffc15 	stw	r4,-16(fp)
 80036cc:	e17ffd15 	stw	r5,-12(fp)
 80036d0:	e1bffe15 	stw	r6,-8(fp)
 80036d4:	e1ffff15 	stw	r7,-4(fp)

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036d8:	e0800417 	ldw	r2,16(fp)
 80036dc:	10c00c17 	ldw	r3,48(r2)
 80036e0:	e0bffe17 	ldw	r2,-8(fp)
 80036e4:	1085883a 	add	r2,r2,r2
 80036e8:	1085883a 	add	r2,r2,r2
 80036ec:	100d883a 	mov	r6,r2
 80036f0:	01402944 	movi	r5,165
 80036f4:	1809883a 	mov	r4,r3
 80036f8:	800739c0 	call	800739c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036fc:	e0800417 	ldw	r2,16(fp)
 8003700:	10c00c17 	ldw	r3,48(r2)
 8003704:	e13ffe17 	ldw	r4,-8(fp)
 8003708:	00900034 	movhi	r2,16384
 800370c:	10bfffc4 	addi	r2,r2,-1
 8003710:	2085883a 	add	r2,r4,r2
 8003714:	1085883a 	add	r2,r2,r2
 8003718:	1085883a 	add	r2,r2,r2
 800371c:	1885883a 	add	r2,r3,r2
 8003720:	e0bffb15 	stw	r2,-20(fp)
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003724:	e0fffb17 	ldw	r3,-20(fp)
 8003728:	00bfff04 	movi	r2,-4
 800372c:	1884703a 	and	r2,r3,r2
 8003730:	e0bffb15 	stw	r2,-20(fp)
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003734:	e0bffd17 	ldw	r2,-12(fp)
 8003738:	10001d26 	beq	r2,zero,80037b0 <prvInitialiseNewTask+0xf8>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800373c:	e03ffa15 	stw	zero,-24(fp)
 8003740:	00001406 	br	8003794 <prvInitialiseNewTask+0xdc>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003744:	e0fffd17 	ldw	r3,-12(fp)
 8003748:	e0bffa17 	ldw	r2,-24(fp)
 800374c:	1885883a 	add	r2,r3,r2
 8003750:	10c00003 	ldbu	r3,0(r2)
 8003754:	e1000417 	ldw	r4,16(fp)
 8003758:	e0bffa17 	ldw	r2,-24(fp)
 800375c:	2085883a 	add	r2,r4,r2
 8003760:	10800d04 	addi	r2,r2,52
 8003764:	10c00005 	stb	r3,0(r2)

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003768:	e0fffd17 	ldw	r3,-12(fp)
 800376c:	e0bffa17 	ldw	r2,-24(fp)
 8003770:	1885883a 	add	r2,r3,r2
 8003774:	10800003 	ldbu	r2,0(r2)
 8003778:	10803fcc 	andi	r2,r2,255
 800377c:	1080201c 	xori	r2,r2,128
 8003780:	10bfe004 	addi	r2,r2,-128
 8003784:	10000726 	beq	r2,zero,80037a4 <prvInitialiseNewTask+0xec>
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003788:	e0bffa17 	ldw	r2,-24(fp)
 800378c:	10800044 	addi	r2,r2,1
 8003790:	e0bffa15 	stw	r2,-24(fp)
 8003794:	e0bffa17 	ldw	r2,-24(fp)
 8003798:	10800230 	cmpltui	r2,r2,8
 800379c:	103fe91e 	bne	r2,zero,8003744 <__alt_data_end+0xf8003744>
 80037a0:	00000106 	br	80037a8 <prvInitialiseNewTask+0xf0>
            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
            {
                break;
 80037a4:	0001883a 	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037a8:	e0800417 	ldw	r2,16(fp)
 80037ac:	10000ec5 	stb	zero,59(r2)
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037b0:	e0800217 	ldw	r2,8(fp)
 80037b4:	10800170 	cmpltui	r2,r2,5
 80037b8:	1000021e 	bne	r2,zero,80037c4 <prvInitialiseNewTask+0x10c>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037bc:	00800104 	movi	r2,4
 80037c0:	e0800215 	stw	r2,8(fp)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80037c4:	e0800417 	ldw	r2,16(fp)
 80037c8:	e0c00217 	ldw	r3,8(fp)
 80037cc:	10c00b15 	stw	r3,44(r2)
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80037d0:	e0800417 	ldw	r2,16(fp)
 80037d4:	e0c00217 	ldw	r3,8(fp)
 80037d8:	10c01015 	stw	r3,64(r2)
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037dc:	e0800417 	ldw	r2,16(fp)
 80037e0:	10800104 	addi	r2,r2,4
 80037e4:	1009883a 	mov	r4,r2
 80037e8:	8000b180 	call	8000b18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037ec:	e0800417 	ldw	r2,16(fp)
 80037f0:	10800604 	addi	r2,r2,24
 80037f4:	1009883a 	mov	r4,r2
 80037f8:	8000b180 	call	8000b18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037fc:	e0800417 	ldw	r2,16(fp)
 8003800:	e0c00417 	ldw	r3,16(fp)
 8003804:	10c00415 	stw	r3,16(r2)

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003808:	00c00144 	movi	r3,5
 800380c:	e0800217 	ldw	r2,8(fp)
 8003810:	1887c83a 	sub	r3,r3,r2
 8003814:	e0800417 	ldw	r2,16(fp)
 8003818:	10c00615 	stw	r3,24(r2)
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800381c:	e0800417 	ldw	r2,16(fp)
 8003820:	e0c00417 	ldw	r3,16(fp)
 8003824:	10c00915 	stw	r3,36(r2)
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003828:	e1bfff17 	ldw	r6,-4(fp)
 800382c:	e17ffc17 	ldw	r5,-16(fp)
 8003830:	e13ffb17 	ldw	r4,-20(fp)
 8003834:	8000d6c0 	call	8000d6c <pxPortInitialiseStack>
 8003838:	1007883a 	mov	r3,r2
 800383c:	e0800417 	ldw	r2,16(fp)
 8003840:	10c00015 	stw	r3,0(r2)
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003844:	e0800317 	ldw	r2,12(fp)
 8003848:	10000326 	beq	r2,zero,8003858 <prvInitialiseNewTask+0x1a0>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800384c:	e0800317 	ldw	r2,12(fp)
 8003850:	e0c00417 	ldw	r3,16(fp)
 8003854:	10c00015 	stw	r3,0(r2)
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003858:	0001883a 	nop
 800385c:	e037883a 	mov	sp,fp
 8003860:	dfc00117 	ldw	ra,4(sp)
 8003864:	df000017 	ldw	fp,0(sp)
 8003868:	dec00204 	addi	sp,sp,8
 800386c:	f800283a 	ret

08003870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003870:	defff904 	addi	sp,sp,-28
 8003874:	dfc00615 	stw	ra,24(sp)
 8003878:	df000515 	stw	fp,20(sp)
 800387c:	dc800415 	stw	r18,16(sp)
 8003880:	dc400315 	stw	r17,12(sp)
 8003884:	dc000215 	stw	r16,8(sp)
 8003888:	df000504 	addi	fp,sp,20
 800388c:	e13ffc15 	stw	r4,-16(fp)
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003890:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003894:	d0a6d317 	ldw	r2,-25780(gp)
 8003898:	10800044 	addi	r2,r2,1
 800389c:	d0a6d315 	stw	r2,-25780(gp)

        if( pxCurrentTCB == NULL )
 80038a0:	d0a6cf17 	ldw	r2,-25796(gp)
 80038a4:	1000071e 	bne	r2,zero,80038c4 <prvAddNewTaskToReadyList+0x54>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80038a8:	e0bffc17 	ldw	r2,-16(fp)
 80038ac:	d0a6cf15 	stw	r2,-25796(gp)

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038b0:	d0a6d317 	ldw	r2,-25780(gp)
 80038b4:	10800058 	cmpnei	r2,r2,1
 80038b8:	10000b1e 	bne	r2,zero,80038e8 <prvAddNewTaskToReadyList+0x78>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80038bc:	80055a40 	call	80055a4 <prvInitialiseTaskLists>
 80038c0:	00000906 	br	80038e8 <prvAddNewTaskToReadyList+0x78>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80038c4:	d0a6d617 	ldw	r2,-25768(gp)
 80038c8:	1000071e 	bne	r2,zero,80038e8 <prvAddNewTaskToReadyList+0x78>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038cc:	d0a6cf17 	ldw	r2,-25796(gp)
 80038d0:	10800b17 	ldw	r2,44(r2)
 80038d4:	e0fffc17 	ldw	r3,-16(fp)
 80038d8:	18c00b17 	ldw	r3,44(r3)
 80038dc:	18800236 	bltu	r3,r2,80038e8 <prvAddNewTaskToReadyList+0x78>
                {
                    pxCurrentTCB = pxNewTCB;
 80038e0:	e0bffc17 	ldw	r2,-16(fp)
 80038e4:	d0a6cf15 	stw	r2,-25796(gp)
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80038e8:	d0a6da17 	ldw	r2,-25752(gp)
 80038ec:	10800044 	addi	r2,r2,1
 80038f0:	d0a6da15 	stw	r2,-25752(gp)
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80038f4:	e0bffc17 	ldw	r2,-16(fp)
 80038f8:	10800b17 	ldw	r2,44(r2)
 80038fc:	d0e6d517 	ldw	r3,-25772(gp)
 8003900:	1880032e 	bgeu	r3,r2,8003910 <prvAddNewTaskToReadyList+0xa0>
 8003904:	e0bffc17 	ldw	r2,-16(fp)
 8003908:	10800b17 	ldw	r2,44(r2)
 800390c:	d0a6d515 	stw	r2,-25772(gp)
 8003910:	e0bffc17 	ldw	r2,-16(fp)
 8003914:	10800b17 	ldw	r2,44(r2)
 8003918:	040220b4 	movhi	r16,2178
 800391c:	8427ff04 	addi	r16,r16,-24580
 8003920:	01400504 	movi	r5,20
 8003924:	1009883a 	mov	r4,r2
 8003928:	800722c0 	call	800722c <__mulsi3>
 800392c:	8085883a 	add	r2,r16,r2
 8003930:	10800104 	addi	r2,r2,4
 8003934:	10800017 	ldw	r2,0(r2)
 8003938:	e0bffb15 	stw	r2,-20(fp)
 800393c:	e0bffc17 	ldw	r2,-16(fp)
 8003940:	e0fffb17 	ldw	r3,-20(fp)
 8003944:	10c00215 	stw	r3,8(r2)
 8003948:	e0bffb17 	ldw	r2,-20(fp)
 800394c:	10c00217 	ldw	r3,8(r2)
 8003950:	e0bffc17 	ldw	r2,-16(fp)
 8003954:	10c00315 	stw	r3,12(r2)
 8003958:	e0bffb17 	ldw	r2,-20(fp)
 800395c:	10800217 	ldw	r2,8(r2)
 8003960:	e0fffc17 	ldw	r3,-16(fp)
 8003964:	18c00104 	addi	r3,r3,4
 8003968:	10c00115 	stw	r3,4(r2)
 800396c:	e0bffc17 	ldw	r2,-16(fp)
 8003970:	10c00104 	addi	r3,r2,4
 8003974:	e0bffb17 	ldw	r2,-20(fp)
 8003978:	10c00215 	stw	r3,8(r2)
 800397c:	e0bffc17 	ldw	r2,-16(fp)
 8003980:	10800b17 	ldw	r2,44(r2)
 8003984:	01400504 	movi	r5,20
 8003988:	1009883a 	mov	r4,r2
 800398c:	800722c0 	call	800722c <__mulsi3>
 8003990:	1007883a 	mov	r3,r2
 8003994:	008220b4 	movhi	r2,2178
 8003998:	10a7ff04 	addi	r2,r2,-24580
 800399c:	1887883a 	add	r3,r3,r2
 80039a0:	e0bffc17 	ldw	r2,-16(fp)
 80039a4:	10c00515 	stw	r3,20(r2)
 80039a8:	e0bffc17 	ldw	r2,-16(fp)
 80039ac:	14800b17 	ldw	r18,44(r2)
 80039b0:	040220b4 	movhi	r16,2178
 80039b4:	8427ff04 	addi	r16,r16,-24580
 80039b8:	01400504 	movi	r5,20
 80039bc:	9009883a 	mov	r4,r18
 80039c0:	800722c0 	call	800722c <__mulsi3>
 80039c4:	8085883a 	add	r2,r16,r2
 80039c8:	10800017 	ldw	r2,0(r2)
 80039cc:	14400044 	addi	r17,r2,1
 80039d0:	040220b4 	movhi	r16,2178
 80039d4:	8427ff04 	addi	r16,r16,-24580
 80039d8:	01400504 	movi	r5,20
 80039dc:	9009883a 	mov	r4,r18
 80039e0:	800722c0 	call	800722c <__mulsi3>
 80039e4:	8085883a 	add	r2,r16,r2
 80039e8:	14400015 	stw	r17,0(r2)

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80039ec:	8005e980 	call	8005e98 <vTaskExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80039f0:	d0a6d617 	ldw	r2,-25768(gp)
 80039f4:	10000626 	beq	r2,zero,8003a10 <prvAddNewTaskToReadyList+0x1a0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039f8:	d0a6cf17 	ldw	r2,-25796(gp)
 80039fc:	10c00b17 	ldw	r3,44(r2)
 8003a00:	e0bffc17 	ldw	r2,-16(fp)
 8003a04:	10800b17 	ldw	r2,44(r2)
 8003a08:	1880012e 	bgeu	r3,r2,8003a10 <prvAddNewTaskToReadyList+0x1a0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003a0c:	003b683a 	trap	0
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a10:	0001883a 	nop
 8003a14:	e6fffd04 	addi	sp,fp,-12
 8003a18:	dfc00417 	ldw	ra,16(sp)
 8003a1c:	df000317 	ldw	fp,12(sp)
 8003a20:	dc800217 	ldw	r18,8(sp)
 8003a24:	dc400117 	ldw	r17,4(sp)
 8003a28:	dc000017 	ldw	r16,0(sp)
 8003a2c:	dec00504 	addi	sp,sp,20
 8003a30:	f800283a 	ret

08003a34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003a34:	defffc04 	addi	sp,sp,-16
 8003a38:	dfc00315 	stw	ra,12(sp)
 8003a3c:	df000215 	stw	fp,8(sp)
 8003a40:	df000204 	addi	fp,sp,8
 8003a44:	e13fff15 	stw	r4,-4(fp)
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003a48:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a4c:	e0bfff17 	ldw	r2,-4(fp)
 8003a50:	1000021e 	bne	r2,zero,8003a5c <vTaskDelete+0x28>
 8003a54:	d0a6cf17 	ldw	r2,-25796(gp)
 8003a58:	00000106 	br	8003a60 <vTaskDelete+0x2c>
 8003a5c:	e0bfff17 	ldw	r2,-4(fp)
 8003a60:	e0bffe15 	stw	r2,-8(fp)

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a64:	e0bffe17 	ldw	r2,-8(fp)
 8003a68:	10800104 	addi	r2,r2,4
 8003a6c:	1009883a 	mov	r4,r2
 8003a70:	8000ca80 	call	8000ca8 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a74:	e0bffe17 	ldw	r2,-8(fp)
 8003a78:	10800a17 	ldw	r2,40(r2)
 8003a7c:	10000426 	beq	r2,zero,8003a90 <vTaskDelete+0x5c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a80:	e0bffe17 	ldw	r2,-8(fp)
 8003a84:	10800604 	addi	r2,r2,24
 8003a88:	1009883a 	mov	r4,r2
 8003a8c:	8000ca80 	call	8000ca8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003a90:	d0a6da17 	ldw	r2,-25752(gp)
 8003a94:	10800044 	addi	r2,r2,1
 8003a98:	d0a6da15 	stw	r2,-25752(gp)

            if( pxTCB == pxCurrentTCB )
 8003a9c:	d0a6cf17 	ldw	r2,-25796(gp)
 8003aa0:	e0fffe17 	ldw	r3,-8(fp)
 8003aa4:	18800a1e 	bne	r3,r2,8003ad0 <vTaskDelete+0x9c>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003aa8:	e0bffe17 	ldw	r2,-8(fp)
 8003aac:	10800104 	addi	r2,r2,4
 8003ab0:	100b883a 	mov	r5,r2
 8003ab4:	010220b4 	movhi	r4,2178
 8003ab8:	21282704 	addi	r4,r4,-24420
 8003abc:	8000b440 	call	8000b44 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003ac0:	d0a6d217 	ldw	r2,-25784(gp)
 8003ac4:	10800044 	addi	r2,r2,1
 8003ac8:	d0a6d215 	stw	r2,-25784(gp)
 8003acc:	00000406 	br	8003ae0 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003ad0:	d0a6d317 	ldw	r2,-25780(gp)
 8003ad4:	10bfffc4 	addi	r2,r2,-1
 8003ad8:	d0a6d315 	stw	r2,-25780(gp)
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003adc:	80057ec0 	call	80057ec <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003ae0:	8005e980 	call	8005e98 <vTaskExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8003ae4:	d0a6cf17 	ldw	r2,-25796(gp)
 8003ae8:	e0fffe17 	ldw	r3,-8(fp)
 8003aec:	18800226 	beq	r3,r2,8003af8 <vTaskDelete+0xc4>
        {
            prvDeleteTCB( pxTCB );
 8003af0:	e13ffe17 	ldw	r4,-8(fp)
 8003af4:	80057a80 	call	80057a8 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003af8:	d0a6d617 	ldw	r2,-25768(gp)
 8003afc:	10000426 	beq	r2,zero,8003b10 <vTaskDelete+0xdc>
        {
            if( pxTCB == pxCurrentTCB )
 8003b00:	d0a6cf17 	ldw	r2,-25796(gp)
 8003b04:	e0fffe17 	ldw	r3,-8(fp)
 8003b08:	1880011e 	bne	r3,r2,8003b10 <vTaskDelete+0xdc>
            {
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8003b0c:	003b683a 	trap	0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003b10:	0001883a 	nop
 8003b14:	e037883a 	mov	sp,fp
 8003b18:	dfc00117 	ldw	ra,4(sp)
 8003b1c:	df000017 	ldw	fp,0(sp)
 8003b20:	dec00204 	addi	sp,sp,8
 8003b24:	f800283a 	ret

08003b28 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003b28:	defff804 	addi	sp,sp,-32
 8003b2c:	dfc00715 	stw	ra,28(sp)
 8003b30:	df000615 	stw	fp,24(sp)
 8003b34:	df000604 	addi	fp,sp,24
 8003b38:	e13ffe15 	stw	r4,-8(fp)
 8003b3c:	e17fff15 	stw	r5,-4(fp)
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003b40:	e03ffa15 	stw	zero,-24(fp)

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );
        configASSERT( uxSchedulerSuspended == 0 );

        vTaskSuspendAll();
 8003b44:	80045480 	call	8004548 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003b48:	d0a6d417 	ldw	r2,-25776(gp)
 8003b4c:	e0bffb15 	stw	r2,-20(fp)

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003b50:	e0bffe17 	ldw	r2,-8(fp)
 8003b54:	10c00017 	ldw	r3,0(r2)
 8003b58:	e0bfff17 	ldw	r2,-4(fp)
 8003b5c:	1885883a 	add	r2,r3,r2
 8003b60:	e0bffc15 	stw	r2,-16(fp)

            if( xConstTickCount < *pxPreviousWakeTime )
 8003b64:	e0bffe17 	ldw	r2,-8(fp)
 8003b68:	10800017 	ldw	r2,0(r2)
 8003b6c:	e0fffb17 	ldw	r3,-20(fp)
 8003b70:	18800a2e 	bgeu	r3,r2,8003b9c <xTaskDelayUntil+0x74>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003b74:	e0bffe17 	ldw	r2,-8(fp)
 8003b78:	10800017 	ldw	r2,0(r2)
 8003b7c:	e0fffc17 	ldw	r3,-16(fp)
 8003b80:	18800f2e 	bgeu	r3,r2,8003bc0 <xTaskDelayUntil+0x98>
 8003b84:	e0bffc17 	ldw	r2,-16(fp)
 8003b88:	e0fffb17 	ldw	r3,-20(fp)
 8003b8c:	18800c2e 	bgeu	r3,r2,8003bc0 <xTaskDelayUntil+0x98>
                {
                    xShouldDelay = pdTRUE;
 8003b90:	00800044 	movi	r2,1
 8003b94:	e0bffa15 	stw	r2,-24(fp)
 8003b98:	00000906 	br	8003bc0 <xTaskDelayUntil+0x98>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003b9c:	e0bffe17 	ldw	r2,-8(fp)
 8003ba0:	10800017 	ldw	r2,0(r2)
 8003ba4:	e0fffc17 	ldw	r3,-16(fp)
 8003ba8:	18800336 	bltu	r3,r2,8003bb8 <xTaskDelayUntil+0x90>
 8003bac:	e0bffc17 	ldw	r2,-16(fp)
 8003bb0:	e0fffb17 	ldw	r3,-20(fp)
 8003bb4:	1880022e 	bgeu	r3,r2,8003bc0 <xTaskDelayUntil+0x98>
                {
                    xShouldDelay = pdTRUE;
 8003bb8:	00800044 	movi	r2,1
 8003bbc:	e0bffa15 	stw	r2,-24(fp)
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003bc0:	e0bffe17 	ldw	r2,-8(fp)
 8003bc4:	e0fffc17 	ldw	r3,-16(fp)
 8003bc8:	10c00015 	stw	r3,0(r2)

            if( xShouldDelay != pdFALSE )
 8003bcc:	e0bffa17 	ldw	r2,-24(fp)
 8003bd0:	10000626 	beq	r2,zero,8003bec <xTaskDelayUntil+0xc4>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003bd4:	e0fffc17 	ldw	r3,-16(fp)
 8003bd8:	e0bffb17 	ldw	r2,-20(fp)
 8003bdc:	1885c83a 	sub	r2,r3,r2
 8003be0:	000b883a 	mov	r5,zero
 8003be4:	1009883a 	mov	r4,r2
 8003be8:	8006dec0 	call	8006dec <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003bec:	80045740 	call	8004574 <xTaskResumeAll>
 8003bf0:	e0bffd15 	stw	r2,-12(fp)

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003bf4:	e0bffd17 	ldw	r2,-12(fp)
 8003bf8:	1000011e 	bne	r2,zero,8003c00 <xTaskDelayUntil+0xd8>
        {
            portYIELD_WITHIN_API();
 8003bfc:	003b683a 	trap	0
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003c00:	e0bffa17 	ldw	r2,-24(fp)
    }
 8003c04:	e037883a 	mov	sp,fp
 8003c08:	dfc00117 	ldw	ra,4(sp)
 8003c0c:	df000017 	ldw	fp,0(sp)
 8003c10:	dec00204 	addi	sp,sp,8
 8003c14:	f800283a 	ret

08003c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003c18:	defffc04 	addi	sp,sp,-16
 8003c1c:	dfc00315 	stw	ra,12(sp)
 8003c20:	df000215 	stw	fp,8(sp)
 8003c24:	df000204 	addi	fp,sp,8
 8003c28:	e13fff15 	stw	r4,-4(fp)
        BaseType_t xAlreadyYielded = pdFALSE;
 8003c2c:	e03ffe15 	stw	zero,-8(fp)

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003c30:	e0bfff17 	ldw	r2,-4(fp)
 8003c34:	10000626 	beq	r2,zero,8003c50 <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8003c38:	80045480 	call	8004548 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c3c:	000b883a 	mov	r5,zero
 8003c40:	e13fff17 	ldw	r4,-4(fp)
 8003c44:	8006dec0 	call	8006dec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003c48:	80045740 	call	8004574 <xTaskResumeAll>
 8003c4c:	e0bffe15 	stw	r2,-8(fp)
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003c50:	e0bffe17 	ldw	r2,-8(fp)
 8003c54:	1000011e 	bne	r2,zero,8003c5c <vTaskDelay+0x44>
        {
            portYIELD_WITHIN_API();
 8003c58:	003b683a 	trap	0
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003c5c:	0001883a 	nop
 8003c60:	e037883a 	mov	sp,fp
 8003c64:	dfc00117 	ldw	ra,4(sp)
 8003c68:	df000017 	ldw	fp,0(sp)
 8003c6c:	dec00204 	addi	sp,sp,8
 8003c70:	f800283a 	ret

08003c74 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8003c74:	defffb04 	addi	sp,sp,-20
 8003c78:	dfc00415 	stw	ra,16(sp)
 8003c7c:	df000315 	stw	fp,12(sp)
 8003c80:	df000304 	addi	fp,sp,12
 8003c84:	e13fff15 	stw	r4,-4(fp)
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8003c88:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003c8c:	e0bfff17 	ldw	r2,-4(fp)
 8003c90:	1000021e 	bne	r2,zero,8003c9c <uxTaskPriorityGet+0x28>
 8003c94:	d0a6cf17 	ldw	r2,-25796(gp)
 8003c98:	00000106 	br	8003ca0 <uxTaskPriorityGet+0x2c>
 8003c9c:	e0bfff17 	ldw	r2,-4(fp)
 8003ca0:	e0bffd15 	stw	r2,-12(fp)
            uxReturn = pxTCB->uxPriority;
 8003ca4:	e0bffd17 	ldw	r2,-12(fp)
 8003ca8:	10800b17 	ldw	r2,44(r2)
 8003cac:	e0bffe15 	stw	r2,-8(fp)
        }
        taskEXIT_CRITICAL();
 8003cb0:	8005e980 	call	8005e98 <vTaskExitCritical>

        return uxReturn;
 8003cb4:	e0bffe17 	ldw	r2,-8(fp)
    }
 8003cb8:	e037883a 	mov	sp,fp
 8003cbc:	dfc00117 	ldw	ra,4(sp)
 8003cc0:	df000017 	ldw	fp,0(sp)
 8003cc4:	dec00204 	addi	sp,sp,8
 8003cc8:	f800283a 	ret

08003ccc <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
    {
 8003ccc:	defffb04 	addi	sp,sp,-20
 8003cd0:	df000415 	stw	fp,16(sp)
 8003cd4:	df000404 	addi	fp,sp,16
 8003cd8:	e13fff15 	stw	r4,-4(fp)
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cdc:	e03ffc15 	stw	zero,-16(fp)
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003ce0:	e0bfff17 	ldw	r2,-4(fp)
 8003ce4:	1000021e 	bne	r2,zero,8003cf0 <uxTaskPriorityGetFromISR+0x24>
 8003ce8:	d0a6cf17 	ldw	r2,-25796(gp)
 8003cec:	00000106 	br	8003cf4 <uxTaskPriorityGetFromISR+0x28>
 8003cf0:	e0bfff17 	ldw	r2,-4(fp)
 8003cf4:	e0bffd15 	stw	r2,-12(fp)
            uxReturn = pxTCB->uxPriority;
 8003cf8:	e0bffd17 	ldw	r2,-12(fp)
 8003cfc:	10800b17 	ldw	r2,44(r2)
 8003d00:	e0bffe15 	stw	r2,-8(fp)
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

        return uxReturn;
 8003d04:	e0bffe17 	ldw	r2,-8(fp)
    }
 8003d08:	e037883a 	mov	sp,fp
 8003d0c:	df000017 	ldw	fp,0(sp)
 8003d10:	dec00104 	addi	sp,sp,4
 8003d14:	f800283a 	ret

08003d18 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8003d18:	defff404 	addi	sp,sp,-48
 8003d1c:	dfc00b15 	stw	ra,44(sp)
 8003d20:	df000a15 	stw	fp,40(sp)
 8003d24:	dc800915 	stw	r18,36(sp)
 8003d28:	dc400815 	stw	r17,32(sp)
 8003d2c:	dc000715 	stw	r16,28(sp)
 8003d30:	df000a04 	addi	fp,sp,40
 8003d34:	e13ffb15 	stw	r4,-20(fp)
 8003d38:	e17ffc15 	stw	r5,-16(fp)
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8003d3c:	e03ff615 	stw	zero,-40(fp)

        configASSERT( uxNewPriority < configMAX_PRIORITIES );

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d40:	e0bffc17 	ldw	r2,-16(fp)
 8003d44:	10800170 	cmpltui	r2,r2,5
 8003d48:	1000021e 	bne	r2,zero,8003d54 <vTaskPrioritySet+0x3c>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d4c:	00800104 	movi	r2,4
 8003d50:	e0bffc15 	stw	r2,-16(fp)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003d54:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003d58:	e0bffb17 	ldw	r2,-20(fp)
 8003d5c:	1000021e 	bne	r2,zero,8003d68 <vTaskPrioritySet+0x50>
 8003d60:	d0a6cf17 	ldw	r2,-25796(gp)
 8003d64:	00000106 	br	8003d6c <vTaskPrioritySet+0x54>
 8003d68:	e0bffb17 	ldw	r2,-20(fp)
 8003d6c:	e0bff715 	stw	r2,-36(fp)

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003d70:	e0bff717 	ldw	r2,-36(fp)
 8003d74:	10801017 	ldw	r2,64(r2)
 8003d78:	e0bff815 	stw	r2,-32(fp)
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8003d7c:	e0fff817 	ldw	r3,-32(fp)
 8003d80:	e0bffc17 	ldw	r2,-16(fp)
 8003d84:	18807726 	beq	r3,r2,8003f64 <vTaskPrioritySet+0x24c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003d88:	e0bffc17 	ldw	r2,-16(fp)
 8003d8c:	e0fff817 	ldw	r3,-32(fp)
 8003d90:	18800a2e 	bgeu	r3,r2,8003dbc <vTaskPrioritySet+0xa4>
                {
                    if( pxTCB != pxCurrentTCB )
 8003d94:	d0a6cf17 	ldw	r2,-25796(gp)
 8003d98:	e0fff717 	ldw	r3,-36(fp)
 8003d9c:	18800c26 	beq	r3,r2,8003dd0 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003da0:	d0a6cf17 	ldw	r2,-25796(gp)
 8003da4:	10800b17 	ldw	r2,44(r2)
 8003da8:	e0fffc17 	ldw	r3,-16(fp)
 8003dac:	18800836 	bltu	r3,r2,8003dd0 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 8003db0:	00800044 	movi	r2,1
 8003db4:	e0bff615 	stw	r2,-40(fp)
 8003db8:	00000506 	br	8003dd0 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8003dbc:	d0a6cf17 	ldw	r2,-25796(gp)
 8003dc0:	e0fff717 	ldw	r3,-36(fp)
 8003dc4:	1880021e 	bne	r3,r2,8003dd0 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8003dc8:	00800044 	movi	r2,1
 8003dcc:	e0bff615 	stw	r2,-40(fp)
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003dd0:	e0bff717 	ldw	r2,-36(fp)
 8003dd4:	10800b17 	ldw	r2,44(r2)
 8003dd8:	e0bff915 	stw	r2,-28(fp)

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003ddc:	e0bff717 	ldw	r2,-36(fp)
 8003de0:	10c01017 	ldw	r3,64(r2)
 8003de4:	e0bff717 	ldw	r2,-36(fp)
 8003de8:	10800b17 	ldw	r2,44(r2)
 8003dec:	1880031e 	bne	r3,r2,8003dfc <vTaskPrioritySet+0xe4>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8003df0:	e0bff717 	ldw	r2,-36(fp)
 8003df4:	e0fffc17 	ldw	r3,-16(fp)
 8003df8:	10c00b15 	stw	r3,44(r2)
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8003dfc:	e0bff717 	ldw	r2,-36(fp)
 8003e00:	e0fffc17 	ldw	r3,-16(fp)
 8003e04:	10c01015 	stw	r3,64(r2)
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e08:	e0bff717 	ldw	r2,-36(fp)
 8003e0c:	10800617 	ldw	r2,24(r2)
 8003e10:	10000516 	blt	r2,zero,8003e28 <vTaskPrioritySet+0x110>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e14:	00c00144 	movi	r3,5
 8003e18:	e0bffc17 	ldw	r2,-16(fp)
 8003e1c:	1887c83a 	sub	r3,r3,r2
 8003e20:	e0bff717 	ldw	r2,-36(fp)
 8003e24:	10c00615 	stw	r3,24(r2)

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e28:	e0bff717 	ldw	r2,-36(fp)
 8003e2c:	14000517 	ldw	r16,20(r2)
 8003e30:	01400504 	movi	r5,20
 8003e34:	e13ff917 	ldw	r4,-28(fp)
 8003e38:	800722c0 	call	800722c <__mulsi3>
 8003e3c:	1007883a 	mov	r3,r2
 8003e40:	008220b4 	movhi	r2,2178
 8003e44:	10a7ff04 	addi	r2,r2,-24580
 8003e48:	1885883a 	add	r2,r3,r2
 8003e4c:	8080421e 	bne	r16,r2,8003f58 <vTaskPrioritySet+0x240>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e50:	e0bff717 	ldw	r2,-36(fp)
 8003e54:	10800104 	addi	r2,r2,4
 8003e58:	1009883a 	mov	r4,r2
 8003e5c:	8000ca80 	call	8000ca8 <uxListRemove>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8003e60:	e0bff717 	ldw	r2,-36(fp)
 8003e64:	10800b17 	ldw	r2,44(r2)
 8003e68:	d0e6d517 	ldw	r3,-25772(gp)
 8003e6c:	1880032e 	bgeu	r3,r2,8003e7c <vTaskPrioritySet+0x164>
 8003e70:	e0bff717 	ldw	r2,-36(fp)
 8003e74:	10800b17 	ldw	r2,44(r2)
 8003e78:	d0a6d515 	stw	r2,-25772(gp)
 8003e7c:	e0bff717 	ldw	r2,-36(fp)
 8003e80:	10800b17 	ldw	r2,44(r2)
 8003e84:	040220b4 	movhi	r16,2178
 8003e88:	8427ff04 	addi	r16,r16,-24580
 8003e8c:	01400504 	movi	r5,20
 8003e90:	1009883a 	mov	r4,r2
 8003e94:	800722c0 	call	800722c <__mulsi3>
 8003e98:	8085883a 	add	r2,r16,r2
 8003e9c:	10800104 	addi	r2,r2,4
 8003ea0:	10800017 	ldw	r2,0(r2)
 8003ea4:	e0bffa15 	stw	r2,-24(fp)
 8003ea8:	e0bff717 	ldw	r2,-36(fp)
 8003eac:	e0fffa17 	ldw	r3,-24(fp)
 8003eb0:	10c00215 	stw	r3,8(r2)
 8003eb4:	e0bffa17 	ldw	r2,-24(fp)
 8003eb8:	10c00217 	ldw	r3,8(r2)
 8003ebc:	e0bff717 	ldw	r2,-36(fp)
 8003ec0:	10c00315 	stw	r3,12(r2)
 8003ec4:	e0bffa17 	ldw	r2,-24(fp)
 8003ec8:	10800217 	ldw	r2,8(r2)
 8003ecc:	e0fff717 	ldw	r3,-36(fp)
 8003ed0:	18c00104 	addi	r3,r3,4
 8003ed4:	10c00115 	stw	r3,4(r2)
 8003ed8:	e0bff717 	ldw	r2,-36(fp)
 8003edc:	10c00104 	addi	r3,r2,4
 8003ee0:	e0bffa17 	ldw	r2,-24(fp)
 8003ee4:	10c00215 	stw	r3,8(r2)
 8003ee8:	e0bff717 	ldw	r2,-36(fp)
 8003eec:	10800b17 	ldw	r2,44(r2)
 8003ef0:	01400504 	movi	r5,20
 8003ef4:	1009883a 	mov	r4,r2
 8003ef8:	800722c0 	call	800722c <__mulsi3>
 8003efc:	1007883a 	mov	r3,r2
 8003f00:	008220b4 	movhi	r2,2178
 8003f04:	10a7ff04 	addi	r2,r2,-24580
 8003f08:	1887883a 	add	r3,r3,r2
 8003f0c:	e0bff717 	ldw	r2,-36(fp)
 8003f10:	10c00515 	stw	r3,20(r2)
 8003f14:	e0bff717 	ldw	r2,-36(fp)
 8003f18:	14800b17 	ldw	r18,44(r2)
 8003f1c:	040220b4 	movhi	r16,2178
 8003f20:	8427ff04 	addi	r16,r16,-24580
 8003f24:	01400504 	movi	r5,20
 8003f28:	9009883a 	mov	r4,r18
 8003f2c:	800722c0 	call	800722c <__mulsi3>
 8003f30:	8085883a 	add	r2,r16,r2
 8003f34:	10800017 	ldw	r2,0(r2)
 8003f38:	14400044 	addi	r17,r2,1
 8003f3c:	040220b4 	movhi	r16,2178
 8003f40:	8427ff04 	addi	r16,r16,-24580
 8003f44:	01400504 	movi	r5,20
 8003f48:	9009883a 	mov	r4,r18
 8003f4c:	800722c0 	call	800722c <__mulsi3>
 8003f50:	8085883a 	add	r2,r16,r2
 8003f54:	14400015 	stw	r17,0(r2)
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8003f58:	e0bff617 	ldw	r2,-40(fp)
 8003f5c:	10000126 	beq	r2,zero,8003f64 <vTaskPrioritySet+0x24c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8003f60:	003b683a 	trap	0
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003f64:	8005e980 	call	8005e98 <vTaskExitCritical>
    }
 8003f68:	0001883a 	nop
 8003f6c:	e6fffd04 	addi	sp,fp,-12
 8003f70:	dfc00417 	ldw	ra,16(sp)
 8003f74:	df000317 	ldw	fp,12(sp)
 8003f78:	dc800217 	ldw	r18,8(sp)
 8003f7c:	dc400117 	ldw	r17,4(sp)
 8003f80:	dc000017 	ldw	r16,0(sp)
 8003f84:	dec00504 	addi	sp,sp,20
 8003f88:	f800283a 	ret

08003f8c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003f8c:	defffb04 	addi	sp,sp,-20
 8003f90:	dfc00415 	stw	ra,16(sp)
 8003f94:	df000315 	stw	fp,12(sp)
 8003f98:	df000304 	addi	fp,sp,12
 8003f9c:	e13fff15 	stw	r4,-4(fp)
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003fa0:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003fa4:	e0bfff17 	ldw	r2,-4(fp)
 8003fa8:	1000021e 	bne	r2,zero,8003fb4 <vTaskSuspend+0x28>
 8003fac:	d0a6cf17 	ldw	r2,-25796(gp)
 8003fb0:	00000106 	br	8003fb8 <vTaskSuspend+0x2c>
 8003fb4:	e0bfff17 	ldw	r2,-4(fp)
 8003fb8:	e0bffe15 	stw	r2,-8(fp)

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fbc:	e0bffe17 	ldw	r2,-8(fp)
 8003fc0:	10800104 	addi	r2,r2,4
 8003fc4:	1009883a 	mov	r4,r2
 8003fc8:	8000ca80 	call	8000ca8 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fcc:	e0bffe17 	ldw	r2,-8(fp)
 8003fd0:	10800a17 	ldw	r2,40(r2)
 8003fd4:	10000426 	beq	r2,zero,8003fe8 <vTaskSuspend+0x5c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fd8:	e0bffe17 	ldw	r2,-8(fp)
 8003fdc:	10800604 	addi	r2,r2,24
 8003fe0:	1009883a 	mov	r4,r2
 8003fe4:	8000ca80 	call	8000ca8 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003fe8:	e0bffe17 	ldw	r2,-8(fp)
 8003fec:	10800104 	addi	r2,r2,4
 8003ff0:	100b883a 	mov	r5,r2
 8003ff4:	010220b4 	movhi	r4,2178
 8003ff8:	21282c04 	addi	r4,r4,-24400
 8003ffc:	8000b440 	call	8000b44 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004000:	e03ffd15 	stw	zero,-12(fp)
 8004004:	00001006 	br	8004048 <vTaskSuspend+0xbc>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004008:	e0fffe17 	ldw	r3,-8(fp)
 800400c:	e0bffd17 	ldw	r2,-12(fp)
 8004010:	1885883a 	add	r2,r3,r2
 8004014:	10801304 	addi	r2,r2,76
 8004018:	10800003 	ldbu	r2,0(r2)
 800401c:	10803fcc 	andi	r2,r2,255
 8004020:	10800058 	cmpnei	r2,r2,1
 8004024:	1000051e 	bne	r2,zero,800403c <vTaskSuspend+0xb0>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004028:	e0fffe17 	ldw	r3,-8(fp)
 800402c:	e0bffd17 	ldw	r2,-12(fp)
 8004030:	1885883a 	add	r2,r3,r2
 8004034:	10801304 	addi	r2,r2,76
 8004038:	10000005 	stb	zero,0(r2)

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800403c:	e0bffd17 	ldw	r2,-12(fp)
 8004040:	10800044 	addi	r2,r2,1
 8004044:	e0bffd15 	stw	r2,-12(fp)
 8004048:	e0bffd17 	ldw	r2,-12(fp)
 800404c:	00bfee0e 	bge	zero,r2,8004008 <__alt_data_end+0xf8004008>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004050:	8005e980 	call	8005e98 <vTaskExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004054:	d0a6d617 	ldw	r2,-25768(gp)
 8004058:	10000326 	beq	r2,zero,8004068 <vTaskSuspend+0xdc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 800405c:	8005e440 	call	8005e44 <vTaskEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004060:	80057ec0 	call	80057ec <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004064:	8005e980 	call	8005e98 <vTaskExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004068:	d0a6cf17 	ldw	r2,-25796(gp)
 800406c:	e0fffe17 	ldw	r3,-8(fp)
 8004070:	18800c1e 	bne	r3,r2,80040a4 <vTaskSuspend+0x118>
        {
            if( xSchedulerRunning != pdFALSE )
 8004074:	d0a6d617 	ldw	r2,-25768(gp)
 8004078:	10000226 	beq	r2,zero,8004084 <vTaskSuspend+0xf8>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 800407c:	003b683a 	trap	0
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004080:	00000806 	br	80040a4 <vTaskSuspend+0x118>
            else
            {
                /* The scheduler is not running, but the task that was pointed
                 * to by pxCurrentTCB has just been suspended and pxCurrentTCB
                 * must be adjusted to point to a different task. */
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004084:	008220b4 	movhi	r2,2178
 8004088:	10a82c04 	addi	r2,r2,-24400
 800408c:	10c00017 	ldw	r3,0(r2)
 8004090:	d0a6d317 	ldw	r2,-25780(gp)
 8004094:	1880021e 	bne	r3,r2,80040a0 <vTaskSuspend+0x114>
                {
                    /* No other tasks are ready, so set pxCurrentTCB back to
                     * NULL so when the next task is created pxCurrentTCB will
                     * be set to point to it no matter what its relative priority
                     * is. */
                    pxCurrentTCB = NULL;
 8004098:	d026cf15 	stw	zero,-25796(gp)
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800409c:	00000106 	br	80040a4 <vTaskSuspend+0x118>
                     * is. */
                    pxCurrentTCB = NULL;
                }
                else
                {
                    vTaskSwitchContext();
 80040a0:	8004ca80 	call	8004ca8 <vTaskSwitchContext>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80040a4:	0001883a 	nop
 80040a8:	e037883a 	mov	sp,fp
 80040ac:	dfc00117 	ldw	ra,4(sp)
 80040b0:	df000017 	ldw	fp,0(sp)
 80040b4:	dec00204 	addi	sp,sp,8
 80040b8:	f800283a 	ret

080040bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80040bc:	defffc04 	addi	sp,sp,-16
 80040c0:	df000315 	stw	fp,12(sp)
 80040c4:	df000304 	addi	fp,sp,12
 80040c8:	e13fff15 	stw	r4,-4(fp)
        BaseType_t xReturn = pdFALSE;
 80040cc:	e03ffd15 	stw	zero,-12(fp)
        const TCB_t * const pxTCB = xTask;
 80040d0:	e0bfff17 	ldw	r2,-4(fp)
 80040d4:	e0bffe15 	stw	r2,-8(fp)

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040d8:	e0bffe17 	ldw	r2,-8(fp)
 80040dc:	10c00517 	ldw	r3,20(r2)
 80040e0:	008220b4 	movhi	r2,2178
 80040e4:	10a82c04 	addi	r2,r2,-24400
 80040e8:	18800a1e 	bne	r3,r2,8004114 <prvTaskIsTaskSuspended+0x58>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80040ec:	e0bffe17 	ldw	r2,-8(fp)
 80040f0:	10c00a17 	ldw	r3,40(r2)
 80040f4:	008220b4 	movhi	r2,2178
 80040f8:	10a82204 	addi	r2,r2,-24440
 80040fc:	18800526 	beq	r3,r2,8004114 <prvTaskIsTaskSuspended+0x58>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004100:	e0bffe17 	ldw	r2,-8(fp)
 8004104:	10800a17 	ldw	r2,40(r2)
 8004108:	1000021e 	bne	r2,zero,8004114 <prvTaskIsTaskSuspended+0x58>
                {
                    xReturn = pdTRUE;
 800410c:	00800044 	movi	r2,1
 8004110:	e0bffd15 	stw	r2,-12(fp)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004114:	e0bffd17 	ldw	r2,-12(fp)
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004118:	e037883a 	mov	sp,fp
 800411c:	df000017 	ldw	fp,0(sp)
 8004120:	dec00104 	addi	sp,sp,4
 8004124:	f800283a 	ret

08004128 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8004128:	defff804 	addi	sp,sp,-32
 800412c:	dfc00715 	stw	ra,28(sp)
 8004130:	df000615 	stw	fp,24(sp)
 8004134:	dc800515 	stw	r18,20(sp)
 8004138:	dc400415 	stw	r17,16(sp)
 800413c:	dc000315 	stw	r16,12(sp)
 8004140:	df000604 	addi	fp,sp,24
 8004144:	e13ffc15 	stw	r4,-16(fp)
        TCB_t * const pxTCB = xTaskToResume;
 8004148:	e0bffc17 	ldw	r2,-16(fp)
 800414c:	e0bffa15 	stw	r2,-24(fp)
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004150:	d0a6cf17 	ldw	r2,-25796(gp)
 8004154:	e0fffa17 	ldw	r3,-24(fp)
 8004158:	18804f26 	beq	r3,r2,8004298 <vTaskResume+0x170>
 800415c:	e0bffa17 	ldw	r2,-24(fp)
 8004160:	10004d26 	beq	r2,zero,8004298 <vTaskResume+0x170>
        {
            taskENTER_CRITICAL();
 8004164:	8005e440 	call	8005e44 <vTaskEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004168:	e13ffa17 	ldw	r4,-24(fp)
 800416c:	80040bc0 	call	80040bc <prvTaskIsTaskSuspended>
 8004170:	10004826 	beq	r2,zero,8004294 <vTaskResume+0x16c>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004174:	e0bffa17 	ldw	r2,-24(fp)
 8004178:	10800104 	addi	r2,r2,4
 800417c:	1009883a 	mov	r4,r2
 8004180:	8000ca80 	call	8000ca8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004184:	e0bffa17 	ldw	r2,-24(fp)
 8004188:	10800b17 	ldw	r2,44(r2)
 800418c:	d0e6d517 	ldw	r3,-25772(gp)
 8004190:	1880032e 	bgeu	r3,r2,80041a0 <vTaskResume+0x78>
 8004194:	e0bffa17 	ldw	r2,-24(fp)
 8004198:	10800b17 	ldw	r2,44(r2)
 800419c:	d0a6d515 	stw	r2,-25772(gp)
 80041a0:	e0bffa17 	ldw	r2,-24(fp)
 80041a4:	10800b17 	ldw	r2,44(r2)
 80041a8:	040220b4 	movhi	r16,2178
 80041ac:	8427ff04 	addi	r16,r16,-24580
 80041b0:	01400504 	movi	r5,20
 80041b4:	1009883a 	mov	r4,r2
 80041b8:	800722c0 	call	800722c <__mulsi3>
 80041bc:	8085883a 	add	r2,r16,r2
 80041c0:	10800104 	addi	r2,r2,4
 80041c4:	10800017 	ldw	r2,0(r2)
 80041c8:	e0bffb15 	stw	r2,-20(fp)
 80041cc:	e0bffa17 	ldw	r2,-24(fp)
 80041d0:	e0fffb17 	ldw	r3,-20(fp)
 80041d4:	10c00215 	stw	r3,8(r2)
 80041d8:	e0bffb17 	ldw	r2,-20(fp)
 80041dc:	10c00217 	ldw	r3,8(r2)
 80041e0:	e0bffa17 	ldw	r2,-24(fp)
 80041e4:	10c00315 	stw	r3,12(r2)
 80041e8:	e0bffb17 	ldw	r2,-20(fp)
 80041ec:	10800217 	ldw	r2,8(r2)
 80041f0:	e0fffa17 	ldw	r3,-24(fp)
 80041f4:	18c00104 	addi	r3,r3,4
 80041f8:	10c00115 	stw	r3,4(r2)
 80041fc:	e0bffa17 	ldw	r2,-24(fp)
 8004200:	10c00104 	addi	r3,r2,4
 8004204:	e0bffb17 	ldw	r2,-20(fp)
 8004208:	10c00215 	stw	r3,8(r2)
 800420c:	e0bffa17 	ldw	r2,-24(fp)
 8004210:	10800b17 	ldw	r2,44(r2)
 8004214:	01400504 	movi	r5,20
 8004218:	1009883a 	mov	r4,r2
 800421c:	800722c0 	call	800722c <__mulsi3>
 8004220:	1007883a 	mov	r3,r2
 8004224:	008220b4 	movhi	r2,2178
 8004228:	10a7ff04 	addi	r2,r2,-24580
 800422c:	1887883a 	add	r3,r3,r2
 8004230:	e0bffa17 	ldw	r2,-24(fp)
 8004234:	10c00515 	stw	r3,20(r2)
 8004238:	e0bffa17 	ldw	r2,-24(fp)
 800423c:	14800b17 	ldw	r18,44(r2)
 8004240:	040220b4 	movhi	r16,2178
 8004244:	8427ff04 	addi	r16,r16,-24580
 8004248:	01400504 	movi	r5,20
 800424c:	9009883a 	mov	r4,r18
 8004250:	800722c0 	call	800722c <__mulsi3>
 8004254:	8085883a 	add	r2,r16,r2
 8004258:	10800017 	ldw	r2,0(r2)
 800425c:	14400044 	addi	r17,r2,1
 8004260:	040220b4 	movhi	r16,2178
 8004264:	8427ff04 	addi	r16,r16,-24580
 8004268:	01400504 	movi	r5,20
 800426c:	9009883a 	mov	r4,r18
 8004270:	800722c0 	call	800722c <__mulsi3>
 8004274:	8085883a 	add	r2,r16,r2
 8004278:	14400015 	stw	r17,0(r2)

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800427c:	e0bffa17 	ldw	r2,-24(fp)
 8004280:	10c00b17 	ldw	r3,44(r2)
 8004284:	d0a6cf17 	ldw	r2,-25796(gp)
 8004288:	10800b17 	ldw	r2,44(r2)
 800428c:	18800136 	bltu	r3,r2,8004294 <vTaskResume+0x16c>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8004290:	003b683a 	trap	0
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004294:	8005e980 	call	8005e98 <vTaskExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004298:	0001883a 	nop
 800429c:	e6fffd04 	addi	sp,fp,-12
 80042a0:	dfc00417 	ldw	ra,16(sp)
 80042a4:	df000317 	ldw	fp,12(sp)
 80042a8:	dc800217 	ldw	r18,8(sp)
 80042ac:	dc400117 	ldw	r17,4(sp)
 80042b0:	dc000017 	ldw	r16,0(sp)
 80042b4:	dec00504 	addi	sp,sp,20
 80042b8:	f800283a 	ret

080042bc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 80042bc:	defff604 	addi	sp,sp,-40
 80042c0:	dfc00915 	stw	ra,36(sp)
 80042c4:	df000815 	stw	fp,32(sp)
 80042c8:	dc800715 	stw	r18,28(sp)
 80042cc:	dc400615 	stw	r17,24(sp)
 80042d0:	dc000515 	stw	r16,20(sp)
 80042d4:	df000804 	addi	fp,sp,32
 80042d8:	e13ffc15 	stw	r4,-16(fp)
        BaseType_t xYieldRequired = pdFALSE;
 80042dc:	e03ff815 	stw	zero,-32(fp)
        TCB_t * const pxTCB = xTaskToResume;
 80042e0:	e0bffc17 	ldw	r2,-16(fp)
 80042e4:	e0bff915 	stw	r2,-28(fp)
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042e8:	e03ffa15 	stw	zero,-24(fp)
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80042ec:	e13ff917 	ldw	r4,-28(fp)
 80042f0:	80040bc0 	call	80040bc <prvTaskIsTaskSuspended>
 80042f4:	10005426 	beq	r2,zero,8004448 <xTaskResumeFromISR+0x18c>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f8:	d0a6dd17 	ldw	r2,-25740(gp)
 80042fc:	10004c1e 	bne	r2,zero,8004430 <xTaskResumeFromISR+0x174>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004300:	e0bff917 	ldw	r2,-28(fp)
 8004304:	10c00b17 	ldw	r3,44(r2)
 8004308:	d0a6cf17 	ldw	r2,-25796(gp)
 800430c:	10800b17 	ldw	r2,44(r2)
 8004310:	18800436 	bltu	r3,r2,8004324 <xTaskResumeFromISR+0x68>
                    {
                        xYieldRequired = pdTRUE;
 8004314:	00800044 	movi	r2,1
 8004318:	e0bff815 	stw	r2,-32(fp)

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 800431c:	00800044 	movi	r2,1
 8004320:	d0a6d815 	stw	r2,-25760(gp)
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004324:	e0bff917 	ldw	r2,-28(fp)
 8004328:	10800104 	addi	r2,r2,4
 800432c:	1009883a 	mov	r4,r2
 8004330:	8000ca80 	call	8000ca8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004334:	e0bff917 	ldw	r2,-28(fp)
 8004338:	10800b17 	ldw	r2,44(r2)
 800433c:	d0e6d517 	ldw	r3,-25772(gp)
 8004340:	1880032e 	bgeu	r3,r2,8004350 <xTaskResumeFromISR+0x94>
 8004344:	e0bff917 	ldw	r2,-28(fp)
 8004348:	10800b17 	ldw	r2,44(r2)
 800434c:	d0a6d515 	stw	r2,-25772(gp)
 8004350:	e0bff917 	ldw	r2,-28(fp)
 8004354:	10800b17 	ldw	r2,44(r2)
 8004358:	040220b4 	movhi	r16,2178
 800435c:	8427ff04 	addi	r16,r16,-24580
 8004360:	01400504 	movi	r5,20
 8004364:	1009883a 	mov	r4,r2
 8004368:	800722c0 	call	800722c <__mulsi3>
 800436c:	8085883a 	add	r2,r16,r2
 8004370:	10800104 	addi	r2,r2,4
 8004374:	10800017 	ldw	r2,0(r2)
 8004378:	e0bffb15 	stw	r2,-20(fp)
 800437c:	e0bff917 	ldw	r2,-28(fp)
 8004380:	e0fffb17 	ldw	r3,-20(fp)
 8004384:	10c00215 	stw	r3,8(r2)
 8004388:	e0bffb17 	ldw	r2,-20(fp)
 800438c:	10c00217 	ldw	r3,8(r2)
 8004390:	e0bff917 	ldw	r2,-28(fp)
 8004394:	10c00315 	stw	r3,12(r2)
 8004398:	e0bffb17 	ldw	r2,-20(fp)
 800439c:	10800217 	ldw	r2,8(r2)
 80043a0:	e0fff917 	ldw	r3,-28(fp)
 80043a4:	18c00104 	addi	r3,r3,4
 80043a8:	10c00115 	stw	r3,4(r2)
 80043ac:	e0bff917 	ldw	r2,-28(fp)
 80043b0:	10c00104 	addi	r3,r2,4
 80043b4:	e0bffb17 	ldw	r2,-20(fp)
 80043b8:	10c00215 	stw	r3,8(r2)
 80043bc:	e0bff917 	ldw	r2,-28(fp)
 80043c0:	10800b17 	ldw	r2,44(r2)
 80043c4:	01400504 	movi	r5,20
 80043c8:	1009883a 	mov	r4,r2
 80043cc:	800722c0 	call	800722c <__mulsi3>
 80043d0:	1007883a 	mov	r3,r2
 80043d4:	008220b4 	movhi	r2,2178
 80043d8:	10a7ff04 	addi	r2,r2,-24580
 80043dc:	1887883a 	add	r3,r3,r2
 80043e0:	e0bff917 	ldw	r2,-28(fp)
 80043e4:	10c00515 	stw	r3,20(r2)
 80043e8:	e0bff917 	ldw	r2,-28(fp)
 80043ec:	14800b17 	ldw	r18,44(r2)
 80043f0:	040220b4 	movhi	r16,2178
 80043f4:	8427ff04 	addi	r16,r16,-24580
 80043f8:	01400504 	movi	r5,20
 80043fc:	9009883a 	mov	r4,r18
 8004400:	800722c0 	call	800722c <__mulsi3>
 8004404:	8085883a 	add	r2,r16,r2
 8004408:	10800017 	ldw	r2,0(r2)
 800440c:	14400044 	addi	r17,r2,1
 8004410:	040220b4 	movhi	r16,2178
 8004414:	8427ff04 	addi	r16,r16,-24580
 8004418:	01400504 	movi	r5,20
 800441c:	9009883a 	mov	r4,r18
 8004420:	800722c0 	call	800722c <__mulsi3>
 8004424:	8085883a 	add	r2,r16,r2
 8004428:	14400015 	stw	r17,0(r2)
 800442c:	00000606 	br	8004448 <xTaskResumeFromISR+0x18c>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004430:	e0bff917 	ldw	r2,-28(fp)
 8004434:	10800604 	addi	r2,r2,24
 8004438:	100b883a 	mov	r5,r2
 800443c:	010220b4 	movhi	r4,2178
 8004440:	21282204 	addi	r4,r4,-24440
 8004444:	8000b440 	call	8000b44 <vListInsertEnd>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 8004448:	e0bff817 	ldw	r2,-32(fp)
    }
 800444c:	e6fffd04 	addi	sp,fp,-12
 8004450:	dfc00417 	ldw	ra,16(sp)
 8004454:	df000317 	ldw	fp,12(sp)
 8004458:	dc800217 	ldw	r18,8(sp)
 800445c:	dc400117 	ldw	r17,4(sp)
 8004460:	dc000017 	ldw	r16,0(sp)
 8004464:	dec00504 	addi	sp,sp,20
 8004468:	f800283a 	ret

0800446c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800446c:	defffa04 	addi	sp,sp,-24
 8004470:	dfc00515 	stw	ra,20(sp)
 8004474:	df000415 	stw	fp,16(sp)
 8004478:	df000404 	addi	fp,sp,16
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800447c:	d0a6dc04 	addi	r2,gp,-25744
 8004480:	d8800115 	stw	r2,4(sp)
 8004484:	d8000015 	stw	zero,0(sp)
 8004488:	000f883a 	mov	r7,zero
 800448c:	01810004 	movi	r6,1024
 8004490:	01420074 	movhi	r5,2049
 8004494:	29598b04 	addi	r5,r5,26156
 8004498:	01020034 	movhi	r4,2048
 800449c:	21156204 	addi	r4,r4,21896
 80044a0:	80035c00 	call	80035c0 <xTaskCreate>
 80044a4:	e0bffe15 	stw	r2,-8(fp)
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80044a8:	e0bffe17 	ldw	r2,-8(fp)
 80044ac:	10800058 	cmpnei	r2,r2,1
 80044b0:	10000c1e 	bne	r2,zero,80044e4 <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80044b4:	0005303a 	rdctl	r2,status
 80044b8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80044bc:	e0ffff17 	ldw	r3,-4(fp)
 80044c0:	00bfff84 	movi	r2,-2
 80044c4:	1884703a 	and	r2,r3,r2
 80044c8:	1001703a 	wrctl	status,r2
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80044cc:	00bfffc4 	movi	r2,-1
 80044d0:	d0a6db15 	stw	r2,-25748(gp)
        xSchedulerRunning = pdTRUE;
 80044d4:	00800044 	movi	r2,1
 80044d8:	d0a6d615 	stw	r2,-25768(gp)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044dc:	d026d415 	stw	zero,-25776(gp)

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80044e0:	8000e4c0 	call	8000e4c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80044e4:	d0a00017 	ldw	r2,-32768(gp)
}
 80044e8:	0001883a 	nop
 80044ec:	e037883a 	mov	sp,fp
 80044f0:	dfc00117 	ldw	ra,4(sp)
 80044f4:	df000017 	ldw	fp,0(sp)
 80044f8:	dec00204 	addi	sp,sp,8
 80044fc:	f800283a 	ret

08004500 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8004500:	defffd04 	addi	sp,sp,-12
 8004504:	dfc00215 	stw	ra,8(sp)
 8004508:	df000115 	stw	fp,4(sp)
 800450c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004510:	0005303a 	rdctl	r2,status
 8004514:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004518:	e0ffff17 	ldw	r3,-4(fp)
 800451c:	00bfff84 	movi	r2,-2
 8004520:	1884703a 	and	r2,r3,r2
 8004524:	1001703a 	wrctl	status,r2
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
 8004528:	d026d615 	stw	zero,-25768(gp)
    vPortEndScheduler();
 800452c:	8000e840 	call	8000e84 <vPortEndScheduler>
}
 8004530:	0001883a 	nop
 8004534:	e037883a 	mov	sp,fp
 8004538:	dfc00117 	ldw	ra,4(sp)
 800453c:	df000017 	ldw	fp,0(sp)
 8004540:	dec00204 	addi	sp,sp,8
 8004544:	f800283a 	ret

08004548 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004548:	deffff04 	addi	sp,sp,-4
 800454c:	df000015 	stw	fp,0(sp)
 8004550:	d839883a 	mov	fp,sp
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004554:	d0a6dd17 	ldw	r2,-25740(gp)
 8004558:	10800044 	addi	r2,r2,1
 800455c:	d0a6dd15 	stw	r2,-25740(gp)

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004560:	0001883a 	nop
 8004564:	e037883a 	mov	sp,fp
 8004568:	df000017 	ldw	fp,0(sp)
 800456c:	dec00104 	addi	sp,sp,4
 8004570:	f800283a 	ret

08004574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004574:	defff504 	addi	sp,sp,-44
 8004578:	dfc00a15 	stw	ra,40(sp)
 800457c:	df000915 	stw	fp,36(sp)
 8004580:	dc800815 	stw	r18,32(sp)
 8004584:	dc400715 	stw	r17,28(sp)
 8004588:	dc000615 	stw	r16,24(sp)
 800458c:	df000904 	addi	fp,sp,36
    TCB_t * pxTCB = NULL;
 8004590:	e03ff715 	stw	zero,-36(fp)
    BaseType_t xAlreadyYielded = pdFALSE;
 8004594:	e03ff815 	stw	zero,-32(fp)
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004598:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        --uxSchedulerSuspended;
 800459c:	d0a6dd17 	ldw	r2,-25740(gp)
 80045a0:	10bfffc4 	addi	r2,r2,-1
 80045a4:	d0a6dd15 	stw	r2,-25740(gp)

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a8:	d0a6dd17 	ldw	r2,-25740(gp)
 80045ac:	1000a11e 	bne	r2,zero,8004834 <xTaskResumeAll+0x2c0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b0:	d0a6d317 	ldw	r2,-25780(gp)
 80045b4:	10009f26 	beq	r2,zero,8004834 <xTaskResumeAll+0x2c0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b8:	00008406 	br	80047cc <xTaskResumeAll+0x258>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	008220b4 	movhi	r2,2178
 80045c0:	10a82204 	addi	r2,r2,-24440
 80045c4:	10800317 	ldw	r2,12(r2)
 80045c8:	10800317 	ldw	r2,12(r2)
 80045cc:	e0bff715 	stw	r2,-36(fp)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80045d0:	e0bff717 	ldw	r2,-36(fp)
 80045d4:	10800a17 	ldw	r2,40(r2)
 80045d8:	e0bffa15 	stw	r2,-24(fp)
 80045dc:	e0bff717 	ldw	r2,-36(fp)
 80045e0:	10800717 	ldw	r2,28(r2)
 80045e4:	e0fff717 	ldw	r3,-36(fp)
 80045e8:	18c00817 	ldw	r3,32(r3)
 80045ec:	10c00215 	stw	r3,8(r2)
 80045f0:	e0bff717 	ldw	r2,-36(fp)
 80045f4:	10800817 	ldw	r2,32(r2)
 80045f8:	e0fff717 	ldw	r3,-36(fp)
 80045fc:	18c00717 	ldw	r3,28(r3)
 8004600:	10c00115 	stw	r3,4(r2)
 8004604:	e0bffa17 	ldw	r2,-24(fp)
 8004608:	10c00117 	ldw	r3,4(r2)
 800460c:	e0bff717 	ldw	r2,-36(fp)
 8004610:	10800604 	addi	r2,r2,24
 8004614:	1880041e 	bne	r3,r2,8004628 <xTaskResumeAll+0xb4>
 8004618:	e0bff717 	ldw	r2,-36(fp)
 800461c:	10c00817 	ldw	r3,32(r2)
 8004620:	e0bffa17 	ldw	r2,-24(fp)
 8004624:	10c00115 	stw	r3,4(r2)
 8004628:	e0bff717 	ldw	r2,-36(fp)
 800462c:	10000a15 	stw	zero,40(r2)
 8004630:	e0bffa17 	ldw	r2,-24(fp)
 8004634:	10800017 	ldw	r2,0(r2)
 8004638:	10ffffc4 	addi	r3,r2,-1
 800463c:	e0bffa17 	ldw	r2,-24(fp)
 8004640:	10c00015 	stw	r3,0(r2)
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004644:	e0bff717 	ldw	r2,-36(fp)
 8004648:	10800517 	ldw	r2,20(r2)
 800464c:	e0bffb15 	stw	r2,-20(fp)
 8004650:	e0bff717 	ldw	r2,-36(fp)
 8004654:	10800217 	ldw	r2,8(r2)
 8004658:	e0fff717 	ldw	r3,-36(fp)
 800465c:	18c00317 	ldw	r3,12(r3)
 8004660:	10c00215 	stw	r3,8(r2)
 8004664:	e0bff717 	ldw	r2,-36(fp)
 8004668:	10800317 	ldw	r2,12(r2)
 800466c:	e0fff717 	ldw	r3,-36(fp)
 8004670:	18c00217 	ldw	r3,8(r3)
 8004674:	10c00115 	stw	r3,4(r2)
 8004678:	e0bffb17 	ldw	r2,-20(fp)
 800467c:	10c00117 	ldw	r3,4(r2)
 8004680:	e0bff717 	ldw	r2,-36(fp)
 8004684:	10800104 	addi	r2,r2,4
 8004688:	1880041e 	bne	r3,r2,800469c <xTaskResumeAll+0x128>
 800468c:	e0bff717 	ldw	r2,-36(fp)
 8004690:	10c00317 	ldw	r3,12(r2)
 8004694:	e0bffb17 	ldw	r2,-20(fp)
 8004698:	10c00115 	stw	r3,4(r2)
 800469c:	e0bff717 	ldw	r2,-36(fp)
 80046a0:	10000515 	stw	zero,20(r2)
 80046a4:	e0bffb17 	ldw	r2,-20(fp)
 80046a8:	10800017 	ldw	r2,0(r2)
 80046ac:	10ffffc4 	addi	r3,r2,-1
 80046b0:	e0bffb17 	ldw	r2,-20(fp)
 80046b4:	10c00015 	stw	r3,0(r2)
                    prvAddTaskToReadyList( pxTCB );
 80046b8:	e0bff717 	ldw	r2,-36(fp)
 80046bc:	10800b17 	ldw	r2,44(r2)
 80046c0:	d0e6d517 	ldw	r3,-25772(gp)
 80046c4:	1880032e 	bgeu	r3,r2,80046d4 <xTaskResumeAll+0x160>
 80046c8:	e0bff717 	ldw	r2,-36(fp)
 80046cc:	10800b17 	ldw	r2,44(r2)
 80046d0:	d0a6d515 	stw	r2,-25772(gp)
 80046d4:	e0bff717 	ldw	r2,-36(fp)
 80046d8:	10800b17 	ldw	r2,44(r2)
 80046dc:	040220b4 	movhi	r16,2178
 80046e0:	8427ff04 	addi	r16,r16,-24580
 80046e4:	01400504 	movi	r5,20
 80046e8:	1009883a 	mov	r4,r2
 80046ec:	800722c0 	call	800722c <__mulsi3>
 80046f0:	8085883a 	add	r2,r16,r2
 80046f4:	10800104 	addi	r2,r2,4
 80046f8:	10800017 	ldw	r2,0(r2)
 80046fc:	e0bffc15 	stw	r2,-16(fp)
 8004700:	e0bff717 	ldw	r2,-36(fp)
 8004704:	e0fffc17 	ldw	r3,-16(fp)
 8004708:	10c00215 	stw	r3,8(r2)
 800470c:	e0bffc17 	ldw	r2,-16(fp)
 8004710:	10c00217 	ldw	r3,8(r2)
 8004714:	e0bff717 	ldw	r2,-36(fp)
 8004718:	10c00315 	stw	r3,12(r2)
 800471c:	e0bffc17 	ldw	r2,-16(fp)
 8004720:	10800217 	ldw	r2,8(r2)
 8004724:	e0fff717 	ldw	r3,-36(fp)
 8004728:	18c00104 	addi	r3,r3,4
 800472c:	10c00115 	stw	r3,4(r2)
 8004730:	e0bff717 	ldw	r2,-36(fp)
 8004734:	10c00104 	addi	r3,r2,4
 8004738:	e0bffc17 	ldw	r2,-16(fp)
 800473c:	10c00215 	stw	r3,8(r2)
 8004740:	e0bff717 	ldw	r2,-36(fp)
 8004744:	10800b17 	ldw	r2,44(r2)
 8004748:	01400504 	movi	r5,20
 800474c:	1009883a 	mov	r4,r2
 8004750:	800722c0 	call	800722c <__mulsi3>
 8004754:	1007883a 	mov	r3,r2
 8004758:	008220b4 	movhi	r2,2178
 800475c:	10a7ff04 	addi	r2,r2,-24580
 8004760:	1887883a 	add	r3,r3,r2
 8004764:	e0bff717 	ldw	r2,-36(fp)
 8004768:	10c00515 	stw	r3,20(r2)
 800476c:	e0bff717 	ldw	r2,-36(fp)
 8004770:	14800b17 	ldw	r18,44(r2)
 8004774:	040220b4 	movhi	r16,2178
 8004778:	8427ff04 	addi	r16,r16,-24580
 800477c:	01400504 	movi	r5,20
 8004780:	9009883a 	mov	r4,r18
 8004784:	800722c0 	call	800722c <__mulsi3>
 8004788:	8085883a 	add	r2,r16,r2
 800478c:	10800017 	ldw	r2,0(r2)
 8004790:	14400044 	addi	r17,r2,1
 8004794:	040220b4 	movhi	r16,2178
 8004798:	8427ff04 	addi	r16,r16,-24580
 800479c:	01400504 	movi	r5,20
 80047a0:	9009883a 	mov	r4,r18
 80047a4:	800722c0 	call	800722c <__mulsi3>
 80047a8:	8085883a 	add	r2,r16,r2
 80047ac:	14400015 	stw	r17,0(r2)

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b0:	e0bff717 	ldw	r2,-36(fp)
 80047b4:	10c00b17 	ldw	r3,44(r2)
 80047b8:	d0a6cf17 	ldw	r2,-25796(gp)
 80047bc:	10800b17 	ldw	r2,44(r2)
 80047c0:	18800236 	bltu	r3,r2,80047cc <xTaskResumeAll+0x258>
                    {
                        xYieldPending = pdTRUE;
 80047c4:	00800044 	movi	r2,1
 80047c8:	d0a6d815 	stw	r2,-25760(gp)
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047cc:	008220b4 	movhi	r2,2178
 80047d0:	10a82204 	addi	r2,r2,-24440
 80047d4:	10800017 	ldw	r2,0(r2)
 80047d8:	103f781e 	bne	r2,zero,80045bc <__alt_data_end+0xf80045bc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80047dc:	e0bff717 	ldw	r2,-36(fp)
 80047e0:	10000126 	beq	r2,zero,80047e8 <xTaskResumeAll+0x274>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80047e4:	80057ec0 	call	80057ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047e8:	d0a6d717 	ldw	r2,-25764(gp)
 80047ec:	e0bff915 	stw	r2,-28(fp)

                    if( xPendedCounts > ( TickType_t ) 0U )
 80047f0:	e0bff917 	ldw	r2,-28(fp)
 80047f4:	10000a26 	beq	r2,zero,8004820 <xTaskResumeAll+0x2ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80047f8:	80049600 	call	8004960 <xTaskIncrementTick>
 80047fc:	10000226 	beq	r2,zero,8004808 <xTaskResumeAll+0x294>
                            {
                                xYieldPending = pdTRUE;
 8004800:	00800044 	movi	r2,1
 8004804:	d0a6d815 	stw	r2,-25760(gp)
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004808:	e0bff917 	ldw	r2,-28(fp)
 800480c:	10bfffc4 	addi	r2,r2,-1
 8004810:	e0bff915 	stw	r2,-28(fp)
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004814:	e0bff917 	ldw	r2,-28(fp)
 8004818:	103ff71e 	bne	r2,zero,80047f8 <__alt_data_end+0xf80047f8>

                        xPendedTicks = 0;
 800481c:	d026d715 	stw	zero,-25764(gp)
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004820:	d0a6d817 	ldw	r2,-25760(gp)
 8004824:	10000326 	beq	r2,zero,8004834 <xTaskResumeAll+0x2c0>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004828:	00800044 	movi	r2,1
 800482c:	e0bff815 	stw	r2,-32(fp)
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004830:	003b683a 	trap	0
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004834:	8005e980 	call	8005e98 <vTaskExitCritical>

    return xAlreadyYielded;
 8004838:	e0bff817 	ldw	r2,-32(fp)
}
 800483c:	e6fffd04 	addi	sp,fp,-12
 8004840:	dfc00417 	ldw	ra,16(sp)
 8004844:	df000317 	ldw	fp,12(sp)
 8004848:	dc800217 	ldw	r18,8(sp)
 800484c:	dc400117 	ldw	r17,4(sp)
 8004850:	dc000017 	ldw	r16,0(sp)
 8004854:	dec00504 	addi	sp,sp,20
 8004858:	f800283a 	ret

0800485c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800485c:	defffe04 	addi	sp,sp,-8
 8004860:	df000115 	stw	fp,4(sp)
 8004864:	df000104 	addi	fp,sp,4
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004868:	d0a6d417 	ldw	r2,-25776(gp)
 800486c:	e0bfff15 	stw	r2,-4(fp)
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004870:	e0bfff17 	ldw	r2,-4(fp)
}
 8004874:	e037883a 	mov	sp,fp
 8004878:	df000017 	ldw	fp,0(sp)
 800487c:	dec00104 	addi	sp,sp,4
 8004880:	f800283a 	ret

08004884 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004884:	defffd04 	addi	sp,sp,-12
 8004888:	df000215 	stw	fp,8(sp)
 800488c:	df000204 	addi	fp,sp,8
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004890:	e03ffe15 	stw	zero,-8(fp)
    {
        xReturn = xTickCount;
 8004894:	d0a6d417 	ldw	r2,-25776(gp)
 8004898:	e0bfff15 	stw	r2,-4(fp)
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800489c:	e0bfff17 	ldw	r2,-4(fp)
}
 80048a0:	e037883a 	mov	sp,fp
 80048a4:	df000017 	ldw	fp,0(sp)
 80048a8:	dec00104 	addi	sp,sp,4
 80048ac:	f800283a 	ret

080048b0 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80048b0:	deffff04 	addi	sp,sp,-4
 80048b4:	df000015 	stw	fp,0(sp)
 80048b8:	d839883a 	mov	fp,sp
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80048bc:	d0a6d317 	ldw	r2,-25780(gp)
}
 80048c0:	e037883a 	mov	sp,fp
 80048c4:	df000017 	ldw	fp,0(sp)
 80048c8:	dec00104 	addi	sp,sp,4
 80048cc:	f800283a 	ret

080048d0 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80048d0:	defffd04 	addi	sp,sp,-12
 80048d4:	df000215 	stw	fp,8(sp)
 80048d8:	df000204 	addi	fp,sp,8
 80048dc:	e13fff15 	stw	r4,-4(fp)
    TCB_t * pxTCB;

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80048e0:	e0bfff17 	ldw	r2,-4(fp)
 80048e4:	1000021e 	bne	r2,zero,80048f0 <pcTaskGetName+0x20>
 80048e8:	d0a6cf17 	ldw	r2,-25796(gp)
 80048ec:	00000106 	br	80048f4 <pcTaskGetName+0x24>
 80048f0:	e0bfff17 	ldw	r2,-4(fp)
 80048f4:	e0bffe15 	stw	r2,-8(fp)
    configASSERT( pxTCB );
    return &( pxTCB->pcTaskName[ 0 ] );
 80048f8:	e0bffe17 	ldw	r2,-8(fp)
 80048fc:	10800d04 	addi	r2,r2,52
}
 8004900:	e037883a 	mov	sp,fp
 8004904:	df000017 	ldw	fp,0(sp)
 8004908:	dec00104 	addi	sp,sp,4
 800490c:	f800283a 	ret

08004910 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 8004910:	defffc04 	addi	sp,sp,-16
 8004914:	dfc00315 	stw	ra,12(sp)
 8004918:	df000215 	stw	fp,8(sp)
 800491c:	df000204 	addi	fp,sp,8
 8004920:	e13fff15 	stw	r4,-4(fp)
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == 0 );

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
 8004924:	80045480 	call	8004548 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
 8004928:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        xPendedTicks += xTicksToCatchUp;
 800492c:	d0e6d717 	ldw	r3,-25764(gp)
 8004930:	e0bfff17 	ldw	r2,-4(fp)
 8004934:	1885883a 	add	r2,r3,r2
 8004938:	d0a6d715 	stw	r2,-25764(gp)
    }
    taskEXIT_CRITICAL();
 800493c:	8005e980 	call	8005e98 <vTaskExitCritical>
    xYieldOccurred = xTaskResumeAll();
 8004940:	80045740 	call	8004574 <xTaskResumeAll>
 8004944:	e0bffe15 	stw	r2,-8(fp)

    return xYieldOccurred;
 8004948:	e0bffe17 	ldw	r2,-8(fp)
}
 800494c:	e037883a 	mov	sp,fp
 8004950:	dfc00117 	ldw	ra,4(sp)
 8004954:	df000017 	ldw	fp,0(sp)
 8004958:	dec00204 	addi	sp,sp,8
 800495c:	f800283a 	ret

08004960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004960:	defff304 	addi	sp,sp,-52
 8004964:	dfc00c15 	stw	ra,48(sp)
 8004968:	df000b15 	stw	fp,44(sp)
 800496c:	dc800a15 	stw	r18,40(sp)
 8004970:	dc400915 	stw	r17,36(sp)
 8004974:	dc000815 	stw	r16,32(sp)
 8004978:	df000b04 	addi	fp,sp,44
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800497c:	e03ff515 	stw	zero,-44(fp)
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004980:	d0a6dd17 	ldw	r2,-25740(gp)
 8004984:	1000bc1e 	bne	r2,zero,8004c78 <xTaskIncrementTick+0x318>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004988:	d0a6d417 	ldw	r2,-25776(gp)
 800498c:	10800044 	addi	r2,r2,1
 8004990:	e0bff615 	stw	r2,-40(fp)

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004994:	e0bff617 	ldw	r2,-40(fp)
 8004998:	d0a6d415 	stw	r2,-25776(gp)

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800499c:	e0bff617 	ldw	r2,-40(fp)
 80049a0:	10000a1e 	bne	r2,zero,80049cc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80049a4:	d0a6d017 	ldw	r2,-25792(gp)
 80049a8:	e0bff715 	stw	r2,-36(fp)
 80049ac:	d0a6d117 	ldw	r2,-25788(gp)
 80049b0:	d0a6d015 	stw	r2,-25792(gp)
 80049b4:	e0bff717 	ldw	r2,-36(fp)
 80049b8:	d0a6d115 	stw	r2,-25788(gp)
 80049bc:	d0a6d917 	ldw	r2,-25756(gp)
 80049c0:	10800044 	addi	r2,r2,1
 80049c4:	d0a6d915 	stw	r2,-25756(gp)
 80049c8:	80057ec0 	call	80057ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80049cc:	d0a6db17 	ldw	r2,-25748(gp)
 80049d0:	e0fff617 	ldw	r3,-40(fp)
 80049d4:	18809636 	bltu	r3,r2,8004c30 <xTaskIncrementTick+0x2d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d8:	d0a6d017 	ldw	r2,-25792(gp)
 80049dc:	10800017 	ldw	r2,0(r2)
 80049e0:	1000031e 	bne	r2,zero,80049f0 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e4:	00bfffc4 	movi	r2,-1
 80049e8:	d0a6db15 	stw	r2,-25748(gp)
                    break;
 80049ec:	00009006 	br	8004c30 <xTaskIncrementTick+0x2d0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f0:	d0a6d017 	ldw	r2,-25792(gp)
 80049f4:	10800317 	ldw	r2,12(r2)
 80049f8:	10800317 	ldw	r2,12(r2)
 80049fc:	e0bff815 	stw	r2,-32(fp)
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a00:	e0bff817 	ldw	r2,-32(fp)
 8004a04:	10800117 	ldw	r2,4(r2)
 8004a08:	e0bff915 	stw	r2,-28(fp)

                    if( xConstTickCount < xItemValue )
 8004a0c:	e0fff617 	ldw	r3,-40(fp)
 8004a10:	e0bff917 	ldw	r2,-28(fp)
 8004a14:	1880032e 	bgeu	r3,r2,8004a24 <xTaskIncrementTick+0xc4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004a18:	e0bff917 	ldw	r2,-28(fp)
 8004a1c:	d0a6db15 	stw	r2,-25748(gp)
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004a20:	00008306 	br	8004c30 <xTaskIncrementTick+0x2d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a24:	e0bff817 	ldw	r2,-32(fp)
 8004a28:	10800517 	ldw	r2,20(r2)
 8004a2c:	e0bffa15 	stw	r2,-24(fp)
 8004a30:	e0bff817 	ldw	r2,-32(fp)
 8004a34:	10800217 	ldw	r2,8(r2)
 8004a38:	e0fff817 	ldw	r3,-32(fp)
 8004a3c:	18c00317 	ldw	r3,12(r3)
 8004a40:	10c00215 	stw	r3,8(r2)
 8004a44:	e0bff817 	ldw	r2,-32(fp)
 8004a48:	10800317 	ldw	r2,12(r2)
 8004a4c:	e0fff817 	ldw	r3,-32(fp)
 8004a50:	18c00217 	ldw	r3,8(r3)
 8004a54:	10c00115 	stw	r3,4(r2)
 8004a58:	e0bffa17 	ldw	r2,-24(fp)
 8004a5c:	10c00117 	ldw	r3,4(r2)
 8004a60:	e0bff817 	ldw	r2,-32(fp)
 8004a64:	10800104 	addi	r2,r2,4
 8004a68:	1880041e 	bne	r3,r2,8004a7c <xTaskIncrementTick+0x11c>
 8004a6c:	e0bff817 	ldw	r2,-32(fp)
 8004a70:	10c00317 	ldw	r3,12(r2)
 8004a74:	e0bffa17 	ldw	r2,-24(fp)
 8004a78:	10c00115 	stw	r3,4(r2)
 8004a7c:	e0bff817 	ldw	r2,-32(fp)
 8004a80:	10000515 	stw	zero,20(r2)
 8004a84:	e0bffa17 	ldw	r2,-24(fp)
 8004a88:	10800017 	ldw	r2,0(r2)
 8004a8c:	10ffffc4 	addi	r3,r2,-1
 8004a90:	e0bffa17 	ldw	r2,-24(fp)
 8004a94:	10c00015 	stw	r3,0(r2)

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a98:	e0bff817 	ldw	r2,-32(fp)
 8004a9c:	10800a17 	ldw	r2,40(r2)
 8004aa0:	10001d26 	beq	r2,zero,8004b18 <xTaskIncrementTick+0x1b8>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004aa4:	e0bff817 	ldw	r2,-32(fp)
 8004aa8:	10800a17 	ldw	r2,40(r2)
 8004aac:	e0bffb15 	stw	r2,-20(fp)
 8004ab0:	e0bff817 	ldw	r2,-32(fp)
 8004ab4:	10800717 	ldw	r2,28(r2)
 8004ab8:	e0fff817 	ldw	r3,-32(fp)
 8004abc:	18c00817 	ldw	r3,32(r3)
 8004ac0:	10c00215 	stw	r3,8(r2)
 8004ac4:	e0bff817 	ldw	r2,-32(fp)
 8004ac8:	10800817 	ldw	r2,32(r2)
 8004acc:	e0fff817 	ldw	r3,-32(fp)
 8004ad0:	18c00717 	ldw	r3,28(r3)
 8004ad4:	10c00115 	stw	r3,4(r2)
 8004ad8:	e0bffb17 	ldw	r2,-20(fp)
 8004adc:	10c00117 	ldw	r3,4(r2)
 8004ae0:	e0bff817 	ldw	r2,-32(fp)
 8004ae4:	10800604 	addi	r2,r2,24
 8004ae8:	1880041e 	bne	r3,r2,8004afc <xTaskIncrementTick+0x19c>
 8004aec:	e0bff817 	ldw	r2,-32(fp)
 8004af0:	10c00817 	ldw	r3,32(r2)
 8004af4:	e0bffb17 	ldw	r2,-20(fp)
 8004af8:	10c00115 	stw	r3,4(r2)
 8004afc:	e0bff817 	ldw	r2,-32(fp)
 8004b00:	10000a15 	stw	zero,40(r2)
 8004b04:	e0bffb17 	ldw	r2,-20(fp)
 8004b08:	10800017 	ldw	r2,0(r2)
 8004b0c:	10ffffc4 	addi	r3,r2,-1
 8004b10:	e0bffb17 	ldw	r2,-20(fp)
 8004b14:	10c00015 	stw	r3,0(r2)
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004b18:	e0bff817 	ldw	r2,-32(fp)
 8004b1c:	10800b17 	ldw	r2,44(r2)
 8004b20:	d0e6d517 	ldw	r3,-25772(gp)
 8004b24:	1880032e 	bgeu	r3,r2,8004b34 <xTaskIncrementTick+0x1d4>
 8004b28:	e0bff817 	ldw	r2,-32(fp)
 8004b2c:	10800b17 	ldw	r2,44(r2)
 8004b30:	d0a6d515 	stw	r2,-25772(gp)
 8004b34:	e0bff817 	ldw	r2,-32(fp)
 8004b38:	10800b17 	ldw	r2,44(r2)
 8004b3c:	040220b4 	movhi	r16,2178
 8004b40:	8427ff04 	addi	r16,r16,-24580
 8004b44:	01400504 	movi	r5,20
 8004b48:	1009883a 	mov	r4,r2
 8004b4c:	800722c0 	call	800722c <__mulsi3>
 8004b50:	8085883a 	add	r2,r16,r2
 8004b54:	10800104 	addi	r2,r2,4
 8004b58:	10800017 	ldw	r2,0(r2)
 8004b5c:	e0bffc15 	stw	r2,-16(fp)
 8004b60:	e0bff817 	ldw	r2,-32(fp)
 8004b64:	e0fffc17 	ldw	r3,-16(fp)
 8004b68:	10c00215 	stw	r3,8(r2)
 8004b6c:	e0bffc17 	ldw	r2,-16(fp)
 8004b70:	10c00217 	ldw	r3,8(r2)
 8004b74:	e0bff817 	ldw	r2,-32(fp)
 8004b78:	10c00315 	stw	r3,12(r2)
 8004b7c:	e0bffc17 	ldw	r2,-16(fp)
 8004b80:	10800217 	ldw	r2,8(r2)
 8004b84:	e0fff817 	ldw	r3,-32(fp)
 8004b88:	18c00104 	addi	r3,r3,4
 8004b8c:	10c00115 	stw	r3,4(r2)
 8004b90:	e0bff817 	ldw	r2,-32(fp)
 8004b94:	10c00104 	addi	r3,r2,4
 8004b98:	e0bffc17 	ldw	r2,-16(fp)
 8004b9c:	10c00215 	stw	r3,8(r2)
 8004ba0:	e0bff817 	ldw	r2,-32(fp)
 8004ba4:	10800b17 	ldw	r2,44(r2)
 8004ba8:	01400504 	movi	r5,20
 8004bac:	1009883a 	mov	r4,r2
 8004bb0:	800722c0 	call	800722c <__mulsi3>
 8004bb4:	1007883a 	mov	r3,r2
 8004bb8:	008220b4 	movhi	r2,2178
 8004bbc:	10a7ff04 	addi	r2,r2,-24580
 8004bc0:	1887883a 	add	r3,r3,r2
 8004bc4:	e0bff817 	ldw	r2,-32(fp)
 8004bc8:	10c00515 	stw	r3,20(r2)
 8004bcc:	e0bff817 	ldw	r2,-32(fp)
 8004bd0:	14800b17 	ldw	r18,44(r2)
 8004bd4:	040220b4 	movhi	r16,2178
 8004bd8:	8427ff04 	addi	r16,r16,-24580
 8004bdc:	01400504 	movi	r5,20
 8004be0:	9009883a 	mov	r4,r18
 8004be4:	800722c0 	call	800722c <__mulsi3>
 8004be8:	8085883a 	add	r2,r16,r2
 8004bec:	10800017 	ldw	r2,0(r2)
 8004bf0:	14400044 	addi	r17,r2,1
 8004bf4:	040220b4 	movhi	r16,2178
 8004bf8:	8427ff04 	addi	r16,r16,-24580
 8004bfc:	01400504 	movi	r5,20
 8004c00:	9009883a 	mov	r4,r18
 8004c04:	800722c0 	call	800722c <__mulsi3>
 8004c08:	8085883a 	add	r2,r16,r2
 8004c0c:	14400015 	stw	r17,0(r2)
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c10:	e0bff817 	ldw	r2,-32(fp)
 8004c14:	10800b17 	ldw	r2,44(r2)
 8004c18:	d0e6cf17 	ldw	r3,-25796(gp)
 8004c1c:	18c00b17 	ldw	r3,44(r3)
 8004c20:	18bf6d2e 	bgeu	r3,r2,80049d8 <__alt_data_end+0xf80049d8>
                        {
                            xSwitchRequired = pdTRUE;
 8004c24:	00800044 	movi	r2,1
 8004c28:	e0bff515 	stw	r2,-44(fp)
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    #endif /* configUSE_PREEMPTION */
                }
            }
 8004c2c:	003f6a06 	br	80049d8 <__alt_data_end+0xf80049d8>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c30:	d0a6cf17 	ldw	r2,-25796(gp)
 8004c34:	10800b17 	ldw	r2,44(r2)
 8004c38:	040220b4 	movhi	r16,2178
 8004c3c:	8427ff04 	addi	r16,r16,-24580
 8004c40:	01400504 	movi	r5,20
 8004c44:	1009883a 	mov	r4,r2
 8004c48:	800722c0 	call	800722c <__mulsi3>
 8004c4c:	8085883a 	add	r2,r16,r2
 8004c50:	10800017 	ldw	r2,0(r2)
 8004c54:	108000b0 	cmpltui	r2,r2,2
 8004c58:	1000021e 	bne	r2,zero,8004c64 <xTaskIncrementTick+0x304>
            {
                xSwitchRequired = pdTRUE;
 8004c5c:	00800044 	movi	r2,1
 8004c60:	e0bff515 	stw	r2,-44(fp)
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004c64:	d0a6d817 	ldw	r2,-25760(gp)
 8004c68:	10000626 	beq	r2,zero,8004c84 <xTaskIncrementTick+0x324>
            {
                xSwitchRequired = pdTRUE;
 8004c6c:	00800044 	movi	r2,1
 8004c70:	e0bff515 	stw	r2,-44(fp)
 8004c74:	00000306 	br	8004c84 <xTaskIncrementTick+0x324>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004c78:	d0a6d717 	ldw	r2,-25764(gp)
 8004c7c:	10800044 	addi	r2,r2,1
 8004c80:	d0a6d715 	stw	r2,-25764(gp)
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004c84:	e0bff517 	ldw	r2,-44(fp)
}
 8004c88:	e6fffd04 	addi	sp,fp,-12
 8004c8c:	dfc00417 	ldw	ra,16(sp)
 8004c90:	df000317 	ldw	fp,12(sp)
 8004c94:	dc800217 	ldw	r18,8(sp)
 8004c98:	dc400117 	ldw	r17,4(sp)
 8004c9c:	dc000017 	ldw	r16,0(sp)
 8004ca0:	dec00504 	addi	sp,sp,20
 8004ca4:	f800283a 	ret

08004ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ca8:	defffb04 	addi	sp,sp,-20
 8004cac:	dfc00415 	stw	ra,16(sp)
 8004cb0:	df000315 	stw	fp,12(sp)
 8004cb4:	dc000215 	stw	r16,8(sp)
 8004cb8:	df000304 	addi	fp,sp,12
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cbc:	d0a6dd17 	ldw	r2,-25740(gp)
 8004cc0:	10000326 	beq	r2,zero,8004cd0 <vTaskSwitchContext+0x28>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004cc4:	00800044 	movi	r2,1
 8004cc8:	d0a6d815 	stw	r2,-25760(gp)
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004ccc:	00002d06 	br	8004d84 <vTaskSwitchContext+0xdc>
         * switch. */
        xYieldPending = pdTRUE;
    }
    else
    {
        xYieldPending = pdFALSE;
 8004cd0:	d026d815 	stw	zero,-25760(gp)
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd4:	d0a6d517 	ldw	r2,-25772(gp)
 8004cd8:	e0bffd15 	stw	r2,-12(fp)
 8004cdc:	00000306 	br	8004cec <vTaskSwitchContext+0x44>
 8004ce0:	e0bffd17 	ldw	r2,-12(fp)
 8004ce4:	10bfffc4 	addi	r2,r2,-1
 8004ce8:	e0bffd15 	stw	r2,-12(fp)
 8004cec:	040220b4 	movhi	r16,2178
 8004cf0:	8427ff04 	addi	r16,r16,-24580
 8004cf4:	e0bffd17 	ldw	r2,-12(fp)
 8004cf8:	01400504 	movi	r5,20
 8004cfc:	1009883a 	mov	r4,r2
 8004d00:	800722c0 	call	800722c <__mulsi3>
 8004d04:	8085883a 	add	r2,r16,r2
 8004d08:	10800017 	ldw	r2,0(r2)
 8004d0c:	103ff426 	beq	r2,zero,8004ce0 <__alt_data_end+0xf8004ce0>
 8004d10:	01400504 	movi	r5,20
 8004d14:	e13ffd17 	ldw	r4,-12(fp)
 8004d18:	800722c0 	call	800722c <__mulsi3>
 8004d1c:	1007883a 	mov	r3,r2
 8004d20:	008220b4 	movhi	r2,2178
 8004d24:	10a7ff04 	addi	r2,r2,-24580
 8004d28:	1885883a 	add	r2,r3,r2
 8004d2c:	e0bffe15 	stw	r2,-8(fp)
 8004d30:	e0bffe17 	ldw	r2,-8(fp)
 8004d34:	10800117 	ldw	r2,4(r2)
 8004d38:	10c00117 	ldw	r3,4(r2)
 8004d3c:	e0bffe17 	ldw	r2,-8(fp)
 8004d40:	10c00115 	stw	r3,4(r2)
 8004d44:	e0bffe17 	ldw	r2,-8(fp)
 8004d48:	10c00117 	ldw	r3,4(r2)
 8004d4c:	e0bffe17 	ldw	r2,-8(fp)
 8004d50:	10800204 	addi	r2,r2,8
 8004d54:	1880051e 	bne	r3,r2,8004d6c <vTaskSwitchContext+0xc4>
 8004d58:	e0bffe17 	ldw	r2,-8(fp)
 8004d5c:	10800117 	ldw	r2,4(r2)
 8004d60:	10c00117 	ldw	r3,4(r2)
 8004d64:	e0bffe17 	ldw	r2,-8(fp)
 8004d68:	10c00115 	stw	r3,4(r2)
 8004d6c:	e0bffe17 	ldw	r2,-8(fp)
 8004d70:	10800117 	ldw	r2,4(r2)
 8004d74:	10800317 	ldw	r2,12(r2)
 8004d78:	d0a6cf15 	stw	r2,-25796(gp)
 8004d7c:	e0bffd17 	ldw	r2,-12(fp)
 8004d80:	d0a6d515 	stw	r2,-25772(gp)
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004d84:	0001883a 	nop
 8004d88:	e6ffff04 	addi	sp,fp,-4
 8004d8c:	dfc00217 	ldw	ra,8(sp)
 8004d90:	df000117 	ldw	fp,4(sp)
 8004d94:	dc000017 	ldw	r16,0(sp)
 8004d98:	dec00304 	addi	sp,sp,12
 8004d9c:	f800283a 	ret

08004da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004da0:	defffc04 	addi	sp,sp,-16
 8004da4:	dfc00315 	stw	ra,12(sp)
 8004da8:	df000215 	stw	fp,8(sp)
 8004dac:	df000204 	addi	fp,sp,8
 8004db0:	e13ffe15 	stw	r4,-8(fp)
 8004db4:	e17fff15 	stw	r5,-4(fp)
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004db8:	d0a6cf17 	ldw	r2,-25796(gp)
 8004dbc:	10800604 	addi	r2,r2,24
 8004dc0:	100b883a 	mov	r5,r2
 8004dc4:	e13ffe17 	ldw	r4,-8(fp)
 8004dc8:	8000bd00 	call	8000bd0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dcc:	01400044 	movi	r5,1
 8004dd0:	e13fff17 	ldw	r4,-4(fp)
 8004dd4:	8006dec0 	call	8006dec <prvAddCurrentTaskToDelayedList>
}
 8004dd8:	0001883a 	nop
 8004ddc:	e037883a 	mov	sp,fp
 8004de0:	dfc00117 	ldw	ra,4(sp)
 8004de4:	df000017 	ldw	fp,0(sp)
 8004de8:	dec00204 	addi	sp,sp,8
 8004dec:	f800283a 	ret

08004df0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004df0:	defffa04 	addi	sp,sp,-24
 8004df4:	dfc00515 	stw	ra,20(sp)
 8004df8:	df000415 	stw	fp,16(sp)
 8004dfc:	df000404 	addi	fp,sp,16
 8004e00:	e13ffd15 	stw	r4,-12(fp)
 8004e04:	e17ffe15 	stw	r5,-8(fp)
 8004e08:	e1bfff15 	stw	r6,-4(fp)
    configASSERT( uxSchedulerSuspended != 0 );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004e0c:	d0a6cf17 	ldw	r2,-25796(gp)
 8004e10:	e0fffe17 	ldw	r3,-8(fp)
 8004e14:	18e00034 	orhi	r3,r3,32768
 8004e18:	10c00615 	stw	r3,24(r2)
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e1c:	e0bffd17 	ldw	r2,-12(fp)
 8004e20:	10800117 	ldw	r2,4(r2)
 8004e24:	e0bffc15 	stw	r2,-16(fp)
 8004e28:	d0a6cf17 	ldw	r2,-25796(gp)
 8004e2c:	e0fffc17 	ldw	r3,-16(fp)
 8004e30:	10c00715 	stw	r3,28(r2)
 8004e34:	d0a6cf17 	ldw	r2,-25796(gp)
 8004e38:	e0fffc17 	ldw	r3,-16(fp)
 8004e3c:	18c00217 	ldw	r3,8(r3)
 8004e40:	10c00815 	stw	r3,32(r2)
 8004e44:	e0bffc17 	ldw	r2,-16(fp)
 8004e48:	10800217 	ldw	r2,8(r2)
 8004e4c:	d0e6cf17 	ldw	r3,-25796(gp)
 8004e50:	18c00604 	addi	r3,r3,24
 8004e54:	10c00115 	stw	r3,4(r2)
 8004e58:	d0a6cf17 	ldw	r2,-25796(gp)
 8004e5c:	10c00604 	addi	r3,r2,24
 8004e60:	e0bffc17 	ldw	r2,-16(fp)
 8004e64:	10c00215 	stw	r3,8(r2)
 8004e68:	d0a6cf17 	ldw	r2,-25796(gp)
 8004e6c:	e0fffd17 	ldw	r3,-12(fp)
 8004e70:	10c00a15 	stw	r3,40(r2)
 8004e74:	e0bffd17 	ldw	r2,-12(fp)
 8004e78:	10800017 	ldw	r2,0(r2)
 8004e7c:	10c00044 	addi	r3,r2,1
 8004e80:	e0bffd17 	ldw	r2,-12(fp)
 8004e84:	10c00015 	stw	r3,0(r2)

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e88:	01400044 	movi	r5,1
 8004e8c:	e13fff17 	ldw	r4,-4(fp)
 8004e90:	8006dec0 	call	8006dec <prvAddCurrentTaskToDelayedList>
}
 8004e94:	0001883a 	nop
 8004e98:	e037883a 	mov	sp,fp
 8004e9c:	dfc00117 	ldw	ra,4(sp)
 8004ea0:	df000017 	ldw	fp,0(sp)
 8004ea4:	dec00204 	addi	sp,sp,8
 8004ea8:	f800283a 	ret

08004eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004eac:	defff404 	addi	sp,sp,-48
 8004eb0:	dfc00b15 	stw	ra,44(sp)
 8004eb4:	df000a15 	stw	fp,40(sp)
 8004eb8:	dc800915 	stw	r18,36(sp)
 8004ebc:	dc400815 	stw	r17,32(sp)
 8004ec0:	dc000715 	stw	r16,28(sp)
 8004ec4:	df000a04 	addi	fp,sp,40
 8004ec8:	e13ffc15 	stw	r4,-16(fp)
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ecc:	e0bffc17 	ldw	r2,-16(fp)
 8004ed0:	10800317 	ldw	r2,12(r2)
 8004ed4:	10800317 	ldw	r2,12(r2)
 8004ed8:	e0bff715 	stw	r2,-36(fp)
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004edc:	e0bff717 	ldw	r2,-36(fp)
 8004ee0:	10800a17 	ldw	r2,40(r2)
 8004ee4:	e0bff815 	stw	r2,-32(fp)
 8004ee8:	e0bff717 	ldw	r2,-36(fp)
 8004eec:	10800717 	ldw	r2,28(r2)
 8004ef0:	e0fff717 	ldw	r3,-36(fp)
 8004ef4:	18c00817 	ldw	r3,32(r3)
 8004ef8:	10c00215 	stw	r3,8(r2)
 8004efc:	e0bff717 	ldw	r2,-36(fp)
 8004f00:	10800817 	ldw	r2,32(r2)
 8004f04:	e0fff717 	ldw	r3,-36(fp)
 8004f08:	18c00717 	ldw	r3,28(r3)
 8004f0c:	10c00115 	stw	r3,4(r2)
 8004f10:	e0bff817 	ldw	r2,-32(fp)
 8004f14:	10c00117 	ldw	r3,4(r2)
 8004f18:	e0bff717 	ldw	r2,-36(fp)
 8004f1c:	10800604 	addi	r2,r2,24
 8004f20:	1880041e 	bne	r3,r2,8004f34 <xTaskRemoveFromEventList+0x88>
 8004f24:	e0bff717 	ldw	r2,-36(fp)
 8004f28:	10c00817 	ldw	r3,32(r2)
 8004f2c:	e0bff817 	ldw	r2,-32(fp)
 8004f30:	10c00115 	stw	r3,4(r2)
 8004f34:	e0bff717 	ldw	r2,-36(fp)
 8004f38:	10000a15 	stw	zero,40(r2)
 8004f3c:	e0bff817 	ldw	r2,-32(fp)
 8004f40:	10800017 	ldw	r2,0(r2)
 8004f44:	10ffffc4 	addi	r3,r2,-1
 8004f48:	e0bff817 	ldw	r2,-32(fp)
 8004f4c:	10c00015 	stw	r3,0(r2)

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f50:	d0a6dd17 	ldw	r2,-25740(gp)
 8004f54:	10005c1e 	bne	r2,zero,80050c8 <xTaskRemoveFromEventList+0x21c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004f58:	e0bff717 	ldw	r2,-36(fp)
 8004f5c:	10800517 	ldw	r2,20(r2)
 8004f60:	e0bff915 	stw	r2,-28(fp)
 8004f64:	e0bff717 	ldw	r2,-36(fp)
 8004f68:	10800217 	ldw	r2,8(r2)
 8004f6c:	e0fff717 	ldw	r3,-36(fp)
 8004f70:	18c00317 	ldw	r3,12(r3)
 8004f74:	10c00215 	stw	r3,8(r2)
 8004f78:	e0bff717 	ldw	r2,-36(fp)
 8004f7c:	10800317 	ldw	r2,12(r2)
 8004f80:	e0fff717 	ldw	r3,-36(fp)
 8004f84:	18c00217 	ldw	r3,8(r3)
 8004f88:	10c00115 	stw	r3,4(r2)
 8004f8c:	e0bff917 	ldw	r2,-28(fp)
 8004f90:	10c00117 	ldw	r3,4(r2)
 8004f94:	e0bff717 	ldw	r2,-36(fp)
 8004f98:	10800104 	addi	r2,r2,4
 8004f9c:	1880041e 	bne	r3,r2,8004fb0 <xTaskRemoveFromEventList+0x104>
 8004fa0:	e0bff717 	ldw	r2,-36(fp)
 8004fa4:	10c00317 	ldw	r3,12(r2)
 8004fa8:	e0bff917 	ldw	r2,-28(fp)
 8004fac:	10c00115 	stw	r3,4(r2)
 8004fb0:	e0bff717 	ldw	r2,-36(fp)
 8004fb4:	10000515 	stw	zero,20(r2)
 8004fb8:	e0bff917 	ldw	r2,-28(fp)
 8004fbc:	10800017 	ldw	r2,0(r2)
 8004fc0:	10ffffc4 	addi	r3,r2,-1
 8004fc4:	e0bff917 	ldw	r2,-28(fp)
 8004fc8:	10c00015 	stw	r3,0(r2)
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004fcc:	e0bff717 	ldw	r2,-36(fp)
 8004fd0:	10800b17 	ldw	r2,44(r2)
 8004fd4:	d0e6d517 	ldw	r3,-25772(gp)
 8004fd8:	1880032e 	bgeu	r3,r2,8004fe8 <xTaskRemoveFromEventList+0x13c>
 8004fdc:	e0bff717 	ldw	r2,-36(fp)
 8004fe0:	10800b17 	ldw	r2,44(r2)
 8004fe4:	d0a6d515 	stw	r2,-25772(gp)
 8004fe8:	e0bff717 	ldw	r2,-36(fp)
 8004fec:	10800b17 	ldw	r2,44(r2)
 8004ff0:	040220b4 	movhi	r16,2178
 8004ff4:	8427ff04 	addi	r16,r16,-24580
 8004ff8:	01400504 	movi	r5,20
 8004ffc:	1009883a 	mov	r4,r2
 8005000:	800722c0 	call	800722c <__mulsi3>
 8005004:	8085883a 	add	r2,r16,r2
 8005008:	10800104 	addi	r2,r2,4
 800500c:	10800017 	ldw	r2,0(r2)
 8005010:	e0bffa15 	stw	r2,-24(fp)
 8005014:	e0bff717 	ldw	r2,-36(fp)
 8005018:	e0fffa17 	ldw	r3,-24(fp)
 800501c:	10c00215 	stw	r3,8(r2)
 8005020:	e0bffa17 	ldw	r2,-24(fp)
 8005024:	10c00217 	ldw	r3,8(r2)
 8005028:	e0bff717 	ldw	r2,-36(fp)
 800502c:	10c00315 	stw	r3,12(r2)
 8005030:	e0bffa17 	ldw	r2,-24(fp)
 8005034:	10800217 	ldw	r2,8(r2)
 8005038:	e0fff717 	ldw	r3,-36(fp)
 800503c:	18c00104 	addi	r3,r3,4
 8005040:	10c00115 	stw	r3,4(r2)
 8005044:	e0bff717 	ldw	r2,-36(fp)
 8005048:	10c00104 	addi	r3,r2,4
 800504c:	e0bffa17 	ldw	r2,-24(fp)
 8005050:	10c00215 	stw	r3,8(r2)
 8005054:	e0bff717 	ldw	r2,-36(fp)
 8005058:	10800b17 	ldw	r2,44(r2)
 800505c:	01400504 	movi	r5,20
 8005060:	1009883a 	mov	r4,r2
 8005064:	800722c0 	call	800722c <__mulsi3>
 8005068:	1007883a 	mov	r3,r2
 800506c:	008220b4 	movhi	r2,2178
 8005070:	10a7ff04 	addi	r2,r2,-24580
 8005074:	1887883a 	add	r3,r3,r2
 8005078:	e0bff717 	ldw	r2,-36(fp)
 800507c:	10c00515 	stw	r3,20(r2)
 8005080:	e0bff717 	ldw	r2,-36(fp)
 8005084:	14800b17 	ldw	r18,44(r2)
 8005088:	040220b4 	movhi	r16,2178
 800508c:	8427ff04 	addi	r16,r16,-24580
 8005090:	01400504 	movi	r5,20
 8005094:	9009883a 	mov	r4,r18
 8005098:	800722c0 	call	800722c <__mulsi3>
 800509c:	8085883a 	add	r2,r16,r2
 80050a0:	10800017 	ldw	r2,0(r2)
 80050a4:	14400044 	addi	r17,r2,1
 80050a8:	040220b4 	movhi	r16,2178
 80050ac:	8427ff04 	addi	r16,r16,-24580
 80050b0:	01400504 	movi	r5,20
 80050b4:	9009883a 	mov	r4,r18
 80050b8:	800722c0 	call	800722c <__mulsi3>
 80050bc:	8085883a 	add	r2,r16,r2
 80050c0:	14400015 	stw	r17,0(r2)
 80050c4:	00001f06 	br	8005144 <xTaskRemoveFromEventList+0x298>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050c8:	008220b4 	movhi	r2,2178
 80050cc:	10a82204 	addi	r2,r2,-24440
 80050d0:	10800117 	ldw	r2,4(r2)
 80050d4:	e0bffb15 	stw	r2,-20(fp)
 80050d8:	e0bff717 	ldw	r2,-36(fp)
 80050dc:	e0fffb17 	ldw	r3,-20(fp)
 80050e0:	10c00715 	stw	r3,28(r2)
 80050e4:	e0bffb17 	ldw	r2,-20(fp)
 80050e8:	10c00217 	ldw	r3,8(r2)
 80050ec:	e0bff717 	ldw	r2,-36(fp)
 80050f0:	10c00815 	stw	r3,32(r2)
 80050f4:	e0bffb17 	ldw	r2,-20(fp)
 80050f8:	10800217 	ldw	r2,8(r2)
 80050fc:	e0fff717 	ldw	r3,-36(fp)
 8005100:	18c00604 	addi	r3,r3,24
 8005104:	10c00115 	stw	r3,4(r2)
 8005108:	e0bff717 	ldw	r2,-36(fp)
 800510c:	10c00604 	addi	r3,r2,24
 8005110:	e0bffb17 	ldw	r2,-20(fp)
 8005114:	10c00215 	stw	r3,8(r2)
 8005118:	e0fff717 	ldw	r3,-36(fp)
 800511c:	008220b4 	movhi	r2,2178
 8005120:	10a82204 	addi	r2,r2,-24440
 8005124:	18800a15 	stw	r2,40(r3)
 8005128:	008220b4 	movhi	r2,2178
 800512c:	10a82204 	addi	r2,r2,-24440
 8005130:	10800017 	ldw	r2,0(r2)
 8005134:	10c00044 	addi	r3,r2,1
 8005138:	008220b4 	movhi	r2,2178
 800513c:	10a82204 	addi	r2,r2,-24440
 8005140:	10c00015 	stw	r3,0(r2)
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005144:	e0bff717 	ldw	r2,-36(fp)
 8005148:	10800b17 	ldw	r2,44(r2)
 800514c:	d0e6cf17 	ldw	r3,-25796(gp)
 8005150:	18c00b17 	ldw	r3,44(r3)
 8005154:	1880052e 	bgeu	r3,r2,800516c <xTaskRemoveFromEventList+0x2c0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005158:	00800044 	movi	r2,1
 800515c:	e0bff615 	stw	r2,-40(fp)

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005160:	00800044 	movi	r2,1
 8005164:	d0a6d815 	stw	r2,-25760(gp)
 8005168:	00000106 	br	8005170 <xTaskRemoveFromEventList+0x2c4>
    }
    else
    {
        xReturn = pdFALSE;
 800516c:	e03ff615 	stw	zero,-40(fp)
    }

    return xReturn;
 8005170:	e0bff617 	ldw	r2,-40(fp)
}
 8005174:	e6fffd04 	addi	sp,fp,-12
 8005178:	dfc00417 	ldw	ra,16(sp)
 800517c:	df000317 	ldw	fp,12(sp)
 8005180:	dc800217 	ldw	r18,8(sp)
 8005184:	dc400117 	ldw	r17,4(sp)
 8005188:	dc000017 	ldw	r16,0(sp)
 800518c:	dec00504 	addi	sp,sp,20
 8005190:	f800283a 	ret

08005194 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8005194:	defff504 	addi	sp,sp,-44
 8005198:	dfc00a15 	stw	ra,40(sp)
 800519c:	df000915 	stw	fp,36(sp)
 80051a0:	dc800815 	stw	r18,32(sp)
 80051a4:	dc400715 	stw	r17,28(sp)
 80051a8:	dc000615 	stw	r16,24(sp)
 80051ac:	df000904 	addi	fp,sp,36
 80051b0:	e13ffb15 	stw	r4,-20(fp)
 80051b4:	e17ffc15 	stw	r5,-16(fp)
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051b8:	e0bffc17 	ldw	r2,-16(fp)
 80051bc:	10e00034 	orhi	r3,r2,32768
 80051c0:	e0bffb17 	ldw	r2,-20(fp)
 80051c4:	10c00015 	stw	r3,0(r2)

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c8:	e0bffb17 	ldw	r2,-20(fp)
 80051cc:	10800317 	ldw	r2,12(r2)
 80051d0:	e0bff715 	stw	r2,-36(fp)
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( pxEventListItem );
 80051d4:	e0bffb17 	ldw	r2,-20(fp)
 80051d8:	10800417 	ldw	r2,16(r2)
 80051dc:	e0bff815 	stw	r2,-32(fp)
 80051e0:	e0bffb17 	ldw	r2,-20(fp)
 80051e4:	10800117 	ldw	r2,4(r2)
 80051e8:	e0fffb17 	ldw	r3,-20(fp)
 80051ec:	18c00217 	ldw	r3,8(r3)
 80051f0:	10c00215 	stw	r3,8(r2)
 80051f4:	e0bffb17 	ldw	r2,-20(fp)
 80051f8:	10800217 	ldw	r2,8(r2)
 80051fc:	e0fffb17 	ldw	r3,-20(fp)
 8005200:	18c00117 	ldw	r3,4(r3)
 8005204:	10c00115 	stw	r3,4(r2)
 8005208:	e0bff817 	ldw	r2,-32(fp)
 800520c:	10c00117 	ldw	r3,4(r2)
 8005210:	e0bffb17 	ldw	r2,-20(fp)
 8005214:	1880041e 	bne	r3,r2,8005228 <vTaskRemoveFromUnorderedEventList+0x94>
 8005218:	e0bffb17 	ldw	r2,-20(fp)
 800521c:	10c00217 	ldw	r3,8(r2)
 8005220:	e0bff817 	ldw	r2,-32(fp)
 8005224:	10c00115 	stw	r3,4(r2)
 8005228:	e0bffb17 	ldw	r2,-20(fp)
 800522c:	10000415 	stw	zero,16(r2)
 8005230:	e0bff817 	ldw	r2,-32(fp)
 8005234:	10800017 	ldw	r2,0(r2)
 8005238:	10ffffc4 	addi	r3,r2,-1
 800523c:	e0bff817 	ldw	r2,-32(fp)
 8005240:	10c00015 	stw	r3,0(r2)
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005244:	e0bff717 	ldw	r2,-36(fp)
 8005248:	10800517 	ldw	r2,20(r2)
 800524c:	e0bff915 	stw	r2,-28(fp)
 8005250:	e0bff717 	ldw	r2,-36(fp)
 8005254:	10800217 	ldw	r2,8(r2)
 8005258:	e0fff717 	ldw	r3,-36(fp)
 800525c:	18c00317 	ldw	r3,12(r3)
 8005260:	10c00215 	stw	r3,8(r2)
 8005264:	e0bff717 	ldw	r2,-36(fp)
 8005268:	10800317 	ldw	r2,12(r2)
 800526c:	e0fff717 	ldw	r3,-36(fp)
 8005270:	18c00217 	ldw	r3,8(r3)
 8005274:	10c00115 	stw	r3,4(r2)
 8005278:	e0bff917 	ldw	r2,-28(fp)
 800527c:	10c00117 	ldw	r3,4(r2)
 8005280:	e0bff717 	ldw	r2,-36(fp)
 8005284:	10800104 	addi	r2,r2,4
 8005288:	1880041e 	bne	r3,r2,800529c <vTaskRemoveFromUnorderedEventList+0x108>
 800528c:	e0bff717 	ldw	r2,-36(fp)
 8005290:	10c00317 	ldw	r3,12(r2)
 8005294:	e0bff917 	ldw	r2,-28(fp)
 8005298:	10c00115 	stw	r3,4(r2)
 800529c:	e0bff717 	ldw	r2,-36(fp)
 80052a0:	10000515 	stw	zero,20(r2)
 80052a4:	e0bff917 	ldw	r2,-28(fp)
 80052a8:	10800017 	ldw	r2,0(r2)
 80052ac:	10ffffc4 	addi	r3,r2,-1
 80052b0:	e0bff917 	ldw	r2,-28(fp)
 80052b4:	10c00015 	stw	r3,0(r2)
    prvAddTaskToReadyList( pxUnblockedTCB );
 80052b8:	e0bff717 	ldw	r2,-36(fp)
 80052bc:	10800b17 	ldw	r2,44(r2)
 80052c0:	d0e6d517 	ldw	r3,-25772(gp)
 80052c4:	1880032e 	bgeu	r3,r2,80052d4 <vTaskRemoveFromUnorderedEventList+0x140>
 80052c8:	e0bff717 	ldw	r2,-36(fp)
 80052cc:	10800b17 	ldw	r2,44(r2)
 80052d0:	d0a6d515 	stw	r2,-25772(gp)
 80052d4:	e0bff717 	ldw	r2,-36(fp)
 80052d8:	10800b17 	ldw	r2,44(r2)
 80052dc:	040220b4 	movhi	r16,2178
 80052e0:	8427ff04 	addi	r16,r16,-24580
 80052e4:	01400504 	movi	r5,20
 80052e8:	1009883a 	mov	r4,r2
 80052ec:	800722c0 	call	800722c <__mulsi3>
 80052f0:	8085883a 	add	r2,r16,r2
 80052f4:	10800104 	addi	r2,r2,4
 80052f8:	10800017 	ldw	r2,0(r2)
 80052fc:	e0bffa15 	stw	r2,-24(fp)
 8005300:	e0bff717 	ldw	r2,-36(fp)
 8005304:	e0fffa17 	ldw	r3,-24(fp)
 8005308:	10c00215 	stw	r3,8(r2)
 800530c:	e0bffa17 	ldw	r2,-24(fp)
 8005310:	10c00217 	ldw	r3,8(r2)
 8005314:	e0bff717 	ldw	r2,-36(fp)
 8005318:	10c00315 	stw	r3,12(r2)
 800531c:	e0bffa17 	ldw	r2,-24(fp)
 8005320:	10800217 	ldw	r2,8(r2)
 8005324:	e0fff717 	ldw	r3,-36(fp)
 8005328:	18c00104 	addi	r3,r3,4
 800532c:	10c00115 	stw	r3,4(r2)
 8005330:	e0bff717 	ldw	r2,-36(fp)
 8005334:	10c00104 	addi	r3,r2,4
 8005338:	e0bffa17 	ldw	r2,-24(fp)
 800533c:	10c00215 	stw	r3,8(r2)
 8005340:	e0bff717 	ldw	r2,-36(fp)
 8005344:	10800b17 	ldw	r2,44(r2)
 8005348:	01400504 	movi	r5,20
 800534c:	1009883a 	mov	r4,r2
 8005350:	800722c0 	call	800722c <__mulsi3>
 8005354:	1007883a 	mov	r3,r2
 8005358:	008220b4 	movhi	r2,2178
 800535c:	10a7ff04 	addi	r2,r2,-24580
 8005360:	1887883a 	add	r3,r3,r2
 8005364:	e0bff717 	ldw	r2,-36(fp)
 8005368:	10c00515 	stw	r3,20(r2)
 800536c:	e0bff717 	ldw	r2,-36(fp)
 8005370:	14800b17 	ldw	r18,44(r2)
 8005374:	040220b4 	movhi	r16,2178
 8005378:	8427ff04 	addi	r16,r16,-24580
 800537c:	01400504 	movi	r5,20
 8005380:	9009883a 	mov	r4,r18
 8005384:	800722c0 	call	800722c <__mulsi3>
 8005388:	8085883a 	add	r2,r16,r2
 800538c:	10800017 	ldw	r2,0(r2)
 8005390:	14400044 	addi	r17,r2,1
 8005394:	040220b4 	movhi	r16,2178
 8005398:	8427ff04 	addi	r16,r16,-24580
 800539c:	01400504 	movi	r5,20
 80053a0:	9009883a 	mov	r4,r18
 80053a4:	800722c0 	call	800722c <__mulsi3>
 80053a8:	8085883a 	add	r2,r16,r2
 80053ac:	14400015 	stw	r17,0(r2)

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053b0:	e0bff717 	ldw	r2,-36(fp)
 80053b4:	10800b17 	ldw	r2,44(r2)
 80053b8:	d0e6cf17 	ldw	r3,-25796(gp)
 80053bc:	18c00b17 	ldw	r3,44(r3)
 80053c0:	1880022e 	bgeu	r3,r2,80053cc <vTaskRemoveFromUnorderedEventList+0x238>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 80053c4:	00800044 	movi	r2,1
 80053c8:	d0a6d815 	stw	r2,-25760(gp)
    }
}
 80053cc:	0001883a 	nop
 80053d0:	e6fffd04 	addi	sp,fp,-12
 80053d4:	dfc00417 	ldw	ra,16(sp)
 80053d8:	df000317 	ldw	fp,12(sp)
 80053dc:	dc800217 	ldw	r18,8(sp)
 80053e0:	dc400117 	ldw	r17,4(sp)
 80053e4:	dc000017 	ldw	r16,0(sp)
 80053e8:	dec00504 	addi	sp,sp,20
 80053ec:	f800283a 	ret

080053f0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053f0:	defffd04 	addi	sp,sp,-12
 80053f4:	dfc00215 	stw	ra,8(sp)
 80053f8:	df000115 	stw	fp,4(sp)
 80053fc:	df000104 	addi	fp,sp,4
 8005400:	e13fff15 	stw	r4,-4(fp)
    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
 8005404:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005408:	d0e6d917 	ldw	r3,-25756(gp)
 800540c:	e0bfff17 	ldw	r2,-4(fp)
 8005410:	10c00015 	stw	r3,0(r2)
        pxTimeOut->xTimeOnEntering = xTickCount;
 8005414:	d0e6d417 	ldw	r3,-25776(gp)
 8005418:	e0bfff17 	ldw	r2,-4(fp)
 800541c:	10c00115 	stw	r3,4(r2)
    }
    taskEXIT_CRITICAL();
 8005420:	8005e980 	call	8005e98 <vTaskExitCritical>
}
 8005424:	0001883a 	nop
 8005428:	e037883a 	mov	sp,fp
 800542c:	dfc00117 	ldw	ra,4(sp)
 8005430:	df000017 	ldw	fp,0(sp)
 8005434:	dec00204 	addi	sp,sp,8
 8005438:	f800283a 	ret

0800543c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800543c:	defffe04 	addi	sp,sp,-8
 8005440:	df000115 	stw	fp,4(sp)
 8005444:	df000104 	addi	fp,sp,4
 8005448:	e13fff15 	stw	r4,-4(fp)
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800544c:	d0e6d917 	ldw	r3,-25756(gp)
 8005450:	e0bfff17 	ldw	r2,-4(fp)
 8005454:	10c00015 	stw	r3,0(r2)
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005458:	d0e6d417 	ldw	r3,-25776(gp)
 800545c:	e0bfff17 	ldw	r2,-4(fp)
 8005460:	10c00115 	stw	r3,4(r2)
}
 8005464:	0001883a 	nop
 8005468:	e037883a 	mov	sp,fp
 800546c:	df000017 	ldw	fp,0(sp)
 8005470:	dec00104 	addi	sp,sp,4
 8005474:	f800283a 	ret

08005478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005478:	defff904 	addi	sp,sp,-28
 800547c:	dfc00615 	stw	ra,24(sp)
 8005480:	df000515 	stw	fp,20(sp)
 8005484:	df000504 	addi	fp,sp,20
 8005488:	e13ffe15 	stw	r4,-8(fp)
 800548c:	e17fff15 	stw	r5,-4(fp)
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8005490:	8005e440 	call	8005e44 <vTaskEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005494:	d0a6d417 	ldw	r2,-25776(gp)
 8005498:	e0bffc15 	stw	r2,-16(fp)
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800549c:	e0bffe17 	ldw	r2,-8(fp)
 80054a0:	10800117 	ldw	r2,4(r2)
 80054a4:	e0fffc17 	ldw	r3,-16(fp)
 80054a8:	1885c83a 	sub	r2,r3,r2
 80054ac:	e0bffd15 	stw	r2,-12(fp)
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80054b0:	e0bfff17 	ldw	r2,-4(fp)
 80054b4:	10800017 	ldw	r2,0(r2)
 80054b8:	10bfffd8 	cmpnei	r2,r2,-1
 80054bc:	1000021e 	bne	r2,zero,80054c8 <xTaskCheckForTimeOut+0x50>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054c0:	e03ffb15 	stw	zero,-20(fp)
 80054c4:	00001f06 	br	8005544 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054c8:	e0bffe17 	ldw	r2,-8(fp)
 80054cc:	10c00017 	ldw	r3,0(r2)
 80054d0:	d0a6d917 	ldw	r2,-25756(gp)
 80054d4:	18800926 	beq	r3,r2,80054fc <xTaskCheckForTimeOut+0x84>
 80054d8:	e0bffe17 	ldw	r2,-8(fp)
 80054dc:	10800117 	ldw	r2,4(r2)
 80054e0:	e0fffc17 	ldw	r3,-16(fp)
 80054e4:	18800536 	bltu	r3,r2,80054fc <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80054e8:	00800044 	movi	r2,1
 80054ec:	e0bffb15 	stw	r2,-20(fp)
            *pxTicksToWait = ( TickType_t ) 0;
 80054f0:	e0bfff17 	ldw	r2,-4(fp)
 80054f4:	10000015 	stw	zero,0(r2)
 80054f8:	00001206 	br	8005544 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054fc:	e0bfff17 	ldw	r2,-4(fp)
 8005500:	10800017 	ldw	r2,0(r2)
 8005504:	e0fffd17 	ldw	r3,-12(fp)
 8005508:	18800a2e 	bgeu	r3,r2,8005534 <xTaskCheckForTimeOut+0xbc>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800550c:	e0bfff17 	ldw	r2,-4(fp)
 8005510:	10c00017 	ldw	r3,0(r2)
 8005514:	e0bffd17 	ldw	r2,-12(fp)
 8005518:	1887c83a 	sub	r3,r3,r2
 800551c:	e0bfff17 	ldw	r2,-4(fp)
 8005520:	10c00015 	stw	r3,0(r2)
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005524:	e13ffe17 	ldw	r4,-8(fp)
 8005528:	800543c0 	call	800543c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800552c:	e03ffb15 	stw	zero,-20(fp)
 8005530:	00000406 	br	8005544 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005534:	e0bfff17 	ldw	r2,-4(fp)
 8005538:	10000015 	stw	zero,0(r2)
            xReturn = pdTRUE;
 800553c:	00800044 	movi	r2,1
 8005540:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    taskEXIT_CRITICAL();
 8005544:	8005e980 	call	8005e98 <vTaskExitCritical>

    return xReturn;
 8005548:	e0bffb17 	ldw	r2,-20(fp)
}
 800554c:	e037883a 	mov	sp,fp
 8005550:	dfc00117 	ldw	ra,4(sp)
 8005554:	df000017 	ldw	fp,0(sp)
 8005558:	dec00204 	addi	sp,sp,8
 800555c:	f800283a 	ret

08005560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005560:	deffff04 	addi	sp,sp,-4
 8005564:	df000015 	stw	fp,0(sp)
 8005568:	d839883a 	mov	fp,sp
    xYieldPending = pdTRUE;
 800556c:	00800044 	movi	r2,1
 8005570:	d0a6d815 	stw	r2,-25760(gp)
}
 8005574:	0001883a 	nop
 8005578:	e037883a 	mov	sp,fp
 800557c:	df000017 	ldw	fp,0(sp)
 8005580:	dec00104 	addi	sp,sp,4
 8005584:	f800283a 	ret

08005588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005588:	defffd04 	addi	sp,sp,-12
 800558c:	dfc00215 	stw	ra,8(sp)
 8005590:	df000115 	stw	fp,4(sp)
 8005594:	df000104 	addi	fp,sp,4
 8005598:	e13fff15 	stw	r4,-4(fp)

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800559c:	80056640 	call	8005664 <prvCheckTasksWaitingTermination>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_TICKLESS_IDLE */
    }
 80055a0:	003ffe06 	br	800559c <__alt_data_end+0xf800559c>

080055a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055a4:	defffd04 	addi	sp,sp,-12
 80055a8:	dfc00215 	stw	ra,8(sp)
 80055ac:	df000115 	stw	fp,4(sp)
 80055b0:	df000104 	addi	fp,sp,4
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b4:	e03fff15 	stw	zero,-4(fp)
 80055b8:	00000c06 	br	80055ec <prvInitialiseTaskLists+0x48>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055bc:	01400504 	movi	r5,20
 80055c0:	e13fff17 	ldw	r4,-4(fp)
 80055c4:	800722c0 	call	800722c <__mulsi3>
 80055c8:	1007883a 	mov	r3,r2
 80055cc:	008220b4 	movhi	r2,2178
 80055d0:	10a7ff04 	addi	r2,r2,-24580
 80055d4:	1885883a 	add	r2,r3,r2
 80055d8:	1009883a 	mov	r4,r2
 80055dc:	8000ab00 	call	8000ab0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055e0:	e0bfff17 	ldw	r2,-4(fp)
 80055e4:	10800044 	addi	r2,r2,1
 80055e8:	e0bfff15 	stw	r2,-4(fp)
 80055ec:	e0bfff17 	ldw	r2,-4(fp)
 80055f0:	10800170 	cmpltui	r2,r2,5
 80055f4:	103ff11e 	bne	r2,zero,80055bc <__alt_data_end+0xf80055bc>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    }

    vListInitialise( &xDelayedTaskList1 );
 80055f8:	010220b4 	movhi	r4,2178
 80055fc:	21281804 	addi	r4,r4,-24480
 8005600:	8000ab00 	call	8000ab0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005604:	010220b4 	movhi	r4,2178
 8005608:	21281d04 	addi	r4,r4,-24460
 800560c:	8000ab00 	call	8000ab0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005610:	010220b4 	movhi	r4,2178
 8005614:	21282204 	addi	r4,r4,-24440
 8005618:	8000ab00 	call	8000ab0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800561c:	010220b4 	movhi	r4,2178
 8005620:	21282704 	addi	r4,r4,-24420
 8005624:	8000ab00 	call	8000ab0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005628:	010220b4 	movhi	r4,2178
 800562c:	21282c04 	addi	r4,r4,-24400
 8005630:	8000ab00 	call	8000ab0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005634:	008220b4 	movhi	r2,2178
 8005638:	10a81804 	addi	r2,r2,-24480
 800563c:	d0a6d015 	stw	r2,-25792(gp)
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005640:	008220b4 	movhi	r2,2178
 8005644:	10a81d04 	addi	r2,r2,-24460
 8005648:	d0a6d115 	stw	r2,-25788(gp)
}
 800564c:	0001883a 	nop
 8005650:	e037883a 	mov	sp,fp
 8005654:	dfc00117 	ldw	ra,4(sp)
 8005658:	df000017 	ldw	fp,0(sp)
 800565c:	dec00204 	addi	sp,sp,8
 8005660:	f800283a 	ret

08005664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005664:	defffd04 	addi	sp,sp,-12
 8005668:	dfc00215 	stw	ra,8(sp)
 800566c:	df000115 	stw	fp,4(sp)
 8005670:	df000104 	addi	fp,sp,4
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005674:	00001306 	br	80056c4 <prvCheckTasksWaitingTermination+0x60>
        {
            taskENTER_CRITICAL();
 8005678:	8005e440 	call	8005e44 <vTaskEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567c:	008220b4 	movhi	r2,2178
 8005680:	10a82704 	addi	r2,r2,-24420
 8005684:	10800317 	ldw	r2,12(r2)
 8005688:	10800317 	ldw	r2,12(r2)
 800568c:	e0bfff15 	stw	r2,-4(fp)
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005690:	e0bfff17 	ldw	r2,-4(fp)
 8005694:	10800104 	addi	r2,r2,4
 8005698:	1009883a 	mov	r4,r2
 800569c:	8000ca80 	call	8000ca8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80056a0:	d0a6d317 	ldw	r2,-25780(gp)
 80056a4:	10bfffc4 	addi	r2,r2,-1
 80056a8:	d0a6d315 	stw	r2,-25780(gp)
                --uxDeletedTasksWaitingCleanUp;
 80056ac:	d0a6d217 	ldw	r2,-25784(gp)
 80056b0:	10bfffc4 	addi	r2,r2,-1
 80056b4:	d0a6d215 	stw	r2,-25784(gp)
            }
            taskEXIT_CRITICAL();
 80056b8:	8005e980 	call	8005e98 <vTaskExitCritical>

            prvDeleteTCB( pxTCB );
 80056bc:	e13fff17 	ldw	r4,-4(fp)
 80056c0:	80057a80 	call	80057a8 <prvDeleteTCB>
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c4:	d0a6d217 	ldw	r2,-25784(gp)
 80056c8:	103feb1e 	bne	r2,zero,8005678 <__alt_data_end+0xf8005678>

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80056cc:	0001883a 	nop
 80056d0:	e037883a 	mov	sp,fp
 80056d4:	dfc00117 	ldw	ra,4(sp)
 80056d8:	df000017 	ldw	fp,0(sp)
 80056dc:	dec00204 	addi	sp,sp,8
 80056e0:	f800283a 	ret

080056e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 80056e4:	defffd04 	addi	sp,sp,-12
 80056e8:	df000215 	stw	fp,8(sp)
 80056ec:	df000204 	addi	fp,sp,8
 80056f0:	e13fff15 	stw	r4,-4(fp)
        uint32_t ulCount = 0U;
 80056f4:	e03ffe15 	stw	zero,-8(fp)

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80056f8:	00000606 	br	8005714 <prvTaskCheckFreeStackSpace+0x30>
        {
            pucStackByte -= portSTACK_GROWTH;
 80056fc:	e0bfff17 	ldw	r2,-4(fp)
 8005700:	10800044 	addi	r2,r2,1
 8005704:	e0bfff15 	stw	r2,-4(fp)
            ulCount++;
 8005708:	e0bffe17 	ldw	r2,-8(fp)
 800570c:	10800044 	addi	r2,r2,1
 8005710:	e0bffe15 	stw	r2,-8(fp)

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
        uint32_t ulCount = 0U;

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005714:	e0bfff17 	ldw	r2,-4(fp)
 8005718:	10800003 	ldbu	r2,0(r2)
 800571c:	10803fcc 	andi	r2,r2,255
 8005720:	10802960 	cmpeqi	r2,r2,165
 8005724:	103ff51e 	bne	r2,zero,80056fc <__alt_data_end+0xf80056fc>
        {
            pucStackByte -= portSTACK_GROWTH;
            ulCount++;
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005728:	e0bffe17 	ldw	r2,-8(fp)
 800572c:	1004d0ba 	srli	r2,r2,2
 8005730:	e0bffe15 	stw	r2,-8(fp)

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005734:	e0bffe17 	ldw	r2,-8(fp)
    }
 8005738:	e037883a 	mov	sp,fp
 800573c:	df000017 	ldw	fp,0(sp)
 8005740:	dec00104 	addi	sp,sp,4
 8005744:	f800283a 	ret

08005748 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8005748:	defffa04 	addi	sp,sp,-24
 800574c:	dfc00515 	stw	ra,20(sp)
 8005750:	df000415 	stw	fp,16(sp)
 8005754:	df000404 	addi	fp,sp,16
 8005758:	e13fff15 	stw	r4,-4(fp)
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800575c:	e0bfff17 	ldw	r2,-4(fp)
 8005760:	1000021e 	bne	r2,zero,800576c <uxTaskGetStackHighWaterMark+0x24>
 8005764:	d0a6cf17 	ldw	r2,-25796(gp)
 8005768:	00000106 	br	8005770 <uxTaskGetStackHighWaterMark+0x28>
 800576c:	e0bfff17 	ldw	r2,-4(fp)
 8005770:	e0bffc15 	stw	r2,-16(fp)

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005774:	e0bffc17 	ldw	r2,-16(fp)
 8005778:	10800c17 	ldw	r2,48(r2)
 800577c:	e0bffd15 	stw	r2,-12(fp)
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005780:	e13ffd17 	ldw	r4,-12(fp)
 8005784:	80056e40 	call	80056e4 <prvTaskCheckFreeStackSpace>
 8005788:	10bfffcc 	andi	r2,r2,65535
 800578c:	e0bffe15 	stw	r2,-8(fp)

        return uxReturn;
 8005790:	e0bffe17 	ldw	r2,-8(fp)
    }
 8005794:	e037883a 	mov	sp,fp
 8005798:	dfc00117 	ldw	ra,4(sp)
 800579c:	df000017 	ldw	fp,0(sp)
 80057a0:	dec00204 	addi	sp,sp,8
 80057a4:	f800283a 	ret

080057a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80057a8:	defffd04 	addi	sp,sp,-12
 80057ac:	dfc00215 	stw	ra,8(sp)
 80057b0:	df000115 	stw	fp,4(sp)
 80057b4:	df000104 	addi	fp,sp,4
 80057b8:	e13fff15 	stw	r4,-4(fp)

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80057bc:	e0bfff17 	ldw	r2,-4(fp)
 80057c0:	10800c17 	ldw	r2,48(r2)
 80057c4:	1009883a 	mov	r4,r2
 80057c8:	80011f40 	call	80011f4 <vPortFree>
            vPortFree( pxTCB );
 80057cc:	e13fff17 	ldw	r4,-4(fp)
 80057d0:	80011f40 	call	80011f4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80057d4:	0001883a 	nop
 80057d8:	e037883a 	mov	sp,fp
 80057dc:	dfc00117 	ldw	ra,4(sp)
 80057e0:	df000017 	ldw	fp,0(sp)
 80057e4:	dec00204 	addi	sp,sp,8
 80057e8:	f800283a 	ret

080057ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057ec:	deffff04 	addi	sp,sp,-4
 80057f0:	df000015 	stw	fp,0(sp)
 80057f4:	d839883a 	mov	fp,sp
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f8:	d0a6d017 	ldw	r2,-25792(gp)
 80057fc:	10800017 	ldw	r2,0(r2)
 8005800:	1000031e 	bne	r2,zero,8005810 <prvResetNextTaskUnblockTime+0x24>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005804:	00bfffc4 	movi	r2,-1
 8005808:	d0a6db15 	stw	r2,-25748(gp)
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800580c:	00000406 	br	8005820 <prvResetNextTaskUnblockTime+0x34>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005810:	d0a6d017 	ldw	r2,-25792(gp)
 8005814:	10800317 	ldw	r2,12(r2)
 8005818:	10800017 	ldw	r2,0(r2)
 800581c:	d0a6db15 	stw	r2,-25748(gp)
    }
}
 8005820:	0001883a 	nop
 8005824:	e037883a 	mov	sp,fp
 8005828:	df000017 	ldw	fp,0(sp)
 800582c:	dec00104 	addi	sp,sp,4
 8005830:	f800283a 	ret

08005834 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8005834:	defffe04 	addi	sp,sp,-8
 8005838:	df000115 	stw	fp,4(sp)
 800583c:	df000104 	addi	fp,sp,4
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8005840:	d0a6cf17 	ldw	r2,-25796(gp)
 8005844:	e0bfff15 	stw	r2,-4(fp)

        return xReturn;
 8005848:	e0bfff17 	ldw	r2,-4(fp)
    }
 800584c:	e037883a 	mov	sp,fp
 8005850:	df000017 	ldw	fp,0(sp)
 8005854:	dec00104 	addi	sp,sp,4
 8005858:	f800283a 	ret

0800585c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800585c:	defff704 	addi	sp,sp,-36
 8005860:	dfc00815 	stw	ra,32(sp)
 8005864:	df000715 	stw	fp,28(sp)
 8005868:	dc800615 	stw	r18,24(sp)
 800586c:	dc400515 	stw	r17,20(sp)
 8005870:	dc000415 	stw	r16,16(sp)
 8005874:	df000704 	addi	fp,sp,28
 8005878:	e13ffc15 	stw	r4,-16(fp)
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800587c:	e0bffc17 	ldw	r2,-16(fp)
 8005880:	e0bffa15 	stw	r2,-24(fp)
        BaseType_t xReturn = pdFALSE;
 8005884:	e03ff915 	stw	zero,-28(fp)

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005888:	e0bffc17 	ldw	r2,-16(fp)
 800588c:	10006f26 	beq	r2,zero,8005a4c <xTaskPriorityInherit+0x1f0>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005890:	e0bffa17 	ldw	r2,-24(fp)
 8005894:	10c00b17 	ldw	r3,44(r2)
 8005898:	d0a6cf17 	ldw	r2,-25796(gp)
 800589c:	10800b17 	ldw	r2,44(r2)
 80058a0:	1880632e 	bgeu	r3,r2,8005a30 <xTaskPriorityInherit+0x1d4>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058a4:	e0bffa17 	ldw	r2,-24(fp)
 80058a8:	10800617 	ldw	r2,24(r2)
 80058ac:	10000616 	blt	r2,zero,80058c8 <xTaskPriorityInherit+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b0:	d0a6cf17 	ldw	r2,-25796(gp)
 80058b4:	10800b17 	ldw	r2,44(r2)
 80058b8:	00c00144 	movi	r3,5
 80058bc:	1887c83a 	sub	r3,r3,r2
 80058c0:	e0bffa17 	ldw	r2,-24(fp)
 80058c4:	10c00615 	stw	r3,24(r2)
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058c8:	e0bffa17 	ldw	r2,-24(fp)
 80058cc:	14000517 	ldw	r16,20(r2)
 80058d0:	e0bffa17 	ldw	r2,-24(fp)
 80058d4:	10800b17 	ldw	r2,44(r2)
 80058d8:	01400504 	movi	r5,20
 80058dc:	1009883a 	mov	r4,r2
 80058e0:	800722c0 	call	800722c <__mulsi3>
 80058e4:	1007883a 	mov	r3,r2
 80058e8:	008220b4 	movhi	r2,2178
 80058ec:	10a7ff04 	addi	r2,r2,-24580
 80058f0:	1885883a 	add	r2,r3,r2
 80058f4:	8080471e 	bne	r16,r2,8005a14 <xTaskPriorityInherit+0x1b8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058f8:	e0bffa17 	ldw	r2,-24(fp)
 80058fc:	10800104 	addi	r2,r2,4
 8005900:	1009883a 	mov	r4,r2
 8005904:	8000ca80 	call	8000ca8 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005908:	d0a6cf17 	ldw	r2,-25796(gp)
 800590c:	10c00b17 	ldw	r3,44(r2)
 8005910:	e0bffa17 	ldw	r2,-24(fp)
 8005914:	10c00b15 	stw	r3,44(r2)
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005918:	e0bffa17 	ldw	r2,-24(fp)
 800591c:	10800b17 	ldw	r2,44(r2)
 8005920:	d0e6d517 	ldw	r3,-25772(gp)
 8005924:	1880032e 	bgeu	r3,r2,8005934 <xTaskPriorityInherit+0xd8>
 8005928:	e0bffa17 	ldw	r2,-24(fp)
 800592c:	10800b17 	ldw	r2,44(r2)
 8005930:	d0a6d515 	stw	r2,-25772(gp)
 8005934:	e0bffa17 	ldw	r2,-24(fp)
 8005938:	10800b17 	ldw	r2,44(r2)
 800593c:	040220b4 	movhi	r16,2178
 8005940:	8427ff04 	addi	r16,r16,-24580
 8005944:	01400504 	movi	r5,20
 8005948:	1009883a 	mov	r4,r2
 800594c:	800722c0 	call	800722c <__mulsi3>
 8005950:	8085883a 	add	r2,r16,r2
 8005954:	10800104 	addi	r2,r2,4
 8005958:	10800017 	ldw	r2,0(r2)
 800595c:	e0bffb15 	stw	r2,-20(fp)
 8005960:	e0bffa17 	ldw	r2,-24(fp)
 8005964:	e0fffb17 	ldw	r3,-20(fp)
 8005968:	10c00215 	stw	r3,8(r2)
 800596c:	e0bffb17 	ldw	r2,-20(fp)
 8005970:	10c00217 	ldw	r3,8(r2)
 8005974:	e0bffa17 	ldw	r2,-24(fp)
 8005978:	10c00315 	stw	r3,12(r2)
 800597c:	e0bffb17 	ldw	r2,-20(fp)
 8005980:	10800217 	ldw	r2,8(r2)
 8005984:	e0fffa17 	ldw	r3,-24(fp)
 8005988:	18c00104 	addi	r3,r3,4
 800598c:	10c00115 	stw	r3,4(r2)
 8005990:	e0bffa17 	ldw	r2,-24(fp)
 8005994:	10c00104 	addi	r3,r2,4
 8005998:	e0bffb17 	ldw	r2,-20(fp)
 800599c:	10c00215 	stw	r3,8(r2)
 80059a0:	e0bffa17 	ldw	r2,-24(fp)
 80059a4:	10800b17 	ldw	r2,44(r2)
 80059a8:	01400504 	movi	r5,20
 80059ac:	1009883a 	mov	r4,r2
 80059b0:	800722c0 	call	800722c <__mulsi3>
 80059b4:	1007883a 	mov	r3,r2
 80059b8:	008220b4 	movhi	r2,2178
 80059bc:	10a7ff04 	addi	r2,r2,-24580
 80059c0:	1887883a 	add	r3,r3,r2
 80059c4:	e0bffa17 	ldw	r2,-24(fp)
 80059c8:	10c00515 	stw	r3,20(r2)
 80059cc:	e0bffa17 	ldw	r2,-24(fp)
 80059d0:	14800b17 	ldw	r18,44(r2)
 80059d4:	040220b4 	movhi	r16,2178
 80059d8:	8427ff04 	addi	r16,r16,-24580
 80059dc:	01400504 	movi	r5,20
 80059e0:	9009883a 	mov	r4,r18
 80059e4:	800722c0 	call	800722c <__mulsi3>
 80059e8:	8085883a 	add	r2,r16,r2
 80059ec:	10800017 	ldw	r2,0(r2)
 80059f0:	14400044 	addi	r17,r2,1
 80059f4:	040220b4 	movhi	r16,2178
 80059f8:	8427ff04 	addi	r16,r16,-24580
 80059fc:	01400504 	movi	r5,20
 8005a00:	9009883a 	mov	r4,r18
 8005a04:	800722c0 	call	800722c <__mulsi3>
 8005a08:	8085883a 	add	r2,r16,r2
 8005a0c:	14400015 	stw	r17,0(r2)
 8005a10:	00000406 	br	8005a24 <xTaskPriorityInherit+0x1c8>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a14:	d0a6cf17 	ldw	r2,-25796(gp)
 8005a18:	10c00b17 	ldw	r3,44(r2)
 8005a1c:	e0bffa17 	ldw	r2,-24(fp)
 8005a20:	10c00b15 	stw	r3,44(r2)
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005a24:	00800044 	movi	r2,1
 8005a28:	e0bff915 	stw	r2,-28(fp)
 8005a2c:	00000706 	br	8005a4c <xTaskPriorityInherit+0x1f0>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a30:	e0bffa17 	ldw	r2,-24(fp)
 8005a34:	10c01017 	ldw	r3,64(r2)
 8005a38:	d0a6cf17 	ldw	r2,-25796(gp)
 8005a3c:	10800b17 	ldw	r2,44(r2)
 8005a40:	1880022e 	bgeu	r3,r2,8005a4c <xTaskPriorityInherit+0x1f0>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005a44:	00800044 	movi	r2,1
 8005a48:	e0bff915 	stw	r2,-28(fp)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005a4c:	e0bff917 	ldw	r2,-28(fp)
    }
 8005a50:	e6fffd04 	addi	sp,fp,-12
 8005a54:	dfc00417 	ldw	ra,16(sp)
 8005a58:	df000317 	ldw	fp,12(sp)
 8005a5c:	dc800217 	ldw	r18,8(sp)
 8005a60:	dc400117 	ldw	r17,4(sp)
 8005a64:	dc000017 	ldw	r16,0(sp)
 8005a68:	dec00504 	addi	sp,sp,20
 8005a6c:	f800283a 	ret

08005a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005a70:	defff704 	addi	sp,sp,-36
 8005a74:	dfc00815 	stw	ra,32(sp)
 8005a78:	df000715 	stw	fp,28(sp)
 8005a7c:	dc800615 	stw	r18,24(sp)
 8005a80:	dc400515 	stw	r17,20(sp)
 8005a84:	dc000415 	stw	r16,16(sp)
 8005a88:	df000704 	addi	fp,sp,28
 8005a8c:	e13ffc15 	stw	r4,-16(fp)
        TCB_t * const pxTCB = pxMutexHolder;
 8005a90:	e0bffc17 	ldw	r2,-16(fp)
 8005a94:	e0bffa15 	stw	r2,-24(fp)
        BaseType_t xReturn = pdFALSE;
 8005a98:	e03ff915 	stw	zero,-28(fp)

        if( pxMutexHolder != NULL )
 8005a9c:	e0bffc17 	ldw	r2,-16(fp)
 8005aa0:	10005b26 	beq	r2,zero,8005c10 <xTaskPriorityDisinherit+0x1a0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8005aa4:	e0bffa17 	ldw	r2,-24(fp)
 8005aa8:	10801117 	ldw	r2,68(r2)
 8005aac:	10ffffc4 	addi	r3,r2,-1
 8005ab0:	e0bffa17 	ldw	r2,-24(fp)
 8005ab4:	10c01115 	stw	r3,68(r2)

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ab8:	e0bffa17 	ldw	r2,-24(fp)
 8005abc:	10c00b17 	ldw	r3,44(r2)
 8005ac0:	e0bffa17 	ldw	r2,-24(fp)
 8005ac4:	10801017 	ldw	r2,64(r2)
 8005ac8:	18805126 	beq	r3,r2,8005c10 <xTaskPriorityDisinherit+0x1a0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005acc:	e0bffa17 	ldw	r2,-24(fp)
 8005ad0:	10801117 	ldw	r2,68(r2)
 8005ad4:	10004e1e 	bne	r2,zero,8005c10 <xTaskPriorityDisinherit+0x1a0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad8:	e0bffa17 	ldw	r2,-24(fp)
 8005adc:	10800104 	addi	r2,r2,4
 8005ae0:	1009883a 	mov	r4,r2
 8005ae4:	8000ca80 	call	8000ca8 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ae8:	e0bffa17 	ldw	r2,-24(fp)
 8005aec:	10c01017 	ldw	r3,64(r2)
 8005af0:	e0bffa17 	ldw	r2,-24(fp)
 8005af4:	10c00b15 	stw	r3,44(r2)

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af8:	e0bffa17 	ldw	r2,-24(fp)
 8005afc:	10800b17 	ldw	r2,44(r2)
 8005b00:	00c00144 	movi	r3,5
 8005b04:	1887c83a 	sub	r3,r3,r2
 8005b08:	e0bffa17 	ldw	r2,-24(fp)
 8005b0c:	10c00615 	stw	r3,24(r2)
                    prvAddTaskToReadyList( pxTCB );
 8005b10:	e0bffa17 	ldw	r2,-24(fp)
 8005b14:	10800b17 	ldw	r2,44(r2)
 8005b18:	d0e6d517 	ldw	r3,-25772(gp)
 8005b1c:	1880032e 	bgeu	r3,r2,8005b2c <xTaskPriorityDisinherit+0xbc>
 8005b20:	e0bffa17 	ldw	r2,-24(fp)
 8005b24:	10800b17 	ldw	r2,44(r2)
 8005b28:	d0a6d515 	stw	r2,-25772(gp)
 8005b2c:	e0bffa17 	ldw	r2,-24(fp)
 8005b30:	10800b17 	ldw	r2,44(r2)
 8005b34:	040220b4 	movhi	r16,2178
 8005b38:	8427ff04 	addi	r16,r16,-24580
 8005b3c:	01400504 	movi	r5,20
 8005b40:	1009883a 	mov	r4,r2
 8005b44:	800722c0 	call	800722c <__mulsi3>
 8005b48:	8085883a 	add	r2,r16,r2
 8005b4c:	10800104 	addi	r2,r2,4
 8005b50:	10800017 	ldw	r2,0(r2)
 8005b54:	e0bffb15 	stw	r2,-20(fp)
 8005b58:	e0bffa17 	ldw	r2,-24(fp)
 8005b5c:	e0fffb17 	ldw	r3,-20(fp)
 8005b60:	10c00215 	stw	r3,8(r2)
 8005b64:	e0bffb17 	ldw	r2,-20(fp)
 8005b68:	10c00217 	ldw	r3,8(r2)
 8005b6c:	e0bffa17 	ldw	r2,-24(fp)
 8005b70:	10c00315 	stw	r3,12(r2)
 8005b74:	e0bffb17 	ldw	r2,-20(fp)
 8005b78:	10800217 	ldw	r2,8(r2)
 8005b7c:	e0fffa17 	ldw	r3,-24(fp)
 8005b80:	18c00104 	addi	r3,r3,4
 8005b84:	10c00115 	stw	r3,4(r2)
 8005b88:	e0bffa17 	ldw	r2,-24(fp)
 8005b8c:	10c00104 	addi	r3,r2,4
 8005b90:	e0bffb17 	ldw	r2,-20(fp)
 8005b94:	10c00215 	stw	r3,8(r2)
 8005b98:	e0bffa17 	ldw	r2,-24(fp)
 8005b9c:	10800b17 	ldw	r2,44(r2)
 8005ba0:	01400504 	movi	r5,20
 8005ba4:	1009883a 	mov	r4,r2
 8005ba8:	800722c0 	call	800722c <__mulsi3>
 8005bac:	1007883a 	mov	r3,r2
 8005bb0:	008220b4 	movhi	r2,2178
 8005bb4:	10a7ff04 	addi	r2,r2,-24580
 8005bb8:	1887883a 	add	r3,r3,r2
 8005bbc:	e0bffa17 	ldw	r2,-24(fp)
 8005bc0:	10c00515 	stw	r3,20(r2)
 8005bc4:	e0bffa17 	ldw	r2,-24(fp)
 8005bc8:	14800b17 	ldw	r18,44(r2)
 8005bcc:	040220b4 	movhi	r16,2178
 8005bd0:	8427ff04 	addi	r16,r16,-24580
 8005bd4:	01400504 	movi	r5,20
 8005bd8:	9009883a 	mov	r4,r18
 8005bdc:	800722c0 	call	800722c <__mulsi3>
 8005be0:	8085883a 	add	r2,r16,r2
 8005be4:	10800017 	ldw	r2,0(r2)
 8005be8:	14400044 	addi	r17,r2,1
 8005bec:	040220b4 	movhi	r16,2178
 8005bf0:	8427ff04 	addi	r16,r16,-24580
 8005bf4:	01400504 	movi	r5,20
 8005bf8:	9009883a 	mov	r4,r18
 8005bfc:	800722c0 	call	800722c <__mulsi3>
 8005c00:	8085883a 	add	r2,r16,r2
 8005c04:	14400015 	stw	r17,0(r2)
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005c08:	00800044 	movi	r2,1
 8005c0c:	e0bff915 	stw	r2,-28(fp)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c10:	e0bff917 	ldw	r2,-28(fp)
    }
 8005c14:	e6fffd04 	addi	sp,fp,-12
 8005c18:	dfc00417 	ldw	ra,16(sp)
 8005c1c:	df000317 	ldw	fp,12(sp)
 8005c20:	dc800217 	ldw	r18,8(sp)
 8005c24:	dc400117 	ldw	r17,4(sp)
 8005c28:	dc000017 	ldw	r16,0(sp)
 8005c2c:	dec00504 	addi	sp,sp,20
 8005c30:	f800283a 	ret

08005c34 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005c34:	defff404 	addi	sp,sp,-48
 8005c38:	dfc00b15 	stw	ra,44(sp)
 8005c3c:	df000a15 	stw	fp,40(sp)
 8005c40:	dc800915 	stw	r18,36(sp)
 8005c44:	dc400815 	stw	r17,32(sp)
 8005c48:	dc000715 	stw	r16,28(sp)
 8005c4c:	df000a04 	addi	fp,sp,40
 8005c50:	e13ffb15 	stw	r4,-20(fp)
 8005c54:	e17ffc15 	stw	r5,-16(fp)
        TCB_t * const pxTCB = pxMutexHolder;
 8005c58:	e0bffb17 	ldw	r2,-20(fp)
 8005c5c:	e0bff715 	stw	r2,-36(fp)
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c60:	00800044 	movi	r2,1
 8005c64:	e0bff815 	stw	r2,-32(fp)

        if( pxMutexHolder != NULL )
 8005c68:	e0bffb17 	ldw	r2,-20(fp)
 8005c6c:	10006c26 	beq	r2,zero,8005e20 <vTaskPriorityDisinheritAfterTimeout+0x1ec>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c70:	e0bff717 	ldw	r2,-36(fp)
 8005c74:	10c01017 	ldw	r3,64(r2)
 8005c78:	e0bffc17 	ldw	r2,-16(fp)
 8005c7c:	1880032e 	bgeu	r3,r2,8005c8c <vTaskPriorityDisinheritAfterTimeout+0x58>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c80:	e0bffc17 	ldw	r2,-16(fp)
 8005c84:	e0bff615 	stw	r2,-40(fp)
 8005c88:	00000306 	br	8005c98 <vTaskPriorityDisinheritAfterTimeout+0x64>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005c8c:	e0bff717 	ldw	r2,-36(fp)
 8005c90:	10801017 	ldw	r2,64(r2)
 8005c94:	e0bff615 	stw	r2,-40(fp)
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005c98:	e0bff717 	ldw	r2,-36(fp)
 8005c9c:	10c00b17 	ldw	r3,44(r2)
 8005ca0:	e0bff617 	ldw	r2,-40(fp)
 8005ca4:	18805e26 	beq	r3,r2,8005e20 <vTaskPriorityDisinheritAfterTimeout+0x1ec>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ca8:	e0bff717 	ldw	r2,-36(fp)
 8005cac:	10c01117 	ldw	r3,68(r2)
 8005cb0:	e0bff817 	ldw	r2,-32(fp)
 8005cb4:	18805a1e 	bne	r3,r2,8005e20 <vTaskPriorityDisinheritAfterTimeout+0x1ec>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cb8:	e0bff717 	ldw	r2,-36(fp)
 8005cbc:	10800b17 	ldw	r2,44(r2)
 8005cc0:	e0bff915 	stw	r2,-28(fp)
                    pxTCB->uxPriority = uxPriorityToUse;
 8005cc4:	e0bff717 	ldw	r2,-36(fp)
 8005cc8:	e0fff617 	ldw	r3,-40(fp)
 8005ccc:	10c00b15 	stw	r3,44(r2)

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cd0:	e0bff717 	ldw	r2,-36(fp)
 8005cd4:	10800617 	ldw	r2,24(r2)
 8005cd8:	10000516 	blt	r2,zero,8005cf0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cdc:	00c00144 	movi	r3,5
 8005ce0:	e0bff617 	ldw	r2,-40(fp)
 8005ce4:	1887c83a 	sub	r3,r3,r2
 8005ce8:	e0bff717 	ldw	r2,-36(fp)
 8005cec:	10c00615 	stw	r3,24(r2)
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf0:	e0bff717 	ldw	r2,-36(fp)
 8005cf4:	14000517 	ldw	r16,20(r2)
 8005cf8:	01400504 	movi	r5,20
 8005cfc:	e13ff917 	ldw	r4,-28(fp)
 8005d00:	800722c0 	call	800722c <__mulsi3>
 8005d04:	1007883a 	mov	r3,r2
 8005d08:	008220b4 	movhi	r2,2178
 8005d0c:	10a7ff04 	addi	r2,r2,-24580
 8005d10:	1885883a 	add	r2,r3,r2
 8005d14:	8080421e 	bne	r16,r2,8005e20 <vTaskPriorityDisinheritAfterTimeout+0x1ec>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d18:	e0bff717 	ldw	r2,-36(fp)
 8005d1c:	10800104 	addi	r2,r2,4
 8005d20:	1009883a 	mov	r4,r2
 8005d24:	8000ca80 	call	8000ca8 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005d28:	e0bff717 	ldw	r2,-36(fp)
 8005d2c:	10800b17 	ldw	r2,44(r2)
 8005d30:	d0e6d517 	ldw	r3,-25772(gp)
 8005d34:	1880032e 	bgeu	r3,r2,8005d44 <vTaskPriorityDisinheritAfterTimeout+0x110>
 8005d38:	e0bff717 	ldw	r2,-36(fp)
 8005d3c:	10800b17 	ldw	r2,44(r2)
 8005d40:	d0a6d515 	stw	r2,-25772(gp)
 8005d44:	e0bff717 	ldw	r2,-36(fp)
 8005d48:	10800b17 	ldw	r2,44(r2)
 8005d4c:	040220b4 	movhi	r16,2178
 8005d50:	8427ff04 	addi	r16,r16,-24580
 8005d54:	01400504 	movi	r5,20
 8005d58:	1009883a 	mov	r4,r2
 8005d5c:	800722c0 	call	800722c <__mulsi3>
 8005d60:	8085883a 	add	r2,r16,r2
 8005d64:	10800104 	addi	r2,r2,4
 8005d68:	10800017 	ldw	r2,0(r2)
 8005d6c:	e0bffa15 	stw	r2,-24(fp)
 8005d70:	e0bff717 	ldw	r2,-36(fp)
 8005d74:	e0fffa17 	ldw	r3,-24(fp)
 8005d78:	10c00215 	stw	r3,8(r2)
 8005d7c:	e0bffa17 	ldw	r2,-24(fp)
 8005d80:	10c00217 	ldw	r3,8(r2)
 8005d84:	e0bff717 	ldw	r2,-36(fp)
 8005d88:	10c00315 	stw	r3,12(r2)
 8005d8c:	e0bffa17 	ldw	r2,-24(fp)
 8005d90:	10800217 	ldw	r2,8(r2)
 8005d94:	e0fff717 	ldw	r3,-36(fp)
 8005d98:	18c00104 	addi	r3,r3,4
 8005d9c:	10c00115 	stw	r3,4(r2)
 8005da0:	e0bff717 	ldw	r2,-36(fp)
 8005da4:	10c00104 	addi	r3,r2,4
 8005da8:	e0bffa17 	ldw	r2,-24(fp)
 8005dac:	10c00215 	stw	r3,8(r2)
 8005db0:	e0bff717 	ldw	r2,-36(fp)
 8005db4:	10800b17 	ldw	r2,44(r2)
 8005db8:	01400504 	movi	r5,20
 8005dbc:	1009883a 	mov	r4,r2
 8005dc0:	800722c0 	call	800722c <__mulsi3>
 8005dc4:	1007883a 	mov	r3,r2
 8005dc8:	008220b4 	movhi	r2,2178
 8005dcc:	10a7ff04 	addi	r2,r2,-24580
 8005dd0:	1887883a 	add	r3,r3,r2
 8005dd4:	e0bff717 	ldw	r2,-36(fp)
 8005dd8:	10c00515 	stw	r3,20(r2)
 8005ddc:	e0bff717 	ldw	r2,-36(fp)
 8005de0:	14800b17 	ldw	r18,44(r2)
 8005de4:	040220b4 	movhi	r16,2178
 8005de8:	8427ff04 	addi	r16,r16,-24580
 8005dec:	01400504 	movi	r5,20
 8005df0:	9009883a 	mov	r4,r18
 8005df4:	800722c0 	call	800722c <__mulsi3>
 8005df8:	8085883a 	add	r2,r16,r2
 8005dfc:	10800017 	ldw	r2,0(r2)
 8005e00:	14400044 	addi	r17,r2,1
 8005e04:	040220b4 	movhi	r16,2178
 8005e08:	8427ff04 	addi	r16,r16,-24580
 8005e0c:	01400504 	movi	r5,20
 8005e10:	9009883a 	mov	r4,r18
 8005e14:	800722c0 	call	800722c <__mulsi3>
 8005e18:	8085883a 	add	r2,r16,r2
 8005e1c:	14400015 	stw	r17,0(r2)
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005e20:	0001883a 	nop
 8005e24:	e6fffd04 	addi	sp,fp,-12
 8005e28:	dfc00417 	ldw	ra,16(sp)
 8005e2c:	df000317 	ldw	fp,12(sp)
 8005e30:	dc800217 	ldw	r18,8(sp)
 8005e34:	dc400117 	ldw	r17,4(sp)
 8005e38:	dc000017 	ldw	r16,0(sp)
 8005e3c:	dec00504 	addi	sp,sp,20
 8005e40:	f800283a 	ret

08005e44 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
 8005e44:	defffe04 	addi	sp,sp,-8
 8005e48:	df000115 	stw	fp,4(sp)
 8005e4c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005e50:	0005303a 	rdctl	r2,status
 8005e54:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005e58:	e0ffff17 	ldw	r3,-4(fp)
 8005e5c:	00bfff84 	movi	r2,-2
 8005e60:	1884703a 	and	r2,r3,r2
 8005e64:	1001703a 	wrctl	status,r2
        portDISABLE_INTERRUPTS();

        if( xSchedulerRunning != pdFALSE )
 8005e68:	d0a6d617 	ldw	r2,-25768(gp)
 8005e6c:	10000526 	beq	r2,zero,8005e84 <vTaskEnterCritical+0x40>
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
 8005e70:	d0a6cf17 	ldw	r2,-25796(gp)
 8005e74:	10c00f17 	ldw	r3,60(r2)
 8005e78:	18c00044 	addi	r3,r3,1
 8005e7c:	10c00f15 	stw	r3,60(r2)
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
 8005e80:	d0a6cf17 	ldw	r2,-25796(gp)
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005e84:	0001883a 	nop
 8005e88:	e037883a 	mov	sp,fp
 8005e8c:	df000017 	ldw	fp,0(sp)
 8005e90:	dec00104 	addi	sp,sp,4
 8005e94:	f800283a 	ret

08005e98 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
 8005e98:	defffe04 	addi	sp,sp,-8
 8005e9c:	df000115 	stw	fp,4(sp)
 8005ea0:	df000104 	addi	fp,sp,4
        if( xSchedulerRunning != pdFALSE )
 8005ea4:	d0a6d617 	ldw	r2,-25768(gp)
 8005ea8:	10000e26 	beq	r2,zero,8005ee4 <vTaskExitCritical+0x4c>
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
 8005eac:	d0a6cf17 	ldw	r2,-25796(gp)
 8005eb0:	10800f17 	ldw	r2,60(r2)
 8005eb4:	10000b26 	beq	r2,zero,8005ee4 <vTaskExitCritical+0x4c>
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
 8005eb8:	d0a6cf17 	ldw	r2,-25796(gp)
 8005ebc:	10c00f17 	ldw	r3,60(r2)
 8005ec0:	18ffffc4 	addi	r3,r3,-1
 8005ec4:	10c00f15 	stw	r3,60(r2)

                if( pxCurrentTCB->uxCriticalNesting == 0U )
 8005ec8:	d0a6cf17 	ldw	r2,-25796(gp)
 8005ecc:	10800f17 	ldw	r2,60(r2)
 8005ed0:	1000041e 	bne	r2,zero,8005ee4 <vTaskExitCritical+0x4c>
 8005ed4:	00800044 	movi	r2,1
 8005ed8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005edc:	e0bfff17 	ldw	r2,-4(fp)
 8005ee0:	1001703a 	wrctl	status,r2
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005ee4:	0001883a 	nop
 8005ee8:	e037883a 	mov	sp,fp
 8005eec:	df000017 	ldw	fp,0(sp)
 8005ef0:	dec00104 	addi	sp,sp,4
 8005ef4:	f800283a 	ret

08005ef8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005ef8:	defffe04 	addi	sp,sp,-8
 8005efc:	df000115 	stw	fp,4(sp)
 8005f00:	df000104 	addi	fp,sp,4
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005f04:	d0a6cf17 	ldw	r2,-25796(gp)
 8005f08:	10800617 	ldw	r2,24(r2)
 8005f0c:	e0bfff15 	stw	r2,-4(fp)

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f10:	d0a6cf17 	ldw	r2,-25796(gp)
 8005f14:	d0e6cf17 	ldw	r3,-25796(gp)
 8005f18:	18c00b17 	ldw	r3,44(r3)
 8005f1c:	01000144 	movi	r4,5
 8005f20:	20c7c83a 	sub	r3,r4,r3
 8005f24:	10c00615 	stw	r3,24(r2)

    return uxReturn;
 8005f28:	e0bfff17 	ldw	r2,-4(fp)
}
 8005f2c:	e037883a 	mov	sp,fp
 8005f30:	df000017 	ldw	fp,0(sp)
 8005f34:	dec00104 	addi	sp,sp,4
 8005f38:	f800283a 	ret

08005f3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005f3c:	deffff04 	addi	sp,sp,-4
 8005f40:	df000015 	stw	fp,0(sp)
 8005f44:	d839883a 	mov	fp,sp
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005f48:	d0a6cf17 	ldw	r2,-25796(gp)
 8005f4c:	10000426 	beq	r2,zero,8005f60 <pvTaskIncrementMutexHeldCount+0x24>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005f50:	d0a6cf17 	ldw	r2,-25796(gp)
 8005f54:	10c01117 	ldw	r3,68(r2)
 8005f58:	18c00044 	addi	r3,r3,1
 8005f5c:	10c01115 	stw	r3,68(r2)
        }

        return pxCurrentTCB;
 8005f60:	d0a6cf17 	ldw	r2,-25796(gp)
    }
 8005f64:	e037883a 	mov	sp,fp
 8005f68:	df000017 	ldw	fp,0(sp)
 8005f6c:	dec00104 	addi	sp,sp,4
 8005f70:	f800283a 	ret

08005f74 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005f74:	defffa04 	addi	sp,sp,-24
 8005f78:	dfc00515 	stw	ra,20(sp)
 8005f7c:	df000415 	stw	fp,16(sp)
 8005f80:	df000404 	addi	fp,sp,16
 8005f84:	e13ffd15 	stw	r4,-12(fp)
 8005f88:	e17ffe15 	stw	r5,-8(fp)
 8005f8c:	e1bfff15 	stw	r6,-4(fp)
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 8005f90:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8005f94:	d0e6cf17 	ldw	r3,-25796(gp)
 8005f98:	e0bffd17 	ldw	r2,-12(fp)
 8005f9c:	10800484 	addi	r2,r2,18
 8005fa0:	1085883a 	add	r2,r2,r2
 8005fa4:	1085883a 	add	r2,r2,r2
 8005fa8:	1885883a 	add	r2,r3,r2
 8005fac:	10800017 	ldw	r2,0(r2)
 8005fb0:	10000c1e 	bne	r2,zero,8005fe4 <ulTaskGenericNotifyTake+0x70>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005fb4:	d0e6cf17 	ldw	r3,-25796(gp)
 8005fb8:	e0bffd17 	ldw	r2,-12(fp)
 8005fbc:	1885883a 	add	r2,r3,r2
 8005fc0:	10801304 	addi	r2,r2,76
 8005fc4:	00c00044 	movi	r3,1
 8005fc8:	10c00005 	stb	r3,0(r2)

                if( xTicksToWait > ( TickType_t ) 0 )
 8005fcc:	e0bfff17 	ldw	r2,-4(fp)
 8005fd0:	10000426 	beq	r2,zero,8005fe4 <ulTaskGenericNotifyTake+0x70>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fd4:	01400044 	movi	r5,1
 8005fd8:	e13fff17 	ldw	r4,-4(fp)
 8005fdc:	8006dec0 	call	8006dec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005fe0:	003b683a 	trap	0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005fe4:	8005e980 	call	8005e98 <vTaskExitCritical>

        taskENTER_CRITICAL();
 8005fe8:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005fec:	d0e6cf17 	ldw	r3,-25796(gp)
 8005ff0:	e0bffd17 	ldw	r2,-12(fp)
 8005ff4:	10800484 	addi	r2,r2,18
 8005ff8:	1085883a 	add	r2,r2,r2
 8005ffc:	1085883a 	add	r2,r2,r2
 8006000:	1885883a 	add	r2,r3,r2
 8006004:	10800017 	ldw	r2,0(r2)
 8006008:	e0bffc15 	stw	r2,-16(fp)

            if( ulReturn != 0UL )
 800600c:	e0bffc17 	ldw	r2,-16(fp)
 8006010:	10001326 	beq	r2,zero,8006060 <ulTaskGenericNotifyTake+0xec>
            {
                if( xClearCountOnExit != pdFALSE )
 8006014:	e0bffe17 	ldw	r2,-8(fp)
 8006018:	10000826 	beq	r2,zero,800603c <ulTaskGenericNotifyTake+0xc8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800601c:	d0e6cf17 	ldw	r3,-25796(gp)
 8006020:	e0bffd17 	ldw	r2,-12(fp)
 8006024:	10800484 	addi	r2,r2,18
 8006028:	1085883a 	add	r2,r2,r2
 800602c:	1085883a 	add	r2,r2,r2
 8006030:	1885883a 	add	r2,r3,r2
 8006034:	10000015 	stw	zero,0(r2)
 8006038:	00000906 	br	8006060 <ulTaskGenericNotifyTake+0xec>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800603c:	d126cf17 	ldw	r4,-25796(gp)
 8006040:	e0bffc17 	ldw	r2,-16(fp)
 8006044:	10ffffc4 	addi	r3,r2,-1
 8006048:	e0bffd17 	ldw	r2,-12(fp)
 800604c:	10800484 	addi	r2,r2,18
 8006050:	1085883a 	add	r2,r2,r2
 8006054:	1085883a 	add	r2,r2,r2
 8006058:	2085883a 	add	r2,r4,r2
 800605c:	10c00015 	stw	r3,0(r2)
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006060:	d0e6cf17 	ldw	r3,-25796(gp)
 8006064:	e0bffd17 	ldw	r2,-12(fp)
 8006068:	1885883a 	add	r2,r3,r2
 800606c:	10801304 	addi	r2,r2,76
 8006070:	10000005 	stb	zero,0(r2)
        }
        taskEXIT_CRITICAL();
 8006074:	8005e980 	call	8005e98 <vTaskExitCritical>

        return ulReturn;
 8006078:	e0bffc17 	ldw	r2,-16(fp)
    }
 800607c:	e037883a 	mov	sp,fp
 8006080:	dfc00117 	ldw	ra,4(sp)
 8006084:	df000017 	ldw	fp,0(sp)
 8006088:	dec00204 	addi	sp,sp,8
 800608c:	f800283a 	ret

08006090 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006090:	defff904 	addi	sp,sp,-28
 8006094:	dfc00615 	stw	ra,24(sp)
 8006098:	df000515 	stw	fp,20(sp)
 800609c:	df000504 	addi	fp,sp,20
 80060a0:	e13ffc15 	stw	r4,-16(fp)
 80060a4:	e17ffd15 	stw	r5,-12(fp)
 80060a8:	e1bffe15 	stw	r6,-8(fp)
 80060ac:	e1ffff15 	stw	r7,-4(fp)
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 80060b0:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80060b4:	d0e6cf17 	ldw	r3,-25796(gp)
 80060b8:	e0bffc17 	ldw	r2,-16(fp)
 80060bc:	1885883a 	add	r2,r3,r2
 80060c0:	10801304 	addi	r2,r2,76
 80060c4:	10800003 	ldbu	r2,0(r2)
 80060c8:	10803fcc 	andi	r2,r2,255
 80060cc:	108000a0 	cmpeqi	r2,r2,2
 80060d0:	10001c1e 	bne	r2,zero,8006144 <xTaskGenericNotifyWait+0xb4>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80060d4:	d0a6cf17 	ldw	r2,-25796(gp)
 80060d8:	e0fffc17 	ldw	r3,-16(fp)
 80060dc:	18c00484 	addi	r3,r3,18
 80060e0:	18c7883a 	add	r3,r3,r3
 80060e4:	18c7883a 	add	r3,r3,r3
 80060e8:	10c7883a 	add	r3,r2,r3
 80060ec:	19000017 	ldw	r4,0(r3)
 80060f0:	e0fffd17 	ldw	r3,-12(fp)
 80060f4:	00c6303a 	nor	r3,zero,r3
 80060f8:	20c8703a 	and	r4,r4,r3
 80060fc:	e0fffc17 	ldw	r3,-16(fp)
 8006100:	18c00484 	addi	r3,r3,18
 8006104:	18c7883a 	add	r3,r3,r3
 8006108:	18c7883a 	add	r3,r3,r3
 800610c:	10c5883a 	add	r2,r2,r3
 8006110:	11000015 	stw	r4,0(r2)

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006114:	d0e6cf17 	ldw	r3,-25796(gp)
 8006118:	e0bffc17 	ldw	r2,-16(fp)
 800611c:	1885883a 	add	r2,r3,r2
 8006120:	10801304 	addi	r2,r2,76
 8006124:	00c00044 	movi	r3,1
 8006128:	10c00005 	stb	r3,0(r2)

                if( xTicksToWait > ( TickType_t ) 0 )
 800612c:	e0800217 	ldw	r2,8(fp)
 8006130:	10000426 	beq	r2,zero,8006144 <xTaskGenericNotifyWait+0xb4>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006134:	01400044 	movi	r5,1
 8006138:	e1000217 	ldw	r4,8(fp)
 800613c:	8006dec0 	call	8006dec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006140:	003b683a 	trap	0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006144:	8005e980 	call	8005e98 <vTaskExitCritical>

        taskENTER_CRITICAL();
 8006148:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 800614c:	e0bfff17 	ldw	r2,-4(fp)
 8006150:	10000926 	beq	r2,zero,8006178 <xTaskGenericNotifyWait+0xe8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006154:	d0e6cf17 	ldw	r3,-25796(gp)
 8006158:	e0bffc17 	ldw	r2,-16(fp)
 800615c:	10800484 	addi	r2,r2,18
 8006160:	1085883a 	add	r2,r2,r2
 8006164:	1085883a 	add	r2,r2,r2
 8006168:	1885883a 	add	r2,r3,r2
 800616c:	10c00017 	ldw	r3,0(r2)
 8006170:	e0bfff17 	ldw	r2,-4(fp)
 8006174:	10c00015 	stw	r3,0(r2)

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006178:	d0e6cf17 	ldw	r3,-25796(gp)
 800617c:	e0bffc17 	ldw	r2,-16(fp)
 8006180:	1885883a 	add	r2,r3,r2
 8006184:	10801304 	addi	r2,r2,76
 8006188:	10800003 	ldbu	r2,0(r2)
 800618c:	10803fcc 	andi	r2,r2,255
 8006190:	108000a0 	cmpeqi	r2,r2,2
 8006194:	1000021e 	bne	r2,zero,80061a0 <xTaskGenericNotifyWait+0x110>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006198:	e03ffb15 	stw	zero,-20(fp)
 800619c:	00001206 	br	80061e8 <xTaskGenericNotifyWait+0x158>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80061a0:	d0a6cf17 	ldw	r2,-25796(gp)
 80061a4:	e0fffc17 	ldw	r3,-16(fp)
 80061a8:	18c00484 	addi	r3,r3,18
 80061ac:	18c7883a 	add	r3,r3,r3
 80061b0:	18c7883a 	add	r3,r3,r3
 80061b4:	10c7883a 	add	r3,r2,r3
 80061b8:	19000017 	ldw	r4,0(r3)
 80061bc:	e0fffe17 	ldw	r3,-8(fp)
 80061c0:	00c6303a 	nor	r3,zero,r3
 80061c4:	20c8703a 	and	r4,r4,r3
 80061c8:	e0fffc17 	ldw	r3,-16(fp)
 80061cc:	18c00484 	addi	r3,r3,18
 80061d0:	18c7883a 	add	r3,r3,r3
 80061d4:	18c7883a 	add	r3,r3,r3
 80061d8:	10c5883a 	add	r2,r2,r3
 80061dc:	11000015 	stw	r4,0(r2)
                xReturn = pdTRUE;
 80061e0:	00800044 	movi	r2,1
 80061e4:	e0bffb15 	stw	r2,-20(fp)
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061e8:	d0e6cf17 	ldw	r3,-25796(gp)
 80061ec:	e0bffc17 	ldw	r2,-16(fp)
 80061f0:	1885883a 	add	r2,r3,r2
 80061f4:	10801304 	addi	r2,r2,76
 80061f8:	10000005 	stb	zero,0(r2)
        }
        taskEXIT_CRITICAL();
 80061fc:	8005e980 	call	8005e98 <vTaskExitCritical>

        return xReturn;
 8006200:	e0bffb17 	ldw	r2,-20(fp)
    }
 8006204:	e037883a 	mov	sp,fp
 8006208:	dfc00117 	ldw	ra,4(sp)
 800620c:	df000017 	ldw	fp,0(sp)
 8006210:	dec00204 	addi	sp,sp,8
 8006214:	f800283a 	ret

08006218 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006218:	defff204 	addi	sp,sp,-56
 800621c:	dfc00d15 	stw	ra,52(sp)
 8006220:	df000c15 	stw	fp,48(sp)
 8006224:	dc800b15 	stw	r18,44(sp)
 8006228:	dc400a15 	stw	r17,40(sp)
 800622c:	dc000915 	stw	r16,36(sp)
 8006230:	df000c04 	addi	fp,sp,48
 8006234:	e13ff915 	stw	r4,-28(fp)
 8006238:	e17ffa15 	stw	r5,-24(fp)
 800623c:	e1bffb15 	stw	r6,-20(fp)
 8006240:	e1fffc15 	stw	r7,-16(fp)
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006244:	00800044 	movi	r2,1
 8006248:	e0bff415 	stw	r2,-48(fp)
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;
 800624c:	e0bff917 	ldw	r2,-28(fp)
 8006250:	e0bff515 	stw	r2,-44(fp)

        taskENTER_CRITICAL();
 8006254:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006258:	e0800217 	ldw	r2,8(fp)
 800625c:	10000926 	beq	r2,zero,8006284 <xTaskGenericNotify+0x6c>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006260:	e0fff517 	ldw	r3,-44(fp)
 8006264:	e0bffa17 	ldw	r2,-24(fp)
 8006268:	10800484 	addi	r2,r2,18
 800626c:	1085883a 	add	r2,r2,r2
 8006270:	1085883a 	add	r2,r2,r2
 8006274:	1885883a 	add	r2,r3,r2
 8006278:	10c00017 	ldw	r3,0(r2)
 800627c:	e0800217 	ldw	r2,8(fp)
 8006280:	10c00015 	stw	r3,0(r2)
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006284:	e0fff517 	ldw	r3,-44(fp)
 8006288:	e0bffa17 	ldw	r2,-24(fp)
 800628c:	1885883a 	add	r2,r3,r2
 8006290:	10801304 	addi	r2,r2,76
 8006294:	10800003 	ldbu	r2,0(r2)
 8006298:	e0bff605 	stb	r2,-40(fp)

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800629c:	e0fff517 	ldw	r3,-44(fp)
 80062a0:	e0bffa17 	ldw	r2,-24(fp)
 80062a4:	1885883a 	add	r2,r3,r2
 80062a8:	10801304 	addi	r2,r2,76
 80062ac:	00c00084 	movi	r3,2
 80062b0:	10c00005 	stb	r3,0(r2)

            switch( eAction )
 80062b4:	e0bffc17 	ldw	r2,-16(fp)
 80062b8:	10800168 	cmpgeui	r2,r2,5
 80062bc:	1000441e 	bne	r2,zero,80063d0 <xTaskGenericNotify+0x1b8>
 80062c0:	e0bffc17 	ldw	r2,-16(fp)
 80062c4:	100690ba 	slli	r3,r2,2
 80062c8:	00820034 	movhi	r2,2048
 80062cc:	1098b704 	addi	r2,r2,25308
 80062d0:	1885883a 	add	r2,r3,r2
 80062d4:	10800017 	ldw	r2,0(r2)
 80062d8:	1000683a 	jmp	r2
 80062dc:	080063d8 	cmpnei	zero,at,399
 80062e0:	080062f0 	cmpltui	zero,at,395
 80062e4:	08006334 	orhi	zero,at,396
 80062e8:	08006374 	orhi	zero,at,397
 80062ec:	08006398 	cmpnei	zero,at,398
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80062f0:	e0fff517 	ldw	r3,-44(fp)
 80062f4:	e0bffa17 	ldw	r2,-24(fp)
 80062f8:	10800484 	addi	r2,r2,18
 80062fc:	1085883a 	add	r2,r2,r2
 8006300:	1085883a 	add	r2,r2,r2
 8006304:	1885883a 	add	r2,r3,r2
 8006308:	10c00017 	ldw	r3,0(r2)
 800630c:	e0bffb17 	ldw	r2,-20(fp)
 8006310:	1886b03a 	or	r3,r3,r2
 8006314:	e13ff517 	ldw	r4,-44(fp)
 8006318:	e0bffa17 	ldw	r2,-24(fp)
 800631c:	10800484 	addi	r2,r2,18
 8006320:	1085883a 	add	r2,r2,r2
 8006324:	1085883a 	add	r2,r2,r2
 8006328:	2085883a 	add	r2,r4,r2
 800632c:	10c00015 	stw	r3,0(r2)
                    break;
 8006330:	00002a06 	br	80063dc <xTaskGenericNotify+0x1c4>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006334:	e0fff517 	ldw	r3,-44(fp)
 8006338:	e0bffa17 	ldw	r2,-24(fp)
 800633c:	10800484 	addi	r2,r2,18
 8006340:	1085883a 	add	r2,r2,r2
 8006344:	1085883a 	add	r2,r2,r2
 8006348:	1885883a 	add	r2,r3,r2
 800634c:	10800017 	ldw	r2,0(r2)
 8006350:	10c00044 	addi	r3,r2,1
 8006354:	e13ff517 	ldw	r4,-44(fp)
 8006358:	e0bffa17 	ldw	r2,-24(fp)
 800635c:	10800484 	addi	r2,r2,18
 8006360:	1085883a 	add	r2,r2,r2
 8006364:	1085883a 	add	r2,r2,r2
 8006368:	2085883a 	add	r2,r4,r2
 800636c:	10c00015 	stw	r3,0(r2)
                    break;
 8006370:	00001a06 	br	80063dc <xTaskGenericNotify+0x1c4>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006374:	e0fff517 	ldw	r3,-44(fp)
 8006378:	e0bffa17 	ldw	r2,-24(fp)
 800637c:	10800484 	addi	r2,r2,18
 8006380:	1085883a 	add	r2,r2,r2
 8006384:	1085883a 	add	r2,r2,r2
 8006388:	1885883a 	add	r2,r3,r2
 800638c:	e0fffb17 	ldw	r3,-20(fp)
 8006390:	10c00015 	stw	r3,0(r2)
                    break;
 8006394:	00001106 	br	80063dc <xTaskGenericNotify+0x1c4>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006398:	e0bff603 	ldbu	r2,-40(fp)
 800639c:	108000a0 	cmpeqi	r2,r2,2
 80063a0:	1000091e 	bne	r2,zero,80063c8 <xTaskGenericNotify+0x1b0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063a4:	e0fff517 	ldw	r3,-44(fp)
 80063a8:	e0bffa17 	ldw	r2,-24(fp)
 80063ac:	10800484 	addi	r2,r2,18
 80063b0:	1085883a 	add	r2,r2,r2
 80063b4:	1085883a 	add	r2,r2,r2
 80063b8:	1885883a 	add	r2,r3,r2
 80063bc:	e0fffb17 	ldw	r3,-20(fp)
 80063c0:	10c00015 	stw	r3,0(r2)
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80063c4:	00000506 	br	80063dc <xTaskGenericNotify+0x1c4>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
 80063c8:	e03ff415 	stw	zero,-48(fp)
                    }

                    break;
 80063cc:	00000306 	br	80063dc <xTaskGenericNotify+0x1c4>
                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );

                    break;
 80063d0:	0001883a 	nop
 80063d4:	00000106 	br	80063dc <xTaskGenericNotify+0x1c4>

                case eNoAction:

                    /* The task is being notified without its notify value being
                     * updated. */
                    break;
 80063d8:	0001883a 	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063dc:	e0bff603 	ldbu	r2,-40(fp)
 80063e0:	10800058 	cmpnei	r2,r2,1
 80063e4:	1000611e 	bne	r2,zero,800656c <xTaskGenericNotify+0x354>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80063e8:	e0bff517 	ldw	r2,-44(fp)
 80063ec:	10800517 	ldw	r2,20(r2)
 80063f0:	e0bff715 	stw	r2,-36(fp)
 80063f4:	e0bff517 	ldw	r2,-44(fp)
 80063f8:	10800217 	ldw	r2,8(r2)
 80063fc:	e0fff517 	ldw	r3,-44(fp)
 8006400:	18c00317 	ldw	r3,12(r3)
 8006404:	10c00215 	stw	r3,8(r2)
 8006408:	e0bff517 	ldw	r2,-44(fp)
 800640c:	10800317 	ldw	r2,12(r2)
 8006410:	e0fff517 	ldw	r3,-44(fp)
 8006414:	18c00217 	ldw	r3,8(r3)
 8006418:	10c00115 	stw	r3,4(r2)
 800641c:	e0bff717 	ldw	r2,-36(fp)
 8006420:	10c00117 	ldw	r3,4(r2)
 8006424:	e0bff517 	ldw	r2,-44(fp)
 8006428:	10800104 	addi	r2,r2,4
 800642c:	1880041e 	bne	r3,r2,8006440 <xTaskGenericNotify+0x228>
 8006430:	e0bff517 	ldw	r2,-44(fp)
 8006434:	10c00317 	ldw	r3,12(r2)
 8006438:	e0bff717 	ldw	r2,-36(fp)
 800643c:	10c00115 	stw	r3,4(r2)
 8006440:	e0bff517 	ldw	r2,-44(fp)
 8006444:	10000515 	stw	zero,20(r2)
 8006448:	e0bff717 	ldw	r2,-36(fp)
 800644c:	10800017 	ldw	r2,0(r2)
 8006450:	10ffffc4 	addi	r3,r2,-1
 8006454:	e0bff717 	ldw	r2,-36(fp)
 8006458:	10c00015 	stw	r3,0(r2)
                prvAddTaskToReadyList( pxTCB );
 800645c:	e0bff517 	ldw	r2,-44(fp)
 8006460:	10800b17 	ldw	r2,44(r2)
 8006464:	d0e6d517 	ldw	r3,-25772(gp)
 8006468:	1880032e 	bgeu	r3,r2,8006478 <xTaskGenericNotify+0x260>
 800646c:	e0bff517 	ldw	r2,-44(fp)
 8006470:	10800b17 	ldw	r2,44(r2)
 8006474:	d0a6d515 	stw	r2,-25772(gp)
 8006478:	e0bff517 	ldw	r2,-44(fp)
 800647c:	10800b17 	ldw	r2,44(r2)
 8006480:	040220b4 	movhi	r16,2178
 8006484:	8427ff04 	addi	r16,r16,-24580
 8006488:	01400504 	movi	r5,20
 800648c:	1009883a 	mov	r4,r2
 8006490:	800722c0 	call	800722c <__mulsi3>
 8006494:	8085883a 	add	r2,r16,r2
 8006498:	10800104 	addi	r2,r2,4
 800649c:	10800017 	ldw	r2,0(r2)
 80064a0:	e0bff815 	stw	r2,-32(fp)
 80064a4:	e0bff517 	ldw	r2,-44(fp)
 80064a8:	e0fff817 	ldw	r3,-32(fp)
 80064ac:	10c00215 	stw	r3,8(r2)
 80064b0:	e0bff817 	ldw	r2,-32(fp)
 80064b4:	10c00217 	ldw	r3,8(r2)
 80064b8:	e0bff517 	ldw	r2,-44(fp)
 80064bc:	10c00315 	stw	r3,12(r2)
 80064c0:	e0bff817 	ldw	r2,-32(fp)
 80064c4:	10800217 	ldw	r2,8(r2)
 80064c8:	e0fff517 	ldw	r3,-44(fp)
 80064cc:	18c00104 	addi	r3,r3,4
 80064d0:	10c00115 	stw	r3,4(r2)
 80064d4:	e0bff517 	ldw	r2,-44(fp)
 80064d8:	10c00104 	addi	r3,r2,4
 80064dc:	e0bff817 	ldw	r2,-32(fp)
 80064e0:	10c00215 	stw	r3,8(r2)
 80064e4:	e0bff517 	ldw	r2,-44(fp)
 80064e8:	10800b17 	ldw	r2,44(r2)
 80064ec:	01400504 	movi	r5,20
 80064f0:	1009883a 	mov	r4,r2
 80064f4:	800722c0 	call	800722c <__mulsi3>
 80064f8:	1007883a 	mov	r3,r2
 80064fc:	008220b4 	movhi	r2,2178
 8006500:	10a7ff04 	addi	r2,r2,-24580
 8006504:	1887883a 	add	r3,r3,r2
 8006508:	e0bff517 	ldw	r2,-44(fp)
 800650c:	10c00515 	stw	r3,20(r2)
 8006510:	e0bff517 	ldw	r2,-44(fp)
 8006514:	14800b17 	ldw	r18,44(r2)
 8006518:	040220b4 	movhi	r16,2178
 800651c:	8427ff04 	addi	r16,r16,-24580
 8006520:	01400504 	movi	r5,20
 8006524:	9009883a 	mov	r4,r18
 8006528:	800722c0 	call	800722c <__mulsi3>
 800652c:	8085883a 	add	r2,r16,r2
 8006530:	10800017 	ldw	r2,0(r2)
 8006534:	14400044 	addi	r17,r2,1
 8006538:	040220b4 	movhi	r16,2178
 800653c:	8427ff04 	addi	r16,r16,-24580
 8006540:	01400504 	movi	r5,20
 8006544:	9009883a 	mov	r4,r18
 8006548:	800722c0 	call	800722c <__mulsi3>
 800654c:	8085883a 	add	r2,r16,r2
 8006550:	14400015 	stw	r17,0(r2)
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006554:	e0bff517 	ldw	r2,-44(fp)
 8006558:	10800b17 	ldw	r2,44(r2)
 800655c:	d0e6cf17 	ldw	r3,-25796(gp)
 8006560:	18c00b17 	ldw	r3,44(r3)
 8006564:	1880012e 	bgeu	r3,r2,800656c <xTaskGenericNotify+0x354>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006568:	003b683a 	trap	0
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800656c:	8005e980 	call	8005e98 <vTaskExitCritical>

        return xReturn;
 8006570:	e0bff417 	ldw	r2,-48(fp)
    }
 8006574:	e6fffd04 	addi	sp,fp,-12
 8006578:	dfc00417 	ldw	ra,16(sp)
 800657c:	df000317 	ldw	fp,12(sp)
 8006580:	dc800217 	ldw	r18,8(sp)
 8006584:	dc400117 	ldw	r17,4(sp)
 8006588:	dc000017 	ldw	r16,0(sp)
 800658c:	dec00504 	addi	sp,sp,20
 8006590:	f800283a 	ret

08006594 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006594:	defff004 	addi	sp,sp,-64
 8006598:	dfc00f15 	stw	ra,60(sp)
 800659c:	df000e15 	stw	fp,56(sp)
 80065a0:	dc800d15 	stw	r18,52(sp)
 80065a4:	dc400c15 	stw	r17,48(sp)
 80065a8:	dc000b15 	stw	r16,44(sp)
 80065ac:	df000e04 	addi	fp,sp,56
 80065b0:	e13ff915 	stw	r4,-28(fp)
 80065b4:	e17ffa15 	stw	r5,-24(fp)
 80065b8:	e1bffb15 	stw	r6,-20(fp)
 80065bc:	e1fffc15 	stw	r7,-16(fp)
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80065c0:	00800044 	movi	r2,1
 80065c4:	e0bff215 	stw	r2,-56(fp)
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 80065c8:	e0bff917 	ldw	r2,-28(fp)
 80065cc:	e0bff315 	stw	r2,-52(fp)

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d0:	e03ff415 	stw	zero,-48(fp)
        {
            if( pulPreviousNotificationValue != NULL )
 80065d4:	e0800217 	ldw	r2,8(fp)
 80065d8:	10000926 	beq	r2,zero,8006600 <xTaskGenericNotifyFromISR+0x6c>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80065dc:	e0fff317 	ldw	r3,-52(fp)
 80065e0:	e0bffa17 	ldw	r2,-24(fp)
 80065e4:	10800484 	addi	r2,r2,18
 80065e8:	1085883a 	add	r2,r2,r2
 80065ec:	1085883a 	add	r2,r2,r2
 80065f0:	1885883a 	add	r2,r3,r2
 80065f4:	10c00017 	ldw	r3,0(r2)
 80065f8:	e0800217 	ldw	r2,8(fp)
 80065fc:	10c00015 	stw	r3,0(r2)
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006600:	e0fff317 	ldw	r3,-52(fp)
 8006604:	e0bffa17 	ldw	r2,-24(fp)
 8006608:	1885883a 	add	r2,r3,r2
 800660c:	10801304 	addi	r2,r2,76
 8006610:	10800003 	ldbu	r2,0(r2)
 8006614:	e0bff505 	stb	r2,-44(fp)
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006618:	e0fff317 	ldw	r3,-52(fp)
 800661c:	e0bffa17 	ldw	r2,-24(fp)
 8006620:	1885883a 	add	r2,r3,r2
 8006624:	10801304 	addi	r2,r2,76
 8006628:	00c00084 	movi	r3,2
 800662c:	10c00005 	stb	r3,0(r2)

            switch( eAction )
 8006630:	e0bffc17 	ldw	r2,-16(fp)
 8006634:	10800168 	cmpgeui	r2,r2,5
 8006638:	1000441e 	bne	r2,zero,800674c <xTaskGenericNotifyFromISR+0x1b8>
 800663c:	e0bffc17 	ldw	r2,-16(fp)
 8006640:	100690ba 	slli	r3,r2,2
 8006644:	00820034 	movhi	r2,2048
 8006648:	10999604 	addi	r2,r2,26200
 800664c:	1885883a 	add	r2,r3,r2
 8006650:	10800017 	ldw	r2,0(r2)
 8006654:	1000683a 	jmp	r2
 8006658:	08006754 	ori	zero,at,413
 800665c:	0800666c 	andhi	zero,at,409
 8006660:	080066b0 	cmpltui	zero,at,410
 8006664:	080066f0 	cmpltui	zero,at,411
 8006668:	08006714 	ori	zero,at,412
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800666c:	e0fff317 	ldw	r3,-52(fp)
 8006670:	e0bffa17 	ldw	r2,-24(fp)
 8006674:	10800484 	addi	r2,r2,18
 8006678:	1085883a 	add	r2,r2,r2
 800667c:	1085883a 	add	r2,r2,r2
 8006680:	1885883a 	add	r2,r3,r2
 8006684:	10c00017 	ldw	r3,0(r2)
 8006688:	e0bffb17 	ldw	r2,-20(fp)
 800668c:	1886b03a 	or	r3,r3,r2
 8006690:	e13ff317 	ldw	r4,-52(fp)
 8006694:	e0bffa17 	ldw	r2,-24(fp)
 8006698:	10800484 	addi	r2,r2,18
 800669c:	1085883a 	add	r2,r2,r2
 80066a0:	1085883a 	add	r2,r2,r2
 80066a4:	2085883a 	add	r2,r4,r2
 80066a8:	10c00015 	stw	r3,0(r2)
                    break;
 80066ac:	00002a06 	br	8006758 <xTaskGenericNotifyFromISR+0x1c4>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80066b0:	e0fff317 	ldw	r3,-52(fp)
 80066b4:	e0bffa17 	ldw	r2,-24(fp)
 80066b8:	10800484 	addi	r2,r2,18
 80066bc:	1085883a 	add	r2,r2,r2
 80066c0:	1085883a 	add	r2,r2,r2
 80066c4:	1885883a 	add	r2,r3,r2
 80066c8:	10800017 	ldw	r2,0(r2)
 80066cc:	10c00044 	addi	r3,r2,1
 80066d0:	e13ff317 	ldw	r4,-52(fp)
 80066d4:	e0bffa17 	ldw	r2,-24(fp)
 80066d8:	10800484 	addi	r2,r2,18
 80066dc:	1085883a 	add	r2,r2,r2
 80066e0:	1085883a 	add	r2,r2,r2
 80066e4:	2085883a 	add	r2,r4,r2
 80066e8:	10c00015 	stw	r3,0(r2)
                    break;
 80066ec:	00001a06 	br	8006758 <xTaskGenericNotifyFromISR+0x1c4>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066f0:	e0fff317 	ldw	r3,-52(fp)
 80066f4:	e0bffa17 	ldw	r2,-24(fp)
 80066f8:	10800484 	addi	r2,r2,18
 80066fc:	1085883a 	add	r2,r2,r2
 8006700:	1085883a 	add	r2,r2,r2
 8006704:	1885883a 	add	r2,r3,r2
 8006708:	e0fffb17 	ldw	r3,-20(fp)
 800670c:	10c00015 	stw	r3,0(r2)
                    break;
 8006710:	00001106 	br	8006758 <xTaskGenericNotifyFromISR+0x1c4>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006714:	e0bff503 	ldbu	r2,-44(fp)
 8006718:	108000a0 	cmpeqi	r2,r2,2
 800671c:	1000091e 	bne	r2,zero,8006744 <xTaskGenericNotifyFromISR+0x1b0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006720:	e0fff317 	ldw	r3,-52(fp)
 8006724:	e0bffa17 	ldw	r2,-24(fp)
 8006728:	10800484 	addi	r2,r2,18
 800672c:	1085883a 	add	r2,r2,r2
 8006730:	1085883a 	add	r2,r2,r2
 8006734:	1885883a 	add	r2,r3,r2
 8006738:	e0fffb17 	ldw	r3,-20(fp)
 800673c:	10c00015 	stw	r3,0(r2)
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006740:	00000506 	br	8006758 <xTaskGenericNotifyFromISR+0x1c4>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
 8006744:	e03ff215 	stw	zero,-56(fp)
                    }

                    break;
 8006748:	00000306 	br	8006758 <xTaskGenericNotifyFromISR+0x1c4>

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
                    break;
 800674c:	0001883a 	nop
 8006750:	00000106 	br	8006758 <xTaskGenericNotifyFromISR+0x1c4>

                case eNoAction:

                    /* The task is being notified without its notify value being
                     * updated. */
                    break;
 8006754:	0001883a 	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006758:	e0bff503 	ldbu	r2,-44(fp)
 800675c:	10800058 	cmpnei	r2,r2,1
 8006760:	1000891e 	bne	r2,zero,8006988 <xTaskGenericNotifyFromISR+0x3f4>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006764:	d0a6dd17 	ldw	r2,-25740(gp)
 8006768:	10005c1e 	bne	r2,zero,80068dc <xTaskGenericNotifyFromISR+0x348>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800676c:	e0bff317 	ldw	r2,-52(fp)
 8006770:	10800517 	ldw	r2,20(r2)
 8006774:	e0bff615 	stw	r2,-40(fp)
 8006778:	e0bff317 	ldw	r2,-52(fp)
 800677c:	10800217 	ldw	r2,8(r2)
 8006780:	e0fff317 	ldw	r3,-52(fp)
 8006784:	18c00317 	ldw	r3,12(r3)
 8006788:	10c00215 	stw	r3,8(r2)
 800678c:	e0bff317 	ldw	r2,-52(fp)
 8006790:	10800317 	ldw	r2,12(r2)
 8006794:	e0fff317 	ldw	r3,-52(fp)
 8006798:	18c00217 	ldw	r3,8(r3)
 800679c:	10c00115 	stw	r3,4(r2)
 80067a0:	e0bff617 	ldw	r2,-40(fp)
 80067a4:	10c00117 	ldw	r3,4(r2)
 80067a8:	e0bff317 	ldw	r2,-52(fp)
 80067ac:	10800104 	addi	r2,r2,4
 80067b0:	1880041e 	bne	r3,r2,80067c4 <xTaskGenericNotifyFromISR+0x230>
 80067b4:	e0bff317 	ldw	r2,-52(fp)
 80067b8:	10c00317 	ldw	r3,12(r2)
 80067bc:	e0bff617 	ldw	r2,-40(fp)
 80067c0:	10c00115 	stw	r3,4(r2)
 80067c4:	e0bff317 	ldw	r2,-52(fp)
 80067c8:	10000515 	stw	zero,20(r2)
 80067cc:	e0bff617 	ldw	r2,-40(fp)
 80067d0:	10800017 	ldw	r2,0(r2)
 80067d4:	10ffffc4 	addi	r3,r2,-1
 80067d8:	e0bff617 	ldw	r2,-40(fp)
 80067dc:	10c00015 	stw	r3,0(r2)
                    prvAddTaskToReadyList( pxTCB );
 80067e0:	e0bff317 	ldw	r2,-52(fp)
 80067e4:	10800b17 	ldw	r2,44(r2)
 80067e8:	d0e6d517 	ldw	r3,-25772(gp)
 80067ec:	1880032e 	bgeu	r3,r2,80067fc <xTaskGenericNotifyFromISR+0x268>
 80067f0:	e0bff317 	ldw	r2,-52(fp)
 80067f4:	10800b17 	ldw	r2,44(r2)
 80067f8:	d0a6d515 	stw	r2,-25772(gp)
 80067fc:	e0bff317 	ldw	r2,-52(fp)
 8006800:	10800b17 	ldw	r2,44(r2)
 8006804:	040220b4 	movhi	r16,2178
 8006808:	8427ff04 	addi	r16,r16,-24580
 800680c:	01400504 	movi	r5,20
 8006810:	1009883a 	mov	r4,r2
 8006814:	800722c0 	call	800722c <__mulsi3>
 8006818:	8085883a 	add	r2,r16,r2
 800681c:	10800104 	addi	r2,r2,4
 8006820:	10800017 	ldw	r2,0(r2)
 8006824:	e0bff715 	stw	r2,-36(fp)
 8006828:	e0bff317 	ldw	r2,-52(fp)
 800682c:	e0fff717 	ldw	r3,-36(fp)
 8006830:	10c00215 	stw	r3,8(r2)
 8006834:	e0bff717 	ldw	r2,-36(fp)
 8006838:	10c00217 	ldw	r3,8(r2)
 800683c:	e0bff317 	ldw	r2,-52(fp)
 8006840:	10c00315 	stw	r3,12(r2)
 8006844:	e0bff717 	ldw	r2,-36(fp)
 8006848:	10800217 	ldw	r2,8(r2)
 800684c:	e0fff317 	ldw	r3,-52(fp)
 8006850:	18c00104 	addi	r3,r3,4
 8006854:	10c00115 	stw	r3,4(r2)
 8006858:	e0bff317 	ldw	r2,-52(fp)
 800685c:	10c00104 	addi	r3,r2,4
 8006860:	e0bff717 	ldw	r2,-36(fp)
 8006864:	10c00215 	stw	r3,8(r2)
 8006868:	e0bff317 	ldw	r2,-52(fp)
 800686c:	10800b17 	ldw	r2,44(r2)
 8006870:	01400504 	movi	r5,20
 8006874:	1009883a 	mov	r4,r2
 8006878:	800722c0 	call	800722c <__mulsi3>
 800687c:	1007883a 	mov	r3,r2
 8006880:	008220b4 	movhi	r2,2178
 8006884:	10a7ff04 	addi	r2,r2,-24580
 8006888:	1887883a 	add	r3,r3,r2
 800688c:	e0bff317 	ldw	r2,-52(fp)
 8006890:	10c00515 	stw	r3,20(r2)
 8006894:	e0bff317 	ldw	r2,-52(fp)
 8006898:	14800b17 	ldw	r18,44(r2)
 800689c:	040220b4 	movhi	r16,2178
 80068a0:	8427ff04 	addi	r16,r16,-24580
 80068a4:	01400504 	movi	r5,20
 80068a8:	9009883a 	mov	r4,r18
 80068ac:	800722c0 	call	800722c <__mulsi3>
 80068b0:	8085883a 	add	r2,r16,r2
 80068b4:	10800017 	ldw	r2,0(r2)
 80068b8:	14400044 	addi	r17,r2,1
 80068bc:	040220b4 	movhi	r16,2178
 80068c0:	8427ff04 	addi	r16,r16,-24580
 80068c4:	01400504 	movi	r5,20
 80068c8:	9009883a 	mov	r4,r18
 80068cc:	800722c0 	call	800722c <__mulsi3>
 80068d0:	8085883a 	add	r2,r16,r2
 80068d4:	14400015 	stw	r17,0(r2)
 80068d8:	00001f06 	br	8006958 <xTaskGenericNotifyFromISR+0x3c4>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80068dc:	008220b4 	movhi	r2,2178
 80068e0:	10a82204 	addi	r2,r2,-24440
 80068e4:	10800117 	ldw	r2,4(r2)
 80068e8:	e0bff815 	stw	r2,-32(fp)
 80068ec:	e0bff317 	ldw	r2,-52(fp)
 80068f0:	e0fff817 	ldw	r3,-32(fp)
 80068f4:	10c00715 	stw	r3,28(r2)
 80068f8:	e0bff817 	ldw	r2,-32(fp)
 80068fc:	10c00217 	ldw	r3,8(r2)
 8006900:	e0bff317 	ldw	r2,-52(fp)
 8006904:	10c00815 	stw	r3,32(r2)
 8006908:	e0bff817 	ldw	r2,-32(fp)
 800690c:	10800217 	ldw	r2,8(r2)
 8006910:	e0fff317 	ldw	r3,-52(fp)
 8006914:	18c00604 	addi	r3,r3,24
 8006918:	10c00115 	stw	r3,4(r2)
 800691c:	e0bff317 	ldw	r2,-52(fp)
 8006920:	10c00604 	addi	r3,r2,24
 8006924:	e0bff817 	ldw	r2,-32(fp)
 8006928:	10c00215 	stw	r3,8(r2)
 800692c:	e0fff317 	ldw	r3,-52(fp)
 8006930:	008220b4 	movhi	r2,2178
 8006934:	10a82204 	addi	r2,r2,-24440
 8006938:	18800a15 	stw	r2,40(r3)
 800693c:	008220b4 	movhi	r2,2178
 8006940:	10a82204 	addi	r2,r2,-24440
 8006944:	10800017 	ldw	r2,0(r2)
 8006948:	10c00044 	addi	r3,r2,1
 800694c:	008220b4 	movhi	r2,2178
 8006950:	10a82204 	addi	r2,r2,-24440
 8006954:	10c00015 	stw	r3,0(r2)
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006958:	e0bff317 	ldw	r2,-52(fp)
 800695c:	10800b17 	ldw	r2,44(r2)
 8006960:	d0e6cf17 	ldw	r3,-25796(gp)
 8006964:	18c00b17 	ldw	r3,44(r3)
 8006968:	1880072e 	bgeu	r3,r2,8006988 <xTaskGenericNotifyFromISR+0x3f4>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800696c:	e0800317 	ldw	r2,12(fp)
 8006970:	10000326 	beq	r2,zero,8006980 <xTaskGenericNotifyFromISR+0x3ec>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006974:	e0800317 	ldw	r2,12(fp)
 8006978:	00c00044 	movi	r3,1
 800697c:	10c00015 	stw	r3,0(r2)
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006980:	00800044 	movi	r2,1
 8006984:	d0a6d815 	stw	r2,-25760(gp)
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006988:	e0bff217 	ldw	r2,-56(fp)
    }
 800698c:	e6fffd04 	addi	sp,fp,-12
 8006990:	dfc00417 	ldw	ra,16(sp)
 8006994:	df000317 	ldw	fp,12(sp)
 8006998:	dc800217 	ldw	r18,8(sp)
 800699c:	dc400117 	ldw	r17,4(sp)
 80069a0:	dc000017 	ldw	r16,0(sp)
 80069a4:	dec00504 	addi	sp,sp,20
 80069a8:	f800283a 	ret

080069ac <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80069ac:	defff204 	addi	sp,sp,-56
 80069b0:	dfc00d15 	stw	ra,52(sp)
 80069b4:	df000c15 	stw	fp,48(sp)
 80069b8:	dc800b15 	stw	r18,44(sp)
 80069bc:	dc400a15 	stw	r17,40(sp)
 80069c0:	dc000915 	stw	r16,36(sp)
 80069c4:	df000c04 	addi	fp,sp,48
 80069c8:	e13ffa15 	stw	r4,-24(fp)
 80069cc:	e17ffb15 	stw	r5,-20(fp)
 80069d0:	e1bffc15 	stw	r6,-16(fp)
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 80069d4:	e0bffa17 	ldw	r2,-24(fp)
 80069d8:	e0bff415 	stw	r2,-48(fp)

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069dc:	e03ff515 	stw	zero,-44(fp)
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80069e0:	e0fff417 	ldw	r3,-48(fp)
 80069e4:	e0bffb17 	ldw	r2,-20(fp)
 80069e8:	1885883a 	add	r2,r3,r2
 80069ec:	10801304 	addi	r2,r2,76
 80069f0:	10800003 	ldbu	r2,0(r2)
 80069f4:	e0bff605 	stb	r2,-40(fp)
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80069f8:	e0fff417 	ldw	r3,-48(fp)
 80069fc:	e0bffb17 	ldw	r2,-20(fp)
 8006a00:	1885883a 	add	r2,r3,r2
 8006a04:	10801304 	addi	r2,r2,76
 8006a08:	00c00084 	movi	r3,2
 8006a0c:	10c00005 	stb	r3,0(r2)

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006a10:	e0fff417 	ldw	r3,-48(fp)
 8006a14:	e0bffb17 	ldw	r2,-20(fp)
 8006a18:	10800484 	addi	r2,r2,18
 8006a1c:	1085883a 	add	r2,r2,r2
 8006a20:	1085883a 	add	r2,r2,r2
 8006a24:	1885883a 	add	r2,r3,r2
 8006a28:	10800017 	ldw	r2,0(r2)
 8006a2c:	10c00044 	addi	r3,r2,1
 8006a30:	e13ff417 	ldw	r4,-48(fp)
 8006a34:	e0bffb17 	ldw	r2,-20(fp)
 8006a38:	10800484 	addi	r2,r2,18
 8006a3c:	1085883a 	add	r2,r2,r2
 8006a40:	1085883a 	add	r2,r2,r2
 8006a44:	2085883a 	add	r2,r4,r2
 8006a48:	10c00015 	stw	r3,0(r2)

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a4c:	e0bff603 	ldbu	r2,-40(fp)
 8006a50:	10800058 	cmpnei	r2,r2,1
 8006a54:	1000891e 	bne	r2,zero,8006c7c <vTaskGenericNotifyGiveFromISR+0x2d0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a58:	d0a6dd17 	ldw	r2,-25740(gp)
 8006a5c:	10005c1e 	bne	r2,zero,8006bd0 <vTaskGenericNotifyGiveFromISR+0x224>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006a60:	e0bff417 	ldw	r2,-48(fp)
 8006a64:	10800517 	ldw	r2,20(r2)
 8006a68:	e0bff715 	stw	r2,-36(fp)
 8006a6c:	e0bff417 	ldw	r2,-48(fp)
 8006a70:	10800217 	ldw	r2,8(r2)
 8006a74:	e0fff417 	ldw	r3,-48(fp)
 8006a78:	18c00317 	ldw	r3,12(r3)
 8006a7c:	10c00215 	stw	r3,8(r2)
 8006a80:	e0bff417 	ldw	r2,-48(fp)
 8006a84:	10800317 	ldw	r2,12(r2)
 8006a88:	e0fff417 	ldw	r3,-48(fp)
 8006a8c:	18c00217 	ldw	r3,8(r3)
 8006a90:	10c00115 	stw	r3,4(r2)
 8006a94:	e0bff717 	ldw	r2,-36(fp)
 8006a98:	10c00117 	ldw	r3,4(r2)
 8006a9c:	e0bff417 	ldw	r2,-48(fp)
 8006aa0:	10800104 	addi	r2,r2,4
 8006aa4:	1880041e 	bne	r3,r2,8006ab8 <vTaskGenericNotifyGiveFromISR+0x10c>
 8006aa8:	e0bff417 	ldw	r2,-48(fp)
 8006aac:	10c00317 	ldw	r3,12(r2)
 8006ab0:	e0bff717 	ldw	r2,-36(fp)
 8006ab4:	10c00115 	stw	r3,4(r2)
 8006ab8:	e0bff417 	ldw	r2,-48(fp)
 8006abc:	10000515 	stw	zero,20(r2)
 8006ac0:	e0bff717 	ldw	r2,-36(fp)
 8006ac4:	10800017 	ldw	r2,0(r2)
 8006ac8:	10ffffc4 	addi	r3,r2,-1
 8006acc:	e0bff717 	ldw	r2,-36(fp)
 8006ad0:	10c00015 	stw	r3,0(r2)
                    prvAddTaskToReadyList( pxTCB );
 8006ad4:	e0bff417 	ldw	r2,-48(fp)
 8006ad8:	10800b17 	ldw	r2,44(r2)
 8006adc:	d0e6d517 	ldw	r3,-25772(gp)
 8006ae0:	1880032e 	bgeu	r3,r2,8006af0 <vTaskGenericNotifyGiveFromISR+0x144>
 8006ae4:	e0bff417 	ldw	r2,-48(fp)
 8006ae8:	10800b17 	ldw	r2,44(r2)
 8006aec:	d0a6d515 	stw	r2,-25772(gp)
 8006af0:	e0bff417 	ldw	r2,-48(fp)
 8006af4:	10800b17 	ldw	r2,44(r2)
 8006af8:	040220b4 	movhi	r16,2178
 8006afc:	8427ff04 	addi	r16,r16,-24580
 8006b00:	01400504 	movi	r5,20
 8006b04:	1009883a 	mov	r4,r2
 8006b08:	800722c0 	call	800722c <__mulsi3>
 8006b0c:	8085883a 	add	r2,r16,r2
 8006b10:	10800104 	addi	r2,r2,4
 8006b14:	10800017 	ldw	r2,0(r2)
 8006b18:	e0bff815 	stw	r2,-32(fp)
 8006b1c:	e0bff417 	ldw	r2,-48(fp)
 8006b20:	e0fff817 	ldw	r3,-32(fp)
 8006b24:	10c00215 	stw	r3,8(r2)
 8006b28:	e0bff817 	ldw	r2,-32(fp)
 8006b2c:	10c00217 	ldw	r3,8(r2)
 8006b30:	e0bff417 	ldw	r2,-48(fp)
 8006b34:	10c00315 	stw	r3,12(r2)
 8006b38:	e0bff817 	ldw	r2,-32(fp)
 8006b3c:	10800217 	ldw	r2,8(r2)
 8006b40:	e0fff417 	ldw	r3,-48(fp)
 8006b44:	18c00104 	addi	r3,r3,4
 8006b48:	10c00115 	stw	r3,4(r2)
 8006b4c:	e0bff417 	ldw	r2,-48(fp)
 8006b50:	10c00104 	addi	r3,r2,4
 8006b54:	e0bff817 	ldw	r2,-32(fp)
 8006b58:	10c00215 	stw	r3,8(r2)
 8006b5c:	e0bff417 	ldw	r2,-48(fp)
 8006b60:	10800b17 	ldw	r2,44(r2)
 8006b64:	01400504 	movi	r5,20
 8006b68:	1009883a 	mov	r4,r2
 8006b6c:	800722c0 	call	800722c <__mulsi3>
 8006b70:	1007883a 	mov	r3,r2
 8006b74:	008220b4 	movhi	r2,2178
 8006b78:	10a7ff04 	addi	r2,r2,-24580
 8006b7c:	1887883a 	add	r3,r3,r2
 8006b80:	e0bff417 	ldw	r2,-48(fp)
 8006b84:	10c00515 	stw	r3,20(r2)
 8006b88:	e0bff417 	ldw	r2,-48(fp)
 8006b8c:	14800b17 	ldw	r18,44(r2)
 8006b90:	040220b4 	movhi	r16,2178
 8006b94:	8427ff04 	addi	r16,r16,-24580
 8006b98:	01400504 	movi	r5,20
 8006b9c:	9009883a 	mov	r4,r18
 8006ba0:	800722c0 	call	800722c <__mulsi3>
 8006ba4:	8085883a 	add	r2,r16,r2
 8006ba8:	10800017 	ldw	r2,0(r2)
 8006bac:	14400044 	addi	r17,r2,1
 8006bb0:	040220b4 	movhi	r16,2178
 8006bb4:	8427ff04 	addi	r16,r16,-24580
 8006bb8:	01400504 	movi	r5,20
 8006bbc:	9009883a 	mov	r4,r18
 8006bc0:	800722c0 	call	800722c <__mulsi3>
 8006bc4:	8085883a 	add	r2,r16,r2
 8006bc8:	14400015 	stw	r17,0(r2)
 8006bcc:	00001f06 	br	8006c4c <vTaskGenericNotifyGiveFromISR+0x2a0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006bd0:	008220b4 	movhi	r2,2178
 8006bd4:	10a82204 	addi	r2,r2,-24440
 8006bd8:	10800117 	ldw	r2,4(r2)
 8006bdc:	e0bff915 	stw	r2,-28(fp)
 8006be0:	e0bff417 	ldw	r2,-48(fp)
 8006be4:	e0fff917 	ldw	r3,-28(fp)
 8006be8:	10c00715 	stw	r3,28(r2)
 8006bec:	e0bff917 	ldw	r2,-28(fp)
 8006bf0:	10c00217 	ldw	r3,8(r2)
 8006bf4:	e0bff417 	ldw	r2,-48(fp)
 8006bf8:	10c00815 	stw	r3,32(r2)
 8006bfc:	e0bff917 	ldw	r2,-28(fp)
 8006c00:	10800217 	ldw	r2,8(r2)
 8006c04:	e0fff417 	ldw	r3,-48(fp)
 8006c08:	18c00604 	addi	r3,r3,24
 8006c0c:	10c00115 	stw	r3,4(r2)
 8006c10:	e0bff417 	ldw	r2,-48(fp)
 8006c14:	10c00604 	addi	r3,r2,24
 8006c18:	e0bff917 	ldw	r2,-28(fp)
 8006c1c:	10c00215 	stw	r3,8(r2)
 8006c20:	e0fff417 	ldw	r3,-48(fp)
 8006c24:	008220b4 	movhi	r2,2178
 8006c28:	10a82204 	addi	r2,r2,-24440
 8006c2c:	18800a15 	stw	r2,40(r3)
 8006c30:	008220b4 	movhi	r2,2178
 8006c34:	10a82204 	addi	r2,r2,-24440
 8006c38:	10800017 	ldw	r2,0(r2)
 8006c3c:	10c00044 	addi	r3,r2,1
 8006c40:	008220b4 	movhi	r2,2178
 8006c44:	10a82204 	addi	r2,r2,-24440
 8006c48:	10c00015 	stw	r3,0(r2)
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c4c:	e0bff417 	ldw	r2,-48(fp)
 8006c50:	10800b17 	ldw	r2,44(r2)
 8006c54:	d0e6cf17 	ldw	r3,-25796(gp)
 8006c58:	18c00b17 	ldw	r3,44(r3)
 8006c5c:	1880072e 	bgeu	r3,r2,8006c7c <vTaskGenericNotifyGiveFromISR+0x2d0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006c60:	e0bffc17 	ldw	r2,-16(fp)
 8006c64:	10000326 	beq	r2,zero,8006c74 <vTaskGenericNotifyGiveFromISR+0x2c8>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006c68:	e0bffc17 	ldw	r2,-16(fp)
 8006c6c:	00c00044 	movi	r3,1
 8006c70:	10c00015 	stw	r3,0(r2)
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006c74:	00800044 	movi	r2,1
 8006c78:	d0a6d815 	stw	r2,-25760(gp)
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8006c7c:	0001883a 	nop
 8006c80:	e6fffd04 	addi	sp,fp,-12
 8006c84:	dfc00417 	ldw	ra,16(sp)
 8006c88:	df000317 	ldw	fp,12(sp)
 8006c8c:	dc800217 	ldw	r18,8(sp)
 8006c90:	dc400117 	ldw	r17,4(sp)
 8006c94:	dc000017 	ldw	r16,0(sp)
 8006c98:	dec00504 	addi	sp,sp,20
 8006c9c:	f800283a 	ret

08006ca0 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8006ca0:	defffa04 	addi	sp,sp,-24
 8006ca4:	dfc00515 	stw	ra,20(sp)
 8006ca8:	df000415 	stw	fp,16(sp)
 8006cac:	df000404 	addi	fp,sp,16
 8006cb0:	e13ffe15 	stw	r4,-8(fp)
 8006cb4:	e17fff15 	stw	r5,-4(fp)

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8006cb8:	e0bffe17 	ldw	r2,-8(fp)
 8006cbc:	1000021e 	bne	r2,zero,8006cc8 <xTaskGenericNotifyStateClear+0x28>
 8006cc0:	d0a6cf17 	ldw	r2,-25796(gp)
 8006cc4:	00000106 	br	8006ccc <xTaskGenericNotifyStateClear+0x2c>
 8006cc8:	e0bffe17 	ldw	r2,-8(fp)
 8006ccc:	e0bffd15 	stw	r2,-12(fp)

        taskENTER_CRITICAL();
 8006cd0:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8006cd4:	e0fffd17 	ldw	r3,-12(fp)
 8006cd8:	e0bfff17 	ldw	r2,-4(fp)
 8006cdc:	1885883a 	add	r2,r3,r2
 8006ce0:	10801304 	addi	r2,r2,76
 8006ce4:	10800003 	ldbu	r2,0(r2)
 8006ce8:	10803fcc 	andi	r2,r2,255
 8006cec:	10800098 	cmpnei	r2,r2,2
 8006cf0:	1000081e 	bne	r2,zero,8006d14 <xTaskGenericNotifyStateClear+0x74>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8006cf4:	e0fffd17 	ldw	r3,-12(fp)
 8006cf8:	e0bfff17 	ldw	r2,-4(fp)
 8006cfc:	1885883a 	add	r2,r3,r2
 8006d00:	10801304 	addi	r2,r2,76
 8006d04:	10000005 	stb	zero,0(r2)
                xReturn = pdPASS;
 8006d08:	00800044 	movi	r2,1
 8006d0c:	e0bffc15 	stw	r2,-16(fp)
 8006d10:	00000106 	br	8006d18 <xTaskGenericNotifyStateClear+0x78>
            }
            else
            {
                xReturn = pdFAIL;
 8006d14:	e03ffc15 	stw	zero,-16(fp)
            }
        }
        taskEXIT_CRITICAL();
 8006d18:	8005e980 	call	8005e98 <vTaskExitCritical>

        return xReturn;
 8006d1c:	e0bffc17 	ldw	r2,-16(fp)
    }
 8006d20:	e037883a 	mov	sp,fp
 8006d24:	dfc00117 	ldw	ra,4(sp)
 8006d28:	df000017 	ldw	fp,0(sp)
 8006d2c:	dec00204 	addi	sp,sp,8
 8006d30:	f800283a 	ret

08006d34 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 8006d34:	defff904 	addi	sp,sp,-28
 8006d38:	dfc00615 	stw	ra,24(sp)
 8006d3c:	df000515 	stw	fp,20(sp)
 8006d40:	df000504 	addi	fp,sp,20
 8006d44:	e13ffd15 	stw	r4,-12(fp)
 8006d48:	e17ffe15 	stw	r5,-8(fp)
 8006d4c:	e1bfff15 	stw	r6,-4(fp)
        TCB_t * pxTCB;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8006d50:	e0bffd17 	ldw	r2,-12(fp)
 8006d54:	1000021e 	bne	r2,zero,8006d60 <ulTaskGenericNotifyValueClear+0x2c>
 8006d58:	d0a6cf17 	ldw	r2,-25796(gp)
 8006d5c:	00000106 	br	8006d64 <ulTaskGenericNotifyValueClear+0x30>
 8006d60:	e0bffd17 	ldw	r2,-12(fp)
 8006d64:	e0bffb15 	stw	r2,-20(fp)

        taskENTER_CRITICAL();
 8006d68:	8005e440 	call	8005e44 <vTaskEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8006d6c:	e0fffb17 	ldw	r3,-20(fp)
 8006d70:	e0bffe17 	ldw	r2,-8(fp)
 8006d74:	10800484 	addi	r2,r2,18
 8006d78:	1085883a 	add	r2,r2,r2
 8006d7c:	1085883a 	add	r2,r2,r2
 8006d80:	1885883a 	add	r2,r3,r2
 8006d84:	10800017 	ldw	r2,0(r2)
 8006d88:	e0bffc15 	stw	r2,-16(fp)
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8006d8c:	e0fffb17 	ldw	r3,-20(fp)
 8006d90:	e0bffe17 	ldw	r2,-8(fp)
 8006d94:	10800484 	addi	r2,r2,18
 8006d98:	1085883a 	add	r2,r2,r2
 8006d9c:	1085883a 	add	r2,r2,r2
 8006da0:	1885883a 	add	r2,r3,r2
 8006da4:	10c00017 	ldw	r3,0(r2)
 8006da8:	e0bfff17 	ldw	r2,-4(fp)
 8006dac:	0084303a 	nor	r2,zero,r2
 8006db0:	1886703a 	and	r3,r3,r2
 8006db4:	e13ffb17 	ldw	r4,-20(fp)
 8006db8:	e0bffe17 	ldw	r2,-8(fp)
 8006dbc:	10800484 	addi	r2,r2,18
 8006dc0:	1085883a 	add	r2,r2,r2
 8006dc4:	1085883a 	add	r2,r2,r2
 8006dc8:	2085883a 	add	r2,r4,r2
 8006dcc:	10c00015 	stw	r3,0(r2)
        }
        taskEXIT_CRITICAL();
 8006dd0:	8005e980 	call	8005e98 <vTaskExitCritical>

        return ulReturn;
 8006dd4:	e0bffc17 	ldw	r2,-16(fp)
    }
 8006dd8:	e037883a 	mov	sp,fp
 8006ddc:	dfc00117 	ldw	ra,4(sp)
 8006de0:	df000017 	ldw	fp,0(sp)
 8006de4:	dec00204 	addi	sp,sp,8
 8006de8:	f800283a 	ret

08006dec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006dec:	defff904 	addi	sp,sp,-28
 8006df0:	dfc00615 	stw	ra,24(sp)
 8006df4:	df000515 	stw	fp,20(sp)
 8006df8:	df000504 	addi	fp,sp,20
 8006dfc:	e13ffe15 	stw	r4,-8(fp)
 8006e00:	e17fff15 	stw	r5,-4(fp)
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006e04:	d0a6d417 	ldw	r2,-25776(gp)
 8006e08:	e0bffb15 	stw	r2,-20(fp)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e0c:	d0a6cf17 	ldw	r2,-25796(gp)
 8006e10:	10800104 	addi	r2,r2,4
 8006e14:	1009883a 	mov	r4,r2
 8006e18:	8000ca80 	call	8000ca8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e1c:	e0bffe17 	ldw	r2,-8(fp)
 8006e20:	10bfffd8 	cmpnei	r2,r2,-1
 8006e24:	1000231e 	bne	r2,zero,8006eb4 <prvAddCurrentTaskToDelayedList+0xc8>
 8006e28:	e0bfff17 	ldw	r2,-4(fp)
 8006e2c:	10002126 	beq	r2,zero,8006eb4 <prvAddCurrentTaskToDelayedList+0xc8>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e30:	008220b4 	movhi	r2,2178
 8006e34:	10a82c04 	addi	r2,r2,-24400
 8006e38:	10800117 	ldw	r2,4(r2)
 8006e3c:	e0bffc15 	stw	r2,-16(fp)
 8006e40:	d0a6cf17 	ldw	r2,-25796(gp)
 8006e44:	e0fffc17 	ldw	r3,-16(fp)
 8006e48:	10c00215 	stw	r3,8(r2)
 8006e4c:	d0a6cf17 	ldw	r2,-25796(gp)
 8006e50:	e0fffc17 	ldw	r3,-16(fp)
 8006e54:	18c00217 	ldw	r3,8(r3)
 8006e58:	10c00315 	stw	r3,12(r2)
 8006e5c:	e0bffc17 	ldw	r2,-16(fp)
 8006e60:	10800217 	ldw	r2,8(r2)
 8006e64:	d0e6cf17 	ldw	r3,-25796(gp)
 8006e68:	18c00104 	addi	r3,r3,4
 8006e6c:	10c00115 	stw	r3,4(r2)
 8006e70:	d0a6cf17 	ldw	r2,-25796(gp)
 8006e74:	10c00104 	addi	r3,r2,4
 8006e78:	e0bffc17 	ldw	r2,-16(fp)
 8006e7c:	10c00215 	stw	r3,8(r2)
 8006e80:	d0e6cf17 	ldw	r3,-25796(gp)
 8006e84:	008220b4 	movhi	r2,2178
 8006e88:	10a82c04 	addi	r2,r2,-24400
 8006e8c:	18800515 	stw	r2,20(r3)
 8006e90:	008220b4 	movhi	r2,2178
 8006e94:	10a82c04 	addi	r2,r2,-24400
 8006e98:	10800017 	ldw	r2,0(r2)
 8006e9c:	10c00044 	addi	r3,r2,1
 8006ea0:	008220b4 	movhi	r2,2178
 8006ea4:	10a82c04 	addi	r2,r2,-24400
 8006ea8:	10c00015 	stw	r3,0(r2)
 8006eac:	0001883a 	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006eb0:	00001c06 	br	8006f24 <prvAddCurrentTaskToDelayedList+0x138>
        else
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006eb4:	e0fffb17 	ldw	r3,-20(fp)
 8006eb8:	e0bffe17 	ldw	r2,-8(fp)
 8006ebc:	1885883a 	add	r2,r3,r2
 8006ec0:	e0bffd15 	stw	r2,-12(fp)

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ec4:	d0a6cf17 	ldw	r2,-25796(gp)
 8006ec8:	e0fffd17 	ldw	r3,-12(fp)
 8006ecc:	10c00115 	stw	r3,4(r2)

            if( xTimeToWake < xConstTickCount )
 8006ed0:	e0fffd17 	ldw	r3,-12(fp)
 8006ed4:	e0bffb17 	ldw	r2,-20(fp)
 8006ed8:	1880072e 	bgeu	r3,r2,8006ef8 <prvAddCurrentTaskToDelayedList+0x10c>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006edc:	d0e6d117 	ldw	r3,-25788(gp)
 8006ee0:	d0a6cf17 	ldw	r2,-25796(gp)
 8006ee4:	10800104 	addi	r2,r2,4
 8006ee8:	100b883a 	mov	r5,r2
 8006eec:	1809883a 	mov	r4,r3
 8006ef0:	8000bd00 	call	8000bd0 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006ef4:	00000b06 	br	8006f24 <prvAddCurrentTaskToDelayedList+0x138>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef8:	d0e6d017 	ldw	r3,-25792(gp)
 8006efc:	d0a6cf17 	ldw	r2,-25796(gp)
 8006f00:	10800104 	addi	r2,r2,4
 8006f04:	100b883a 	mov	r5,r2
 8006f08:	1809883a 	mov	r4,r3
 8006f0c:	8000bd00 	call	8000bd0 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 8006f10:	d0a6db17 	ldw	r2,-25748(gp)
 8006f14:	e0fffd17 	ldw	r3,-12(fp)
 8006f18:	1880022e 	bgeu	r3,r2,8006f24 <prvAddCurrentTaskToDelayedList+0x138>
                {
                    xNextTaskUnblockTime = xTimeToWake;
 8006f1c:	e0bffd17 	ldw	r2,-12(fp)
 8006f20:	d0a6db15 	stw	r2,-25748(gp)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006f24:	0001883a 	nop
 8006f28:	e037883a 	mov	sp,fp
 8006f2c:	dfc00117 	ldw	ra,4(sp)
 8006f30:	df000017 	ldw	fp,0(sp)
 8006f34:	dec00204 	addi	sp,sp,8
 8006f38:	f800283a 	ret

08006f3c <main>:
#include "altera_avalon_pio_regs.h"

void task1 (void *p);
void task2 (void *p);

int main(void){
 8006f3c:	defffc04 	addi	sp,sp,-16
 8006f40:	dfc00315 	stw	ra,12(sp)
 8006f44:	df000215 	stw	fp,8(sp)
 8006f48:	df000204 	addi	fp,sp,8
	printf("Hello from Nios II running FreeRTOS !!!\n");
 8006f4c:	01020074 	movhi	r4,2049
 8006f50:	21198d04 	addi	r4,r4,26164
 8006f54:	80075f00 	call	80075f0 <puts>

	xTaskCreate(task1, "Task 1", 512, NULL, 2, NULL);
 8006f58:	d8000115 	stw	zero,4(sp)
 8006f5c:	00800084 	movi	r2,2
 8006f60:	d8800015 	stw	r2,0(sp)
 8006f64:	000f883a 	mov	r7,zero
 8006f68:	01808004 	movi	r6,512
 8006f6c:	01420074 	movhi	r5,2049
 8006f70:	29599704 	addi	r5,r5,26204
 8006f74:	01020034 	movhi	r4,2048
 8006f78:	211bf104 	addi	r4,r4,28612
 8006f7c:	80035c00 	call	80035c0 <xTaskCreate>
	xTaskCreate(task2, "Task 2", 512, NULL, 2, NULL);
 8006f80:	d8000115 	stw	zero,4(sp)
 8006f84:	00800084 	movi	r2,2
 8006f88:	d8800015 	stw	r2,0(sp)
 8006f8c:	000f883a 	mov	r7,zero
 8006f90:	01808004 	movi	r6,512
 8006f94:	01420074 	movhi	r5,2049
 8006f98:	29599904 	addi	r5,r5,26212
 8006f9c:	01020034 	movhi	r4,2048
 8006fa0:	211c0d04 	addi	r4,r4,28724
 8006fa4:	80035c00 	call	80035c0 <xTaskCreate>

	vTaskStartScheduler();
 8006fa8:	800446c0 	call	800446c <vTaskStartScheduler>

	return 0;
 8006fac:	0005883a 	mov	r2,zero
}
 8006fb0:	e037883a 	mov	sp,fp
 8006fb4:	dfc00117 	ldw	ra,4(sp)
 8006fb8:	df000017 	ldw	fp,0(sp)
 8006fbc:	dec00204 	addi	sp,sp,8
 8006fc0:	f800283a 	ret

08006fc4 <task1>:


void task1 (void *p){
 8006fc4:	defffc04 	addi	sp,sp,-16
 8006fc8:	dfc00315 	stw	ra,12(sp)
 8006fcc:	df000215 	stw	fp,8(sp)
 8006fd0:	df000204 	addi	fp,sp,8
 8006fd4:	e13fff15 	stw	r4,-4(fp)
	uint32_t led_counter = 0;
 8006fd8:	e03ffe15 	stw	zero,-8(fp)
	while(1){
		if(led_counter < 28){
 8006fdc:	e0bffe17 	ldw	r2,-8(fp)
 8006fe0:	10800728 	cmpgeui	r2,r2,28
 8006fe4:	1000041e 	bne	r2,zero,8006ff8 <task1+0x34>
			led_counter++;
 8006fe8:	e0bffe17 	ldw	r2,-8(fp)
 8006fec:	10800044 	addi	r2,r2,1
 8006ff0:	e0bffe15 	stw	r2,-8(fp)
 8006ff4:	00000106 	br	8006ffc <task1+0x38>
		}
		else{
			led_counter = 0;
 8006ff8:	e03ffe15 	stw	zero,-8(fp)
		}
		IOWR_ALTERA_AVALON_PIO_DATA(0x10001040, (uint32_t)1<<led_counter);
 8006ffc:	00c00044 	movi	r3,1
 8007000:	e0bffe17 	ldw	r2,-8(fp)
 8007004:	1884983a 	sll	r2,r3,r2
 8007008:	1007883a 	mov	r3,r2
 800700c:	00840034 	movhi	r2,4096
 8007010:	10841004 	addi	r2,r2,4160
 8007014:	10c00035 	stwio	r3,0(r2)
		printf("TASK 1: LIGTHENED LED IS LED%u \n", led_counter);
 8007018:	e17ffe17 	ldw	r5,-8(fp)
 800701c:	01020074 	movhi	r4,2049
 8007020:	21199b04 	addi	r4,r4,26220
 8007024:	80074f40 	call	80074f4 <printf>
		vTaskDelay(200);
 8007028:	01003204 	movi	r4,200
 800702c:	8003c180 	call	8003c18 <vTaskDelay>
	}
 8007030:	003fea06 	br	8006fdc <__alt_data_end+0xf8006fdc>

08007034 <task2>:
}


void task2 (void *p){
 8007034:	defffc04 	addi	sp,sp,-16
 8007038:	dfc00315 	stw	ra,12(sp)
 800703c:	df000215 	stw	fp,8(sp)
 8007040:	df000204 	addi	fp,sp,8
 8007044:	e13fff15 	stw	r4,-4(fp)
	uint32_t switch_val = 0;
 8007048:	e03ffe15 	stw	zero,-8(fp)
	while(1){
		switch_val = IORD_ALTERA_AVALON_PIO_DATA(0x10001030);
 800704c:	00840034 	movhi	r2,4096
 8007050:	10840c04 	addi	r2,r2,4144
 8007054:	10800037 	ldwio	r2,0(r2)
 8007058:	e0bffe15 	stw	r2,-8(fp)
		printf("TASK 2: SWITCH VALUE IS %u \n", switch_val);
 800705c:	e17ffe17 	ldw	r5,-8(fp)
 8007060:	01020074 	movhi	r4,2049
 8007064:	2119a404 	addi	r4,r4,26256
 8007068:	80074f40 	call	80074f4 <printf>
		vTaskDelay(2000);
 800706c:	0101f404 	movi	r4,2000
 8007070:	8003c180 	call	8003c18 <vTaskDelay>
	}
 8007074:	003ff506 	br	800704c <__alt_data_end+0xf800704c>

08007078 <__divsi3>:
 8007078:	20001b16 	blt	r4,zero,80070e8 <__divsi3+0x70>
 800707c:	000f883a 	mov	r7,zero
 8007080:	28001616 	blt	r5,zero,80070dc <__divsi3+0x64>
 8007084:	200d883a 	mov	r6,r4
 8007088:	29001a2e 	bgeu	r5,r4,80070f4 <__divsi3+0x7c>
 800708c:	00800804 	movi	r2,32
 8007090:	00c00044 	movi	r3,1
 8007094:	00000106 	br	800709c <__divsi3+0x24>
 8007098:	10000d26 	beq	r2,zero,80070d0 <__divsi3+0x58>
 800709c:	294b883a 	add	r5,r5,r5
 80070a0:	10bfffc4 	addi	r2,r2,-1
 80070a4:	18c7883a 	add	r3,r3,r3
 80070a8:	293ffb36 	bltu	r5,r4,8007098 <__alt_data_end+0xf8007098>
 80070ac:	0005883a 	mov	r2,zero
 80070b0:	18000726 	beq	r3,zero,80070d0 <__divsi3+0x58>
 80070b4:	0005883a 	mov	r2,zero
 80070b8:	31400236 	bltu	r6,r5,80070c4 <__divsi3+0x4c>
 80070bc:	314dc83a 	sub	r6,r6,r5
 80070c0:	10c4b03a 	or	r2,r2,r3
 80070c4:	1806d07a 	srli	r3,r3,1
 80070c8:	280ad07a 	srli	r5,r5,1
 80070cc:	183ffa1e 	bne	r3,zero,80070b8 <__alt_data_end+0xf80070b8>
 80070d0:	38000126 	beq	r7,zero,80070d8 <__divsi3+0x60>
 80070d4:	0085c83a 	sub	r2,zero,r2
 80070d8:	f800283a 	ret
 80070dc:	014bc83a 	sub	r5,zero,r5
 80070e0:	39c0005c 	xori	r7,r7,1
 80070e4:	003fe706 	br	8007084 <__alt_data_end+0xf8007084>
 80070e8:	0109c83a 	sub	r4,zero,r4
 80070ec:	01c00044 	movi	r7,1
 80070f0:	003fe306 	br	8007080 <__alt_data_end+0xf8007080>
 80070f4:	00c00044 	movi	r3,1
 80070f8:	003fee06 	br	80070b4 <__alt_data_end+0xf80070b4>

080070fc <__modsi3>:
 80070fc:	20001716 	blt	r4,zero,800715c <__modsi3+0x60>
 8007100:	000f883a 	mov	r7,zero
 8007104:	2005883a 	mov	r2,r4
 8007108:	28001216 	blt	r5,zero,8007154 <__modsi3+0x58>
 800710c:	2900162e 	bgeu	r5,r4,8007168 <__modsi3+0x6c>
 8007110:	01800804 	movi	r6,32
 8007114:	00c00044 	movi	r3,1
 8007118:	00000106 	br	8007120 <__modsi3+0x24>
 800711c:	30000a26 	beq	r6,zero,8007148 <__modsi3+0x4c>
 8007120:	294b883a 	add	r5,r5,r5
 8007124:	31bfffc4 	addi	r6,r6,-1
 8007128:	18c7883a 	add	r3,r3,r3
 800712c:	293ffb36 	bltu	r5,r4,800711c <__alt_data_end+0xf800711c>
 8007130:	18000526 	beq	r3,zero,8007148 <__modsi3+0x4c>
 8007134:	1806d07a 	srli	r3,r3,1
 8007138:	11400136 	bltu	r2,r5,8007140 <__modsi3+0x44>
 800713c:	1145c83a 	sub	r2,r2,r5
 8007140:	280ad07a 	srli	r5,r5,1
 8007144:	183ffb1e 	bne	r3,zero,8007134 <__alt_data_end+0xf8007134>
 8007148:	38000126 	beq	r7,zero,8007150 <__modsi3+0x54>
 800714c:	0085c83a 	sub	r2,zero,r2
 8007150:	f800283a 	ret
 8007154:	014bc83a 	sub	r5,zero,r5
 8007158:	003fec06 	br	800710c <__alt_data_end+0xf800710c>
 800715c:	0109c83a 	sub	r4,zero,r4
 8007160:	01c00044 	movi	r7,1
 8007164:	003fe706 	br	8007104 <__alt_data_end+0xf8007104>
 8007168:	00c00044 	movi	r3,1
 800716c:	003ff106 	br	8007134 <__alt_data_end+0xf8007134>

08007170 <__udivsi3>:
 8007170:	200d883a 	mov	r6,r4
 8007174:	2900152e 	bgeu	r5,r4,80071cc <__udivsi3+0x5c>
 8007178:	28001416 	blt	r5,zero,80071cc <__udivsi3+0x5c>
 800717c:	00800804 	movi	r2,32
 8007180:	00c00044 	movi	r3,1
 8007184:	00000206 	br	8007190 <__udivsi3+0x20>
 8007188:	10000e26 	beq	r2,zero,80071c4 <__udivsi3+0x54>
 800718c:	28000516 	blt	r5,zero,80071a4 <__udivsi3+0x34>
 8007190:	294b883a 	add	r5,r5,r5
 8007194:	10bfffc4 	addi	r2,r2,-1
 8007198:	18c7883a 	add	r3,r3,r3
 800719c:	293ffa36 	bltu	r5,r4,8007188 <__alt_data_end+0xf8007188>
 80071a0:	18000826 	beq	r3,zero,80071c4 <__udivsi3+0x54>
 80071a4:	0005883a 	mov	r2,zero
 80071a8:	31400236 	bltu	r6,r5,80071b4 <__udivsi3+0x44>
 80071ac:	314dc83a 	sub	r6,r6,r5
 80071b0:	10c4b03a 	or	r2,r2,r3
 80071b4:	1806d07a 	srli	r3,r3,1
 80071b8:	280ad07a 	srli	r5,r5,1
 80071bc:	183ffa1e 	bne	r3,zero,80071a8 <__alt_data_end+0xf80071a8>
 80071c0:	f800283a 	ret
 80071c4:	0005883a 	mov	r2,zero
 80071c8:	f800283a 	ret
 80071cc:	00c00044 	movi	r3,1
 80071d0:	003ff406 	br	80071a4 <__alt_data_end+0xf80071a4>

080071d4 <__umodsi3>:
 80071d4:	2005883a 	mov	r2,r4
 80071d8:	2900122e 	bgeu	r5,r4,8007224 <__umodsi3+0x50>
 80071dc:	28001116 	blt	r5,zero,8007224 <__umodsi3+0x50>
 80071e0:	01800804 	movi	r6,32
 80071e4:	00c00044 	movi	r3,1
 80071e8:	00000206 	br	80071f4 <__umodsi3+0x20>
 80071ec:	30000c26 	beq	r6,zero,8007220 <__umodsi3+0x4c>
 80071f0:	28000516 	blt	r5,zero,8007208 <__umodsi3+0x34>
 80071f4:	294b883a 	add	r5,r5,r5
 80071f8:	31bfffc4 	addi	r6,r6,-1
 80071fc:	18c7883a 	add	r3,r3,r3
 8007200:	293ffa36 	bltu	r5,r4,80071ec <__alt_data_end+0xf80071ec>
 8007204:	18000626 	beq	r3,zero,8007220 <__umodsi3+0x4c>
 8007208:	1806d07a 	srli	r3,r3,1
 800720c:	11400136 	bltu	r2,r5,8007214 <__umodsi3+0x40>
 8007210:	1145c83a 	sub	r2,r2,r5
 8007214:	280ad07a 	srli	r5,r5,1
 8007218:	183ffb1e 	bne	r3,zero,8007208 <__alt_data_end+0xf8007208>
 800721c:	f800283a 	ret
 8007220:	f800283a 	ret
 8007224:	00c00044 	movi	r3,1
 8007228:	003ff706 	br	8007208 <__alt_data_end+0xf8007208>

0800722c <__mulsi3>:
 800722c:	0005883a 	mov	r2,zero
 8007230:	20000726 	beq	r4,zero,8007250 <__mulsi3+0x24>
 8007234:	20c0004c 	andi	r3,r4,1
 8007238:	2008d07a 	srli	r4,r4,1
 800723c:	18000126 	beq	r3,zero,8007244 <__mulsi3+0x18>
 8007240:	1145883a 	add	r2,r2,r5
 8007244:	294b883a 	add	r5,r5,r5
 8007248:	203ffa1e 	bne	r4,zero,8007234 <__alt_data_end+0xf8007234>
 800724c:	f800283a 	ret
 8007250:	f800283a 	ret

08007254 <memcpy>:
 8007254:	defffd04 	addi	sp,sp,-12
 8007258:	dfc00215 	stw	ra,8(sp)
 800725c:	dc400115 	stw	r17,4(sp)
 8007260:	dc000015 	stw	r16,0(sp)
 8007264:	00c003c4 	movi	r3,15
 8007268:	2005883a 	mov	r2,r4
 800726c:	1980452e 	bgeu	r3,r6,8007384 <memcpy+0x130>
 8007270:	2906b03a 	or	r3,r5,r4
 8007274:	18c000cc 	andi	r3,r3,3
 8007278:	1800441e 	bne	r3,zero,800738c <memcpy+0x138>
 800727c:	347ffc04 	addi	r17,r6,-16
 8007280:	8822d13a 	srli	r17,r17,4
 8007284:	28c00104 	addi	r3,r5,4
 8007288:	23400104 	addi	r13,r4,4
 800728c:	8820913a 	slli	r16,r17,4
 8007290:	2b000204 	addi	r12,r5,8
 8007294:	22c00204 	addi	r11,r4,8
 8007298:	84000504 	addi	r16,r16,20
 800729c:	2a800304 	addi	r10,r5,12
 80072a0:	22400304 	addi	r9,r4,12
 80072a4:	2c21883a 	add	r16,r5,r16
 80072a8:	2811883a 	mov	r8,r5
 80072ac:	200f883a 	mov	r7,r4
 80072b0:	41000017 	ldw	r4,0(r8)
 80072b4:	1fc00017 	ldw	ra,0(r3)
 80072b8:	63c00017 	ldw	r15,0(r12)
 80072bc:	39000015 	stw	r4,0(r7)
 80072c0:	53800017 	ldw	r14,0(r10)
 80072c4:	6fc00015 	stw	ra,0(r13)
 80072c8:	5bc00015 	stw	r15,0(r11)
 80072cc:	4b800015 	stw	r14,0(r9)
 80072d0:	18c00404 	addi	r3,r3,16
 80072d4:	39c00404 	addi	r7,r7,16
 80072d8:	42000404 	addi	r8,r8,16
 80072dc:	6b400404 	addi	r13,r13,16
 80072e0:	63000404 	addi	r12,r12,16
 80072e4:	5ac00404 	addi	r11,r11,16
 80072e8:	52800404 	addi	r10,r10,16
 80072ec:	4a400404 	addi	r9,r9,16
 80072f0:	1c3fef1e 	bne	r3,r16,80072b0 <__alt_data_end+0xf80072b0>
 80072f4:	89c00044 	addi	r7,r17,1
 80072f8:	380e913a 	slli	r7,r7,4
 80072fc:	310003cc 	andi	r4,r6,15
 8007300:	02c000c4 	movi	r11,3
 8007304:	11c7883a 	add	r3,r2,r7
 8007308:	29cb883a 	add	r5,r5,r7
 800730c:	5900212e 	bgeu	r11,r4,8007394 <memcpy+0x140>
 8007310:	1813883a 	mov	r9,r3
 8007314:	2811883a 	mov	r8,r5
 8007318:	200f883a 	mov	r7,r4
 800731c:	42800017 	ldw	r10,0(r8)
 8007320:	4a400104 	addi	r9,r9,4
 8007324:	39ffff04 	addi	r7,r7,-4
 8007328:	4abfff15 	stw	r10,-4(r9)
 800732c:	42000104 	addi	r8,r8,4
 8007330:	59fffa36 	bltu	r11,r7,800731c <__alt_data_end+0xf800731c>
 8007334:	213fff04 	addi	r4,r4,-4
 8007338:	2008d0ba 	srli	r4,r4,2
 800733c:	318000cc 	andi	r6,r6,3
 8007340:	21000044 	addi	r4,r4,1
 8007344:	2109883a 	add	r4,r4,r4
 8007348:	2109883a 	add	r4,r4,r4
 800734c:	1907883a 	add	r3,r3,r4
 8007350:	290b883a 	add	r5,r5,r4
 8007354:	30000626 	beq	r6,zero,8007370 <memcpy+0x11c>
 8007358:	198d883a 	add	r6,r3,r6
 800735c:	29c00003 	ldbu	r7,0(r5)
 8007360:	18c00044 	addi	r3,r3,1
 8007364:	29400044 	addi	r5,r5,1
 8007368:	19ffffc5 	stb	r7,-1(r3)
 800736c:	19bffb1e 	bne	r3,r6,800735c <__alt_data_end+0xf800735c>
 8007370:	dfc00217 	ldw	ra,8(sp)
 8007374:	dc400117 	ldw	r17,4(sp)
 8007378:	dc000017 	ldw	r16,0(sp)
 800737c:	dec00304 	addi	sp,sp,12
 8007380:	f800283a 	ret
 8007384:	2007883a 	mov	r3,r4
 8007388:	003ff206 	br	8007354 <__alt_data_end+0xf8007354>
 800738c:	2007883a 	mov	r3,r4
 8007390:	003ff106 	br	8007358 <__alt_data_end+0xf8007358>
 8007394:	200d883a 	mov	r6,r4
 8007398:	003fee06 	br	8007354 <__alt_data_end+0xf8007354>

0800739c <memset>:
 800739c:	20c000cc 	andi	r3,r4,3
 80073a0:	2005883a 	mov	r2,r4
 80073a4:	18004426 	beq	r3,zero,80074b8 <memset+0x11c>
 80073a8:	31ffffc4 	addi	r7,r6,-1
 80073ac:	30004026 	beq	r6,zero,80074b0 <memset+0x114>
 80073b0:	2813883a 	mov	r9,r5
 80073b4:	200d883a 	mov	r6,r4
 80073b8:	2007883a 	mov	r3,r4
 80073bc:	00000406 	br	80073d0 <memset+0x34>
 80073c0:	3a3fffc4 	addi	r8,r7,-1
 80073c4:	31800044 	addi	r6,r6,1
 80073c8:	38003926 	beq	r7,zero,80074b0 <memset+0x114>
 80073cc:	400f883a 	mov	r7,r8
 80073d0:	18c00044 	addi	r3,r3,1
 80073d4:	32400005 	stb	r9,0(r6)
 80073d8:	1a0000cc 	andi	r8,r3,3
 80073dc:	403ff81e 	bne	r8,zero,80073c0 <__alt_data_end+0xf80073c0>
 80073e0:	010000c4 	movi	r4,3
 80073e4:	21c02d2e 	bgeu	r4,r7,800749c <memset+0x100>
 80073e8:	29003fcc 	andi	r4,r5,255
 80073ec:	200c923a 	slli	r6,r4,8
 80073f0:	3108b03a 	or	r4,r6,r4
 80073f4:	200c943a 	slli	r6,r4,16
 80073f8:	218cb03a 	or	r6,r4,r6
 80073fc:	010003c4 	movi	r4,15
 8007400:	21c0182e 	bgeu	r4,r7,8007464 <memset+0xc8>
 8007404:	3b3ffc04 	addi	r12,r7,-16
 8007408:	6018d13a 	srli	r12,r12,4
 800740c:	1a000104 	addi	r8,r3,4
 8007410:	1ac00204 	addi	r11,r3,8
 8007414:	6008913a 	slli	r4,r12,4
 8007418:	1a800304 	addi	r10,r3,12
 800741c:	1813883a 	mov	r9,r3
 8007420:	21000504 	addi	r4,r4,20
 8007424:	1909883a 	add	r4,r3,r4
 8007428:	49800015 	stw	r6,0(r9)
 800742c:	41800015 	stw	r6,0(r8)
 8007430:	59800015 	stw	r6,0(r11)
 8007434:	51800015 	stw	r6,0(r10)
 8007438:	42000404 	addi	r8,r8,16
 800743c:	4a400404 	addi	r9,r9,16
 8007440:	5ac00404 	addi	r11,r11,16
 8007444:	52800404 	addi	r10,r10,16
 8007448:	413ff71e 	bne	r8,r4,8007428 <__alt_data_end+0xf8007428>
 800744c:	63000044 	addi	r12,r12,1
 8007450:	6018913a 	slli	r12,r12,4
 8007454:	39c003cc 	andi	r7,r7,15
 8007458:	010000c4 	movi	r4,3
 800745c:	1b07883a 	add	r3,r3,r12
 8007460:	21c00e2e 	bgeu	r4,r7,800749c <memset+0x100>
 8007464:	1813883a 	mov	r9,r3
 8007468:	3811883a 	mov	r8,r7
 800746c:	010000c4 	movi	r4,3
 8007470:	49800015 	stw	r6,0(r9)
 8007474:	423fff04 	addi	r8,r8,-4
 8007478:	4a400104 	addi	r9,r9,4
 800747c:	223ffc36 	bltu	r4,r8,8007470 <__alt_data_end+0xf8007470>
 8007480:	393fff04 	addi	r4,r7,-4
 8007484:	2008d0ba 	srli	r4,r4,2
 8007488:	39c000cc 	andi	r7,r7,3
 800748c:	21000044 	addi	r4,r4,1
 8007490:	2109883a 	add	r4,r4,r4
 8007494:	2109883a 	add	r4,r4,r4
 8007498:	1907883a 	add	r3,r3,r4
 800749c:	38000526 	beq	r7,zero,80074b4 <memset+0x118>
 80074a0:	19cf883a 	add	r7,r3,r7
 80074a4:	19400005 	stb	r5,0(r3)
 80074a8:	18c00044 	addi	r3,r3,1
 80074ac:	38fffd1e 	bne	r7,r3,80074a4 <__alt_data_end+0xf80074a4>
 80074b0:	f800283a 	ret
 80074b4:	f800283a 	ret
 80074b8:	2007883a 	mov	r3,r4
 80074bc:	300f883a 	mov	r7,r6
 80074c0:	003fc706 	br	80073e0 <__alt_data_end+0xf80073e0>

080074c4 <_printf_r>:
 80074c4:	defffd04 	addi	sp,sp,-12
 80074c8:	2805883a 	mov	r2,r5
 80074cc:	dfc00015 	stw	ra,0(sp)
 80074d0:	d9800115 	stw	r6,4(sp)
 80074d4:	d9c00215 	stw	r7,8(sp)
 80074d8:	21400217 	ldw	r5,8(r4)
 80074dc:	d9c00104 	addi	r7,sp,4
 80074e0:	100d883a 	mov	r6,r2
 80074e4:	800769c0 	call	800769c <___vfprintf_internal_r>
 80074e8:	dfc00017 	ldw	ra,0(sp)
 80074ec:	dec00304 	addi	sp,sp,12
 80074f0:	f800283a 	ret

080074f4 <printf>:
 80074f4:	defffc04 	addi	sp,sp,-16
 80074f8:	dfc00015 	stw	ra,0(sp)
 80074fc:	d9400115 	stw	r5,4(sp)
 8007500:	d9800215 	stw	r6,8(sp)
 8007504:	d9c00315 	stw	r7,12(sp)
 8007508:	008200b4 	movhi	r2,2050
 800750c:	10a11504 	addi	r2,r2,-31660
 8007510:	10800017 	ldw	r2,0(r2)
 8007514:	200b883a 	mov	r5,r4
 8007518:	d9800104 	addi	r6,sp,4
 800751c:	11000217 	ldw	r4,8(r2)
 8007520:	80099780 	call	8009978 <__vfprintf_internal>
 8007524:	dfc00017 	ldw	ra,0(sp)
 8007528:	dec00404 	addi	sp,sp,16
 800752c:	f800283a 	ret

08007530 <_puts_r>:
 8007530:	defff604 	addi	sp,sp,-40
 8007534:	dc000715 	stw	r16,28(sp)
 8007538:	2021883a 	mov	r16,r4
 800753c:	2809883a 	mov	r4,r5
 8007540:	dc400815 	stw	r17,32(sp)
 8007544:	dfc00915 	stw	ra,36(sp)
 8007548:	2823883a 	mov	r17,r5
 800754c:	80076040 	call	8007604 <strlen>
 8007550:	10c00044 	addi	r3,r2,1
 8007554:	d8800115 	stw	r2,4(sp)
 8007558:	00820074 	movhi	r2,2049
 800755c:	1099ac04 	addi	r2,r2,26288
 8007560:	d8800215 	stw	r2,8(sp)
 8007564:	00800044 	movi	r2,1
 8007568:	d8800315 	stw	r2,12(sp)
 800756c:	00800084 	movi	r2,2
 8007570:	dc400015 	stw	r17,0(sp)
 8007574:	d8c00615 	stw	r3,24(sp)
 8007578:	dec00415 	stw	sp,16(sp)
 800757c:	d8800515 	stw	r2,20(sp)
 8007580:	80000226 	beq	r16,zero,800758c <_puts_r+0x5c>
 8007584:	80800e17 	ldw	r2,56(r16)
 8007588:	10001426 	beq	r2,zero,80075dc <_puts_r+0xac>
 800758c:	81400217 	ldw	r5,8(r16)
 8007590:	2880030b 	ldhu	r2,12(r5)
 8007594:	10c8000c 	andi	r3,r2,8192
 8007598:	1800061e 	bne	r3,zero,80075b4 <_puts_r+0x84>
 800759c:	29001917 	ldw	r4,100(r5)
 80075a0:	00f7ffc4 	movi	r3,-8193
 80075a4:	10880014 	ori	r2,r2,8192
 80075a8:	20c6703a 	and	r3,r4,r3
 80075ac:	2880030d 	sth	r2,12(r5)
 80075b0:	28c01915 	stw	r3,100(r5)
 80075b4:	d9800404 	addi	r6,sp,16
 80075b8:	8009883a 	mov	r4,r16
 80075bc:	800bee00 	call	800bee0 <__sfvwrite_r>
 80075c0:	1000091e 	bne	r2,zero,80075e8 <_puts_r+0xb8>
 80075c4:	00800284 	movi	r2,10
 80075c8:	dfc00917 	ldw	ra,36(sp)
 80075cc:	dc400817 	ldw	r17,32(sp)
 80075d0:	dc000717 	ldw	r16,28(sp)
 80075d4:	dec00a04 	addi	sp,sp,40
 80075d8:	f800283a 	ret
 80075dc:	8009883a 	mov	r4,r16
 80075e0:	800ba5c0 	call	800ba5c <__sinit>
 80075e4:	003fe906 	br	800758c <__alt_data_end+0xf800758c>
 80075e8:	00bfffc4 	movi	r2,-1
 80075ec:	003ff606 	br	80075c8 <__alt_data_end+0xf80075c8>

080075f0 <puts>:
 80075f0:	008200b4 	movhi	r2,2050
 80075f4:	10a11504 	addi	r2,r2,-31660
 80075f8:	200b883a 	mov	r5,r4
 80075fc:	11000017 	ldw	r4,0(r2)
 8007600:	80075301 	jmpi	8007530 <_puts_r>

08007604 <strlen>:
 8007604:	208000cc 	andi	r2,r4,3
 8007608:	10002026 	beq	r2,zero,800768c <strlen+0x88>
 800760c:	20800007 	ldb	r2,0(r4)
 8007610:	10002026 	beq	r2,zero,8007694 <strlen+0x90>
 8007614:	2005883a 	mov	r2,r4
 8007618:	00000206 	br	8007624 <strlen+0x20>
 800761c:	10c00007 	ldb	r3,0(r2)
 8007620:	18001826 	beq	r3,zero,8007684 <strlen+0x80>
 8007624:	10800044 	addi	r2,r2,1
 8007628:	10c000cc 	andi	r3,r2,3
 800762c:	183ffb1e 	bne	r3,zero,800761c <__alt_data_end+0xf800761c>
 8007630:	10c00017 	ldw	r3,0(r2)
 8007634:	01ffbff4 	movhi	r7,65279
 8007638:	39ffbfc4 	addi	r7,r7,-257
 800763c:	00ca303a 	nor	r5,zero,r3
 8007640:	01a02074 	movhi	r6,32897
 8007644:	19c7883a 	add	r3,r3,r7
 8007648:	31a02004 	addi	r6,r6,-32640
 800764c:	1946703a 	and	r3,r3,r5
 8007650:	1986703a 	and	r3,r3,r6
 8007654:	1800091e 	bne	r3,zero,800767c <strlen+0x78>
 8007658:	10800104 	addi	r2,r2,4
 800765c:	10c00017 	ldw	r3,0(r2)
 8007660:	19cb883a 	add	r5,r3,r7
 8007664:	00c6303a 	nor	r3,zero,r3
 8007668:	28c6703a 	and	r3,r5,r3
 800766c:	1986703a 	and	r3,r3,r6
 8007670:	183ff926 	beq	r3,zero,8007658 <__alt_data_end+0xf8007658>
 8007674:	00000106 	br	800767c <strlen+0x78>
 8007678:	10800044 	addi	r2,r2,1
 800767c:	10c00007 	ldb	r3,0(r2)
 8007680:	183ffd1e 	bne	r3,zero,8007678 <__alt_data_end+0xf8007678>
 8007684:	1105c83a 	sub	r2,r2,r4
 8007688:	f800283a 	ret
 800768c:	2005883a 	mov	r2,r4
 8007690:	003fe706 	br	8007630 <__alt_data_end+0xf8007630>
 8007694:	0005883a 	mov	r2,zero
 8007698:	f800283a 	ret

0800769c <___vfprintf_internal_r>:
 800769c:	deffb804 	addi	sp,sp,-288
 80076a0:	dfc04715 	stw	ra,284(sp)
 80076a4:	ddc04515 	stw	r23,276(sp)
 80076a8:	dd404315 	stw	r21,268(sp)
 80076ac:	d9002d15 	stw	r4,180(sp)
 80076b0:	282f883a 	mov	r23,r5
 80076b4:	302b883a 	mov	r21,r6
 80076b8:	d9c02e15 	stw	r7,184(sp)
 80076bc:	df004615 	stw	fp,280(sp)
 80076c0:	dd804415 	stw	r22,272(sp)
 80076c4:	dd004215 	stw	r20,264(sp)
 80076c8:	dcc04115 	stw	r19,260(sp)
 80076cc:	dc804015 	stw	r18,256(sp)
 80076d0:	dc403f15 	stw	r17,252(sp)
 80076d4:	dc003e15 	stw	r16,248(sp)
 80076d8:	800c5dc0 	call	800c5dc <_localeconv_r>
 80076dc:	10800017 	ldw	r2,0(r2)
 80076e0:	1009883a 	mov	r4,r2
 80076e4:	d8803415 	stw	r2,208(sp)
 80076e8:	80076040 	call	8007604 <strlen>
 80076ec:	d8803715 	stw	r2,220(sp)
 80076f0:	d8802d17 	ldw	r2,180(sp)
 80076f4:	10000226 	beq	r2,zero,8007700 <___vfprintf_internal_r+0x64>
 80076f8:	10800e17 	ldw	r2,56(r2)
 80076fc:	1000fb26 	beq	r2,zero,8007aec <___vfprintf_internal_r+0x450>
 8007700:	b880030b 	ldhu	r2,12(r23)
 8007704:	10c8000c 	andi	r3,r2,8192
 8007708:	1800061e 	bne	r3,zero,8007724 <___vfprintf_internal_r+0x88>
 800770c:	b9001917 	ldw	r4,100(r23)
 8007710:	00f7ffc4 	movi	r3,-8193
 8007714:	10880014 	ori	r2,r2,8192
 8007718:	20c6703a 	and	r3,r4,r3
 800771c:	b880030d 	sth	r2,12(r23)
 8007720:	b8c01915 	stw	r3,100(r23)
 8007724:	10c0020c 	andi	r3,r2,8
 8007728:	1800c326 	beq	r3,zero,8007a38 <___vfprintf_internal_r+0x39c>
 800772c:	b8c00417 	ldw	r3,16(r23)
 8007730:	1800c126 	beq	r3,zero,8007a38 <___vfprintf_internal_r+0x39c>
 8007734:	1080068c 	andi	r2,r2,26
 8007738:	00c00284 	movi	r3,10
 800773c:	10c0c626 	beq	r2,r3,8007a58 <___vfprintf_internal_r+0x3bc>
 8007740:	d8c00404 	addi	r3,sp,16
 8007744:	05020074 	movhi	r20,2049
 8007748:	d9001e04 	addi	r4,sp,120
 800774c:	a519bd84 	addi	r20,r20,26358
 8007750:	d8c01e15 	stw	r3,120(sp)
 8007754:	d8002015 	stw	zero,128(sp)
 8007758:	d8001f15 	stw	zero,124(sp)
 800775c:	d8003315 	stw	zero,204(sp)
 8007760:	d8003615 	stw	zero,216(sp)
 8007764:	d8003815 	stw	zero,224(sp)
 8007768:	1811883a 	mov	r8,r3
 800776c:	d8003915 	stw	zero,228(sp)
 8007770:	d8003a15 	stw	zero,232(sp)
 8007774:	d8002f15 	stw	zero,188(sp)
 8007778:	d9002815 	stw	r4,160(sp)
 800777c:	a8800007 	ldb	r2,0(r21)
 8007780:	10028b26 	beq	r2,zero,80081b0 <___vfprintf_internal_r+0xb14>
 8007784:	00c00944 	movi	r3,37
 8007788:	a823883a 	mov	r17,r21
 800778c:	10c0021e 	bne	r2,r3,8007798 <___vfprintf_internal_r+0xfc>
 8007790:	00001406 	br	80077e4 <___vfprintf_internal_r+0x148>
 8007794:	10c00326 	beq	r2,r3,80077a4 <___vfprintf_internal_r+0x108>
 8007798:	8c400044 	addi	r17,r17,1
 800779c:	88800007 	ldb	r2,0(r17)
 80077a0:	103ffc1e 	bne	r2,zero,8007794 <__alt_data_end+0xf8007794>
 80077a4:	8d61c83a 	sub	r16,r17,r21
 80077a8:	80000e26 	beq	r16,zero,80077e4 <___vfprintf_internal_r+0x148>
 80077ac:	d8c02017 	ldw	r3,128(sp)
 80077b0:	d8801f17 	ldw	r2,124(sp)
 80077b4:	45400015 	stw	r21,0(r8)
 80077b8:	1c07883a 	add	r3,r3,r16
 80077bc:	10800044 	addi	r2,r2,1
 80077c0:	d8c02015 	stw	r3,128(sp)
 80077c4:	44000115 	stw	r16,4(r8)
 80077c8:	d8801f15 	stw	r2,124(sp)
 80077cc:	00c001c4 	movi	r3,7
 80077d0:	1880a916 	blt	r3,r2,8007a78 <___vfprintf_internal_r+0x3dc>
 80077d4:	42000204 	addi	r8,r8,8
 80077d8:	d9402f17 	ldw	r5,188(sp)
 80077dc:	2c0b883a 	add	r5,r5,r16
 80077e0:	d9402f15 	stw	r5,188(sp)
 80077e4:	88800007 	ldb	r2,0(r17)
 80077e8:	1000aa26 	beq	r2,zero,8007a94 <___vfprintf_internal_r+0x3f8>
 80077ec:	8d400044 	addi	r21,r17,1
 80077f0:	8c400047 	ldb	r17,1(r17)
 80077f4:	0021883a 	mov	r16,zero
 80077f8:	00bfffc4 	movi	r2,-1
 80077fc:	0025883a 	mov	r18,zero
 8007800:	dc002905 	stb	r16,164(sp)
 8007804:	d8002785 	stb	zero,158(sp)
 8007808:	d8002b05 	stb	zero,172(sp)
 800780c:	d8802a15 	stw	r2,168(sp)
 8007810:	d8003115 	stw	zero,196(sp)
 8007814:	04c01604 	movi	r19,88
 8007818:	05800244 	movi	r22,9
 800781c:	9021883a 	mov	r16,r18
 8007820:	4039883a 	mov	fp,r8
 8007824:	ad400044 	addi	r21,r21,1
 8007828:	88bff804 	addi	r2,r17,-32
 800782c:	98833236 	bltu	r19,r2,80084f8 <___vfprintf_internal_r+0xe5c>
 8007830:	100490ba 	slli	r2,r2,2
 8007834:	00c20034 	movhi	r3,2048
 8007838:	18de1204 	addi	r3,r3,30792
 800783c:	10c5883a 	add	r2,r2,r3
 8007840:	10800017 	ldw	r2,0(r2)
 8007844:	1000683a 	jmp	r2
 8007848:	080083f0 	cmpltui	zero,at,527
 800784c:	080084f8 	rdprs	zero,at,531
 8007850:	080084f8 	rdprs	zero,at,531
 8007854:	08008410 	cmplti	zero,at,528
 8007858:	080084f8 	rdprs	zero,at,531
 800785c:	080084f8 	rdprs	zero,at,531
 8007860:	080084f8 	rdprs	zero,at,531
 8007864:	080084f8 	rdprs	zero,at,531
 8007868:	080084f8 	rdprs	zero,at,531
 800786c:	080084f8 	rdprs	zero,at,531
 8007870:	08007af8 	rdprs	zero,at,491
 8007874:	08008300 	call	800830 <__alt_mem_sdram-0x77ff7d0>
 8007878:	080084f8 	rdprs	zero,at,531
 800787c:	080079bc 	xorhi	zero,at,486
 8007880:	08007b1c 	xori	zero,at,492
 8007884:	080084f8 	rdprs	zero,at,531
 8007888:	08007b6c 	andhi	zero,at,493
 800788c:	08007b78 	rdprs	zero,at,493
 8007890:	08007b78 	rdprs	zero,at,493
 8007894:	08007b78 	rdprs	zero,at,493
 8007898:	08007b78 	rdprs	zero,at,493
 800789c:	08007b78 	rdprs	zero,at,493
 80078a0:	08007b78 	rdprs	zero,at,493
 80078a4:	08007b78 	rdprs	zero,at,493
 80078a8:	08007b78 	rdprs	zero,at,493
 80078ac:	08007b78 	rdprs	zero,at,493
 80078b0:	080084f8 	rdprs	zero,at,531
 80078b4:	080084f8 	rdprs	zero,at,531
 80078b8:	080084f8 	rdprs	zero,at,531
 80078bc:	080084f8 	rdprs	zero,at,531
 80078c0:	080084f8 	rdprs	zero,at,531
 80078c4:	080084f8 	rdprs	zero,at,531
 80078c8:	080084f8 	rdprs	zero,at,531
 80078cc:	080084f8 	rdprs	zero,at,531
 80078d0:	080084f8 	rdprs	zero,at,531
 80078d4:	080084f8 	rdprs	zero,at,531
 80078d8:	08007bb4 	orhi	zero,at,494
 80078dc:	08007c7c 	xorhi	zero,at,497
 80078e0:	080084f8 	rdprs	zero,at,531
 80078e4:	08007c7c 	xorhi	zero,at,497
 80078e8:	080084f8 	rdprs	zero,at,531
 80078ec:	080084f8 	rdprs	zero,at,531
 80078f0:	080084f8 	rdprs	zero,at,531
 80078f4:	080084f8 	rdprs	zero,at,531
 80078f8:	08007d28 	cmpgeui	zero,at,500
 80078fc:	080084f8 	rdprs	zero,at,531
 8007900:	080084f8 	rdprs	zero,at,531
 8007904:	08007d34 	orhi	zero,at,500
 8007908:	080084f8 	rdprs	zero,at,531
 800790c:	080084f8 	rdprs	zero,at,531
 8007910:	080084f8 	rdprs	zero,at,531
 8007914:	080084f8 	rdprs	zero,at,531
 8007918:	080084f8 	rdprs	zero,at,531
 800791c:	080081b8 	rdprs	zero,at,518
 8007920:	080084f8 	rdprs	zero,at,531
 8007924:	080084f8 	rdprs	zero,at,531
 8007928:	08008224 	muli	zero,at,520
 800792c:	080084f8 	rdprs	zero,at,531
 8007930:	080084f8 	rdprs	zero,at,531
 8007934:	080084f8 	rdprs	zero,at,531
 8007938:	080084f8 	rdprs	zero,at,531
 800793c:	080084f8 	rdprs	zero,at,531
 8007940:	080084f8 	rdprs	zero,at,531
 8007944:	080084f8 	rdprs	zero,at,531
 8007948:	080084f8 	rdprs	zero,at,531
 800794c:	080084f8 	rdprs	zero,at,531
 8007950:	080084f8 	rdprs	zero,at,531
 8007954:	0800849c 	xori	zero,at,530
 8007958:	0800841c 	xori	zero,at,528
 800795c:	08007c7c 	xorhi	zero,at,497
 8007960:	08007c7c 	xorhi	zero,at,497
 8007964:	08007c7c 	xorhi	zero,at,497
 8007968:	0800843c 	xorhi	zero,at,528
 800796c:	0800841c 	xori	zero,at,528
 8007970:	080084f8 	rdprs	zero,at,531
 8007974:	080084f8 	rdprs	zero,at,531
 8007978:	08008448 	cmpgei	zero,at,529
 800797c:	080084f8 	rdprs	zero,at,531
 8007980:	0800845c 	xori	zero,at,529
 8007984:	080082e0 	cmpeqi	zero,at,523
 8007988:	080079c8 	cmpgei	zero,at,487
 800798c:	08008318 	cmpnei	zero,at,524
 8007990:	080084f8 	rdprs	zero,at,531
 8007994:	08008324 	muli	zero,at,524
 8007998:	080084f8 	rdprs	zero,at,531
 800799c:	08008388 	cmpgei	zero,at,526
 80079a0:	080084f8 	rdprs	zero,at,531
 80079a4:	080084f8 	rdprs	zero,at,531
 80079a8:	080083a8 	cmpgeui	zero,at,526
 80079ac:	d8c03117 	ldw	r3,196(sp)
 80079b0:	d8802e15 	stw	r2,184(sp)
 80079b4:	00c7c83a 	sub	r3,zero,r3
 80079b8:	d8c03115 	stw	r3,196(sp)
 80079bc:	84000114 	ori	r16,r16,4
 80079c0:	ac400007 	ldb	r17,0(r21)
 80079c4:	003f9706 	br	8007824 <__alt_data_end+0xf8007824>
 80079c8:	00800c04 	movi	r2,48
 80079cc:	d8802705 	stb	r2,156(sp)
 80079d0:	00801e04 	movi	r2,120
 80079d4:	d8802745 	stb	r2,157(sp)
 80079d8:	d9002a17 	ldw	r4,168(sp)
 80079dc:	d8802e17 	ldw	r2,184(sp)
 80079e0:	d8002785 	stb	zero,158(sp)
 80079e4:	e011883a 	mov	r8,fp
 80079e8:	10c00104 	addi	r3,r2,4
 80079ec:	14c00017 	ldw	r19,0(r2)
 80079f0:	002d883a 	mov	r22,zero
 80079f4:	80800094 	ori	r2,r16,2
 80079f8:	2002ca16 	blt	r4,zero,8008524 <___vfprintf_internal_r+0xe88>
 80079fc:	00bfdfc4 	movi	r2,-129
 8007a00:	80a4703a 	and	r18,r16,r2
 8007a04:	d8c02e15 	stw	r3,184(sp)
 8007a08:	94800094 	ori	r18,r18,2
 8007a0c:	9802b41e 	bne	r19,zero,80084e0 <___vfprintf_internal_r+0xe44>
 8007a10:	01420074 	movhi	r5,2049
 8007a14:	2959b604 	addi	r5,r5,26328
 8007a18:	d9403915 	stw	r5,228(sp)
 8007a1c:	04401e04 	movi	r17,120
 8007a20:	d8802a17 	ldw	r2,168(sp)
 8007a24:	0039883a 	mov	fp,zero
 8007a28:	1001fa26 	beq	r2,zero,8008214 <___vfprintf_internal_r+0xb78>
 8007a2c:	0027883a 	mov	r19,zero
 8007a30:	002d883a 	mov	r22,zero
 8007a34:	00021906 	br	800829c <___vfprintf_internal_r+0xc00>
 8007a38:	d9002d17 	ldw	r4,180(sp)
 8007a3c:	b80b883a 	mov	r5,r23
 8007a40:	8009a500 	call	8009a50 <__swsetup_r>
 8007a44:	1005dc1e 	bne	r2,zero,80091b8 <___vfprintf_internal_r+0x1b1c>
 8007a48:	b880030b 	ldhu	r2,12(r23)
 8007a4c:	00c00284 	movi	r3,10
 8007a50:	1080068c 	andi	r2,r2,26
 8007a54:	10ff3a1e 	bne	r2,r3,8007740 <__alt_data_end+0xf8007740>
 8007a58:	b880038f 	ldh	r2,14(r23)
 8007a5c:	103f3816 	blt	r2,zero,8007740 <__alt_data_end+0xf8007740>
 8007a60:	d9c02e17 	ldw	r7,184(sp)
 8007a64:	d9002d17 	ldw	r4,180(sp)
 8007a68:	a80d883a 	mov	r6,r21
 8007a6c:	b80b883a 	mov	r5,r23
 8007a70:	80099940 	call	8009994 <__sbprintf>
 8007a74:	00001106 	br	8007abc <___vfprintf_internal_r+0x420>
 8007a78:	d9002d17 	ldw	r4,180(sp)
 8007a7c:	d9801e04 	addi	r6,sp,120
 8007a80:	b80b883a 	mov	r5,r23
 8007a84:	800ec0c0 	call	800ec0c <__sprint_r>
 8007a88:	1000081e 	bne	r2,zero,8007aac <___vfprintf_internal_r+0x410>
 8007a8c:	da000404 	addi	r8,sp,16
 8007a90:	003f5106 	br	80077d8 <__alt_data_end+0xf80077d8>
 8007a94:	d8802017 	ldw	r2,128(sp)
 8007a98:	10000426 	beq	r2,zero,8007aac <___vfprintf_internal_r+0x410>
 8007a9c:	d9002d17 	ldw	r4,180(sp)
 8007aa0:	d9801e04 	addi	r6,sp,120
 8007aa4:	b80b883a 	mov	r5,r23
 8007aa8:	800ec0c0 	call	800ec0c <__sprint_r>
 8007aac:	b880030b 	ldhu	r2,12(r23)
 8007ab0:	1080100c 	andi	r2,r2,64
 8007ab4:	1005c01e 	bne	r2,zero,80091b8 <___vfprintf_internal_r+0x1b1c>
 8007ab8:	d8802f17 	ldw	r2,188(sp)
 8007abc:	dfc04717 	ldw	ra,284(sp)
 8007ac0:	df004617 	ldw	fp,280(sp)
 8007ac4:	ddc04517 	ldw	r23,276(sp)
 8007ac8:	dd804417 	ldw	r22,272(sp)
 8007acc:	dd404317 	ldw	r21,268(sp)
 8007ad0:	dd004217 	ldw	r20,264(sp)
 8007ad4:	dcc04117 	ldw	r19,260(sp)
 8007ad8:	dc804017 	ldw	r18,256(sp)
 8007adc:	dc403f17 	ldw	r17,252(sp)
 8007ae0:	dc003e17 	ldw	r16,248(sp)
 8007ae4:	dec04804 	addi	sp,sp,288
 8007ae8:	f800283a 	ret
 8007aec:	d9002d17 	ldw	r4,180(sp)
 8007af0:	800ba5c0 	call	800ba5c <__sinit>
 8007af4:	003f0206 	br	8007700 <__alt_data_end+0xf8007700>
 8007af8:	d9002e17 	ldw	r4,184(sp)
 8007afc:	d9402e17 	ldw	r5,184(sp)
 8007b00:	21000017 	ldw	r4,0(r4)
 8007b04:	28800104 	addi	r2,r5,4
 8007b08:	d9003115 	stw	r4,196(sp)
 8007b0c:	203fa716 	blt	r4,zero,80079ac <__alt_data_end+0xf80079ac>
 8007b10:	d8802e15 	stw	r2,184(sp)
 8007b14:	ac400007 	ldb	r17,0(r21)
 8007b18:	003f4206 	br	8007824 <__alt_data_end+0xf8007824>
 8007b1c:	ac400007 	ldb	r17,0(r21)
 8007b20:	01000a84 	movi	r4,42
 8007b24:	a8c00044 	addi	r3,r21,1
 8007b28:	89075826 	beq	r17,r4,800988c <___vfprintf_internal_r+0x21f0>
 8007b2c:	8cbff404 	addi	r18,r17,-48
 8007b30:	b486ae36 	bltu	r22,r18,80095ec <___vfprintf_internal_r+0x1f50>
 8007b34:	0009883a 	mov	r4,zero
 8007b38:	1823883a 	mov	r17,r3
 8007b3c:	01400284 	movi	r5,10
 8007b40:	800722c0 	call	800722c <__mulsi3>
 8007b44:	88c00007 	ldb	r3,0(r17)
 8007b48:	1489883a 	add	r4,r2,r18
 8007b4c:	8d400044 	addi	r21,r17,1
 8007b50:	1cbff404 	addi	r18,r3,-48
 8007b54:	a823883a 	mov	r17,r21
 8007b58:	b4bff82e 	bgeu	r22,r18,8007b3c <__alt_data_end+0xf8007b3c>
 8007b5c:	1823883a 	mov	r17,r3
 8007b60:	2005f616 	blt	r4,zero,800933c <___vfprintf_internal_r+0x1ca0>
 8007b64:	d9002a15 	stw	r4,168(sp)
 8007b68:	003f2f06 	br	8007828 <__alt_data_end+0xf8007828>
 8007b6c:	84002014 	ori	r16,r16,128
 8007b70:	ac400007 	ldb	r17,0(r21)
 8007b74:	003f2b06 	br	8007824 <__alt_data_end+0xf8007824>
 8007b78:	8cbff404 	addi	r18,r17,-48
 8007b7c:	d8003115 	stw	zero,196(sp)
 8007b80:	0009883a 	mov	r4,zero
 8007b84:	a823883a 	mov	r17,r21
 8007b88:	01400284 	movi	r5,10
 8007b8c:	800722c0 	call	800722c <__mulsi3>
 8007b90:	88c00007 	ldb	r3,0(r17)
 8007b94:	9089883a 	add	r4,r18,r2
 8007b98:	ad400044 	addi	r21,r21,1
 8007b9c:	1cbff404 	addi	r18,r3,-48
 8007ba0:	a823883a 	mov	r17,r21
 8007ba4:	b4bff82e 	bgeu	r22,r18,8007b88 <__alt_data_end+0xf8007b88>
 8007ba8:	1823883a 	mov	r17,r3
 8007bac:	d9003115 	stw	r4,196(sp)
 8007bb0:	003f1d06 	br	8007828 <__alt_data_end+0xf8007828>
 8007bb4:	8025883a 	mov	r18,r16
 8007bb8:	dc002903 	ldbu	r16,164(sp)
 8007bbc:	e011883a 	mov	r8,fp
 8007bc0:	84003fcc 	andi	r16,r16,255
 8007bc4:	8007531e 	bne	r16,zero,8009914 <___vfprintf_internal_r+0x2278>
 8007bc8:	94800414 	ori	r18,r18,16
 8007bcc:	9080080c 	andi	r2,r18,32
 8007bd0:	1003a326 	beq	r2,zero,8008a60 <___vfprintf_internal_r+0x13c4>
 8007bd4:	d9002e17 	ldw	r4,184(sp)
 8007bd8:	20800117 	ldw	r2,4(r4)
 8007bdc:	24c00017 	ldw	r19,0(r4)
 8007be0:	21000204 	addi	r4,r4,8
 8007be4:	d9002e15 	stw	r4,184(sp)
 8007be8:	102d883a 	mov	r22,r2
 8007bec:	10047316 	blt	r2,zero,8008dbc <___vfprintf_internal_r+0x1720>
 8007bf0:	d9002a17 	ldw	r4,168(sp)
 8007bf4:	df002783 	ldbu	fp,158(sp)
 8007bf8:	2003e416 	blt	r4,zero,8008b8c <___vfprintf_internal_r+0x14f0>
 8007bfc:	00ffdfc4 	movi	r3,-129
 8007c00:	9d84b03a 	or	r2,r19,r22
 8007c04:	90e4703a 	and	r18,r18,r3
 8007c08:	10018026 	beq	r2,zero,800820c <___vfprintf_internal_r+0xb70>
 8007c0c:	b003ab26 	beq	r22,zero,8008abc <___vfprintf_internal_r+0x1420>
 8007c10:	dc402915 	stw	r17,164(sp)
 8007c14:	dc001e04 	addi	r16,sp,120
 8007c18:	b023883a 	mov	r17,r22
 8007c1c:	402d883a 	mov	r22,r8
 8007c20:	9809883a 	mov	r4,r19
 8007c24:	880b883a 	mov	r5,r17
 8007c28:	01800284 	movi	r6,10
 8007c2c:	000f883a 	mov	r7,zero
 8007c30:	80111500 	call	8011150 <__umoddi3>
 8007c34:	10800c04 	addi	r2,r2,48
 8007c38:	843fffc4 	addi	r16,r16,-1
 8007c3c:	9809883a 	mov	r4,r19
 8007c40:	880b883a 	mov	r5,r17
 8007c44:	80800005 	stb	r2,0(r16)
 8007c48:	01800284 	movi	r6,10
 8007c4c:	000f883a 	mov	r7,zero
 8007c50:	8010b540 	call	8010b54 <__udivdi3>
 8007c54:	1027883a 	mov	r19,r2
 8007c58:	10c4b03a 	or	r2,r2,r3
 8007c5c:	1823883a 	mov	r17,r3
 8007c60:	103fef1e 	bne	r2,zero,8007c20 <__alt_data_end+0xf8007c20>
 8007c64:	d8c02817 	ldw	r3,160(sp)
 8007c68:	dc402917 	ldw	r17,164(sp)
 8007c6c:	b011883a 	mov	r8,r22
 8007c70:	1c07c83a 	sub	r3,r3,r16
 8007c74:	d8c02b15 	stw	r3,172(sp)
 8007c78:	00005f06 	br	8007df8 <___vfprintf_internal_r+0x75c>
 8007c7c:	8025883a 	mov	r18,r16
 8007c80:	dc002903 	ldbu	r16,164(sp)
 8007c84:	e011883a 	mov	r8,fp
 8007c88:	84003fcc 	andi	r16,r16,255
 8007c8c:	80071e1e 	bne	r16,zero,8009908 <___vfprintf_internal_r+0x226c>
 8007c90:	9080020c 	andi	r2,r18,8
 8007c94:	1004af26 	beq	r2,zero,8008f54 <___vfprintf_internal_r+0x18b8>
 8007c98:	d9002e17 	ldw	r4,184(sp)
 8007c9c:	d9402e17 	ldw	r5,184(sp)
 8007ca0:	d8802e17 	ldw	r2,184(sp)
 8007ca4:	21000017 	ldw	r4,0(r4)
 8007ca8:	29400117 	ldw	r5,4(r5)
 8007cac:	10800204 	addi	r2,r2,8
 8007cb0:	d9003615 	stw	r4,216(sp)
 8007cb4:	d9403815 	stw	r5,224(sp)
 8007cb8:	d8802e15 	stw	r2,184(sp)
 8007cbc:	d9003617 	ldw	r4,216(sp)
 8007cc0:	d9403817 	ldw	r5,224(sp)
 8007cc4:	da003d15 	stw	r8,244(sp)
 8007cc8:	04000044 	movi	r16,1
 8007ccc:	800e8300 	call	800e830 <__fpclassifyd>
 8007cd0:	da003d17 	ldw	r8,244(sp)
 8007cd4:	1404441e 	bne	r2,r16,8008de8 <___vfprintf_internal_r+0x174c>
 8007cd8:	d9003617 	ldw	r4,216(sp)
 8007cdc:	d9403817 	ldw	r5,224(sp)
 8007ce0:	000d883a 	mov	r6,zero
 8007ce4:	000f883a 	mov	r7,zero
 8007ce8:	8012af40 	call	8012af4 <__ledf2>
 8007cec:	da003d17 	ldw	r8,244(sp)
 8007cf0:	1005e316 	blt	r2,zero,8009480 <___vfprintf_internal_r+0x1de4>
 8007cf4:	df002783 	ldbu	fp,158(sp)
 8007cf8:	008011c4 	movi	r2,71
 8007cfc:	1445580e 	bge	r2,r17,8009260 <___vfprintf_internal_r+0x1bc4>
 8007d00:	04020074 	movhi	r16,2049
 8007d04:	8419ae04 	addi	r16,r16,26296
 8007d08:	00c000c4 	movi	r3,3
 8007d0c:	00bfdfc4 	movi	r2,-129
 8007d10:	d8c02915 	stw	r3,164(sp)
 8007d14:	90a4703a 	and	r18,r18,r2
 8007d18:	d8c02b15 	stw	r3,172(sp)
 8007d1c:	d8002a15 	stw	zero,168(sp)
 8007d20:	d8003215 	stw	zero,200(sp)
 8007d24:	00003a06 	br	8007e10 <___vfprintf_internal_r+0x774>
 8007d28:	84000214 	ori	r16,r16,8
 8007d2c:	ac400007 	ldb	r17,0(r21)
 8007d30:	003ebc06 	br	8007824 <__alt_data_end+0xf8007824>
 8007d34:	8025883a 	mov	r18,r16
 8007d38:	dc002903 	ldbu	r16,164(sp)
 8007d3c:	e011883a 	mov	r8,fp
 8007d40:	84003fcc 	andi	r16,r16,255
 8007d44:	8007001e 	bne	r16,zero,8009948 <___vfprintf_internal_r+0x22ac>
 8007d48:	94800414 	ori	r18,r18,16
 8007d4c:	9080080c 	andi	r2,r18,32
 8007d50:	1002fa26 	beq	r2,zero,800893c <___vfprintf_internal_r+0x12a0>
 8007d54:	d9002e17 	ldw	r4,184(sp)
 8007d58:	d9402a17 	ldw	r5,168(sp)
 8007d5c:	d8002785 	stb	zero,158(sp)
 8007d60:	20800204 	addi	r2,r4,8
 8007d64:	24c00017 	ldw	r19,0(r4)
 8007d68:	25800117 	ldw	r22,4(r4)
 8007d6c:	2804b116 	blt	r5,zero,8009034 <___vfprintf_internal_r+0x1998>
 8007d70:	013fdfc4 	movi	r4,-129
 8007d74:	9d86b03a 	or	r3,r19,r22
 8007d78:	d8802e15 	stw	r2,184(sp)
 8007d7c:	9124703a 	and	r18,r18,r4
 8007d80:	1802fb1e 	bne	r3,zero,8008970 <___vfprintf_internal_r+0x12d4>
 8007d84:	d8c02a17 	ldw	r3,168(sp)
 8007d88:	0039883a 	mov	fp,zero
 8007d8c:	1805e526 	beq	r3,zero,8009524 <___vfprintf_internal_r+0x1e88>
 8007d90:	0027883a 	mov	r19,zero
 8007d94:	002d883a 	mov	r22,zero
 8007d98:	dc001e04 	addi	r16,sp,120
 8007d9c:	9806d0fa 	srli	r3,r19,3
 8007da0:	b008977a 	slli	r4,r22,29
 8007da4:	b02cd0fa 	srli	r22,r22,3
 8007da8:	9cc001cc 	andi	r19,r19,7
 8007dac:	98800c04 	addi	r2,r19,48
 8007db0:	843fffc4 	addi	r16,r16,-1
 8007db4:	20e6b03a 	or	r19,r4,r3
 8007db8:	80800005 	stb	r2,0(r16)
 8007dbc:	9d86b03a 	or	r3,r19,r22
 8007dc0:	183ff61e 	bne	r3,zero,8007d9c <__alt_data_end+0xf8007d9c>
 8007dc4:	90c0004c 	andi	r3,r18,1
 8007dc8:	18014126 	beq	r3,zero,80082d0 <___vfprintf_internal_r+0xc34>
 8007dcc:	10803fcc 	andi	r2,r2,255
 8007dd0:	1080201c 	xori	r2,r2,128
 8007dd4:	10bfe004 	addi	r2,r2,-128
 8007dd8:	00c00c04 	movi	r3,48
 8007ddc:	10c13c26 	beq	r2,r3,80082d0 <___vfprintf_internal_r+0xc34>
 8007de0:	80ffffc5 	stb	r3,-1(r16)
 8007de4:	d8c02817 	ldw	r3,160(sp)
 8007de8:	80bfffc4 	addi	r2,r16,-1
 8007dec:	1021883a 	mov	r16,r2
 8007df0:	1887c83a 	sub	r3,r3,r2
 8007df4:	d8c02b15 	stw	r3,172(sp)
 8007df8:	d8802b17 	ldw	r2,172(sp)
 8007dfc:	d9002a17 	ldw	r4,168(sp)
 8007e00:	1100010e 	bge	r2,r4,8007e08 <___vfprintf_internal_r+0x76c>
 8007e04:	2005883a 	mov	r2,r4
 8007e08:	d8802915 	stw	r2,164(sp)
 8007e0c:	d8003215 	stw	zero,200(sp)
 8007e10:	e7003fcc 	andi	fp,fp,255
 8007e14:	e700201c 	xori	fp,fp,128
 8007e18:	e73fe004 	addi	fp,fp,-128
 8007e1c:	e0000326 	beq	fp,zero,8007e2c <___vfprintf_internal_r+0x790>
 8007e20:	d8c02917 	ldw	r3,164(sp)
 8007e24:	18c00044 	addi	r3,r3,1
 8007e28:	d8c02915 	stw	r3,164(sp)
 8007e2c:	90c0008c 	andi	r3,r18,2
 8007e30:	d8c02c15 	stw	r3,176(sp)
 8007e34:	18000326 	beq	r3,zero,8007e44 <___vfprintf_internal_r+0x7a8>
 8007e38:	d8c02917 	ldw	r3,164(sp)
 8007e3c:	18c00084 	addi	r3,r3,2
 8007e40:	d8c02915 	stw	r3,164(sp)
 8007e44:	90c0210c 	andi	r3,r18,132
 8007e48:	d8c03015 	stw	r3,192(sp)
 8007e4c:	1801c51e 	bne	r3,zero,8008564 <___vfprintf_internal_r+0xec8>
 8007e50:	d9003117 	ldw	r4,196(sp)
 8007e54:	d8c02917 	ldw	r3,164(sp)
 8007e58:	20e7c83a 	sub	r19,r4,r3
 8007e5c:	04c1c10e 	bge	zero,r19,8008564 <___vfprintf_internal_r+0xec8>
 8007e60:	02400404 	movi	r9,16
 8007e64:	d8c02017 	ldw	r3,128(sp)
 8007e68:	d8801f17 	ldw	r2,124(sp)
 8007e6c:	4cc52f0e 	bge	r9,r19,800932c <___vfprintf_internal_r+0x1c90>
 8007e70:	01420074 	movhi	r5,2049
 8007e74:	2959c184 	addi	r5,r5,26374
 8007e78:	dc403b15 	stw	r17,236(sp)
 8007e7c:	d9403515 	stw	r5,212(sp)
 8007e80:	9823883a 	mov	r17,r19
 8007e84:	482d883a 	mov	r22,r9
 8007e88:	9027883a 	mov	r19,r18
 8007e8c:	070001c4 	movi	fp,7
 8007e90:	8025883a 	mov	r18,r16
 8007e94:	dc002d17 	ldw	r16,180(sp)
 8007e98:	00000306 	br	8007ea8 <___vfprintf_internal_r+0x80c>
 8007e9c:	8c7ffc04 	addi	r17,r17,-16
 8007ea0:	42000204 	addi	r8,r8,8
 8007ea4:	b440130e 	bge	r22,r17,8007ef4 <___vfprintf_internal_r+0x858>
 8007ea8:	01020074 	movhi	r4,2049
 8007eac:	18c00404 	addi	r3,r3,16
 8007eb0:	10800044 	addi	r2,r2,1
 8007eb4:	2119c184 	addi	r4,r4,26374
 8007eb8:	41000015 	stw	r4,0(r8)
 8007ebc:	45800115 	stw	r22,4(r8)
 8007ec0:	d8c02015 	stw	r3,128(sp)
 8007ec4:	d8801f15 	stw	r2,124(sp)
 8007ec8:	e0bff40e 	bge	fp,r2,8007e9c <__alt_data_end+0xf8007e9c>
 8007ecc:	d9801e04 	addi	r6,sp,120
 8007ed0:	b80b883a 	mov	r5,r23
 8007ed4:	8009883a 	mov	r4,r16
 8007ed8:	800ec0c0 	call	800ec0c <__sprint_r>
 8007edc:	103ef31e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8007ee0:	8c7ffc04 	addi	r17,r17,-16
 8007ee4:	d8c02017 	ldw	r3,128(sp)
 8007ee8:	d8801f17 	ldw	r2,124(sp)
 8007eec:	da000404 	addi	r8,sp,16
 8007ef0:	b47fed16 	blt	r22,r17,8007ea8 <__alt_data_end+0xf8007ea8>
 8007ef4:	9021883a 	mov	r16,r18
 8007ef8:	9825883a 	mov	r18,r19
 8007efc:	8827883a 	mov	r19,r17
 8007f00:	dc403b17 	ldw	r17,236(sp)
 8007f04:	d9403517 	ldw	r5,212(sp)
 8007f08:	98c7883a 	add	r3,r19,r3
 8007f0c:	10800044 	addi	r2,r2,1
 8007f10:	41400015 	stw	r5,0(r8)
 8007f14:	44c00115 	stw	r19,4(r8)
 8007f18:	d8c02015 	stw	r3,128(sp)
 8007f1c:	d8801f15 	stw	r2,124(sp)
 8007f20:	010001c4 	movi	r4,7
 8007f24:	2082c516 	blt	r4,r2,8008a3c <___vfprintf_internal_r+0x13a0>
 8007f28:	df002787 	ldb	fp,158(sp)
 8007f2c:	42000204 	addi	r8,r8,8
 8007f30:	e0000c26 	beq	fp,zero,8007f64 <___vfprintf_internal_r+0x8c8>
 8007f34:	d8801f17 	ldw	r2,124(sp)
 8007f38:	d9002784 	addi	r4,sp,158
 8007f3c:	18c00044 	addi	r3,r3,1
 8007f40:	10800044 	addi	r2,r2,1
 8007f44:	41000015 	stw	r4,0(r8)
 8007f48:	01000044 	movi	r4,1
 8007f4c:	41000115 	stw	r4,4(r8)
 8007f50:	d8c02015 	stw	r3,128(sp)
 8007f54:	d8801f15 	stw	r2,124(sp)
 8007f58:	010001c4 	movi	r4,7
 8007f5c:	20825e16 	blt	r4,r2,80088d8 <___vfprintf_internal_r+0x123c>
 8007f60:	42000204 	addi	r8,r8,8
 8007f64:	d8802c17 	ldw	r2,176(sp)
 8007f68:	10000c26 	beq	r2,zero,8007f9c <___vfprintf_internal_r+0x900>
 8007f6c:	d8801f17 	ldw	r2,124(sp)
 8007f70:	d9002704 	addi	r4,sp,156
 8007f74:	18c00084 	addi	r3,r3,2
 8007f78:	10800044 	addi	r2,r2,1
 8007f7c:	41000015 	stw	r4,0(r8)
 8007f80:	01000084 	movi	r4,2
 8007f84:	41000115 	stw	r4,4(r8)
 8007f88:	d8c02015 	stw	r3,128(sp)
 8007f8c:	d8801f15 	stw	r2,124(sp)
 8007f90:	010001c4 	movi	r4,7
 8007f94:	20825816 	blt	r4,r2,80088f8 <___vfprintf_internal_r+0x125c>
 8007f98:	42000204 	addi	r8,r8,8
 8007f9c:	d9003017 	ldw	r4,192(sp)
 8007fa0:	00802004 	movi	r2,128
 8007fa4:	2081bb26 	beq	r4,r2,8008694 <___vfprintf_internal_r+0xff8>
 8007fa8:	d9402a17 	ldw	r5,168(sp)
 8007fac:	d8802b17 	ldw	r2,172(sp)
 8007fb0:	28adc83a 	sub	r22,r5,r2
 8007fb4:	0580310e 	bge	zero,r22,800807c <___vfprintf_internal_r+0x9e0>
 8007fb8:	07000404 	movi	fp,16
 8007fbc:	d8801f17 	ldw	r2,124(sp)
 8007fc0:	e584360e 	bge	fp,r22,800909c <___vfprintf_internal_r+0x1a00>
 8007fc4:	01420074 	movhi	r5,2049
 8007fc8:	2959bd84 	addi	r5,r5,26358
 8007fcc:	dc402a15 	stw	r17,168(sp)
 8007fd0:	d9402c15 	stw	r5,176(sp)
 8007fd4:	b023883a 	mov	r17,r22
 8007fd8:	04c001c4 	movi	r19,7
 8007fdc:	a82d883a 	mov	r22,r21
 8007fe0:	902b883a 	mov	r21,r18
 8007fe4:	8025883a 	mov	r18,r16
 8007fe8:	dc002d17 	ldw	r16,180(sp)
 8007fec:	00000306 	br	8007ffc <___vfprintf_internal_r+0x960>
 8007ff0:	8c7ffc04 	addi	r17,r17,-16
 8007ff4:	42000204 	addi	r8,r8,8
 8007ff8:	e440110e 	bge	fp,r17,8008040 <___vfprintf_internal_r+0x9a4>
 8007ffc:	18c00404 	addi	r3,r3,16
 8008000:	10800044 	addi	r2,r2,1
 8008004:	45000015 	stw	r20,0(r8)
 8008008:	47000115 	stw	fp,4(r8)
 800800c:	d8c02015 	stw	r3,128(sp)
 8008010:	d8801f15 	stw	r2,124(sp)
 8008014:	98bff60e 	bge	r19,r2,8007ff0 <__alt_data_end+0xf8007ff0>
 8008018:	d9801e04 	addi	r6,sp,120
 800801c:	b80b883a 	mov	r5,r23
 8008020:	8009883a 	mov	r4,r16
 8008024:	800ec0c0 	call	800ec0c <__sprint_r>
 8008028:	103ea01e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 800802c:	8c7ffc04 	addi	r17,r17,-16
 8008030:	d8c02017 	ldw	r3,128(sp)
 8008034:	d8801f17 	ldw	r2,124(sp)
 8008038:	da000404 	addi	r8,sp,16
 800803c:	e47fef16 	blt	fp,r17,8007ffc <__alt_data_end+0xf8007ffc>
 8008040:	9021883a 	mov	r16,r18
 8008044:	a825883a 	mov	r18,r21
 8008048:	b02b883a 	mov	r21,r22
 800804c:	882d883a 	mov	r22,r17
 8008050:	dc402a17 	ldw	r17,168(sp)
 8008054:	d9002c17 	ldw	r4,176(sp)
 8008058:	1d87883a 	add	r3,r3,r22
 800805c:	10800044 	addi	r2,r2,1
 8008060:	41000015 	stw	r4,0(r8)
 8008064:	45800115 	stw	r22,4(r8)
 8008068:	d8c02015 	stw	r3,128(sp)
 800806c:	d8801f15 	stw	r2,124(sp)
 8008070:	010001c4 	movi	r4,7
 8008074:	20821016 	blt	r4,r2,80088b8 <___vfprintf_internal_r+0x121c>
 8008078:	42000204 	addi	r8,r8,8
 800807c:	9080400c 	andi	r2,r18,256
 8008080:	10013a1e 	bne	r2,zero,800856c <___vfprintf_internal_r+0xed0>
 8008084:	d9402b17 	ldw	r5,172(sp)
 8008088:	d8801f17 	ldw	r2,124(sp)
 800808c:	44000015 	stw	r16,0(r8)
 8008090:	1947883a 	add	r3,r3,r5
 8008094:	10800044 	addi	r2,r2,1
 8008098:	41400115 	stw	r5,4(r8)
 800809c:	d8c02015 	stw	r3,128(sp)
 80080a0:	d8801f15 	stw	r2,124(sp)
 80080a4:	010001c4 	movi	r4,7
 80080a8:	2081f516 	blt	r4,r2,8008880 <___vfprintf_internal_r+0x11e4>
 80080ac:	42000204 	addi	r8,r8,8
 80080b0:	9480010c 	andi	r18,r18,4
 80080b4:	90003226 	beq	r18,zero,8008180 <___vfprintf_internal_r+0xae4>
 80080b8:	d9403117 	ldw	r5,196(sp)
 80080bc:	d8802917 	ldw	r2,164(sp)
 80080c0:	28a1c83a 	sub	r16,r5,r2
 80080c4:	04002e0e 	bge	zero,r16,8008180 <___vfprintf_internal_r+0xae4>
 80080c8:	04400404 	movi	r17,16
 80080cc:	d8801f17 	ldw	r2,124(sp)
 80080d0:	8c04c40e 	bge	r17,r16,80093e4 <___vfprintf_internal_r+0x1d48>
 80080d4:	01420074 	movhi	r5,2049
 80080d8:	2959c184 	addi	r5,r5,26374
 80080dc:	d9403515 	stw	r5,212(sp)
 80080e0:	048001c4 	movi	r18,7
 80080e4:	dcc02d17 	ldw	r19,180(sp)
 80080e8:	00000306 	br	80080f8 <___vfprintf_internal_r+0xa5c>
 80080ec:	843ffc04 	addi	r16,r16,-16
 80080f0:	42000204 	addi	r8,r8,8
 80080f4:	8c00130e 	bge	r17,r16,8008144 <___vfprintf_internal_r+0xaa8>
 80080f8:	01020074 	movhi	r4,2049
 80080fc:	18c00404 	addi	r3,r3,16
 8008100:	10800044 	addi	r2,r2,1
 8008104:	2119c184 	addi	r4,r4,26374
 8008108:	41000015 	stw	r4,0(r8)
 800810c:	44400115 	stw	r17,4(r8)
 8008110:	d8c02015 	stw	r3,128(sp)
 8008114:	d8801f15 	stw	r2,124(sp)
 8008118:	90bff40e 	bge	r18,r2,80080ec <__alt_data_end+0xf80080ec>
 800811c:	d9801e04 	addi	r6,sp,120
 8008120:	b80b883a 	mov	r5,r23
 8008124:	9809883a 	mov	r4,r19
 8008128:	800ec0c0 	call	800ec0c <__sprint_r>
 800812c:	103e5f1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008130:	843ffc04 	addi	r16,r16,-16
 8008134:	d8c02017 	ldw	r3,128(sp)
 8008138:	d8801f17 	ldw	r2,124(sp)
 800813c:	da000404 	addi	r8,sp,16
 8008140:	8c3fed16 	blt	r17,r16,80080f8 <__alt_data_end+0xf80080f8>
 8008144:	d9403517 	ldw	r5,212(sp)
 8008148:	1c07883a 	add	r3,r3,r16
 800814c:	10800044 	addi	r2,r2,1
 8008150:	41400015 	stw	r5,0(r8)
 8008154:	44000115 	stw	r16,4(r8)
 8008158:	d8c02015 	stw	r3,128(sp)
 800815c:	d8801f15 	stw	r2,124(sp)
 8008160:	010001c4 	movi	r4,7
 8008164:	2080060e 	bge	r4,r2,8008180 <___vfprintf_internal_r+0xae4>
 8008168:	d9002d17 	ldw	r4,180(sp)
 800816c:	d9801e04 	addi	r6,sp,120
 8008170:	b80b883a 	mov	r5,r23
 8008174:	800ec0c0 	call	800ec0c <__sprint_r>
 8008178:	103e4c1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 800817c:	d8c02017 	ldw	r3,128(sp)
 8008180:	d8803117 	ldw	r2,196(sp)
 8008184:	d9002917 	ldw	r4,164(sp)
 8008188:	1100010e 	bge	r2,r4,8008190 <___vfprintf_internal_r+0xaf4>
 800818c:	2005883a 	mov	r2,r4
 8008190:	d9402f17 	ldw	r5,188(sp)
 8008194:	288b883a 	add	r5,r5,r2
 8008198:	d9402f15 	stw	r5,188(sp)
 800819c:	1801c01e 	bne	r3,zero,80088a0 <___vfprintf_internal_r+0x1204>
 80081a0:	a8800007 	ldb	r2,0(r21)
 80081a4:	d8001f15 	stw	zero,124(sp)
 80081a8:	da000404 	addi	r8,sp,16
 80081ac:	103d751e 	bne	r2,zero,8007784 <__alt_data_end+0xf8007784>
 80081b0:	a823883a 	mov	r17,r21
 80081b4:	003d8b06 	br	80077e4 <__alt_data_end+0xf80077e4>
 80081b8:	8025883a 	mov	r18,r16
 80081bc:	dc002903 	ldbu	r16,164(sp)
 80081c0:	e011883a 	mov	r8,fp
 80081c4:	84003fcc 	andi	r16,r16,255
 80081c8:	8005e51e 	bne	r16,zero,8009960 <___vfprintf_internal_r+0x22c4>
 80081cc:	94800414 	ori	r18,r18,16
 80081d0:	9080080c 	andi	r2,r18,32
 80081d4:	10022b26 	beq	r2,zero,8008a84 <___vfprintf_internal_r+0x13e8>
 80081d8:	d9002e17 	ldw	r4,184(sp)
 80081dc:	d9402a17 	ldw	r5,168(sp)
 80081e0:	d8002785 	stb	zero,158(sp)
 80081e4:	20c00204 	addi	r3,r4,8
 80081e8:	24c00017 	ldw	r19,0(r4)
 80081ec:	25800117 	ldw	r22,4(r4)
 80081f0:	28042e16 	blt	r5,zero,80092ac <___vfprintf_internal_r+0x1c10>
 80081f4:	013fdfc4 	movi	r4,-129
 80081f8:	9d84b03a 	or	r2,r19,r22
 80081fc:	d8c02e15 	stw	r3,184(sp)
 8008200:	9124703a 	and	r18,r18,r4
 8008204:	0039883a 	mov	fp,zero
 8008208:	103e801e 	bne	r2,zero,8007c0c <__alt_data_end+0xf8007c0c>
 800820c:	d9002a17 	ldw	r4,168(sp)
 8008210:	2002e01e 	bne	r4,zero,8008d94 <___vfprintf_internal_r+0x16f8>
 8008214:	d8002a15 	stw	zero,168(sp)
 8008218:	d8002b15 	stw	zero,172(sp)
 800821c:	dc001e04 	addi	r16,sp,120
 8008220:	003ef506 	br	8007df8 <__alt_data_end+0xf8007df8>
 8008224:	8025883a 	mov	r18,r16
 8008228:	dc002903 	ldbu	r16,164(sp)
 800822c:	e011883a 	mov	r8,fp
 8008230:	84003fcc 	andi	r16,r16,255
 8008234:	8005ba1e 	bne	r16,zero,8009920 <___vfprintf_internal_r+0x2284>
 8008238:	01020074 	movhi	r4,2049
 800823c:	2119b104 	addi	r4,r4,26308
 8008240:	d9003915 	stw	r4,228(sp)
 8008244:	9080080c 	andi	r2,r18,32
 8008248:	10006126 	beq	r2,zero,80083d0 <___vfprintf_internal_r+0xd34>
 800824c:	d9402e17 	ldw	r5,184(sp)
 8008250:	2cc00017 	ldw	r19,0(r5)
 8008254:	2d800117 	ldw	r22,4(r5)
 8008258:	29400204 	addi	r5,r5,8
 800825c:	d9402e15 	stw	r5,184(sp)
 8008260:	9080004c 	andi	r2,r18,1
 8008264:	1001ac26 	beq	r2,zero,8008918 <___vfprintf_internal_r+0x127c>
 8008268:	9d84b03a 	or	r2,r19,r22
 800826c:	10038526 	beq	r2,zero,8009084 <___vfprintf_internal_r+0x19e8>
 8008270:	d8c02a17 	ldw	r3,168(sp)
 8008274:	00800c04 	movi	r2,48
 8008278:	d8802705 	stb	r2,156(sp)
 800827c:	dc402745 	stb	r17,157(sp)
 8008280:	d8002785 	stb	zero,158(sp)
 8008284:	90800094 	ori	r2,r18,2
 8008288:	18047916 	blt	r3,zero,8009470 <___vfprintf_internal_r+0x1dd4>
 800828c:	00bfdfc4 	movi	r2,-129
 8008290:	90a4703a 	and	r18,r18,r2
 8008294:	94800094 	ori	r18,r18,2
 8008298:	0039883a 	mov	fp,zero
 800829c:	d9003917 	ldw	r4,228(sp)
 80082a0:	dc001e04 	addi	r16,sp,120
 80082a4:	988003cc 	andi	r2,r19,15
 80082a8:	b006973a 	slli	r3,r22,28
 80082ac:	2085883a 	add	r2,r4,r2
 80082b0:	9826d13a 	srli	r19,r19,4
 80082b4:	10800003 	ldbu	r2,0(r2)
 80082b8:	b02cd13a 	srli	r22,r22,4
 80082bc:	843fffc4 	addi	r16,r16,-1
 80082c0:	1ce6b03a 	or	r19,r3,r19
 80082c4:	80800005 	stb	r2,0(r16)
 80082c8:	9d84b03a 	or	r2,r19,r22
 80082cc:	103ff51e 	bne	r2,zero,80082a4 <__alt_data_end+0xf80082a4>
 80082d0:	d8c02817 	ldw	r3,160(sp)
 80082d4:	1c07c83a 	sub	r3,r3,r16
 80082d8:	d8c02b15 	stw	r3,172(sp)
 80082dc:	003ec606 	br	8007df8 <__alt_data_end+0xf8007df8>
 80082e0:	8025883a 	mov	r18,r16
 80082e4:	dc002903 	ldbu	r16,164(sp)
 80082e8:	e011883a 	mov	r8,fp
 80082ec:	84003fcc 	andi	r16,r16,255
 80082f0:	803e9626 	beq	r16,zero,8007d4c <__alt_data_end+0xf8007d4c>
 80082f4:	d8c02b03 	ldbu	r3,172(sp)
 80082f8:	d8c02785 	stb	r3,158(sp)
 80082fc:	003e9306 	br	8007d4c <__alt_data_end+0xf8007d4c>
 8008300:	00c00044 	movi	r3,1
 8008304:	d8c02905 	stb	r3,164(sp)
 8008308:	00c00ac4 	movi	r3,43
 800830c:	d8c02b05 	stb	r3,172(sp)
 8008310:	ac400007 	ldb	r17,0(r21)
 8008314:	003d4306 	br	8007824 <__alt_data_end+0xf8007824>
 8008318:	84000814 	ori	r16,r16,32
 800831c:	ac400007 	ldb	r17,0(r21)
 8008320:	003d4006 	br	8007824 <__alt_data_end+0xf8007824>
 8008324:	d8802e17 	ldw	r2,184(sp)
 8008328:	8025883a 	mov	r18,r16
 800832c:	d8002785 	stb	zero,158(sp)
 8008330:	14000017 	ldw	r16,0(r2)
 8008334:	e011883a 	mov	r8,fp
 8008338:	14c00104 	addi	r19,r2,4
 800833c:	80042d26 	beq	r16,zero,80093f4 <___vfprintf_internal_r+0x1d58>
 8008340:	d8c02a17 	ldw	r3,168(sp)
 8008344:	1803e416 	blt	r3,zero,80092d8 <___vfprintf_internal_r+0x1c3c>
 8008348:	180d883a 	mov	r6,r3
 800834c:	000b883a 	mov	r5,zero
 8008350:	8009883a 	mov	r4,r16
 8008354:	df003d15 	stw	fp,244(sp)
 8008358:	800cfd40 	call	800cfd4 <memchr>
 800835c:	da003d17 	ldw	r8,244(sp)
 8008360:	10046826 	beq	r2,zero,8009504 <___vfprintf_internal_r+0x1e68>
 8008364:	1405c83a 	sub	r2,r2,r16
 8008368:	d8802b15 	stw	r2,172(sp)
 800836c:	1003e016 	blt	r2,zero,80092f0 <___vfprintf_internal_r+0x1c54>
 8008370:	df002783 	ldbu	fp,158(sp)
 8008374:	d8802915 	stw	r2,164(sp)
 8008378:	dcc02e15 	stw	r19,184(sp)
 800837c:	d8002a15 	stw	zero,168(sp)
 8008380:	d8003215 	stw	zero,200(sp)
 8008384:	003ea206 	br	8007e10 <__alt_data_end+0xf8007e10>
 8008388:	8025883a 	mov	r18,r16
 800838c:	dc002903 	ldbu	r16,164(sp)
 8008390:	e011883a 	mov	r8,fp
 8008394:	84003fcc 	andi	r16,r16,255
 8008398:	803f8d26 	beq	r16,zero,80081d0 <__alt_data_end+0xf80081d0>
 800839c:	d8c02b03 	ldbu	r3,172(sp)
 80083a0:	d8c02785 	stb	r3,158(sp)
 80083a4:	003f8a06 	br	80081d0 <__alt_data_end+0xf80081d0>
 80083a8:	8025883a 	mov	r18,r16
 80083ac:	dc002903 	ldbu	r16,164(sp)
 80083b0:	e011883a 	mov	r8,fp
 80083b4:	84003fcc 	andi	r16,r16,255
 80083b8:	8005661e 	bne	r16,zero,8009954 <___vfprintf_internal_r+0x22b8>
 80083bc:	01020074 	movhi	r4,2049
 80083c0:	2119b604 	addi	r4,r4,26328
 80083c4:	d9003915 	stw	r4,228(sp)
 80083c8:	9080080c 	andi	r2,r18,32
 80083cc:	103f9f1e 	bne	r2,zero,800824c <__alt_data_end+0xf800824c>
 80083d0:	9080040c 	andi	r2,r18,16
 80083d4:	1002eb26 	beq	r2,zero,8008f84 <___vfprintf_internal_r+0x18e8>
 80083d8:	d8802e17 	ldw	r2,184(sp)
 80083dc:	002d883a 	mov	r22,zero
 80083e0:	14c00017 	ldw	r19,0(r2)
 80083e4:	10800104 	addi	r2,r2,4
 80083e8:	d8802e15 	stw	r2,184(sp)
 80083ec:	003f9c06 	br	8008260 <__alt_data_end+0xf8008260>
 80083f0:	d8802b07 	ldb	r2,172(sp)
 80083f4:	1002e11e 	bne	r2,zero,8008f7c <___vfprintf_internal_r+0x18e0>
 80083f8:	00c00044 	movi	r3,1
 80083fc:	d8c02905 	stb	r3,164(sp)
 8008400:	00c00804 	movi	r3,32
 8008404:	d8c02b05 	stb	r3,172(sp)
 8008408:	ac400007 	ldb	r17,0(r21)
 800840c:	003d0506 	br	8007824 <__alt_data_end+0xf8007824>
 8008410:	84000054 	ori	r16,r16,1
 8008414:	ac400007 	ldb	r17,0(r21)
 8008418:	003d0206 	br	8007824 <__alt_data_end+0xf8007824>
 800841c:	8025883a 	mov	r18,r16
 8008420:	dc002903 	ldbu	r16,164(sp)
 8008424:	e011883a 	mov	r8,fp
 8008428:	84003fcc 	andi	r16,r16,255
 800842c:	803de726 	beq	r16,zero,8007bcc <__alt_data_end+0xf8007bcc>
 8008430:	d8c02b03 	ldbu	r3,172(sp)
 8008434:	d8c02785 	stb	r3,158(sp)
 8008438:	003de406 	br	8007bcc <__alt_data_end+0xf8007bcc>
 800843c:	84001014 	ori	r16,r16,64
 8008440:	ac400007 	ldb	r17,0(r21)
 8008444:	003cf706 	br	8007824 <__alt_data_end+0xf8007824>
 8008448:	ac400007 	ldb	r17,0(r21)
 800844c:	00801b04 	movi	r2,108
 8008450:	88838f26 	beq	r17,r2,8009290 <___vfprintf_internal_r+0x1bf4>
 8008454:	84000414 	ori	r16,r16,16
 8008458:	003cf206 	br	8007824 <__alt_data_end+0xf8007824>
 800845c:	8025883a 	mov	r18,r16
 8008460:	dc002903 	ldbu	r16,164(sp)
 8008464:	e011883a 	mov	r8,fp
 8008468:	84003fcc 	andi	r16,r16,255
 800846c:	80053f1e 	bne	r16,zero,800996c <___vfprintf_internal_r+0x22d0>
 8008470:	9080080c 	andi	r2,r18,32
 8008474:	1002d226 	beq	r2,zero,8008fc0 <___vfprintf_internal_r+0x1924>
 8008478:	d9002e17 	ldw	r4,184(sp)
 800847c:	d9402f17 	ldw	r5,188(sp)
 8008480:	20800017 	ldw	r2,0(r4)
 8008484:	2807d7fa 	srai	r3,r5,31
 8008488:	21000104 	addi	r4,r4,4
 800848c:	d9002e15 	stw	r4,184(sp)
 8008490:	11400015 	stw	r5,0(r2)
 8008494:	10c00115 	stw	r3,4(r2)
 8008498:	003cb806 	br	800777c <__alt_data_end+0xf800777c>
 800849c:	d8c02e17 	ldw	r3,184(sp)
 80084a0:	d9002e17 	ldw	r4,184(sp)
 80084a4:	8025883a 	mov	r18,r16
 80084a8:	18800017 	ldw	r2,0(r3)
 80084ac:	21000104 	addi	r4,r4,4
 80084b0:	00c00044 	movi	r3,1
 80084b4:	e011883a 	mov	r8,fp
 80084b8:	d8c02915 	stw	r3,164(sp)
 80084bc:	d8002785 	stb	zero,158(sp)
 80084c0:	d8801405 	stb	r2,80(sp)
 80084c4:	d9002e15 	stw	r4,184(sp)
 80084c8:	d8c02b15 	stw	r3,172(sp)
 80084cc:	d8002a15 	stw	zero,168(sp)
 80084d0:	d8003215 	stw	zero,200(sp)
 80084d4:	dc001404 	addi	r16,sp,80
 80084d8:	0039883a 	mov	fp,zero
 80084dc:	003e5306 	br	8007e2c <__alt_data_end+0xf8007e2c>
 80084e0:	01020074 	movhi	r4,2049
 80084e4:	2119b604 	addi	r4,r4,26328
 80084e8:	0039883a 	mov	fp,zero
 80084ec:	d9003915 	stw	r4,228(sp)
 80084f0:	04401e04 	movi	r17,120
 80084f4:	003f6906 	br	800829c <__alt_data_end+0xf800829c>
 80084f8:	8025883a 	mov	r18,r16
 80084fc:	dc002903 	ldbu	r16,164(sp)
 8008500:	e011883a 	mov	r8,fp
 8008504:	84003fcc 	andi	r16,r16,255
 8008508:	8005081e 	bne	r16,zero,800992c <___vfprintf_internal_r+0x2290>
 800850c:	883d6126 	beq	r17,zero,8007a94 <__alt_data_end+0xf8007a94>
 8008510:	00c00044 	movi	r3,1
 8008514:	d8c02915 	stw	r3,164(sp)
 8008518:	dc401405 	stb	r17,80(sp)
 800851c:	d8002785 	stb	zero,158(sp)
 8008520:	003fe906 	br	80084c8 <__alt_data_end+0xf80084c8>
 8008524:	01420074 	movhi	r5,2049
 8008528:	2959b604 	addi	r5,r5,26328
 800852c:	d9403915 	stw	r5,228(sp)
 8008530:	d8c02e15 	stw	r3,184(sp)
 8008534:	1025883a 	mov	r18,r2
 8008538:	04401e04 	movi	r17,120
 800853c:	9d84b03a 	or	r2,r19,r22
 8008540:	1000fc1e 	bne	r2,zero,8008934 <___vfprintf_internal_r+0x1298>
 8008544:	0039883a 	mov	fp,zero
 8008548:	00800084 	movi	r2,2
 800854c:	10803fcc 	andi	r2,r2,255
 8008550:	00c00044 	movi	r3,1
 8008554:	10c20f26 	beq	r2,r3,8008d94 <___vfprintf_internal_r+0x16f8>
 8008558:	00c00084 	movi	r3,2
 800855c:	10fd3326 	beq	r2,r3,8007a2c <__alt_data_end+0xf8007a2c>
 8008560:	003e0b06 	br	8007d90 <__alt_data_end+0xf8007d90>
 8008564:	d8c02017 	ldw	r3,128(sp)
 8008568:	003e7106 	br	8007f30 <__alt_data_end+0xf8007f30>
 800856c:	00801944 	movi	r2,101
 8008570:	14407e0e 	bge	r2,r17,800876c <___vfprintf_internal_r+0x10d0>
 8008574:	d9003617 	ldw	r4,216(sp)
 8008578:	d9403817 	ldw	r5,224(sp)
 800857c:	000d883a 	mov	r6,zero
 8008580:	000f883a 	mov	r7,zero
 8008584:	d8c03c15 	stw	r3,240(sp)
 8008588:	da003d15 	stw	r8,244(sp)
 800858c:	80129900 	call	8012990 <__eqdf2>
 8008590:	d8c03c17 	ldw	r3,240(sp)
 8008594:	da003d17 	ldw	r8,244(sp)
 8008598:	1000f71e 	bne	r2,zero,8008978 <___vfprintf_internal_r+0x12dc>
 800859c:	d8801f17 	ldw	r2,124(sp)
 80085a0:	01020074 	movhi	r4,2049
 80085a4:	2119bd04 	addi	r4,r4,26356
 80085a8:	18c00044 	addi	r3,r3,1
 80085ac:	10800044 	addi	r2,r2,1
 80085b0:	41000015 	stw	r4,0(r8)
 80085b4:	01000044 	movi	r4,1
 80085b8:	41000115 	stw	r4,4(r8)
 80085bc:	d8c02015 	stw	r3,128(sp)
 80085c0:	d8801f15 	stw	r2,124(sp)
 80085c4:	010001c4 	movi	r4,7
 80085c8:	2082b816 	blt	r4,r2,80090ac <___vfprintf_internal_r+0x1a10>
 80085cc:	42000204 	addi	r8,r8,8
 80085d0:	d8802617 	ldw	r2,152(sp)
 80085d4:	d9403317 	ldw	r5,204(sp)
 80085d8:	11400216 	blt	r2,r5,80085e4 <___vfprintf_internal_r+0xf48>
 80085dc:	9080004c 	andi	r2,r18,1
 80085e0:	103eb326 	beq	r2,zero,80080b0 <__alt_data_end+0xf80080b0>
 80085e4:	d8803717 	ldw	r2,220(sp)
 80085e8:	d9003417 	ldw	r4,208(sp)
 80085ec:	d9403717 	ldw	r5,220(sp)
 80085f0:	1887883a 	add	r3,r3,r2
 80085f4:	d8801f17 	ldw	r2,124(sp)
 80085f8:	41000015 	stw	r4,0(r8)
 80085fc:	41400115 	stw	r5,4(r8)
 8008600:	10800044 	addi	r2,r2,1
 8008604:	d8c02015 	stw	r3,128(sp)
 8008608:	d8801f15 	stw	r2,124(sp)
 800860c:	010001c4 	movi	r4,7
 8008610:	20832916 	blt	r4,r2,80092b8 <___vfprintf_internal_r+0x1c1c>
 8008614:	42000204 	addi	r8,r8,8
 8008618:	d8803317 	ldw	r2,204(sp)
 800861c:	143fffc4 	addi	r16,r2,-1
 8008620:	043ea30e 	bge	zero,r16,80080b0 <__alt_data_end+0xf80080b0>
 8008624:	04400404 	movi	r17,16
 8008628:	d8801f17 	ldw	r2,124(sp)
 800862c:	8c00880e 	bge	r17,r16,8008850 <___vfprintf_internal_r+0x11b4>
 8008630:	01420074 	movhi	r5,2049
 8008634:	2959bd84 	addi	r5,r5,26358
 8008638:	d9402c15 	stw	r5,176(sp)
 800863c:	058001c4 	movi	r22,7
 8008640:	dcc02d17 	ldw	r19,180(sp)
 8008644:	00000306 	br	8008654 <___vfprintf_internal_r+0xfb8>
 8008648:	42000204 	addi	r8,r8,8
 800864c:	843ffc04 	addi	r16,r16,-16
 8008650:	8c00820e 	bge	r17,r16,800885c <___vfprintf_internal_r+0x11c0>
 8008654:	18c00404 	addi	r3,r3,16
 8008658:	10800044 	addi	r2,r2,1
 800865c:	45000015 	stw	r20,0(r8)
 8008660:	44400115 	stw	r17,4(r8)
 8008664:	d8c02015 	stw	r3,128(sp)
 8008668:	d8801f15 	stw	r2,124(sp)
 800866c:	b0bff60e 	bge	r22,r2,8008648 <__alt_data_end+0xf8008648>
 8008670:	d9801e04 	addi	r6,sp,120
 8008674:	b80b883a 	mov	r5,r23
 8008678:	9809883a 	mov	r4,r19
 800867c:	800ec0c0 	call	800ec0c <__sprint_r>
 8008680:	103d0a1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008684:	d8c02017 	ldw	r3,128(sp)
 8008688:	d8801f17 	ldw	r2,124(sp)
 800868c:	da000404 	addi	r8,sp,16
 8008690:	003fee06 	br	800864c <__alt_data_end+0xf800864c>
 8008694:	d9403117 	ldw	r5,196(sp)
 8008698:	d8802917 	ldw	r2,164(sp)
 800869c:	28adc83a 	sub	r22,r5,r2
 80086a0:	05be410e 	bge	zero,r22,8007fa8 <__alt_data_end+0xf8007fa8>
 80086a4:	07000404 	movi	fp,16
 80086a8:	d8801f17 	ldw	r2,124(sp)
 80086ac:	e5838f0e 	bge	fp,r22,80094ec <___vfprintf_internal_r+0x1e50>
 80086b0:	01420074 	movhi	r5,2049
 80086b4:	2959bd84 	addi	r5,r5,26358
 80086b8:	dc403015 	stw	r17,192(sp)
 80086bc:	d9402c15 	stw	r5,176(sp)
 80086c0:	b023883a 	mov	r17,r22
 80086c4:	04c001c4 	movi	r19,7
 80086c8:	a82d883a 	mov	r22,r21
 80086cc:	902b883a 	mov	r21,r18
 80086d0:	8025883a 	mov	r18,r16
 80086d4:	dc002d17 	ldw	r16,180(sp)
 80086d8:	00000306 	br	80086e8 <___vfprintf_internal_r+0x104c>
 80086dc:	8c7ffc04 	addi	r17,r17,-16
 80086e0:	42000204 	addi	r8,r8,8
 80086e4:	e440110e 	bge	fp,r17,800872c <___vfprintf_internal_r+0x1090>
 80086e8:	18c00404 	addi	r3,r3,16
 80086ec:	10800044 	addi	r2,r2,1
 80086f0:	45000015 	stw	r20,0(r8)
 80086f4:	47000115 	stw	fp,4(r8)
 80086f8:	d8c02015 	stw	r3,128(sp)
 80086fc:	d8801f15 	stw	r2,124(sp)
 8008700:	98bff60e 	bge	r19,r2,80086dc <__alt_data_end+0xf80086dc>
 8008704:	d9801e04 	addi	r6,sp,120
 8008708:	b80b883a 	mov	r5,r23
 800870c:	8009883a 	mov	r4,r16
 8008710:	800ec0c0 	call	800ec0c <__sprint_r>
 8008714:	103ce51e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008718:	8c7ffc04 	addi	r17,r17,-16
 800871c:	d8c02017 	ldw	r3,128(sp)
 8008720:	d8801f17 	ldw	r2,124(sp)
 8008724:	da000404 	addi	r8,sp,16
 8008728:	e47fef16 	blt	fp,r17,80086e8 <__alt_data_end+0xf80086e8>
 800872c:	9021883a 	mov	r16,r18
 8008730:	a825883a 	mov	r18,r21
 8008734:	b02b883a 	mov	r21,r22
 8008738:	882d883a 	mov	r22,r17
 800873c:	dc403017 	ldw	r17,192(sp)
 8008740:	d9002c17 	ldw	r4,176(sp)
 8008744:	1d87883a 	add	r3,r3,r22
 8008748:	10800044 	addi	r2,r2,1
 800874c:	41000015 	stw	r4,0(r8)
 8008750:	45800115 	stw	r22,4(r8)
 8008754:	d8c02015 	stw	r3,128(sp)
 8008758:	d8801f15 	stw	r2,124(sp)
 800875c:	010001c4 	movi	r4,7
 8008760:	20818e16 	blt	r4,r2,8008d9c <___vfprintf_internal_r+0x1700>
 8008764:	42000204 	addi	r8,r8,8
 8008768:	003e0f06 	br	8007fa8 <__alt_data_end+0xf8007fa8>
 800876c:	d9403317 	ldw	r5,204(sp)
 8008770:	00800044 	movi	r2,1
 8008774:	18c00044 	addi	r3,r3,1
 8008778:	1141530e 	bge	r2,r5,8008cc8 <___vfprintf_internal_r+0x162c>
 800877c:	dc401f17 	ldw	r17,124(sp)
 8008780:	00800044 	movi	r2,1
 8008784:	40800115 	stw	r2,4(r8)
 8008788:	8c400044 	addi	r17,r17,1
 800878c:	44000015 	stw	r16,0(r8)
 8008790:	d8c02015 	stw	r3,128(sp)
 8008794:	dc401f15 	stw	r17,124(sp)
 8008798:	008001c4 	movi	r2,7
 800879c:	14416b16 	blt	r2,r17,8008d4c <___vfprintf_internal_r+0x16b0>
 80087a0:	42000204 	addi	r8,r8,8
 80087a4:	d8803717 	ldw	r2,220(sp)
 80087a8:	d9003417 	ldw	r4,208(sp)
 80087ac:	8c400044 	addi	r17,r17,1
 80087b0:	10c7883a 	add	r3,r2,r3
 80087b4:	40800115 	stw	r2,4(r8)
 80087b8:	41000015 	stw	r4,0(r8)
 80087bc:	d8c02015 	stw	r3,128(sp)
 80087c0:	dc401f15 	stw	r17,124(sp)
 80087c4:	008001c4 	movi	r2,7
 80087c8:	14416916 	blt	r2,r17,8008d70 <___vfprintf_internal_r+0x16d4>
 80087cc:	45800204 	addi	r22,r8,8
 80087d0:	d9003617 	ldw	r4,216(sp)
 80087d4:	d9403817 	ldw	r5,224(sp)
 80087d8:	000d883a 	mov	r6,zero
 80087dc:	000f883a 	mov	r7,zero
 80087e0:	d8c03c15 	stw	r3,240(sp)
 80087e4:	80129900 	call	8012990 <__eqdf2>
 80087e8:	d8c03c17 	ldw	r3,240(sp)
 80087ec:	1000bc26 	beq	r2,zero,8008ae0 <___vfprintf_internal_r+0x1444>
 80087f0:	d9403317 	ldw	r5,204(sp)
 80087f4:	84000044 	addi	r16,r16,1
 80087f8:	8c400044 	addi	r17,r17,1
 80087fc:	28bfffc4 	addi	r2,r5,-1
 8008800:	1887883a 	add	r3,r3,r2
 8008804:	b0800115 	stw	r2,4(r22)
 8008808:	b4000015 	stw	r16,0(r22)
 800880c:	d8c02015 	stw	r3,128(sp)
 8008810:	dc401f15 	stw	r17,124(sp)
 8008814:	008001c4 	movi	r2,7
 8008818:	14414316 	blt	r2,r17,8008d28 <___vfprintf_internal_r+0x168c>
 800881c:	b5800204 	addi	r22,r22,8
 8008820:	d9003a17 	ldw	r4,232(sp)
 8008824:	df0022c4 	addi	fp,sp,139
 8008828:	8c400044 	addi	r17,r17,1
 800882c:	20c7883a 	add	r3,r4,r3
 8008830:	b7000015 	stw	fp,0(r22)
 8008834:	b1000115 	stw	r4,4(r22)
 8008838:	d8c02015 	stw	r3,128(sp)
 800883c:	dc401f15 	stw	r17,124(sp)
 8008840:	008001c4 	movi	r2,7
 8008844:	14400e16 	blt	r2,r17,8008880 <___vfprintf_internal_r+0x11e4>
 8008848:	b2000204 	addi	r8,r22,8
 800884c:	003e1806 	br	80080b0 <__alt_data_end+0xf80080b0>
 8008850:	01020074 	movhi	r4,2049
 8008854:	2119bd84 	addi	r4,r4,26358
 8008858:	d9002c15 	stw	r4,176(sp)
 800885c:	d9002c17 	ldw	r4,176(sp)
 8008860:	1c07883a 	add	r3,r3,r16
 8008864:	44000115 	stw	r16,4(r8)
 8008868:	41000015 	stw	r4,0(r8)
 800886c:	10800044 	addi	r2,r2,1
 8008870:	d8c02015 	stw	r3,128(sp)
 8008874:	d8801f15 	stw	r2,124(sp)
 8008878:	010001c4 	movi	r4,7
 800887c:	20be0b0e 	bge	r4,r2,80080ac <__alt_data_end+0xf80080ac>
 8008880:	d9002d17 	ldw	r4,180(sp)
 8008884:	d9801e04 	addi	r6,sp,120
 8008888:	b80b883a 	mov	r5,r23
 800888c:	800ec0c0 	call	800ec0c <__sprint_r>
 8008890:	103c861e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008894:	d8c02017 	ldw	r3,128(sp)
 8008898:	da000404 	addi	r8,sp,16
 800889c:	003e0406 	br	80080b0 <__alt_data_end+0xf80080b0>
 80088a0:	d9002d17 	ldw	r4,180(sp)
 80088a4:	d9801e04 	addi	r6,sp,120
 80088a8:	b80b883a 	mov	r5,r23
 80088ac:	800ec0c0 	call	800ec0c <__sprint_r>
 80088b0:	103e3b26 	beq	r2,zero,80081a0 <__alt_data_end+0xf80081a0>
 80088b4:	003c7d06 	br	8007aac <__alt_data_end+0xf8007aac>
 80088b8:	d9002d17 	ldw	r4,180(sp)
 80088bc:	d9801e04 	addi	r6,sp,120
 80088c0:	b80b883a 	mov	r5,r23
 80088c4:	800ec0c0 	call	800ec0c <__sprint_r>
 80088c8:	103c781e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80088cc:	d8c02017 	ldw	r3,128(sp)
 80088d0:	da000404 	addi	r8,sp,16
 80088d4:	003de906 	br	800807c <__alt_data_end+0xf800807c>
 80088d8:	d9002d17 	ldw	r4,180(sp)
 80088dc:	d9801e04 	addi	r6,sp,120
 80088e0:	b80b883a 	mov	r5,r23
 80088e4:	800ec0c0 	call	800ec0c <__sprint_r>
 80088e8:	103c701e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80088ec:	d8c02017 	ldw	r3,128(sp)
 80088f0:	da000404 	addi	r8,sp,16
 80088f4:	003d9b06 	br	8007f64 <__alt_data_end+0xf8007f64>
 80088f8:	d9002d17 	ldw	r4,180(sp)
 80088fc:	d9801e04 	addi	r6,sp,120
 8008900:	b80b883a 	mov	r5,r23
 8008904:	800ec0c0 	call	800ec0c <__sprint_r>
 8008908:	103c681e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 800890c:	d8c02017 	ldw	r3,128(sp)
 8008910:	da000404 	addi	r8,sp,16
 8008914:	003da106 	br	8007f9c <__alt_data_end+0xf8007f9c>
 8008918:	d9402a17 	ldw	r5,168(sp)
 800891c:	d8002785 	stb	zero,158(sp)
 8008920:	283f0616 	blt	r5,zero,800853c <__alt_data_end+0xf800853c>
 8008924:	00ffdfc4 	movi	r3,-129
 8008928:	9d84b03a 	or	r2,r19,r22
 800892c:	90e4703a 	and	r18,r18,r3
 8008930:	103c3b26 	beq	r2,zero,8007a20 <__alt_data_end+0xf8007a20>
 8008934:	0039883a 	mov	fp,zero
 8008938:	003e5806 	br	800829c <__alt_data_end+0xf800829c>
 800893c:	9080040c 	andi	r2,r18,16
 8008940:	1001b326 	beq	r2,zero,8009010 <___vfprintf_internal_r+0x1974>
 8008944:	d8c02e17 	ldw	r3,184(sp)
 8008948:	d9002a17 	ldw	r4,168(sp)
 800894c:	d8002785 	stb	zero,158(sp)
 8008950:	18800104 	addi	r2,r3,4
 8008954:	1cc00017 	ldw	r19,0(r3)
 8008958:	002d883a 	mov	r22,zero
 800895c:	2001b516 	blt	r4,zero,8009034 <___vfprintf_internal_r+0x1998>
 8008960:	00ffdfc4 	movi	r3,-129
 8008964:	d8802e15 	stw	r2,184(sp)
 8008968:	90e4703a 	and	r18,r18,r3
 800896c:	983d0526 	beq	r19,zero,8007d84 <__alt_data_end+0xf8007d84>
 8008970:	0039883a 	mov	fp,zero
 8008974:	003d0806 	br	8007d98 <__alt_data_end+0xf8007d98>
 8008978:	dc402617 	ldw	r17,152(sp)
 800897c:	0441d30e 	bge	zero,r17,80090cc <___vfprintf_internal_r+0x1a30>
 8008980:	dc403217 	ldw	r17,200(sp)
 8008984:	d8803317 	ldw	r2,204(sp)
 8008988:	1440010e 	bge	r2,r17,8008990 <___vfprintf_internal_r+0x12f4>
 800898c:	1023883a 	mov	r17,r2
 8008990:	04400a0e 	bge	zero,r17,80089bc <___vfprintf_internal_r+0x1320>
 8008994:	d8801f17 	ldw	r2,124(sp)
 8008998:	1c47883a 	add	r3,r3,r17
 800899c:	44000015 	stw	r16,0(r8)
 80089a0:	10800044 	addi	r2,r2,1
 80089a4:	44400115 	stw	r17,4(r8)
 80089a8:	d8c02015 	stw	r3,128(sp)
 80089ac:	d8801f15 	stw	r2,124(sp)
 80089b0:	010001c4 	movi	r4,7
 80089b4:	20826516 	blt	r4,r2,800934c <___vfprintf_internal_r+0x1cb0>
 80089b8:	42000204 	addi	r8,r8,8
 80089bc:	88026116 	blt	r17,zero,8009344 <___vfprintf_internal_r+0x1ca8>
 80089c0:	d9003217 	ldw	r4,200(sp)
 80089c4:	2463c83a 	sub	r17,r4,r17
 80089c8:	04407b0e 	bge	zero,r17,8008bb8 <___vfprintf_internal_r+0x151c>
 80089cc:	05800404 	movi	r22,16
 80089d0:	d8801f17 	ldw	r2,124(sp)
 80089d4:	b4419d0e 	bge	r22,r17,800904c <___vfprintf_internal_r+0x19b0>
 80089d8:	01020074 	movhi	r4,2049
 80089dc:	2119bd84 	addi	r4,r4,26358
 80089e0:	d9002c15 	stw	r4,176(sp)
 80089e4:	070001c4 	movi	fp,7
 80089e8:	dcc02d17 	ldw	r19,180(sp)
 80089ec:	00000306 	br	80089fc <___vfprintf_internal_r+0x1360>
 80089f0:	42000204 	addi	r8,r8,8
 80089f4:	8c7ffc04 	addi	r17,r17,-16
 80089f8:	b441970e 	bge	r22,r17,8009058 <___vfprintf_internal_r+0x19bc>
 80089fc:	18c00404 	addi	r3,r3,16
 8008a00:	10800044 	addi	r2,r2,1
 8008a04:	45000015 	stw	r20,0(r8)
 8008a08:	45800115 	stw	r22,4(r8)
 8008a0c:	d8c02015 	stw	r3,128(sp)
 8008a10:	d8801f15 	stw	r2,124(sp)
 8008a14:	e0bff60e 	bge	fp,r2,80089f0 <__alt_data_end+0xf80089f0>
 8008a18:	d9801e04 	addi	r6,sp,120
 8008a1c:	b80b883a 	mov	r5,r23
 8008a20:	9809883a 	mov	r4,r19
 8008a24:	800ec0c0 	call	800ec0c <__sprint_r>
 8008a28:	103c201e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008a2c:	d8c02017 	ldw	r3,128(sp)
 8008a30:	d8801f17 	ldw	r2,124(sp)
 8008a34:	da000404 	addi	r8,sp,16
 8008a38:	003fee06 	br	80089f4 <__alt_data_end+0xf80089f4>
 8008a3c:	d9002d17 	ldw	r4,180(sp)
 8008a40:	d9801e04 	addi	r6,sp,120
 8008a44:	b80b883a 	mov	r5,r23
 8008a48:	800ec0c0 	call	800ec0c <__sprint_r>
 8008a4c:	103c171e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008a50:	d8c02017 	ldw	r3,128(sp)
 8008a54:	df002787 	ldb	fp,158(sp)
 8008a58:	da000404 	addi	r8,sp,16
 8008a5c:	003d3406 	br	8007f30 <__alt_data_end+0xf8007f30>
 8008a60:	9080040c 	andi	r2,r18,16
 8008a64:	10016126 	beq	r2,zero,8008fec <___vfprintf_internal_r+0x1950>
 8008a68:	d9402e17 	ldw	r5,184(sp)
 8008a6c:	2cc00017 	ldw	r19,0(r5)
 8008a70:	29400104 	addi	r5,r5,4
 8008a74:	d9402e15 	stw	r5,184(sp)
 8008a78:	982dd7fa 	srai	r22,r19,31
 8008a7c:	b005883a 	mov	r2,r22
 8008a80:	003c5a06 	br	8007bec <__alt_data_end+0xf8007bec>
 8008a84:	9080040c 	andi	r2,r18,16
 8008a88:	10003526 	beq	r2,zero,8008b60 <___vfprintf_internal_r+0x14c4>
 8008a8c:	d8c02e17 	ldw	r3,184(sp)
 8008a90:	d9002a17 	ldw	r4,168(sp)
 8008a94:	d8002785 	stb	zero,158(sp)
 8008a98:	18800104 	addi	r2,r3,4
 8008a9c:	1cc00017 	ldw	r19,0(r3)
 8008aa0:	002d883a 	mov	r22,zero
 8008aa4:	20003716 	blt	r4,zero,8008b84 <___vfprintf_internal_r+0x14e8>
 8008aa8:	00ffdfc4 	movi	r3,-129
 8008aac:	d8802e15 	stw	r2,184(sp)
 8008ab0:	90e4703a 	and	r18,r18,r3
 8008ab4:	0039883a 	mov	fp,zero
 8008ab8:	983dd426 	beq	r19,zero,800820c <__alt_data_end+0xf800820c>
 8008abc:	00800244 	movi	r2,9
 8008ac0:	14fc5336 	bltu	r2,r19,8007c10 <__alt_data_end+0xf8007c10>
 8008ac4:	d8c02817 	ldw	r3,160(sp)
 8008ac8:	dc001dc4 	addi	r16,sp,119
 8008acc:	9cc00c04 	addi	r19,r19,48
 8008ad0:	1c07c83a 	sub	r3,r3,r16
 8008ad4:	dcc01dc5 	stb	r19,119(sp)
 8008ad8:	d8c02b15 	stw	r3,172(sp)
 8008adc:	003cc606 	br	8007df8 <__alt_data_end+0xf8007df8>
 8008ae0:	d8803317 	ldw	r2,204(sp)
 8008ae4:	143fffc4 	addi	r16,r2,-1
 8008ae8:	043f4d0e 	bge	zero,r16,8008820 <__alt_data_end+0xf8008820>
 8008aec:	07000404 	movi	fp,16
 8008af0:	e400810e 	bge	fp,r16,8008cf8 <___vfprintf_internal_r+0x165c>
 8008af4:	01420074 	movhi	r5,2049
 8008af8:	2959bd84 	addi	r5,r5,26358
 8008afc:	d9402c15 	stw	r5,176(sp)
 8008b00:	01c001c4 	movi	r7,7
 8008b04:	dcc02d17 	ldw	r19,180(sp)
 8008b08:	00000306 	br	8008b18 <___vfprintf_internal_r+0x147c>
 8008b0c:	b5800204 	addi	r22,r22,8
 8008b10:	843ffc04 	addi	r16,r16,-16
 8008b14:	e4007b0e 	bge	fp,r16,8008d04 <___vfprintf_internal_r+0x1668>
 8008b18:	18c00404 	addi	r3,r3,16
 8008b1c:	8c400044 	addi	r17,r17,1
 8008b20:	b5000015 	stw	r20,0(r22)
 8008b24:	b7000115 	stw	fp,4(r22)
 8008b28:	d8c02015 	stw	r3,128(sp)
 8008b2c:	dc401f15 	stw	r17,124(sp)
 8008b30:	3c7ff60e 	bge	r7,r17,8008b0c <__alt_data_end+0xf8008b0c>
 8008b34:	d9801e04 	addi	r6,sp,120
 8008b38:	b80b883a 	mov	r5,r23
 8008b3c:	9809883a 	mov	r4,r19
 8008b40:	d9c03c15 	stw	r7,240(sp)
 8008b44:	800ec0c0 	call	800ec0c <__sprint_r>
 8008b48:	d9c03c17 	ldw	r7,240(sp)
 8008b4c:	103bd71e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008b50:	d8c02017 	ldw	r3,128(sp)
 8008b54:	dc401f17 	ldw	r17,124(sp)
 8008b58:	dd800404 	addi	r22,sp,16
 8008b5c:	003fec06 	br	8008b10 <__alt_data_end+0xf8008b10>
 8008b60:	9080100c 	andi	r2,r18,64
 8008b64:	d8002785 	stb	zero,158(sp)
 8008b68:	10010e26 	beq	r2,zero,8008fa4 <___vfprintf_internal_r+0x1908>
 8008b6c:	d9402e17 	ldw	r5,184(sp)
 8008b70:	d8c02a17 	ldw	r3,168(sp)
 8008b74:	002d883a 	mov	r22,zero
 8008b78:	28800104 	addi	r2,r5,4
 8008b7c:	2cc0000b 	ldhu	r19,0(r5)
 8008b80:	183fc90e 	bge	r3,zero,8008aa8 <__alt_data_end+0xf8008aa8>
 8008b84:	d8802e15 	stw	r2,184(sp)
 8008b88:	0039883a 	mov	fp,zero
 8008b8c:	9d84b03a 	or	r2,r19,r22
 8008b90:	103c1e1e 	bne	r2,zero,8007c0c <__alt_data_end+0xf8007c0c>
 8008b94:	00800044 	movi	r2,1
 8008b98:	003e6c06 	br	800854c <__alt_data_end+0xf800854c>
 8008b9c:	d9002d17 	ldw	r4,180(sp)
 8008ba0:	d9801e04 	addi	r6,sp,120
 8008ba4:	b80b883a 	mov	r5,r23
 8008ba8:	800ec0c0 	call	800ec0c <__sprint_r>
 8008bac:	103bbf1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008bb0:	d8c02017 	ldw	r3,128(sp)
 8008bb4:	da000404 	addi	r8,sp,16
 8008bb8:	d9003217 	ldw	r4,200(sp)
 8008bbc:	d8802617 	ldw	r2,152(sp)
 8008bc0:	d9403317 	ldw	r5,204(sp)
 8008bc4:	8123883a 	add	r17,r16,r4
 8008bc8:	11400216 	blt	r2,r5,8008bd4 <___vfprintf_internal_r+0x1538>
 8008bcc:	9100004c 	andi	r4,r18,1
 8008bd0:	20000d26 	beq	r4,zero,8008c08 <___vfprintf_internal_r+0x156c>
 8008bd4:	d9003717 	ldw	r4,220(sp)
 8008bd8:	d9403417 	ldw	r5,208(sp)
 8008bdc:	1907883a 	add	r3,r3,r4
 8008be0:	d9001f17 	ldw	r4,124(sp)
 8008be4:	41400015 	stw	r5,0(r8)
 8008be8:	d9403717 	ldw	r5,220(sp)
 8008bec:	21000044 	addi	r4,r4,1
 8008bf0:	d8c02015 	stw	r3,128(sp)
 8008bf4:	41400115 	stw	r5,4(r8)
 8008bf8:	d9001f15 	stw	r4,124(sp)
 8008bfc:	014001c4 	movi	r5,7
 8008c00:	2901e816 	blt	r5,r4,80093a4 <___vfprintf_internal_r+0x1d08>
 8008c04:	42000204 	addi	r8,r8,8
 8008c08:	d9003317 	ldw	r4,204(sp)
 8008c0c:	8121883a 	add	r16,r16,r4
 8008c10:	2085c83a 	sub	r2,r4,r2
 8008c14:	8461c83a 	sub	r16,r16,r17
 8008c18:	1400010e 	bge	r2,r16,8008c20 <___vfprintf_internal_r+0x1584>
 8008c1c:	1021883a 	mov	r16,r2
 8008c20:	04000a0e 	bge	zero,r16,8008c4c <___vfprintf_internal_r+0x15b0>
 8008c24:	d9001f17 	ldw	r4,124(sp)
 8008c28:	1c07883a 	add	r3,r3,r16
 8008c2c:	44400015 	stw	r17,0(r8)
 8008c30:	21000044 	addi	r4,r4,1
 8008c34:	44000115 	stw	r16,4(r8)
 8008c38:	d8c02015 	stw	r3,128(sp)
 8008c3c:	d9001f15 	stw	r4,124(sp)
 8008c40:	014001c4 	movi	r5,7
 8008c44:	2901fb16 	blt	r5,r4,8009434 <___vfprintf_internal_r+0x1d98>
 8008c48:	42000204 	addi	r8,r8,8
 8008c4c:	8001f716 	blt	r16,zero,800942c <___vfprintf_internal_r+0x1d90>
 8008c50:	1421c83a 	sub	r16,r2,r16
 8008c54:	043d160e 	bge	zero,r16,80080b0 <__alt_data_end+0xf80080b0>
 8008c58:	04400404 	movi	r17,16
 8008c5c:	d8801f17 	ldw	r2,124(sp)
 8008c60:	8c3efb0e 	bge	r17,r16,8008850 <__alt_data_end+0xf8008850>
 8008c64:	01420074 	movhi	r5,2049
 8008c68:	2959bd84 	addi	r5,r5,26358
 8008c6c:	d9402c15 	stw	r5,176(sp)
 8008c70:	058001c4 	movi	r22,7
 8008c74:	dcc02d17 	ldw	r19,180(sp)
 8008c78:	00000306 	br	8008c88 <___vfprintf_internal_r+0x15ec>
 8008c7c:	42000204 	addi	r8,r8,8
 8008c80:	843ffc04 	addi	r16,r16,-16
 8008c84:	8c3ef50e 	bge	r17,r16,800885c <__alt_data_end+0xf800885c>
 8008c88:	18c00404 	addi	r3,r3,16
 8008c8c:	10800044 	addi	r2,r2,1
 8008c90:	45000015 	stw	r20,0(r8)
 8008c94:	44400115 	stw	r17,4(r8)
 8008c98:	d8c02015 	stw	r3,128(sp)
 8008c9c:	d8801f15 	stw	r2,124(sp)
 8008ca0:	b0bff60e 	bge	r22,r2,8008c7c <__alt_data_end+0xf8008c7c>
 8008ca4:	d9801e04 	addi	r6,sp,120
 8008ca8:	b80b883a 	mov	r5,r23
 8008cac:	9809883a 	mov	r4,r19
 8008cb0:	800ec0c0 	call	800ec0c <__sprint_r>
 8008cb4:	103b7d1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008cb8:	d8c02017 	ldw	r3,128(sp)
 8008cbc:	d8801f17 	ldw	r2,124(sp)
 8008cc0:	da000404 	addi	r8,sp,16
 8008cc4:	003fee06 	br	8008c80 <__alt_data_end+0xf8008c80>
 8008cc8:	9088703a 	and	r4,r18,r2
 8008ccc:	203eab1e 	bne	r4,zero,800877c <__alt_data_end+0xf800877c>
 8008cd0:	dc401f17 	ldw	r17,124(sp)
 8008cd4:	40800115 	stw	r2,4(r8)
 8008cd8:	44000015 	stw	r16,0(r8)
 8008cdc:	8c400044 	addi	r17,r17,1
 8008ce0:	d8c02015 	stw	r3,128(sp)
 8008ce4:	dc401f15 	stw	r17,124(sp)
 8008ce8:	008001c4 	movi	r2,7
 8008cec:	14400e16 	blt	r2,r17,8008d28 <___vfprintf_internal_r+0x168c>
 8008cf0:	45800204 	addi	r22,r8,8
 8008cf4:	003eca06 	br	8008820 <__alt_data_end+0xf8008820>
 8008cf8:	01020074 	movhi	r4,2049
 8008cfc:	2119bd84 	addi	r4,r4,26358
 8008d00:	d9002c15 	stw	r4,176(sp)
 8008d04:	d8802c17 	ldw	r2,176(sp)
 8008d08:	1c07883a 	add	r3,r3,r16
 8008d0c:	8c400044 	addi	r17,r17,1
 8008d10:	b0800015 	stw	r2,0(r22)
 8008d14:	b4000115 	stw	r16,4(r22)
 8008d18:	d8c02015 	stw	r3,128(sp)
 8008d1c:	dc401f15 	stw	r17,124(sp)
 8008d20:	008001c4 	movi	r2,7
 8008d24:	147ebd0e 	bge	r2,r17,800881c <__alt_data_end+0xf800881c>
 8008d28:	d9002d17 	ldw	r4,180(sp)
 8008d2c:	d9801e04 	addi	r6,sp,120
 8008d30:	b80b883a 	mov	r5,r23
 8008d34:	800ec0c0 	call	800ec0c <__sprint_r>
 8008d38:	103b5c1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008d3c:	d8c02017 	ldw	r3,128(sp)
 8008d40:	dc401f17 	ldw	r17,124(sp)
 8008d44:	dd800404 	addi	r22,sp,16
 8008d48:	003eb506 	br	8008820 <__alt_data_end+0xf8008820>
 8008d4c:	d9002d17 	ldw	r4,180(sp)
 8008d50:	d9801e04 	addi	r6,sp,120
 8008d54:	b80b883a 	mov	r5,r23
 8008d58:	800ec0c0 	call	800ec0c <__sprint_r>
 8008d5c:	103b531e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008d60:	d8c02017 	ldw	r3,128(sp)
 8008d64:	dc401f17 	ldw	r17,124(sp)
 8008d68:	da000404 	addi	r8,sp,16
 8008d6c:	003e8d06 	br	80087a4 <__alt_data_end+0xf80087a4>
 8008d70:	d9002d17 	ldw	r4,180(sp)
 8008d74:	d9801e04 	addi	r6,sp,120
 8008d78:	b80b883a 	mov	r5,r23
 8008d7c:	800ec0c0 	call	800ec0c <__sprint_r>
 8008d80:	103b4a1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008d84:	d8c02017 	ldw	r3,128(sp)
 8008d88:	dc401f17 	ldw	r17,124(sp)
 8008d8c:	dd800404 	addi	r22,sp,16
 8008d90:	003e8f06 	br	80087d0 <__alt_data_end+0xf80087d0>
 8008d94:	0027883a 	mov	r19,zero
 8008d98:	003f4a06 	br	8008ac4 <__alt_data_end+0xf8008ac4>
 8008d9c:	d9002d17 	ldw	r4,180(sp)
 8008da0:	d9801e04 	addi	r6,sp,120
 8008da4:	b80b883a 	mov	r5,r23
 8008da8:	800ec0c0 	call	800ec0c <__sprint_r>
 8008dac:	103b3f1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8008db0:	d8c02017 	ldw	r3,128(sp)
 8008db4:	da000404 	addi	r8,sp,16
 8008db8:	003c7b06 	br	8007fa8 <__alt_data_end+0xf8007fa8>
 8008dbc:	d9402a17 	ldw	r5,168(sp)
 8008dc0:	04e7c83a 	sub	r19,zero,r19
 8008dc4:	07000b44 	movi	fp,45
 8008dc8:	9804c03a 	cmpne	r2,r19,zero
 8008dcc:	05adc83a 	sub	r22,zero,r22
 8008dd0:	df002785 	stb	fp,158(sp)
 8008dd4:	b0adc83a 	sub	r22,r22,r2
 8008dd8:	28017b16 	blt	r5,zero,80093c8 <___vfprintf_internal_r+0x1d2c>
 8008ddc:	00bfdfc4 	movi	r2,-129
 8008de0:	90a4703a 	and	r18,r18,r2
 8008de4:	003b8906 	br	8007c0c <__alt_data_end+0xf8007c0c>
 8008de8:	d9003617 	ldw	r4,216(sp)
 8008dec:	d9403817 	ldw	r5,224(sp)
 8008df0:	da003d15 	stw	r8,244(sp)
 8008df4:	800e8300 	call	800e830 <__fpclassifyd>
 8008df8:	da003d17 	ldw	r8,244(sp)
 8008dfc:	1000f026 	beq	r2,zero,80091c0 <___vfprintf_internal_r+0x1b24>
 8008e00:	d9002a17 	ldw	r4,168(sp)
 8008e04:	05bff7c4 	movi	r22,-33
 8008e08:	00bfffc4 	movi	r2,-1
 8008e0c:	8dac703a 	and	r22,r17,r22
 8008e10:	20820026 	beq	r4,r2,8009614 <___vfprintf_internal_r+0x1f78>
 8008e14:	008011c4 	movi	r2,71
 8008e18:	b081f726 	beq	r22,r2,80095f8 <___vfprintf_internal_r+0x1f5c>
 8008e1c:	d9003817 	ldw	r4,224(sp)
 8008e20:	90c04014 	ori	r3,r18,256
 8008e24:	d8c02c15 	stw	r3,176(sp)
 8008e28:	20021516 	blt	r4,zero,8009680 <___vfprintf_internal_r+0x1fe4>
 8008e2c:	dcc03817 	ldw	r19,224(sp)
 8008e30:	d8002905 	stb	zero,164(sp)
 8008e34:	00801984 	movi	r2,102
 8008e38:	8881f926 	beq	r17,r2,8009620 <___vfprintf_internal_r+0x1f84>
 8008e3c:	00801184 	movi	r2,70
 8008e40:	88821c26 	beq	r17,r2,80096b4 <___vfprintf_internal_r+0x2018>
 8008e44:	00801144 	movi	r2,69
 8008e48:	b081ef26 	beq	r22,r2,8009608 <___vfprintf_internal_r+0x1f6c>
 8008e4c:	d8c02a17 	ldw	r3,168(sp)
 8008e50:	d8802104 	addi	r2,sp,132
 8008e54:	d8800315 	stw	r2,12(sp)
 8008e58:	d9403617 	ldw	r5,216(sp)
 8008e5c:	d8802504 	addi	r2,sp,148
 8008e60:	d9002d17 	ldw	r4,180(sp)
 8008e64:	d8800215 	stw	r2,8(sp)
 8008e68:	d8802604 	addi	r2,sp,152
 8008e6c:	d8c00015 	stw	r3,0(sp)
 8008e70:	d8800115 	stw	r2,4(sp)
 8008e74:	01c00084 	movi	r7,2
 8008e78:	980d883a 	mov	r6,r19
 8008e7c:	d8c03c15 	stw	r3,240(sp)
 8008e80:	da003d15 	stw	r8,244(sp)
 8008e84:	8009dcc0 	call	8009dcc <_dtoa_r>
 8008e88:	1021883a 	mov	r16,r2
 8008e8c:	008019c4 	movi	r2,103
 8008e90:	d8c03c17 	ldw	r3,240(sp)
 8008e94:	da003d17 	ldw	r8,244(sp)
 8008e98:	88817126 	beq	r17,r2,8009460 <___vfprintf_internal_r+0x1dc4>
 8008e9c:	008011c4 	movi	r2,71
 8008ea0:	88829126 	beq	r17,r2,80098e8 <___vfprintf_internal_r+0x224c>
 8008ea4:	80f9883a 	add	fp,r16,r3
 8008ea8:	d9003617 	ldw	r4,216(sp)
 8008eac:	000d883a 	mov	r6,zero
 8008eb0:	000f883a 	mov	r7,zero
 8008eb4:	980b883a 	mov	r5,r19
 8008eb8:	da003d15 	stw	r8,244(sp)
 8008ebc:	80129900 	call	8012990 <__eqdf2>
 8008ec0:	da003d17 	ldw	r8,244(sp)
 8008ec4:	10018d26 	beq	r2,zero,80094fc <___vfprintf_internal_r+0x1e60>
 8008ec8:	d8802117 	ldw	r2,132(sp)
 8008ecc:	1700062e 	bgeu	r2,fp,8008ee8 <___vfprintf_internal_r+0x184c>
 8008ed0:	01000c04 	movi	r4,48
 8008ed4:	10c00044 	addi	r3,r2,1
 8008ed8:	d8c02115 	stw	r3,132(sp)
 8008edc:	11000005 	stb	r4,0(r2)
 8008ee0:	d8802117 	ldw	r2,132(sp)
 8008ee4:	173ffb36 	bltu	r2,fp,8008ed4 <__alt_data_end+0xf8008ed4>
 8008ee8:	1405c83a 	sub	r2,r2,r16
 8008eec:	d8803315 	stw	r2,204(sp)
 8008ef0:	008011c4 	movi	r2,71
 8008ef4:	b0817626 	beq	r22,r2,80094d0 <___vfprintf_internal_r+0x1e34>
 8008ef8:	00801944 	movi	r2,101
 8008efc:	1442800e 	bge	r2,r17,8009900 <___vfprintf_internal_r+0x2264>
 8008f00:	d8c02617 	ldw	r3,152(sp)
 8008f04:	00801984 	movi	r2,102
 8008f08:	d8c03215 	stw	r3,200(sp)
 8008f0c:	8881fe26 	beq	r17,r2,8009708 <___vfprintf_internal_r+0x206c>
 8008f10:	d8c03217 	ldw	r3,200(sp)
 8008f14:	d9003317 	ldw	r4,204(sp)
 8008f18:	1901dd16 	blt	r3,r4,8009690 <___vfprintf_internal_r+0x1ff4>
 8008f1c:	9480004c 	andi	r18,r18,1
 8008f20:	90022b1e 	bne	r18,zero,80097d0 <___vfprintf_internal_r+0x2134>
 8008f24:	1805883a 	mov	r2,r3
 8008f28:	18028316 	blt	r3,zero,8009938 <___vfprintf_internal_r+0x229c>
 8008f2c:	d8c03217 	ldw	r3,200(sp)
 8008f30:	044019c4 	movi	r17,103
 8008f34:	d8c02b15 	stw	r3,172(sp)
 8008f38:	df002907 	ldb	fp,164(sp)
 8008f3c:	e001531e 	bne	fp,zero,800948c <___vfprintf_internal_r+0x1df0>
 8008f40:	df002783 	ldbu	fp,158(sp)
 8008f44:	d8802915 	stw	r2,164(sp)
 8008f48:	dc802c17 	ldw	r18,176(sp)
 8008f4c:	d8002a15 	stw	zero,168(sp)
 8008f50:	003baf06 	br	8007e10 <__alt_data_end+0xf8007e10>
 8008f54:	d8c02e17 	ldw	r3,184(sp)
 8008f58:	d9002e17 	ldw	r4,184(sp)
 8008f5c:	d9402e17 	ldw	r5,184(sp)
 8008f60:	18c00017 	ldw	r3,0(r3)
 8008f64:	21000117 	ldw	r4,4(r4)
 8008f68:	29400204 	addi	r5,r5,8
 8008f6c:	d8c03615 	stw	r3,216(sp)
 8008f70:	d9003815 	stw	r4,224(sp)
 8008f74:	d9402e15 	stw	r5,184(sp)
 8008f78:	003b5006 	br	8007cbc <__alt_data_end+0xf8007cbc>
 8008f7c:	ac400007 	ldb	r17,0(r21)
 8008f80:	003a2806 	br	8007824 <__alt_data_end+0xf8007824>
 8008f84:	9080100c 	andi	r2,r18,64
 8008f88:	1000a826 	beq	r2,zero,800922c <___vfprintf_internal_r+0x1b90>
 8008f8c:	d8c02e17 	ldw	r3,184(sp)
 8008f90:	002d883a 	mov	r22,zero
 8008f94:	1cc0000b 	ldhu	r19,0(r3)
 8008f98:	18c00104 	addi	r3,r3,4
 8008f9c:	d8c02e15 	stw	r3,184(sp)
 8008fa0:	003caf06 	br	8008260 <__alt_data_end+0xf8008260>
 8008fa4:	d9002e17 	ldw	r4,184(sp)
 8008fa8:	d9402a17 	ldw	r5,168(sp)
 8008fac:	002d883a 	mov	r22,zero
 8008fb0:	20800104 	addi	r2,r4,4
 8008fb4:	24c00017 	ldw	r19,0(r4)
 8008fb8:	283ebb0e 	bge	r5,zero,8008aa8 <__alt_data_end+0xf8008aa8>
 8008fbc:	003ef106 	br	8008b84 <__alt_data_end+0xf8008b84>
 8008fc0:	9080040c 	andi	r2,r18,16
 8008fc4:	1000921e 	bne	r2,zero,8009210 <___vfprintf_internal_r+0x1b74>
 8008fc8:	9480100c 	andi	r18,r18,64
 8008fcc:	90013926 	beq	r18,zero,80094b4 <___vfprintf_internal_r+0x1e18>
 8008fd0:	d9402e17 	ldw	r5,184(sp)
 8008fd4:	d8c02f17 	ldw	r3,188(sp)
 8008fd8:	28800017 	ldw	r2,0(r5)
 8008fdc:	29400104 	addi	r5,r5,4
 8008fe0:	d9402e15 	stw	r5,184(sp)
 8008fe4:	10c0000d 	sth	r3,0(r2)
 8008fe8:	0039e406 	br	800777c <__alt_data_end+0xf800777c>
 8008fec:	9080100c 	andi	r2,r18,64
 8008ff0:	10008026 	beq	r2,zero,80091f4 <___vfprintf_internal_r+0x1b58>
 8008ff4:	d8802e17 	ldw	r2,184(sp)
 8008ff8:	14c0000f 	ldh	r19,0(r2)
 8008ffc:	10800104 	addi	r2,r2,4
 8009000:	d8802e15 	stw	r2,184(sp)
 8009004:	982dd7fa 	srai	r22,r19,31
 8009008:	b005883a 	mov	r2,r22
 800900c:	003af706 	br	8007bec <__alt_data_end+0xf8007bec>
 8009010:	9080100c 	andi	r2,r18,64
 8009014:	d8002785 	stb	zero,158(sp)
 8009018:	10008a1e 	bne	r2,zero,8009244 <___vfprintf_internal_r+0x1ba8>
 800901c:	d9002e17 	ldw	r4,184(sp)
 8009020:	d9402a17 	ldw	r5,168(sp)
 8009024:	002d883a 	mov	r22,zero
 8009028:	20800104 	addi	r2,r4,4
 800902c:	24c00017 	ldw	r19,0(r4)
 8009030:	283e4b0e 	bge	r5,zero,8008960 <__alt_data_end+0xf8008960>
 8009034:	9d86b03a 	or	r3,r19,r22
 8009038:	d8802e15 	stw	r2,184(sp)
 800903c:	183e4c1e 	bne	r3,zero,8008970 <__alt_data_end+0xf8008970>
 8009040:	0039883a 	mov	fp,zero
 8009044:	0005883a 	mov	r2,zero
 8009048:	003d4006 	br	800854c <__alt_data_end+0xf800854c>
 800904c:	01420074 	movhi	r5,2049
 8009050:	2959bd84 	addi	r5,r5,26358
 8009054:	d9402c15 	stw	r5,176(sp)
 8009058:	d9402c17 	ldw	r5,176(sp)
 800905c:	1c47883a 	add	r3,r3,r17
 8009060:	10800044 	addi	r2,r2,1
 8009064:	41400015 	stw	r5,0(r8)
 8009068:	44400115 	stw	r17,4(r8)
 800906c:	d8c02015 	stw	r3,128(sp)
 8009070:	d8801f15 	stw	r2,124(sp)
 8009074:	010001c4 	movi	r4,7
 8009078:	20bec816 	blt	r4,r2,8008b9c <__alt_data_end+0xf8008b9c>
 800907c:	42000204 	addi	r8,r8,8
 8009080:	003ecd06 	br	8008bb8 <__alt_data_end+0xf8008bb8>
 8009084:	d9002a17 	ldw	r4,168(sp)
 8009088:	d8002785 	stb	zero,158(sp)
 800908c:	203d2d16 	blt	r4,zero,8008544 <__alt_data_end+0xf8008544>
 8009090:	00bfdfc4 	movi	r2,-129
 8009094:	90a4703a 	and	r18,r18,r2
 8009098:	003a6106 	br	8007a20 <__alt_data_end+0xf8007a20>
 800909c:	01020074 	movhi	r4,2049
 80090a0:	2119bd84 	addi	r4,r4,26358
 80090a4:	d9002c15 	stw	r4,176(sp)
 80090a8:	003bea06 	br	8008054 <__alt_data_end+0xf8008054>
 80090ac:	d9002d17 	ldw	r4,180(sp)
 80090b0:	d9801e04 	addi	r6,sp,120
 80090b4:	b80b883a 	mov	r5,r23
 80090b8:	800ec0c0 	call	800ec0c <__sprint_r>
 80090bc:	103a7b1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80090c0:	d8c02017 	ldw	r3,128(sp)
 80090c4:	da000404 	addi	r8,sp,16
 80090c8:	003d4106 	br	80085d0 <__alt_data_end+0xf80085d0>
 80090cc:	d8801f17 	ldw	r2,124(sp)
 80090d0:	01420074 	movhi	r5,2049
 80090d4:	01000044 	movi	r4,1
 80090d8:	18c00044 	addi	r3,r3,1
 80090dc:	10800044 	addi	r2,r2,1
 80090e0:	2959bd04 	addi	r5,r5,26356
 80090e4:	41000115 	stw	r4,4(r8)
 80090e8:	41400015 	stw	r5,0(r8)
 80090ec:	d8c02015 	stw	r3,128(sp)
 80090f0:	d8801f15 	stw	r2,124(sp)
 80090f4:	010001c4 	movi	r4,7
 80090f8:	20805c16 	blt	r4,r2,800926c <___vfprintf_internal_r+0x1bd0>
 80090fc:	42000204 	addi	r8,r8,8
 8009100:	8800041e 	bne	r17,zero,8009114 <___vfprintf_internal_r+0x1a78>
 8009104:	d8803317 	ldw	r2,204(sp)
 8009108:	1000021e 	bne	r2,zero,8009114 <___vfprintf_internal_r+0x1a78>
 800910c:	9080004c 	andi	r2,r18,1
 8009110:	103be726 	beq	r2,zero,80080b0 <__alt_data_end+0xf80080b0>
 8009114:	d9003717 	ldw	r4,220(sp)
 8009118:	d8801f17 	ldw	r2,124(sp)
 800911c:	d9403417 	ldw	r5,208(sp)
 8009120:	20c7883a 	add	r3,r4,r3
 8009124:	10800044 	addi	r2,r2,1
 8009128:	41000115 	stw	r4,4(r8)
 800912c:	41400015 	stw	r5,0(r8)
 8009130:	d8c02015 	stw	r3,128(sp)
 8009134:	d8801f15 	stw	r2,124(sp)
 8009138:	010001c4 	movi	r4,7
 800913c:	20812116 	blt	r4,r2,80095c4 <___vfprintf_internal_r+0x1f28>
 8009140:	42000204 	addi	r8,r8,8
 8009144:	0463c83a 	sub	r17,zero,r17
 8009148:	0440730e 	bge	zero,r17,8009318 <___vfprintf_internal_r+0x1c7c>
 800914c:	05800404 	movi	r22,16
 8009150:	b440860e 	bge	r22,r17,800936c <___vfprintf_internal_r+0x1cd0>
 8009154:	01420074 	movhi	r5,2049
 8009158:	2959bd84 	addi	r5,r5,26358
 800915c:	d9402c15 	stw	r5,176(sp)
 8009160:	070001c4 	movi	fp,7
 8009164:	dcc02d17 	ldw	r19,180(sp)
 8009168:	00000306 	br	8009178 <___vfprintf_internal_r+0x1adc>
 800916c:	42000204 	addi	r8,r8,8
 8009170:	8c7ffc04 	addi	r17,r17,-16
 8009174:	b440800e 	bge	r22,r17,8009378 <___vfprintf_internal_r+0x1cdc>
 8009178:	18c00404 	addi	r3,r3,16
 800917c:	10800044 	addi	r2,r2,1
 8009180:	45000015 	stw	r20,0(r8)
 8009184:	45800115 	stw	r22,4(r8)
 8009188:	d8c02015 	stw	r3,128(sp)
 800918c:	d8801f15 	stw	r2,124(sp)
 8009190:	e0bff60e 	bge	fp,r2,800916c <__alt_data_end+0xf800916c>
 8009194:	d9801e04 	addi	r6,sp,120
 8009198:	b80b883a 	mov	r5,r23
 800919c:	9809883a 	mov	r4,r19
 80091a0:	800ec0c0 	call	800ec0c <__sprint_r>
 80091a4:	103a411e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80091a8:	d8c02017 	ldw	r3,128(sp)
 80091ac:	d8801f17 	ldw	r2,124(sp)
 80091b0:	da000404 	addi	r8,sp,16
 80091b4:	003fee06 	br	8009170 <__alt_data_end+0xf8009170>
 80091b8:	00bfffc4 	movi	r2,-1
 80091bc:	003a3f06 	br	8007abc <__alt_data_end+0xf8007abc>
 80091c0:	008011c4 	movi	r2,71
 80091c4:	1440b816 	blt	r2,r17,80094a8 <___vfprintf_internal_r+0x1e0c>
 80091c8:	04020074 	movhi	r16,2049
 80091cc:	8419af04 	addi	r16,r16,26300
 80091d0:	00c000c4 	movi	r3,3
 80091d4:	00bfdfc4 	movi	r2,-129
 80091d8:	d8c02915 	stw	r3,164(sp)
 80091dc:	90a4703a 	and	r18,r18,r2
 80091e0:	df002783 	ldbu	fp,158(sp)
 80091e4:	d8c02b15 	stw	r3,172(sp)
 80091e8:	d8002a15 	stw	zero,168(sp)
 80091ec:	d8003215 	stw	zero,200(sp)
 80091f0:	003b0706 	br	8007e10 <__alt_data_end+0xf8007e10>
 80091f4:	d8c02e17 	ldw	r3,184(sp)
 80091f8:	1cc00017 	ldw	r19,0(r3)
 80091fc:	18c00104 	addi	r3,r3,4
 8009200:	d8c02e15 	stw	r3,184(sp)
 8009204:	982dd7fa 	srai	r22,r19,31
 8009208:	b005883a 	mov	r2,r22
 800920c:	003a7706 	br	8007bec <__alt_data_end+0xf8007bec>
 8009210:	d8c02e17 	ldw	r3,184(sp)
 8009214:	d9002f17 	ldw	r4,188(sp)
 8009218:	18800017 	ldw	r2,0(r3)
 800921c:	18c00104 	addi	r3,r3,4
 8009220:	d8c02e15 	stw	r3,184(sp)
 8009224:	11000015 	stw	r4,0(r2)
 8009228:	00395406 	br	800777c <__alt_data_end+0xf800777c>
 800922c:	d9002e17 	ldw	r4,184(sp)
 8009230:	002d883a 	mov	r22,zero
 8009234:	24c00017 	ldw	r19,0(r4)
 8009238:	21000104 	addi	r4,r4,4
 800923c:	d9002e15 	stw	r4,184(sp)
 8009240:	003c0706 	br	8008260 <__alt_data_end+0xf8008260>
 8009244:	d9402e17 	ldw	r5,184(sp)
 8009248:	d8c02a17 	ldw	r3,168(sp)
 800924c:	002d883a 	mov	r22,zero
 8009250:	28800104 	addi	r2,r5,4
 8009254:	2cc0000b 	ldhu	r19,0(r5)
 8009258:	183dc10e 	bge	r3,zero,8008960 <__alt_data_end+0xf8008960>
 800925c:	003f7506 	br	8009034 <__alt_data_end+0xf8009034>
 8009260:	04020074 	movhi	r16,2049
 8009264:	8419ad04 	addi	r16,r16,26292
 8009268:	003aa706 	br	8007d08 <__alt_data_end+0xf8007d08>
 800926c:	d9002d17 	ldw	r4,180(sp)
 8009270:	d9801e04 	addi	r6,sp,120
 8009274:	b80b883a 	mov	r5,r23
 8009278:	800ec0c0 	call	800ec0c <__sprint_r>
 800927c:	103a0b1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8009280:	dc402617 	ldw	r17,152(sp)
 8009284:	d8c02017 	ldw	r3,128(sp)
 8009288:	da000404 	addi	r8,sp,16
 800928c:	003f9c06 	br	8009100 <__alt_data_end+0xf8009100>
 8009290:	ac400043 	ldbu	r17,1(r21)
 8009294:	84000814 	ori	r16,r16,32
 8009298:	ad400044 	addi	r21,r21,1
 800929c:	8c403fcc 	andi	r17,r17,255
 80092a0:	8c40201c 	xori	r17,r17,128
 80092a4:	8c7fe004 	addi	r17,r17,-128
 80092a8:	00395e06 	br	8007824 <__alt_data_end+0xf8007824>
 80092ac:	d8c02e15 	stw	r3,184(sp)
 80092b0:	0039883a 	mov	fp,zero
 80092b4:	003e3506 	br	8008b8c <__alt_data_end+0xf8008b8c>
 80092b8:	d9002d17 	ldw	r4,180(sp)
 80092bc:	d9801e04 	addi	r6,sp,120
 80092c0:	b80b883a 	mov	r5,r23
 80092c4:	800ec0c0 	call	800ec0c <__sprint_r>
 80092c8:	1039f81e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80092cc:	d8c02017 	ldw	r3,128(sp)
 80092d0:	da000404 	addi	r8,sp,16
 80092d4:	003cd006 	br	8008618 <__alt_data_end+0xf8008618>
 80092d8:	8009883a 	mov	r4,r16
 80092dc:	df003d15 	stw	fp,244(sp)
 80092e0:	80076040 	call	8007604 <strlen>
 80092e4:	d8802b15 	stw	r2,172(sp)
 80092e8:	da003d17 	ldw	r8,244(sp)
 80092ec:	103c200e 	bge	r2,zero,8008370 <__alt_data_end+0xf8008370>
 80092f0:	0005883a 	mov	r2,zero
 80092f4:	003c1e06 	br	8008370 <__alt_data_end+0xf8008370>
 80092f8:	d9002d17 	ldw	r4,180(sp)
 80092fc:	d9801e04 	addi	r6,sp,120
 8009300:	b80b883a 	mov	r5,r23
 8009304:	800ec0c0 	call	800ec0c <__sprint_r>
 8009308:	1039e81e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 800930c:	d8c02017 	ldw	r3,128(sp)
 8009310:	d8801f17 	ldw	r2,124(sp)
 8009314:	da000404 	addi	r8,sp,16
 8009318:	d9403317 	ldw	r5,204(sp)
 800931c:	10800044 	addi	r2,r2,1
 8009320:	44000015 	stw	r16,0(r8)
 8009324:	28c7883a 	add	r3,r5,r3
 8009328:	003b5b06 	br	8008098 <__alt_data_end+0xf8008098>
 800932c:	01020074 	movhi	r4,2049
 8009330:	2119c184 	addi	r4,r4,26374
 8009334:	d9003515 	stw	r4,212(sp)
 8009338:	003af206 	br	8007f04 <__alt_data_end+0xf8007f04>
 800933c:	013fffc4 	movi	r4,-1
 8009340:	003a0806 	br	8007b64 <__alt_data_end+0xf8007b64>
 8009344:	0023883a 	mov	r17,zero
 8009348:	003d9d06 	br	80089c0 <__alt_data_end+0xf80089c0>
 800934c:	d9002d17 	ldw	r4,180(sp)
 8009350:	d9801e04 	addi	r6,sp,120
 8009354:	b80b883a 	mov	r5,r23
 8009358:	800ec0c0 	call	800ec0c <__sprint_r>
 800935c:	1039d31e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8009360:	d8c02017 	ldw	r3,128(sp)
 8009364:	da000404 	addi	r8,sp,16
 8009368:	003d9406 	br	80089bc <__alt_data_end+0xf80089bc>
 800936c:	01020074 	movhi	r4,2049
 8009370:	2119bd84 	addi	r4,r4,26358
 8009374:	d9002c15 	stw	r4,176(sp)
 8009378:	d9002c17 	ldw	r4,176(sp)
 800937c:	1c47883a 	add	r3,r3,r17
 8009380:	10800044 	addi	r2,r2,1
 8009384:	41000015 	stw	r4,0(r8)
 8009388:	44400115 	stw	r17,4(r8)
 800938c:	d8c02015 	stw	r3,128(sp)
 8009390:	d8801f15 	stw	r2,124(sp)
 8009394:	010001c4 	movi	r4,7
 8009398:	20bfd716 	blt	r4,r2,80092f8 <__alt_data_end+0xf80092f8>
 800939c:	42000204 	addi	r8,r8,8
 80093a0:	003fdd06 	br	8009318 <__alt_data_end+0xf8009318>
 80093a4:	d9002d17 	ldw	r4,180(sp)
 80093a8:	d9801e04 	addi	r6,sp,120
 80093ac:	b80b883a 	mov	r5,r23
 80093b0:	800ec0c0 	call	800ec0c <__sprint_r>
 80093b4:	1039bd1e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80093b8:	d8802617 	ldw	r2,152(sp)
 80093bc:	d8c02017 	ldw	r3,128(sp)
 80093c0:	da000404 	addi	r8,sp,16
 80093c4:	003e1006 	br	8008c08 <__alt_data_end+0xf8008c08>
 80093c8:	00800044 	movi	r2,1
 80093cc:	10803fcc 	andi	r2,r2,255
 80093d0:	00c00044 	movi	r3,1
 80093d4:	10fa0d26 	beq	r2,r3,8007c0c <__alt_data_end+0xf8007c0c>
 80093d8:	00c00084 	movi	r3,2
 80093dc:	10fbaf26 	beq	r2,r3,800829c <__alt_data_end+0xf800829c>
 80093e0:	003a6d06 	br	8007d98 <__alt_data_end+0xf8007d98>
 80093e4:	01020074 	movhi	r4,2049
 80093e8:	2119c184 	addi	r4,r4,26374
 80093ec:	d9003515 	stw	r4,212(sp)
 80093f0:	003b5406 	br	8008144 <__alt_data_end+0xf8008144>
 80093f4:	d8802a17 	ldw	r2,168(sp)
 80093f8:	00c00184 	movi	r3,6
 80093fc:	1880012e 	bgeu	r3,r2,8009404 <___vfprintf_internal_r+0x1d68>
 8009400:	1805883a 	mov	r2,r3
 8009404:	d8802b15 	stw	r2,172(sp)
 8009408:	1000ef16 	blt	r2,zero,80097c8 <___vfprintf_internal_r+0x212c>
 800940c:	04020074 	movhi	r16,2049
 8009410:	d8802915 	stw	r2,164(sp)
 8009414:	dcc02e15 	stw	r19,184(sp)
 8009418:	d8002a15 	stw	zero,168(sp)
 800941c:	d8003215 	stw	zero,200(sp)
 8009420:	8419bb04 	addi	r16,r16,26348
 8009424:	0039883a 	mov	fp,zero
 8009428:	003a8006 	br	8007e2c <__alt_data_end+0xf8007e2c>
 800942c:	0021883a 	mov	r16,zero
 8009430:	003e0706 	br	8008c50 <__alt_data_end+0xf8008c50>
 8009434:	d9002d17 	ldw	r4,180(sp)
 8009438:	d9801e04 	addi	r6,sp,120
 800943c:	b80b883a 	mov	r5,r23
 8009440:	800ec0c0 	call	800ec0c <__sprint_r>
 8009444:	1039991e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 8009448:	d8802617 	ldw	r2,152(sp)
 800944c:	d9403317 	ldw	r5,204(sp)
 8009450:	d8c02017 	ldw	r3,128(sp)
 8009454:	da000404 	addi	r8,sp,16
 8009458:	2885c83a 	sub	r2,r5,r2
 800945c:	003dfb06 	br	8008c4c <__alt_data_end+0xf8008c4c>
 8009460:	9080004c 	andi	r2,r18,1
 8009464:	103e8f1e 	bne	r2,zero,8008ea4 <__alt_data_end+0xf8008ea4>
 8009468:	d8802117 	ldw	r2,132(sp)
 800946c:	003e9e06 	br	8008ee8 <__alt_data_end+0xf8008ee8>
 8009470:	1025883a 	mov	r18,r2
 8009474:	0039883a 	mov	fp,zero
 8009478:	00800084 	movi	r2,2
 800947c:	003fd306 	br	80093cc <__alt_data_end+0xf80093cc>
 8009480:	07000b44 	movi	fp,45
 8009484:	df002785 	stb	fp,158(sp)
 8009488:	003a1b06 	br	8007cf8 <__alt_data_end+0xf8007cf8>
 800948c:	00c00b44 	movi	r3,45
 8009490:	d8c02785 	stb	r3,158(sp)
 8009494:	d8802915 	stw	r2,164(sp)
 8009498:	dc802c17 	ldw	r18,176(sp)
 800949c:	d8002a15 	stw	zero,168(sp)
 80094a0:	07000b44 	movi	fp,45
 80094a4:	003a5e06 	br	8007e20 <__alt_data_end+0xf8007e20>
 80094a8:	04020074 	movhi	r16,2049
 80094ac:	8419b004 	addi	r16,r16,26304
 80094b0:	003f4706 	br	80091d0 <__alt_data_end+0xf80091d0>
 80094b4:	d9002e17 	ldw	r4,184(sp)
 80094b8:	d9402f17 	ldw	r5,188(sp)
 80094bc:	20800017 	ldw	r2,0(r4)
 80094c0:	21000104 	addi	r4,r4,4
 80094c4:	d9002e15 	stw	r4,184(sp)
 80094c8:	11400015 	stw	r5,0(r2)
 80094cc:	0038ab06 	br	800777c <__alt_data_end+0xf800777c>
 80094d0:	dd802617 	ldw	r22,152(sp)
 80094d4:	00bfff44 	movi	r2,-3
 80094d8:	b0801c16 	blt	r22,r2,800954c <___vfprintf_internal_r+0x1eb0>
 80094dc:	d9402a17 	ldw	r5,168(sp)
 80094e0:	2d801a16 	blt	r5,r22,800954c <___vfprintf_internal_r+0x1eb0>
 80094e4:	dd803215 	stw	r22,200(sp)
 80094e8:	003e8906 	br	8008f10 <__alt_data_end+0xf8008f10>
 80094ec:	01020074 	movhi	r4,2049
 80094f0:	2119bd84 	addi	r4,r4,26358
 80094f4:	d9002c15 	stw	r4,176(sp)
 80094f8:	003c9106 	br	8008740 <__alt_data_end+0xf8008740>
 80094fc:	e005883a 	mov	r2,fp
 8009500:	003e7906 	br	8008ee8 <__alt_data_end+0xf8008ee8>
 8009504:	d9002a17 	ldw	r4,168(sp)
 8009508:	df002783 	ldbu	fp,158(sp)
 800950c:	dcc02e15 	stw	r19,184(sp)
 8009510:	d9002915 	stw	r4,164(sp)
 8009514:	d9002b15 	stw	r4,172(sp)
 8009518:	d8002a15 	stw	zero,168(sp)
 800951c:	d8003215 	stw	zero,200(sp)
 8009520:	003a3b06 	br	8007e10 <__alt_data_end+0xf8007e10>
 8009524:	9080004c 	andi	r2,r18,1
 8009528:	0039883a 	mov	fp,zero
 800952c:	10000426 	beq	r2,zero,8009540 <___vfprintf_internal_r+0x1ea4>
 8009530:	00800c04 	movi	r2,48
 8009534:	dc001dc4 	addi	r16,sp,119
 8009538:	d8801dc5 	stb	r2,119(sp)
 800953c:	003b6406 	br	80082d0 <__alt_data_end+0xf80082d0>
 8009540:	d8002b15 	stw	zero,172(sp)
 8009544:	dc001e04 	addi	r16,sp,120
 8009548:	003a2b06 	br	8007df8 <__alt_data_end+0xf8007df8>
 800954c:	8c7fff84 	addi	r17,r17,-2
 8009550:	b5bfffc4 	addi	r22,r22,-1
 8009554:	dd802615 	stw	r22,152(sp)
 8009558:	dc4022c5 	stb	r17,139(sp)
 800955c:	b000bf16 	blt	r22,zero,800985c <___vfprintf_internal_r+0x21c0>
 8009560:	00800ac4 	movi	r2,43
 8009564:	d8802305 	stb	r2,140(sp)
 8009568:	00800244 	movi	r2,9
 800956c:	15807016 	blt	r2,r22,8009730 <___vfprintf_internal_r+0x2094>
 8009570:	00800c04 	movi	r2,48
 8009574:	b5800c04 	addi	r22,r22,48
 8009578:	d8802345 	stb	r2,141(sp)
 800957c:	dd802385 	stb	r22,142(sp)
 8009580:	d88023c4 	addi	r2,sp,143
 8009584:	df0022c4 	addi	fp,sp,139
 8009588:	d8c03317 	ldw	r3,204(sp)
 800958c:	1739c83a 	sub	fp,r2,fp
 8009590:	d9003317 	ldw	r4,204(sp)
 8009594:	e0c7883a 	add	r3,fp,r3
 8009598:	df003a15 	stw	fp,232(sp)
 800959c:	d8c02b15 	stw	r3,172(sp)
 80095a0:	00800044 	movi	r2,1
 80095a4:	1100b30e 	bge	r2,r4,8009874 <___vfprintf_internal_r+0x21d8>
 80095a8:	d8c02b17 	ldw	r3,172(sp)
 80095ac:	18c00044 	addi	r3,r3,1
 80095b0:	d8c02b15 	stw	r3,172(sp)
 80095b4:	1805883a 	mov	r2,r3
 80095b8:	1800ac16 	blt	r3,zero,800986c <___vfprintf_internal_r+0x21d0>
 80095bc:	d8003215 	stw	zero,200(sp)
 80095c0:	003e5d06 	br	8008f38 <__alt_data_end+0xf8008f38>
 80095c4:	d9002d17 	ldw	r4,180(sp)
 80095c8:	d9801e04 	addi	r6,sp,120
 80095cc:	b80b883a 	mov	r5,r23
 80095d0:	800ec0c0 	call	800ec0c <__sprint_r>
 80095d4:	1039351e 	bne	r2,zero,8007aac <__alt_data_end+0xf8007aac>
 80095d8:	dc402617 	ldw	r17,152(sp)
 80095dc:	d8c02017 	ldw	r3,128(sp)
 80095e0:	d8801f17 	ldw	r2,124(sp)
 80095e4:	da000404 	addi	r8,sp,16
 80095e8:	003ed606 	br	8009144 <__alt_data_end+0xf8009144>
 80095ec:	182b883a 	mov	r21,r3
 80095f0:	d8002a15 	stw	zero,168(sp)
 80095f4:	00388c06 	br	8007828 <__alt_data_end+0xf8007828>
 80095f8:	d8802a17 	ldw	r2,168(sp)
 80095fc:	103e071e 	bne	r2,zero,8008e1c <__alt_data_end+0xf8008e1c>
 8009600:	dc002a15 	stw	r16,168(sp)
 8009604:	003e0506 	br	8008e1c <__alt_data_end+0xf8008e1c>
 8009608:	d9002a17 	ldw	r4,168(sp)
 800960c:	20c00044 	addi	r3,r4,1
 8009610:	003e0f06 	br	8008e50 <__alt_data_end+0xf8008e50>
 8009614:	01400184 	movi	r5,6
 8009618:	d9402a15 	stw	r5,168(sp)
 800961c:	003dff06 	br	8008e1c <__alt_data_end+0xf8008e1c>
 8009620:	d8802104 	addi	r2,sp,132
 8009624:	d8800315 	stw	r2,12(sp)
 8009628:	d8802504 	addi	r2,sp,148
 800962c:	d8800215 	stw	r2,8(sp)
 8009630:	d8802604 	addi	r2,sp,152
 8009634:	d8800115 	stw	r2,4(sp)
 8009638:	d8802a17 	ldw	r2,168(sp)
 800963c:	d9403617 	ldw	r5,216(sp)
 8009640:	d9002d17 	ldw	r4,180(sp)
 8009644:	d8800015 	stw	r2,0(sp)
 8009648:	01c000c4 	movi	r7,3
 800964c:	980d883a 	mov	r6,r19
 8009650:	da003d15 	stw	r8,244(sp)
 8009654:	8009dcc0 	call	8009dcc <_dtoa_r>
 8009658:	d8c02a17 	ldw	r3,168(sp)
 800965c:	da003d17 	ldw	r8,244(sp)
 8009660:	1021883a 	mov	r16,r2
 8009664:	10f9883a 	add	fp,r2,r3
 8009668:	81000007 	ldb	r4,0(r16)
 800966c:	00800c04 	movi	r2,48
 8009670:	20805e26 	beq	r4,r2,80097ec <___vfprintf_internal_r+0x2150>
 8009674:	d8c02617 	ldw	r3,152(sp)
 8009678:	e0f9883a 	add	fp,fp,r3
 800967c:	003e0a06 	br	8008ea8 <__alt_data_end+0xf8008ea8>
 8009680:	00c00b44 	movi	r3,45
 8009684:	24e0003c 	xorhi	r19,r4,32768
 8009688:	d8c02905 	stb	r3,164(sp)
 800968c:	003de906 	br	8008e34 <__alt_data_end+0xf8008e34>
 8009690:	d8c03217 	ldw	r3,200(sp)
 8009694:	00c07a0e 	bge	zero,r3,8009880 <___vfprintf_internal_r+0x21e4>
 8009698:	00800044 	movi	r2,1
 800969c:	d9003317 	ldw	r4,204(sp)
 80096a0:	1105883a 	add	r2,r2,r4
 80096a4:	d8802b15 	stw	r2,172(sp)
 80096a8:	10004e16 	blt	r2,zero,80097e4 <___vfprintf_internal_r+0x2148>
 80096ac:	044019c4 	movi	r17,103
 80096b0:	003e2106 	br	8008f38 <__alt_data_end+0xf8008f38>
 80096b4:	d9002a17 	ldw	r4,168(sp)
 80096b8:	d8802104 	addi	r2,sp,132
 80096bc:	d8800315 	stw	r2,12(sp)
 80096c0:	d9000015 	stw	r4,0(sp)
 80096c4:	d8802504 	addi	r2,sp,148
 80096c8:	d9403617 	ldw	r5,216(sp)
 80096cc:	d9002d17 	ldw	r4,180(sp)
 80096d0:	d8800215 	stw	r2,8(sp)
 80096d4:	d8802604 	addi	r2,sp,152
 80096d8:	d8800115 	stw	r2,4(sp)
 80096dc:	01c000c4 	movi	r7,3
 80096e0:	980d883a 	mov	r6,r19
 80096e4:	da003d15 	stw	r8,244(sp)
 80096e8:	8009dcc0 	call	8009dcc <_dtoa_r>
 80096ec:	d8c02a17 	ldw	r3,168(sp)
 80096f0:	da003d17 	ldw	r8,244(sp)
 80096f4:	1021883a 	mov	r16,r2
 80096f8:	00801184 	movi	r2,70
 80096fc:	80f9883a 	add	fp,r16,r3
 8009700:	88bfd926 	beq	r17,r2,8009668 <__alt_data_end+0xf8009668>
 8009704:	003de806 	br	8008ea8 <__alt_data_end+0xf8008ea8>
 8009708:	d9002a17 	ldw	r4,168(sp)
 800970c:	00c04d0e 	bge	zero,r3,8009844 <___vfprintf_internal_r+0x21a8>
 8009710:	2000441e 	bne	r4,zero,8009824 <___vfprintf_internal_r+0x2188>
 8009714:	9480004c 	andi	r18,r18,1
 8009718:	9000421e 	bne	r18,zero,8009824 <___vfprintf_internal_r+0x2188>
 800971c:	1805883a 	mov	r2,r3
 8009720:	18006f16 	blt	r3,zero,80098e0 <___vfprintf_internal_r+0x2244>
 8009724:	d8c03217 	ldw	r3,200(sp)
 8009728:	d8c02b15 	stw	r3,172(sp)
 800972c:	003e0206 	br	8008f38 <__alt_data_end+0xf8008f38>
 8009730:	df0022c4 	addi	fp,sp,139
 8009734:	dc002a15 	stw	r16,168(sp)
 8009738:	4027883a 	mov	r19,r8
 800973c:	e021883a 	mov	r16,fp
 8009740:	b009883a 	mov	r4,r22
 8009744:	01400284 	movi	r5,10
 8009748:	80070fc0 	call	80070fc <__modsi3>
 800974c:	10800c04 	addi	r2,r2,48
 8009750:	843fffc4 	addi	r16,r16,-1
 8009754:	b009883a 	mov	r4,r22
 8009758:	01400284 	movi	r5,10
 800975c:	80800005 	stb	r2,0(r16)
 8009760:	80070780 	call	8007078 <__divsi3>
 8009764:	102d883a 	mov	r22,r2
 8009768:	00800244 	movi	r2,9
 800976c:	15bff416 	blt	r2,r22,8009740 <__alt_data_end+0xf8009740>
 8009770:	9811883a 	mov	r8,r19
 8009774:	b0800c04 	addi	r2,r22,48
 8009778:	8027883a 	mov	r19,r16
 800977c:	997fffc4 	addi	r5,r19,-1
 8009780:	98bfffc5 	stb	r2,-1(r19)
 8009784:	dc002a17 	ldw	r16,168(sp)
 8009788:	2f006d2e 	bgeu	r5,fp,8009940 <___vfprintf_internal_r+0x22a4>
 800978c:	d9c02384 	addi	r7,sp,142
 8009790:	3ccfc83a 	sub	r7,r7,r19
 8009794:	d9002344 	addi	r4,sp,141
 8009798:	e1cf883a 	add	r7,fp,r7
 800979c:	00000106 	br	80097a4 <___vfprintf_internal_r+0x2108>
 80097a0:	28800003 	ldbu	r2,0(r5)
 80097a4:	20800005 	stb	r2,0(r4)
 80097a8:	21000044 	addi	r4,r4,1
 80097ac:	29400044 	addi	r5,r5,1
 80097b0:	393ffb1e 	bne	r7,r4,80097a0 <__alt_data_end+0xf80097a0>
 80097b4:	d8802304 	addi	r2,sp,140
 80097b8:	14c5c83a 	sub	r2,r2,r19
 80097bc:	d8c02344 	addi	r3,sp,141
 80097c0:	1885883a 	add	r2,r3,r2
 80097c4:	003f7006 	br	8009588 <__alt_data_end+0xf8009588>
 80097c8:	0005883a 	mov	r2,zero
 80097cc:	003f0f06 	br	800940c <__alt_data_end+0xf800940c>
 80097d0:	d8c03217 	ldw	r3,200(sp)
 80097d4:	18c00044 	addi	r3,r3,1
 80097d8:	d8c02b15 	stw	r3,172(sp)
 80097dc:	1805883a 	mov	r2,r3
 80097e0:	183fb20e 	bge	r3,zero,80096ac <__alt_data_end+0xf80096ac>
 80097e4:	0005883a 	mov	r2,zero
 80097e8:	003fb006 	br	80096ac <__alt_data_end+0xf80096ac>
 80097ec:	d9003617 	ldw	r4,216(sp)
 80097f0:	000d883a 	mov	r6,zero
 80097f4:	000f883a 	mov	r7,zero
 80097f8:	980b883a 	mov	r5,r19
 80097fc:	d8c03c15 	stw	r3,240(sp)
 8009800:	da003d15 	stw	r8,244(sp)
 8009804:	80129900 	call	8012990 <__eqdf2>
 8009808:	d8c03c17 	ldw	r3,240(sp)
 800980c:	da003d17 	ldw	r8,244(sp)
 8009810:	103f9826 	beq	r2,zero,8009674 <__alt_data_end+0xf8009674>
 8009814:	00800044 	movi	r2,1
 8009818:	10c7c83a 	sub	r3,r2,r3
 800981c:	d8c02615 	stw	r3,152(sp)
 8009820:	003f9506 	br	8009678 <__alt_data_end+0xf8009678>
 8009824:	d9002a17 	ldw	r4,168(sp)
 8009828:	d8c03217 	ldw	r3,200(sp)
 800982c:	20800044 	addi	r2,r4,1
 8009830:	1885883a 	add	r2,r3,r2
 8009834:	d8802b15 	stw	r2,172(sp)
 8009838:	103dbf0e 	bge	r2,zero,8008f38 <__alt_data_end+0xf8008f38>
 800983c:	0005883a 	mov	r2,zero
 8009840:	003dbd06 	br	8008f38 <__alt_data_end+0xf8008f38>
 8009844:	2000201e 	bne	r4,zero,80098c8 <___vfprintf_internal_r+0x222c>
 8009848:	9480004c 	andi	r18,r18,1
 800984c:	90001e1e 	bne	r18,zero,80098c8 <___vfprintf_internal_r+0x222c>
 8009850:	00800044 	movi	r2,1
 8009854:	d8802b15 	stw	r2,172(sp)
 8009858:	003db706 	br	8008f38 <__alt_data_end+0xf8008f38>
 800985c:	00800b44 	movi	r2,45
 8009860:	05adc83a 	sub	r22,zero,r22
 8009864:	d8802305 	stb	r2,140(sp)
 8009868:	003f3f06 	br	8009568 <__alt_data_end+0xf8009568>
 800986c:	0005883a 	mov	r2,zero
 8009870:	003f5206 	br	80095bc <__alt_data_end+0xf80095bc>
 8009874:	90a4703a 	and	r18,r18,r2
 8009878:	903f4e26 	beq	r18,zero,80095b4 <__alt_data_end+0xf80095b4>
 800987c:	003f4a06 	br	80095a8 <__alt_data_end+0xf80095a8>
 8009880:	00800084 	movi	r2,2
 8009884:	10c5c83a 	sub	r2,r2,r3
 8009888:	003f8406 	br	800969c <__alt_data_end+0xf800969c>
 800988c:	d9402e17 	ldw	r5,184(sp)
 8009890:	d9002e17 	ldw	r4,184(sp)
 8009894:	ac400043 	ldbu	r17,1(r21)
 8009898:	29400017 	ldw	r5,0(r5)
 800989c:	20800104 	addi	r2,r4,4
 80098a0:	d8802e15 	stw	r2,184(sp)
 80098a4:	d9402a15 	stw	r5,168(sp)
 80098a8:	182b883a 	mov	r21,r3
 80098ac:	283e7b0e 	bge	r5,zero,800929c <__alt_data_end+0xf800929c>
 80098b0:	8c403fcc 	andi	r17,r17,255
 80098b4:	017fffc4 	movi	r5,-1
 80098b8:	8c40201c 	xori	r17,r17,128
 80098bc:	d9402a15 	stw	r5,168(sp)
 80098c0:	8c7fe004 	addi	r17,r17,-128
 80098c4:	0037d706 	br	8007824 <__alt_data_end+0xf8007824>
 80098c8:	d8c02a17 	ldw	r3,168(sp)
 80098cc:	18c00084 	addi	r3,r3,2
 80098d0:	d8c02b15 	stw	r3,172(sp)
 80098d4:	1805883a 	mov	r2,r3
 80098d8:	183d970e 	bge	r3,zero,8008f38 <__alt_data_end+0xf8008f38>
 80098dc:	003fd706 	br	800983c <__alt_data_end+0xf800983c>
 80098e0:	0005883a 	mov	r2,zero
 80098e4:	003f8f06 	br	8009724 <__alt_data_end+0xf8009724>
 80098e8:	9080004c 	andi	r2,r18,1
 80098ec:	103f821e 	bne	r2,zero,80096f8 <__alt_data_end+0xf80096f8>
 80098f0:	d8802117 	ldw	r2,132(sp)
 80098f4:	1405c83a 	sub	r2,r2,r16
 80098f8:	d8803315 	stw	r2,204(sp)
 80098fc:	b47ef426 	beq	r22,r17,80094d0 <__alt_data_end+0xf80094d0>
 8009900:	dd802617 	ldw	r22,152(sp)
 8009904:	003f1206 	br	8009550 <__alt_data_end+0xf8009550>
 8009908:	d8c02b03 	ldbu	r3,172(sp)
 800990c:	d8c02785 	stb	r3,158(sp)
 8009910:	0038df06 	br	8007c90 <__alt_data_end+0xf8007c90>
 8009914:	d8c02b03 	ldbu	r3,172(sp)
 8009918:	d8c02785 	stb	r3,158(sp)
 800991c:	0038aa06 	br	8007bc8 <__alt_data_end+0xf8007bc8>
 8009920:	d8c02b03 	ldbu	r3,172(sp)
 8009924:	d8c02785 	stb	r3,158(sp)
 8009928:	003a4306 	br	8008238 <__alt_data_end+0xf8008238>
 800992c:	d8c02b03 	ldbu	r3,172(sp)
 8009930:	d8c02785 	stb	r3,158(sp)
 8009934:	003af506 	br	800850c <__alt_data_end+0xf800850c>
 8009938:	0005883a 	mov	r2,zero
 800993c:	003d7b06 	br	8008f2c <__alt_data_end+0xf8008f2c>
 8009940:	d8802344 	addi	r2,sp,141
 8009944:	003f1006 	br	8009588 <__alt_data_end+0xf8009588>
 8009948:	d8c02b03 	ldbu	r3,172(sp)
 800994c:	d8c02785 	stb	r3,158(sp)
 8009950:	0038fd06 	br	8007d48 <__alt_data_end+0xf8007d48>
 8009954:	d8c02b03 	ldbu	r3,172(sp)
 8009958:	d8c02785 	stb	r3,158(sp)
 800995c:	003a9706 	br	80083bc <__alt_data_end+0xf80083bc>
 8009960:	d8c02b03 	ldbu	r3,172(sp)
 8009964:	d8c02785 	stb	r3,158(sp)
 8009968:	003a1806 	br	80081cc <__alt_data_end+0xf80081cc>
 800996c:	d8c02b03 	ldbu	r3,172(sp)
 8009970:	d8c02785 	stb	r3,158(sp)
 8009974:	003abe06 	br	8008470 <__alt_data_end+0xf8008470>

08009978 <__vfprintf_internal>:
 8009978:	008200b4 	movhi	r2,2050
 800997c:	10a11504 	addi	r2,r2,-31660
 8009980:	300f883a 	mov	r7,r6
 8009984:	280d883a 	mov	r6,r5
 8009988:	200b883a 	mov	r5,r4
 800998c:	11000017 	ldw	r4,0(r2)
 8009990:	800769c1 	jmpi	800769c <___vfprintf_internal_r>

08009994 <__sbprintf>:
 8009994:	2880030b 	ldhu	r2,12(r5)
 8009998:	2ac01917 	ldw	r11,100(r5)
 800999c:	2a80038b 	ldhu	r10,14(r5)
 80099a0:	2a400717 	ldw	r9,28(r5)
 80099a4:	2a000917 	ldw	r8,36(r5)
 80099a8:	defee204 	addi	sp,sp,-1144
 80099ac:	00c10004 	movi	r3,1024
 80099b0:	dc011a15 	stw	r16,1128(sp)
 80099b4:	10bfff4c 	andi	r2,r2,65533
 80099b8:	2821883a 	mov	r16,r5
 80099bc:	d8cb883a 	add	r5,sp,r3
 80099c0:	dc811c15 	stw	r18,1136(sp)
 80099c4:	dc411b15 	stw	r17,1132(sp)
 80099c8:	dfc11d15 	stw	ra,1140(sp)
 80099cc:	2025883a 	mov	r18,r4
 80099d0:	d881030d 	sth	r2,1036(sp)
 80099d4:	dac11915 	stw	r11,1124(sp)
 80099d8:	da81038d 	sth	r10,1038(sp)
 80099dc:	da410715 	stw	r9,1052(sp)
 80099e0:	da010915 	stw	r8,1060(sp)
 80099e4:	dec10015 	stw	sp,1024(sp)
 80099e8:	dec10415 	stw	sp,1040(sp)
 80099ec:	d8c10215 	stw	r3,1032(sp)
 80099f0:	d8c10515 	stw	r3,1044(sp)
 80099f4:	d8010615 	stw	zero,1048(sp)
 80099f8:	800769c0 	call	800769c <___vfprintf_internal_r>
 80099fc:	1023883a 	mov	r17,r2
 8009a00:	10000416 	blt	r2,zero,8009a14 <__sbprintf+0x80>
 8009a04:	d9410004 	addi	r5,sp,1024
 8009a08:	9009883a 	mov	r4,r18
 8009a0c:	800b6700 	call	800b670 <_fflush_r>
 8009a10:	10000d1e 	bne	r2,zero,8009a48 <__sbprintf+0xb4>
 8009a14:	d881030b 	ldhu	r2,1036(sp)
 8009a18:	1080100c 	andi	r2,r2,64
 8009a1c:	10000326 	beq	r2,zero,8009a2c <__sbprintf+0x98>
 8009a20:	8080030b 	ldhu	r2,12(r16)
 8009a24:	10801014 	ori	r2,r2,64
 8009a28:	8080030d 	sth	r2,12(r16)
 8009a2c:	8805883a 	mov	r2,r17
 8009a30:	dfc11d17 	ldw	ra,1140(sp)
 8009a34:	dc811c17 	ldw	r18,1136(sp)
 8009a38:	dc411b17 	ldw	r17,1132(sp)
 8009a3c:	dc011a17 	ldw	r16,1128(sp)
 8009a40:	dec11e04 	addi	sp,sp,1144
 8009a44:	f800283a 	ret
 8009a48:	047fffc4 	movi	r17,-1
 8009a4c:	003ff106 	br	8009a14 <__alt_data_end+0xf8009a14>

08009a50 <__swsetup_r>:
 8009a50:	008200b4 	movhi	r2,2050
 8009a54:	defffd04 	addi	sp,sp,-12
 8009a58:	10a11504 	addi	r2,r2,-31660
 8009a5c:	dc400115 	stw	r17,4(sp)
 8009a60:	2023883a 	mov	r17,r4
 8009a64:	11000017 	ldw	r4,0(r2)
 8009a68:	dc000015 	stw	r16,0(sp)
 8009a6c:	dfc00215 	stw	ra,8(sp)
 8009a70:	2821883a 	mov	r16,r5
 8009a74:	20000226 	beq	r4,zero,8009a80 <__swsetup_r+0x30>
 8009a78:	20800e17 	ldw	r2,56(r4)
 8009a7c:	10003126 	beq	r2,zero,8009b44 <__swsetup_r+0xf4>
 8009a80:	8080030b 	ldhu	r2,12(r16)
 8009a84:	10c0020c 	andi	r3,r2,8
 8009a88:	1009883a 	mov	r4,r2
 8009a8c:	18000f26 	beq	r3,zero,8009acc <__swsetup_r+0x7c>
 8009a90:	80c00417 	ldw	r3,16(r16)
 8009a94:	18001526 	beq	r3,zero,8009aec <__swsetup_r+0x9c>
 8009a98:	1100004c 	andi	r4,r2,1
 8009a9c:	20001c1e 	bne	r4,zero,8009b10 <__swsetup_r+0xc0>
 8009aa0:	1080008c 	andi	r2,r2,2
 8009aa4:	1000291e 	bne	r2,zero,8009b4c <__swsetup_r+0xfc>
 8009aa8:	80800517 	ldw	r2,20(r16)
 8009aac:	80800215 	stw	r2,8(r16)
 8009ab0:	18001c26 	beq	r3,zero,8009b24 <__swsetup_r+0xd4>
 8009ab4:	0005883a 	mov	r2,zero
 8009ab8:	dfc00217 	ldw	ra,8(sp)
 8009abc:	dc400117 	ldw	r17,4(sp)
 8009ac0:	dc000017 	ldw	r16,0(sp)
 8009ac4:	dec00304 	addi	sp,sp,12
 8009ac8:	f800283a 	ret
 8009acc:	2080040c 	andi	r2,r4,16
 8009ad0:	10002e26 	beq	r2,zero,8009b8c <__swsetup_r+0x13c>
 8009ad4:	2080010c 	andi	r2,r4,4
 8009ad8:	10001e1e 	bne	r2,zero,8009b54 <__swsetup_r+0x104>
 8009adc:	80c00417 	ldw	r3,16(r16)
 8009ae0:	20800214 	ori	r2,r4,8
 8009ae4:	8080030d 	sth	r2,12(r16)
 8009ae8:	183feb1e 	bne	r3,zero,8009a98 <__alt_data_end+0xf8009a98>
 8009aec:	1100a00c 	andi	r4,r2,640
 8009af0:	01408004 	movi	r5,512
 8009af4:	217fe826 	beq	r4,r5,8009a98 <__alt_data_end+0xf8009a98>
 8009af8:	800b883a 	mov	r5,r16
 8009afc:	8809883a 	mov	r4,r17
 8009b00:	800c60c0 	call	800c60c <__smakebuf_r>
 8009b04:	8080030b 	ldhu	r2,12(r16)
 8009b08:	80c00417 	ldw	r3,16(r16)
 8009b0c:	003fe206 	br	8009a98 <__alt_data_end+0xf8009a98>
 8009b10:	80800517 	ldw	r2,20(r16)
 8009b14:	80000215 	stw	zero,8(r16)
 8009b18:	0085c83a 	sub	r2,zero,r2
 8009b1c:	80800615 	stw	r2,24(r16)
 8009b20:	183fe41e 	bne	r3,zero,8009ab4 <__alt_data_end+0xf8009ab4>
 8009b24:	80c0030b 	ldhu	r3,12(r16)
 8009b28:	0005883a 	mov	r2,zero
 8009b2c:	1900200c 	andi	r4,r3,128
 8009b30:	203fe126 	beq	r4,zero,8009ab8 <__alt_data_end+0xf8009ab8>
 8009b34:	18c01014 	ori	r3,r3,64
 8009b38:	80c0030d 	sth	r3,12(r16)
 8009b3c:	00bfffc4 	movi	r2,-1
 8009b40:	003fdd06 	br	8009ab8 <__alt_data_end+0xf8009ab8>
 8009b44:	800ba5c0 	call	800ba5c <__sinit>
 8009b48:	003fcd06 	br	8009a80 <__alt_data_end+0xf8009a80>
 8009b4c:	0005883a 	mov	r2,zero
 8009b50:	003fd606 	br	8009aac <__alt_data_end+0xf8009aac>
 8009b54:	81400c17 	ldw	r5,48(r16)
 8009b58:	28000626 	beq	r5,zero,8009b74 <__swsetup_r+0x124>
 8009b5c:	80801004 	addi	r2,r16,64
 8009b60:	28800326 	beq	r5,r2,8009b70 <__swsetup_r+0x120>
 8009b64:	8809883a 	mov	r4,r17
 8009b68:	800bbd00 	call	800bbd0 <_free_r>
 8009b6c:	8100030b 	ldhu	r4,12(r16)
 8009b70:	80000c15 	stw	zero,48(r16)
 8009b74:	80c00417 	ldw	r3,16(r16)
 8009b78:	00bff6c4 	movi	r2,-37
 8009b7c:	1108703a 	and	r4,r2,r4
 8009b80:	80000115 	stw	zero,4(r16)
 8009b84:	80c00015 	stw	r3,0(r16)
 8009b88:	003fd506 	br	8009ae0 <__alt_data_end+0xf8009ae0>
 8009b8c:	00800244 	movi	r2,9
 8009b90:	88800015 	stw	r2,0(r17)
 8009b94:	20801014 	ori	r2,r4,64
 8009b98:	8080030d 	sth	r2,12(r16)
 8009b9c:	00bfffc4 	movi	r2,-1
 8009ba0:	003fc506 	br	8009ab8 <__alt_data_end+0xf8009ab8>

08009ba4 <quorem>:
 8009ba4:	defff204 	addi	sp,sp,-56
 8009ba8:	ddc00b15 	stw	r23,44(sp)
 8009bac:	20800417 	ldw	r2,16(r4)
 8009bb0:	2dc00417 	ldw	r23,16(r5)
 8009bb4:	dfc00d15 	stw	ra,52(sp)
 8009bb8:	df000c15 	stw	fp,48(sp)
 8009bbc:	dd800a15 	stw	r22,40(sp)
 8009bc0:	dd400915 	stw	r21,36(sp)
 8009bc4:	dd000815 	stw	r20,32(sp)
 8009bc8:	dcc00715 	stw	r19,28(sp)
 8009bcc:	dc800615 	stw	r18,24(sp)
 8009bd0:	dc400515 	stw	r17,20(sp)
 8009bd4:	dc000415 	stw	r16,16(sp)
 8009bd8:	15c07a16 	blt	r2,r23,8009dc4 <quorem+0x220>
 8009bdc:	bdffffc4 	addi	r23,r23,-1
 8009be0:	bde9883a 	add	r20,r23,r23
 8009be4:	28c00504 	addi	r3,r5,20
 8009be8:	a529883a 	add	r20,r20,r20
 8009bec:	1d39883a 	add	fp,r3,r20
 8009bf0:	24c00504 	addi	r19,r4,20
 8009bf4:	d9400215 	stw	r5,8(sp)
 8009bf8:	9d29883a 	add	r20,r19,r20
 8009bfc:	e1400017 	ldw	r5,0(fp)
 8009c00:	d9000015 	stw	r4,0(sp)
 8009c04:	a1000017 	ldw	r4,0(r20)
 8009c08:	29400044 	addi	r5,r5,1
 8009c0c:	d8c00115 	stw	r3,4(sp)
 8009c10:	dd000315 	stw	r20,12(sp)
 8009c14:	80071700 	call	8007170 <__udivsi3>
 8009c18:	1025883a 	mov	r18,r2
 8009c1c:	10003026 	beq	r2,zero,8009ce0 <quorem+0x13c>
 8009c20:	dc400117 	ldw	r17,4(sp)
 8009c24:	9829883a 	mov	r20,r19
 8009c28:	002d883a 	mov	r22,zero
 8009c2c:	0021883a 	mov	r16,zero
 8009c30:	8d400017 	ldw	r21,0(r17)
 8009c34:	900b883a 	mov	r5,r18
 8009c38:	8c400104 	addi	r17,r17,4
 8009c3c:	a93fffcc 	andi	r4,r21,65535
 8009c40:	800722c0 	call	800722c <__mulsi3>
 8009c44:	a808d43a 	srli	r4,r21,16
 8009c48:	900b883a 	mov	r5,r18
 8009c4c:	15ad883a 	add	r22,r2,r22
 8009c50:	800722c0 	call	800722c <__mulsi3>
 8009c54:	a1000017 	ldw	r4,0(r20)
 8009c58:	b00cd43a 	srli	r6,r22,16
 8009c5c:	b0ffffcc 	andi	r3,r22,65535
 8009c60:	217fffcc 	andi	r5,r4,65535
 8009c64:	2c21883a 	add	r16,r5,r16
 8009c68:	80c7c83a 	sub	r3,r16,r3
 8009c6c:	2008d43a 	srli	r4,r4,16
 8009c70:	1185883a 	add	r2,r2,r6
 8009c74:	1821d43a 	srai	r16,r3,16
 8009c78:	117fffcc 	andi	r5,r2,65535
 8009c7c:	2149c83a 	sub	r4,r4,r5
 8009c80:	2421883a 	add	r16,r4,r16
 8009c84:	8008943a 	slli	r4,r16,16
 8009c88:	18ffffcc 	andi	r3,r3,65535
 8009c8c:	102cd43a 	srli	r22,r2,16
 8009c90:	20c8b03a 	or	r4,r4,r3
 8009c94:	a1000015 	stw	r4,0(r20)
 8009c98:	8021d43a 	srai	r16,r16,16
 8009c9c:	a5000104 	addi	r20,r20,4
 8009ca0:	e47fe32e 	bgeu	fp,r17,8009c30 <__alt_data_end+0xf8009c30>
 8009ca4:	d8c00317 	ldw	r3,12(sp)
 8009ca8:	18800017 	ldw	r2,0(r3)
 8009cac:	10000c1e 	bne	r2,zero,8009ce0 <quorem+0x13c>
 8009cb0:	18bfff04 	addi	r2,r3,-4
 8009cb4:	9880082e 	bgeu	r19,r2,8009cd8 <quorem+0x134>
 8009cb8:	18ffff17 	ldw	r3,-4(r3)
 8009cbc:	18000326 	beq	r3,zero,8009ccc <quorem+0x128>
 8009cc0:	00000506 	br	8009cd8 <quorem+0x134>
 8009cc4:	10c00017 	ldw	r3,0(r2)
 8009cc8:	1800031e 	bne	r3,zero,8009cd8 <quorem+0x134>
 8009ccc:	10bfff04 	addi	r2,r2,-4
 8009cd0:	bdffffc4 	addi	r23,r23,-1
 8009cd4:	98bffb36 	bltu	r19,r2,8009cc4 <__alt_data_end+0xf8009cc4>
 8009cd8:	d8c00017 	ldw	r3,0(sp)
 8009cdc:	1dc00415 	stw	r23,16(r3)
 8009ce0:	d9400217 	ldw	r5,8(sp)
 8009ce4:	d9000017 	ldw	r4,0(sp)
 8009ce8:	800db980 	call	800db98 <__mcmp>
 8009cec:	10002816 	blt	r2,zero,8009d90 <quorem+0x1ec>
 8009cf0:	dc400117 	ldw	r17,4(sp)
 8009cf4:	94800044 	addi	r18,r18,1
 8009cf8:	980d883a 	mov	r6,r19
 8009cfc:	0007883a 	mov	r3,zero
 8009d00:	31000017 	ldw	r4,0(r6)
 8009d04:	89400017 	ldw	r5,0(r17)
 8009d08:	31800104 	addi	r6,r6,4
 8009d0c:	20bfffcc 	andi	r2,r4,65535
 8009d10:	10c7883a 	add	r3,r2,r3
 8009d14:	28bfffcc 	andi	r2,r5,65535
 8009d18:	1885c83a 	sub	r2,r3,r2
 8009d1c:	280ad43a 	srli	r5,r5,16
 8009d20:	2008d43a 	srli	r4,r4,16
 8009d24:	1007d43a 	srai	r3,r2,16
 8009d28:	10bfffcc 	andi	r2,r2,65535
 8009d2c:	2149c83a 	sub	r4,r4,r5
 8009d30:	20c9883a 	add	r4,r4,r3
 8009d34:	200a943a 	slli	r5,r4,16
 8009d38:	8c400104 	addi	r17,r17,4
 8009d3c:	2007d43a 	srai	r3,r4,16
 8009d40:	2884b03a 	or	r2,r5,r2
 8009d44:	30bfff15 	stw	r2,-4(r6)
 8009d48:	e47fed2e 	bgeu	fp,r17,8009d00 <__alt_data_end+0xf8009d00>
 8009d4c:	bdc5883a 	add	r2,r23,r23
 8009d50:	1085883a 	add	r2,r2,r2
 8009d54:	9887883a 	add	r3,r19,r2
 8009d58:	18800017 	ldw	r2,0(r3)
 8009d5c:	10000c1e 	bne	r2,zero,8009d90 <quorem+0x1ec>
 8009d60:	18bfff04 	addi	r2,r3,-4
 8009d64:	9880082e 	bgeu	r19,r2,8009d88 <quorem+0x1e4>
 8009d68:	18ffff17 	ldw	r3,-4(r3)
 8009d6c:	18000326 	beq	r3,zero,8009d7c <quorem+0x1d8>
 8009d70:	00000506 	br	8009d88 <quorem+0x1e4>
 8009d74:	10c00017 	ldw	r3,0(r2)
 8009d78:	1800031e 	bne	r3,zero,8009d88 <quorem+0x1e4>
 8009d7c:	10bfff04 	addi	r2,r2,-4
 8009d80:	bdffffc4 	addi	r23,r23,-1
 8009d84:	98bffb36 	bltu	r19,r2,8009d74 <__alt_data_end+0xf8009d74>
 8009d88:	d8c00017 	ldw	r3,0(sp)
 8009d8c:	1dc00415 	stw	r23,16(r3)
 8009d90:	9005883a 	mov	r2,r18
 8009d94:	dfc00d17 	ldw	ra,52(sp)
 8009d98:	df000c17 	ldw	fp,48(sp)
 8009d9c:	ddc00b17 	ldw	r23,44(sp)
 8009da0:	dd800a17 	ldw	r22,40(sp)
 8009da4:	dd400917 	ldw	r21,36(sp)
 8009da8:	dd000817 	ldw	r20,32(sp)
 8009dac:	dcc00717 	ldw	r19,28(sp)
 8009db0:	dc800617 	ldw	r18,24(sp)
 8009db4:	dc400517 	ldw	r17,20(sp)
 8009db8:	dc000417 	ldw	r16,16(sp)
 8009dbc:	dec00e04 	addi	sp,sp,56
 8009dc0:	f800283a 	ret
 8009dc4:	0005883a 	mov	r2,zero
 8009dc8:	003ff206 	br	8009d94 <__alt_data_end+0xf8009d94>

08009dcc <_dtoa_r>:
 8009dcc:	20801017 	ldw	r2,64(r4)
 8009dd0:	deffde04 	addi	sp,sp,-136
 8009dd4:	df002015 	stw	fp,128(sp)
 8009dd8:	dcc01b15 	stw	r19,108(sp)
 8009ddc:	dc801a15 	stw	r18,104(sp)
 8009de0:	dc401915 	stw	r17,100(sp)
 8009de4:	dc001815 	stw	r16,96(sp)
 8009de8:	dfc02115 	stw	ra,132(sp)
 8009dec:	ddc01f15 	stw	r23,124(sp)
 8009df0:	dd801e15 	stw	r22,120(sp)
 8009df4:	dd401d15 	stw	r21,116(sp)
 8009df8:	dd001c15 	stw	r20,112(sp)
 8009dfc:	d9c00315 	stw	r7,12(sp)
 8009e00:	2039883a 	mov	fp,r4
 8009e04:	3023883a 	mov	r17,r6
 8009e08:	2825883a 	mov	r18,r5
 8009e0c:	dc002417 	ldw	r16,144(sp)
 8009e10:	3027883a 	mov	r19,r6
 8009e14:	10000826 	beq	r2,zero,8009e38 <_dtoa_r+0x6c>
 8009e18:	21801117 	ldw	r6,68(r4)
 8009e1c:	00c00044 	movi	r3,1
 8009e20:	100b883a 	mov	r5,r2
 8009e24:	1986983a 	sll	r3,r3,r6
 8009e28:	11800115 	stw	r6,4(r2)
 8009e2c:	10c00215 	stw	r3,8(r2)
 8009e30:	800d2bc0 	call	800d2bc <_Bfree>
 8009e34:	e0001015 	stw	zero,64(fp)
 8009e38:	88002e16 	blt	r17,zero,8009ef4 <_dtoa_r+0x128>
 8009e3c:	80000015 	stw	zero,0(r16)
 8009e40:	889ffc2c 	andhi	r2,r17,32752
 8009e44:	00dffc34 	movhi	r3,32752
 8009e48:	10c01c26 	beq	r2,r3,8009ebc <_dtoa_r+0xf0>
 8009e4c:	000d883a 	mov	r6,zero
 8009e50:	000f883a 	mov	r7,zero
 8009e54:	9009883a 	mov	r4,r18
 8009e58:	980b883a 	mov	r5,r19
 8009e5c:	80129900 	call	8012990 <__eqdf2>
 8009e60:	10002b1e 	bne	r2,zero,8009f10 <_dtoa_r+0x144>
 8009e64:	d9c02317 	ldw	r7,140(sp)
 8009e68:	00800044 	movi	r2,1
 8009e6c:	38800015 	stw	r2,0(r7)
 8009e70:	d8802517 	ldw	r2,148(sp)
 8009e74:	10019e26 	beq	r2,zero,800a4f0 <_dtoa_r+0x724>
 8009e78:	d8c02517 	ldw	r3,148(sp)
 8009e7c:	00820074 	movhi	r2,2049
 8009e80:	1099bd44 	addi	r2,r2,26357
 8009e84:	18800015 	stw	r2,0(r3)
 8009e88:	10bfffc4 	addi	r2,r2,-1
 8009e8c:	dfc02117 	ldw	ra,132(sp)
 8009e90:	df002017 	ldw	fp,128(sp)
 8009e94:	ddc01f17 	ldw	r23,124(sp)
 8009e98:	dd801e17 	ldw	r22,120(sp)
 8009e9c:	dd401d17 	ldw	r21,116(sp)
 8009ea0:	dd001c17 	ldw	r20,112(sp)
 8009ea4:	dcc01b17 	ldw	r19,108(sp)
 8009ea8:	dc801a17 	ldw	r18,104(sp)
 8009eac:	dc401917 	ldw	r17,100(sp)
 8009eb0:	dc001817 	ldw	r16,96(sp)
 8009eb4:	dec02204 	addi	sp,sp,136
 8009eb8:	f800283a 	ret
 8009ebc:	d8c02317 	ldw	r3,140(sp)
 8009ec0:	0089c3c4 	movi	r2,9999
 8009ec4:	18800015 	stw	r2,0(r3)
 8009ec8:	90017726 	beq	r18,zero,800a4a8 <_dtoa_r+0x6dc>
 8009ecc:	00820074 	movhi	r2,2049
 8009ed0:	1099c904 	addi	r2,r2,26404
 8009ed4:	d9002517 	ldw	r4,148(sp)
 8009ed8:	203fec26 	beq	r4,zero,8009e8c <__alt_data_end+0xf8009e8c>
 8009edc:	10c000c7 	ldb	r3,3(r2)
 8009ee0:	1801781e 	bne	r3,zero,800a4c4 <_dtoa_r+0x6f8>
 8009ee4:	10c000c4 	addi	r3,r2,3
 8009ee8:	d9802517 	ldw	r6,148(sp)
 8009eec:	30c00015 	stw	r3,0(r6)
 8009ef0:	003fe606 	br	8009e8c <__alt_data_end+0xf8009e8c>
 8009ef4:	04e00034 	movhi	r19,32768
 8009ef8:	9cffffc4 	addi	r19,r19,-1
 8009efc:	00800044 	movi	r2,1
 8009f00:	8ce6703a 	and	r19,r17,r19
 8009f04:	80800015 	stw	r2,0(r16)
 8009f08:	9823883a 	mov	r17,r19
 8009f0c:	003fcc06 	br	8009e40 <__alt_data_end+0xf8009e40>
 8009f10:	d8800204 	addi	r2,sp,8
 8009f14:	d8800015 	stw	r2,0(sp)
 8009f18:	d9c00104 	addi	r7,sp,4
 8009f1c:	900b883a 	mov	r5,r18
 8009f20:	980d883a 	mov	r6,r19
 8009f24:	e009883a 	mov	r4,fp
 8009f28:	8820d53a 	srli	r16,r17,20
 8009f2c:	800df640 	call	800df64 <__d2b>
 8009f30:	d8800915 	stw	r2,36(sp)
 8009f34:	8001651e 	bne	r16,zero,800a4cc <_dtoa_r+0x700>
 8009f38:	dd800217 	ldw	r22,8(sp)
 8009f3c:	dc000117 	ldw	r16,4(sp)
 8009f40:	00800804 	movi	r2,32
 8009f44:	b421883a 	add	r16,r22,r16
 8009f48:	80c10c84 	addi	r3,r16,1074
 8009f4c:	10c2d10e 	bge	r2,r3,800aa94 <_dtoa_r+0xcc8>
 8009f50:	00801004 	movi	r2,64
 8009f54:	81010484 	addi	r4,r16,1042
 8009f58:	10c7c83a 	sub	r3,r2,r3
 8009f5c:	9108d83a 	srl	r4,r18,r4
 8009f60:	88e2983a 	sll	r17,r17,r3
 8009f64:	2448b03a 	or	r4,r4,r17
 8009f68:	8013eac0 	call	8013eac <__floatunsidf>
 8009f6c:	017f8434 	movhi	r5,65040
 8009f70:	01800044 	movi	r6,1
 8009f74:	1009883a 	mov	r4,r2
 8009f78:	194b883a 	add	r5,r3,r5
 8009f7c:	843fffc4 	addi	r16,r16,-1
 8009f80:	d9801115 	stw	r6,68(sp)
 8009f84:	000d883a 	mov	r6,zero
 8009f88:	01cffe34 	movhi	r7,16376
 8009f8c:	80134540 	call	8013454 <__subdf3>
 8009f90:	0198dbf4 	movhi	r6,25455
 8009f94:	01cff4f4 	movhi	r7,16339
 8009f98:	3190d844 	addi	r6,r6,17249
 8009f9c:	39e1e9c4 	addi	r7,r7,-30809
 8009fa0:	1009883a 	mov	r4,r2
 8009fa4:	180b883a 	mov	r5,r3
 8009fa8:	8012be80 	call	8012be8 <__muldf3>
 8009fac:	01a2d874 	movhi	r6,35681
 8009fb0:	01cff1f4 	movhi	r7,16327
 8009fb4:	31b22cc4 	addi	r6,r6,-14157
 8009fb8:	39e28a04 	addi	r7,r7,-30168
 8009fbc:	180b883a 	mov	r5,r3
 8009fc0:	1009883a 	mov	r4,r2
 8009fc4:	80117140 	call	8011714 <__adddf3>
 8009fc8:	8009883a 	mov	r4,r16
 8009fcc:	1029883a 	mov	r20,r2
 8009fd0:	1823883a 	mov	r17,r3
 8009fd4:	8013dd00 	call	8013dd0 <__floatsidf>
 8009fd8:	019427f4 	movhi	r6,20639
 8009fdc:	01cff4f4 	movhi	r7,16339
 8009fe0:	319e7ec4 	addi	r6,r6,31227
 8009fe4:	39d104c4 	addi	r7,r7,17427
 8009fe8:	1009883a 	mov	r4,r2
 8009fec:	180b883a 	mov	r5,r3
 8009ff0:	8012be80 	call	8012be8 <__muldf3>
 8009ff4:	100d883a 	mov	r6,r2
 8009ff8:	180f883a 	mov	r7,r3
 8009ffc:	a009883a 	mov	r4,r20
 800a000:	880b883a 	mov	r5,r17
 800a004:	80117140 	call	8011714 <__adddf3>
 800a008:	1009883a 	mov	r4,r2
 800a00c:	180b883a 	mov	r5,r3
 800a010:	1029883a 	mov	r20,r2
 800a014:	1823883a 	mov	r17,r3
 800a018:	8013d500 	call	8013d50 <__fixdfsi>
 800a01c:	000d883a 	mov	r6,zero
 800a020:	000f883a 	mov	r7,zero
 800a024:	a009883a 	mov	r4,r20
 800a028:	880b883a 	mov	r5,r17
 800a02c:	d8800515 	stw	r2,20(sp)
 800a030:	8012af40 	call	8012af4 <__ledf2>
 800a034:	10028716 	blt	r2,zero,800aa54 <_dtoa_r+0xc88>
 800a038:	d8c00517 	ldw	r3,20(sp)
 800a03c:	00800584 	movi	r2,22
 800a040:	10c27536 	bltu	r2,r3,800aa18 <_dtoa_r+0xc4c>
 800a044:	180490fa 	slli	r2,r3,3
 800a048:	00c20074 	movhi	r3,2049
 800a04c:	18d9e504 	addi	r3,r3,26516
 800a050:	1885883a 	add	r2,r3,r2
 800a054:	11000017 	ldw	r4,0(r2)
 800a058:	11400117 	ldw	r5,4(r2)
 800a05c:	900d883a 	mov	r6,r18
 800a060:	980f883a 	mov	r7,r19
 800a064:	8012a180 	call	8012a18 <__gedf2>
 800a068:	00828d0e 	bge	zero,r2,800aaa0 <_dtoa_r+0xcd4>
 800a06c:	d9000517 	ldw	r4,20(sp)
 800a070:	d8000e15 	stw	zero,56(sp)
 800a074:	213fffc4 	addi	r4,r4,-1
 800a078:	d9000515 	stw	r4,20(sp)
 800a07c:	b42dc83a 	sub	r22,r22,r16
 800a080:	b5bfffc4 	addi	r22,r22,-1
 800a084:	b0026f16 	blt	r22,zero,800aa44 <_dtoa_r+0xc78>
 800a088:	d8000815 	stw	zero,32(sp)
 800a08c:	d9c00517 	ldw	r7,20(sp)
 800a090:	38026416 	blt	r7,zero,800aa24 <_dtoa_r+0xc58>
 800a094:	b1ed883a 	add	r22,r22,r7
 800a098:	d9c00d15 	stw	r7,52(sp)
 800a09c:	d8000a15 	stw	zero,40(sp)
 800a0a0:	d9800317 	ldw	r6,12(sp)
 800a0a4:	00800244 	movi	r2,9
 800a0a8:	11811436 	bltu	r2,r6,800a4fc <_dtoa_r+0x730>
 800a0ac:	00800144 	movi	r2,5
 800a0b0:	1184e10e 	bge	r2,r6,800b438 <_dtoa_r+0x166c>
 800a0b4:	31bfff04 	addi	r6,r6,-4
 800a0b8:	d9800315 	stw	r6,12(sp)
 800a0bc:	0023883a 	mov	r17,zero
 800a0c0:	d9800317 	ldw	r6,12(sp)
 800a0c4:	008000c4 	movi	r2,3
 800a0c8:	30836726 	beq	r6,r2,800ae68 <_dtoa_r+0x109c>
 800a0cc:	1183410e 	bge	r2,r6,800add4 <_dtoa_r+0x1008>
 800a0d0:	d9c00317 	ldw	r7,12(sp)
 800a0d4:	00800104 	movi	r2,4
 800a0d8:	38827c26 	beq	r7,r2,800aacc <_dtoa_r+0xd00>
 800a0dc:	00800144 	movi	r2,5
 800a0e0:	3884c41e 	bne	r7,r2,800b3f4 <_dtoa_r+0x1628>
 800a0e4:	00800044 	movi	r2,1
 800a0e8:	d8800b15 	stw	r2,44(sp)
 800a0ec:	d8c00517 	ldw	r3,20(sp)
 800a0f0:	d9002217 	ldw	r4,136(sp)
 800a0f4:	1907883a 	add	r3,r3,r4
 800a0f8:	19800044 	addi	r6,r3,1
 800a0fc:	d8c00c15 	stw	r3,48(sp)
 800a100:	d9800615 	stw	r6,24(sp)
 800a104:	0183a40e 	bge	zero,r6,800af98 <_dtoa_r+0x11cc>
 800a108:	d9800617 	ldw	r6,24(sp)
 800a10c:	3021883a 	mov	r16,r6
 800a110:	e0001115 	stw	zero,68(fp)
 800a114:	008005c4 	movi	r2,23
 800a118:	1184c92e 	bgeu	r2,r6,800b440 <_dtoa_r+0x1674>
 800a11c:	00c00044 	movi	r3,1
 800a120:	00800104 	movi	r2,4
 800a124:	1085883a 	add	r2,r2,r2
 800a128:	11000504 	addi	r4,r2,20
 800a12c:	180b883a 	mov	r5,r3
 800a130:	18c00044 	addi	r3,r3,1
 800a134:	313ffb2e 	bgeu	r6,r4,800a124 <__alt_data_end+0xf800a124>
 800a138:	e1401115 	stw	r5,68(fp)
 800a13c:	e009883a 	mov	r4,fp
 800a140:	800d2140 	call	800d214 <_Balloc>
 800a144:	d8800715 	stw	r2,28(sp)
 800a148:	e0801015 	stw	r2,64(fp)
 800a14c:	00800384 	movi	r2,14
 800a150:	1400f736 	bltu	r2,r16,800a530 <_dtoa_r+0x764>
 800a154:	8800f626 	beq	r17,zero,800a530 <_dtoa_r+0x764>
 800a158:	d9c00517 	ldw	r7,20(sp)
 800a15c:	01c39a0e 	bge	zero,r7,800afc8 <_dtoa_r+0x11fc>
 800a160:	388003cc 	andi	r2,r7,15
 800a164:	100490fa 	slli	r2,r2,3
 800a168:	382bd13a 	srai	r21,r7,4
 800a16c:	00c20074 	movhi	r3,2049
 800a170:	18d9e504 	addi	r3,r3,26516
 800a174:	1885883a 	add	r2,r3,r2
 800a178:	a8c0040c 	andi	r3,r21,16
 800a17c:	12400017 	ldw	r9,0(r2)
 800a180:	12000117 	ldw	r8,4(r2)
 800a184:	18037926 	beq	r3,zero,800af6c <_dtoa_r+0x11a0>
 800a188:	00820074 	movhi	r2,2049
 800a18c:	1099db04 	addi	r2,r2,26476
 800a190:	11800817 	ldw	r6,32(r2)
 800a194:	11c00917 	ldw	r7,36(r2)
 800a198:	9009883a 	mov	r4,r18
 800a19c:	980b883a 	mov	r5,r19
 800a1a0:	da001715 	stw	r8,92(sp)
 800a1a4:	da401615 	stw	r9,88(sp)
 800a1a8:	8011fc00 	call	8011fc0 <__divdf3>
 800a1ac:	da001717 	ldw	r8,92(sp)
 800a1b0:	da401617 	ldw	r9,88(sp)
 800a1b4:	ad4003cc 	andi	r21,r21,15
 800a1b8:	040000c4 	movi	r16,3
 800a1bc:	1023883a 	mov	r17,r2
 800a1c0:	1829883a 	mov	r20,r3
 800a1c4:	a8001126 	beq	r21,zero,800a20c <_dtoa_r+0x440>
 800a1c8:	05c20074 	movhi	r23,2049
 800a1cc:	bdd9db04 	addi	r23,r23,26476
 800a1d0:	4805883a 	mov	r2,r9
 800a1d4:	4007883a 	mov	r3,r8
 800a1d8:	a980004c 	andi	r6,r21,1
 800a1dc:	1009883a 	mov	r4,r2
 800a1e0:	a82bd07a 	srai	r21,r21,1
 800a1e4:	180b883a 	mov	r5,r3
 800a1e8:	30000426 	beq	r6,zero,800a1fc <_dtoa_r+0x430>
 800a1ec:	b9800017 	ldw	r6,0(r23)
 800a1f0:	b9c00117 	ldw	r7,4(r23)
 800a1f4:	84000044 	addi	r16,r16,1
 800a1f8:	8012be80 	call	8012be8 <__muldf3>
 800a1fc:	bdc00204 	addi	r23,r23,8
 800a200:	a83ff51e 	bne	r21,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a204:	1013883a 	mov	r9,r2
 800a208:	1811883a 	mov	r8,r3
 800a20c:	480d883a 	mov	r6,r9
 800a210:	400f883a 	mov	r7,r8
 800a214:	8809883a 	mov	r4,r17
 800a218:	a00b883a 	mov	r5,r20
 800a21c:	8011fc00 	call	8011fc0 <__divdf3>
 800a220:	d8800f15 	stw	r2,60(sp)
 800a224:	d8c01015 	stw	r3,64(sp)
 800a228:	d8c00e17 	ldw	r3,56(sp)
 800a22c:	18000626 	beq	r3,zero,800a248 <_dtoa_r+0x47c>
 800a230:	d9000f17 	ldw	r4,60(sp)
 800a234:	d9401017 	ldw	r5,64(sp)
 800a238:	000d883a 	mov	r6,zero
 800a23c:	01cffc34 	movhi	r7,16368
 800a240:	8012af40 	call	8012af4 <__ledf2>
 800a244:	10040b16 	blt	r2,zero,800b274 <_dtoa_r+0x14a8>
 800a248:	8009883a 	mov	r4,r16
 800a24c:	8013dd00 	call	8013dd0 <__floatsidf>
 800a250:	d9800f17 	ldw	r6,60(sp)
 800a254:	d9c01017 	ldw	r7,64(sp)
 800a258:	1009883a 	mov	r4,r2
 800a25c:	180b883a 	mov	r5,r3
 800a260:	8012be80 	call	8012be8 <__muldf3>
 800a264:	000d883a 	mov	r6,zero
 800a268:	01d00734 	movhi	r7,16412
 800a26c:	1009883a 	mov	r4,r2
 800a270:	180b883a 	mov	r5,r3
 800a274:	80117140 	call	8011714 <__adddf3>
 800a278:	1021883a 	mov	r16,r2
 800a27c:	d8800617 	ldw	r2,24(sp)
 800a280:	047f3034 	movhi	r17,64704
 800a284:	1c63883a 	add	r17,r3,r17
 800a288:	10031826 	beq	r2,zero,800aeec <_dtoa_r+0x1120>
 800a28c:	d8c00517 	ldw	r3,20(sp)
 800a290:	db000617 	ldw	r12,24(sp)
 800a294:	d8c01315 	stw	r3,76(sp)
 800a298:	d9000b17 	ldw	r4,44(sp)
 800a29c:	20038f26 	beq	r4,zero,800b0dc <_dtoa_r+0x1310>
 800a2a0:	60bfffc4 	addi	r2,r12,-1
 800a2a4:	100490fa 	slli	r2,r2,3
 800a2a8:	00c20074 	movhi	r3,2049
 800a2ac:	18d9e504 	addi	r3,r3,26516
 800a2b0:	1885883a 	add	r2,r3,r2
 800a2b4:	11800017 	ldw	r6,0(r2)
 800a2b8:	11c00117 	ldw	r7,4(r2)
 800a2bc:	d8800717 	ldw	r2,28(sp)
 800a2c0:	0009883a 	mov	r4,zero
 800a2c4:	014ff834 	movhi	r5,16352
 800a2c8:	db001615 	stw	r12,88(sp)
 800a2cc:	15c00044 	addi	r23,r2,1
 800a2d0:	8011fc00 	call	8011fc0 <__divdf3>
 800a2d4:	800d883a 	mov	r6,r16
 800a2d8:	880f883a 	mov	r7,r17
 800a2dc:	1009883a 	mov	r4,r2
 800a2e0:	180b883a 	mov	r5,r3
 800a2e4:	80134540 	call	8013454 <__subdf3>
 800a2e8:	d9401017 	ldw	r5,64(sp)
 800a2ec:	d9000f17 	ldw	r4,60(sp)
 800a2f0:	102b883a 	mov	r21,r2
 800a2f4:	d8c01215 	stw	r3,72(sp)
 800a2f8:	8013d500 	call	8013d50 <__fixdfsi>
 800a2fc:	1009883a 	mov	r4,r2
 800a300:	1029883a 	mov	r20,r2
 800a304:	8013dd00 	call	8013dd0 <__floatsidf>
 800a308:	d9000f17 	ldw	r4,60(sp)
 800a30c:	d9401017 	ldw	r5,64(sp)
 800a310:	100d883a 	mov	r6,r2
 800a314:	180f883a 	mov	r7,r3
 800a318:	80134540 	call	8013454 <__subdf3>
 800a31c:	1823883a 	mov	r17,r3
 800a320:	d8c00717 	ldw	r3,28(sp)
 800a324:	d9401217 	ldw	r5,72(sp)
 800a328:	a2000c04 	addi	r8,r20,48
 800a32c:	1021883a 	mov	r16,r2
 800a330:	1a000005 	stb	r8,0(r3)
 800a334:	800d883a 	mov	r6,r16
 800a338:	880f883a 	mov	r7,r17
 800a33c:	a809883a 	mov	r4,r21
 800a340:	4029883a 	mov	r20,r8
 800a344:	8012a180 	call	8012a18 <__gedf2>
 800a348:	00841d16 	blt	zero,r2,800b3c0 <_dtoa_r+0x15f4>
 800a34c:	800d883a 	mov	r6,r16
 800a350:	880f883a 	mov	r7,r17
 800a354:	0009883a 	mov	r4,zero
 800a358:	014ffc34 	movhi	r5,16368
 800a35c:	80134540 	call	8013454 <__subdf3>
 800a360:	d9401217 	ldw	r5,72(sp)
 800a364:	100d883a 	mov	r6,r2
 800a368:	180f883a 	mov	r7,r3
 800a36c:	a809883a 	mov	r4,r21
 800a370:	8012a180 	call	8012a18 <__gedf2>
 800a374:	db001617 	ldw	r12,88(sp)
 800a378:	00840e16 	blt	zero,r2,800b3b4 <_dtoa_r+0x15e8>
 800a37c:	00800044 	movi	r2,1
 800a380:	13006b0e 	bge	r2,r12,800a530 <_dtoa_r+0x764>
 800a384:	d9000717 	ldw	r4,28(sp)
 800a388:	dd800f15 	stw	r22,60(sp)
 800a38c:	dcc01015 	stw	r19,64(sp)
 800a390:	2319883a 	add	r12,r4,r12
 800a394:	dcc01217 	ldw	r19,72(sp)
 800a398:	602d883a 	mov	r22,r12
 800a39c:	dc801215 	stw	r18,72(sp)
 800a3a0:	b825883a 	mov	r18,r23
 800a3a4:	00000906 	br	800a3cc <_dtoa_r+0x600>
 800a3a8:	80134540 	call	8013454 <__subdf3>
 800a3ac:	a80d883a 	mov	r6,r21
 800a3b0:	980f883a 	mov	r7,r19
 800a3b4:	1009883a 	mov	r4,r2
 800a3b8:	180b883a 	mov	r5,r3
 800a3bc:	8012af40 	call	8012af4 <__ledf2>
 800a3c0:	1003e816 	blt	r2,zero,800b364 <_dtoa_r+0x1598>
 800a3c4:	b825883a 	mov	r18,r23
 800a3c8:	bd83e926 	beq	r23,r22,800b370 <_dtoa_r+0x15a4>
 800a3cc:	a809883a 	mov	r4,r21
 800a3d0:	980b883a 	mov	r5,r19
 800a3d4:	000d883a 	mov	r6,zero
 800a3d8:	01d00934 	movhi	r7,16420
 800a3dc:	8012be80 	call	8012be8 <__muldf3>
 800a3e0:	000d883a 	mov	r6,zero
 800a3e4:	01d00934 	movhi	r7,16420
 800a3e8:	8009883a 	mov	r4,r16
 800a3ec:	880b883a 	mov	r5,r17
 800a3f0:	102b883a 	mov	r21,r2
 800a3f4:	1827883a 	mov	r19,r3
 800a3f8:	8012be80 	call	8012be8 <__muldf3>
 800a3fc:	180b883a 	mov	r5,r3
 800a400:	1009883a 	mov	r4,r2
 800a404:	1821883a 	mov	r16,r3
 800a408:	1023883a 	mov	r17,r2
 800a40c:	8013d500 	call	8013d50 <__fixdfsi>
 800a410:	1009883a 	mov	r4,r2
 800a414:	1029883a 	mov	r20,r2
 800a418:	8013dd00 	call	8013dd0 <__floatsidf>
 800a41c:	8809883a 	mov	r4,r17
 800a420:	800b883a 	mov	r5,r16
 800a424:	100d883a 	mov	r6,r2
 800a428:	180f883a 	mov	r7,r3
 800a42c:	80134540 	call	8013454 <__subdf3>
 800a430:	a5000c04 	addi	r20,r20,48
 800a434:	a80d883a 	mov	r6,r21
 800a438:	980f883a 	mov	r7,r19
 800a43c:	1009883a 	mov	r4,r2
 800a440:	180b883a 	mov	r5,r3
 800a444:	95000005 	stb	r20,0(r18)
 800a448:	1021883a 	mov	r16,r2
 800a44c:	1823883a 	mov	r17,r3
 800a450:	8012af40 	call	8012af4 <__ledf2>
 800a454:	bdc00044 	addi	r23,r23,1
 800a458:	800d883a 	mov	r6,r16
 800a45c:	880f883a 	mov	r7,r17
 800a460:	0009883a 	mov	r4,zero
 800a464:	014ffc34 	movhi	r5,16368
 800a468:	103fcf0e 	bge	r2,zero,800a3a8 <__alt_data_end+0xf800a3a8>
 800a46c:	d8c01317 	ldw	r3,76(sp)
 800a470:	d8c00515 	stw	r3,20(sp)
 800a474:	d9400917 	ldw	r5,36(sp)
 800a478:	e009883a 	mov	r4,fp
 800a47c:	800d2bc0 	call	800d2bc <_Bfree>
 800a480:	d9000517 	ldw	r4,20(sp)
 800a484:	d9802317 	ldw	r6,140(sp)
 800a488:	d9c02517 	ldw	r7,148(sp)
 800a48c:	b8000005 	stb	zero,0(r23)
 800a490:	20800044 	addi	r2,r4,1
 800a494:	30800015 	stw	r2,0(r6)
 800a498:	3802aa26 	beq	r7,zero,800af44 <_dtoa_r+0x1178>
 800a49c:	3dc00015 	stw	r23,0(r7)
 800a4a0:	d8800717 	ldw	r2,28(sp)
 800a4a4:	003e7906 	br	8009e8c <__alt_data_end+0xf8009e8c>
 800a4a8:	00800434 	movhi	r2,16
 800a4ac:	10bfffc4 	addi	r2,r2,-1
 800a4b0:	88a2703a 	and	r17,r17,r2
 800a4b4:	883e851e 	bne	r17,zero,8009ecc <__alt_data_end+0xf8009ecc>
 800a4b8:	00820074 	movhi	r2,2049
 800a4bc:	1099c604 	addi	r2,r2,26392
 800a4c0:	003e8406 	br	8009ed4 <__alt_data_end+0xf8009ed4>
 800a4c4:	10c00204 	addi	r3,r2,8
 800a4c8:	003e8706 	br	8009ee8 <__alt_data_end+0xf8009ee8>
 800a4cc:	01400434 	movhi	r5,16
 800a4d0:	297fffc4 	addi	r5,r5,-1
 800a4d4:	994a703a 	and	r5,r19,r5
 800a4d8:	9009883a 	mov	r4,r18
 800a4dc:	843f0044 	addi	r16,r16,-1023
 800a4e0:	294ffc34 	orhi	r5,r5,16368
 800a4e4:	dd800217 	ldw	r22,8(sp)
 800a4e8:	d8001115 	stw	zero,68(sp)
 800a4ec:	003ea506 	br	8009f84 <__alt_data_end+0xf8009f84>
 800a4f0:	00820074 	movhi	r2,2049
 800a4f4:	1099bd04 	addi	r2,r2,26356
 800a4f8:	003e6406 	br	8009e8c <__alt_data_end+0xf8009e8c>
 800a4fc:	e0001115 	stw	zero,68(fp)
 800a500:	000b883a 	mov	r5,zero
 800a504:	e009883a 	mov	r4,fp
 800a508:	800d2140 	call	800d214 <_Balloc>
 800a50c:	01bfffc4 	movi	r6,-1
 800a510:	01c00044 	movi	r7,1
 800a514:	d8800715 	stw	r2,28(sp)
 800a518:	d9800c15 	stw	r6,48(sp)
 800a51c:	e0801015 	stw	r2,64(fp)
 800a520:	d8000315 	stw	zero,12(sp)
 800a524:	d9c00b15 	stw	r7,44(sp)
 800a528:	d9800615 	stw	r6,24(sp)
 800a52c:	d8002215 	stw	zero,136(sp)
 800a530:	d8800117 	ldw	r2,4(sp)
 800a534:	10008916 	blt	r2,zero,800a75c <_dtoa_r+0x990>
 800a538:	d9000517 	ldw	r4,20(sp)
 800a53c:	00c00384 	movi	r3,14
 800a540:	19008616 	blt	r3,r4,800a75c <_dtoa_r+0x990>
 800a544:	200490fa 	slli	r2,r4,3
 800a548:	00c20074 	movhi	r3,2049
 800a54c:	d9802217 	ldw	r6,136(sp)
 800a550:	18d9e504 	addi	r3,r3,26516
 800a554:	1885883a 	add	r2,r3,r2
 800a558:	14000017 	ldw	r16,0(r2)
 800a55c:	14400117 	ldw	r17,4(r2)
 800a560:	30016316 	blt	r6,zero,800aaf0 <_dtoa_r+0xd24>
 800a564:	800d883a 	mov	r6,r16
 800a568:	880f883a 	mov	r7,r17
 800a56c:	9009883a 	mov	r4,r18
 800a570:	980b883a 	mov	r5,r19
 800a574:	8011fc00 	call	8011fc0 <__divdf3>
 800a578:	180b883a 	mov	r5,r3
 800a57c:	1009883a 	mov	r4,r2
 800a580:	8013d500 	call	8013d50 <__fixdfsi>
 800a584:	1009883a 	mov	r4,r2
 800a588:	102b883a 	mov	r21,r2
 800a58c:	8013dd00 	call	8013dd0 <__floatsidf>
 800a590:	800d883a 	mov	r6,r16
 800a594:	880f883a 	mov	r7,r17
 800a598:	1009883a 	mov	r4,r2
 800a59c:	180b883a 	mov	r5,r3
 800a5a0:	8012be80 	call	8012be8 <__muldf3>
 800a5a4:	100d883a 	mov	r6,r2
 800a5a8:	180f883a 	mov	r7,r3
 800a5ac:	9009883a 	mov	r4,r18
 800a5b0:	980b883a 	mov	r5,r19
 800a5b4:	80134540 	call	8013454 <__subdf3>
 800a5b8:	d9c00717 	ldw	r7,28(sp)
 800a5bc:	1009883a 	mov	r4,r2
 800a5c0:	a8800c04 	addi	r2,r21,48
 800a5c4:	38800005 	stb	r2,0(r7)
 800a5c8:	3dc00044 	addi	r23,r7,1
 800a5cc:	d9c00617 	ldw	r7,24(sp)
 800a5d0:	01800044 	movi	r6,1
 800a5d4:	180b883a 	mov	r5,r3
 800a5d8:	2005883a 	mov	r2,r4
 800a5dc:	39803826 	beq	r7,r6,800a6c0 <_dtoa_r+0x8f4>
 800a5e0:	000d883a 	mov	r6,zero
 800a5e4:	01d00934 	movhi	r7,16420
 800a5e8:	8012be80 	call	8012be8 <__muldf3>
 800a5ec:	000d883a 	mov	r6,zero
 800a5f0:	000f883a 	mov	r7,zero
 800a5f4:	1009883a 	mov	r4,r2
 800a5f8:	180b883a 	mov	r5,r3
 800a5fc:	1025883a 	mov	r18,r2
 800a600:	1827883a 	mov	r19,r3
 800a604:	80129900 	call	8012990 <__eqdf2>
 800a608:	103f9a26 	beq	r2,zero,800a474 <__alt_data_end+0xf800a474>
 800a60c:	d9c00617 	ldw	r7,24(sp)
 800a610:	d8c00717 	ldw	r3,28(sp)
 800a614:	b829883a 	mov	r20,r23
 800a618:	38bfffc4 	addi	r2,r7,-1
 800a61c:	18ad883a 	add	r22,r3,r2
 800a620:	00000a06 	br	800a64c <_dtoa_r+0x880>
 800a624:	8012be80 	call	8012be8 <__muldf3>
 800a628:	000d883a 	mov	r6,zero
 800a62c:	000f883a 	mov	r7,zero
 800a630:	1009883a 	mov	r4,r2
 800a634:	180b883a 	mov	r5,r3
 800a638:	1025883a 	mov	r18,r2
 800a63c:	1827883a 	mov	r19,r3
 800a640:	b829883a 	mov	r20,r23
 800a644:	80129900 	call	8012990 <__eqdf2>
 800a648:	103f8a26 	beq	r2,zero,800a474 <__alt_data_end+0xf800a474>
 800a64c:	800d883a 	mov	r6,r16
 800a650:	880f883a 	mov	r7,r17
 800a654:	9009883a 	mov	r4,r18
 800a658:	980b883a 	mov	r5,r19
 800a65c:	8011fc00 	call	8011fc0 <__divdf3>
 800a660:	180b883a 	mov	r5,r3
 800a664:	1009883a 	mov	r4,r2
 800a668:	8013d500 	call	8013d50 <__fixdfsi>
 800a66c:	1009883a 	mov	r4,r2
 800a670:	102b883a 	mov	r21,r2
 800a674:	8013dd00 	call	8013dd0 <__floatsidf>
 800a678:	800d883a 	mov	r6,r16
 800a67c:	880f883a 	mov	r7,r17
 800a680:	1009883a 	mov	r4,r2
 800a684:	180b883a 	mov	r5,r3
 800a688:	8012be80 	call	8012be8 <__muldf3>
 800a68c:	100d883a 	mov	r6,r2
 800a690:	180f883a 	mov	r7,r3
 800a694:	9009883a 	mov	r4,r18
 800a698:	980b883a 	mov	r5,r19
 800a69c:	80134540 	call	8013454 <__subdf3>
 800a6a0:	aa000c04 	addi	r8,r21,48
 800a6a4:	a2000005 	stb	r8,0(r20)
 800a6a8:	000d883a 	mov	r6,zero
 800a6ac:	01d00934 	movhi	r7,16420
 800a6b0:	1009883a 	mov	r4,r2
 800a6b4:	180b883a 	mov	r5,r3
 800a6b8:	a5c00044 	addi	r23,r20,1
 800a6bc:	b53fd91e 	bne	r22,r20,800a624 <__alt_data_end+0xf800a624>
 800a6c0:	100d883a 	mov	r6,r2
 800a6c4:	180f883a 	mov	r7,r3
 800a6c8:	1009883a 	mov	r4,r2
 800a6cc:	180b883a 	mov	r5,r3
 800a6d0:	80117140 	call	8011714 <__adddf3>
 800a6d4:	100d883a 	mov	r6,r2
 800a6d8:	180f883a 	mov	r7,r3
 800a6dc:	8009883a 	mov	r4,r16
 800a6e0:	880b883a 	mov	r5,r17
 800a6e4:	1027883a 	mov	r19,r2
 800a6e8:	1825883a 	mov	r18,r3
 800a6ec:	8012af40 	call	8012af4 <__ledf2>
 800a6f0:	10000816 	blt	r2,zero,800a714 <_dtoa_r+0x948>
 800a6f4:	980d883a 	mov	r6,r19
 800a6f8:	900f883a 	mov	r7,r18
 800a6fc:	8009883a 	mov	r4,r16
 800a700:	880b883a 	mov	r5,r17
 800a704:	80129900 	call	8012990 <__eqdf2>
 800a708:	103f5a1e 	bne	r2,zero,800a474 <__alt_data_end+0xf800a474>
 800a70c:	ad40004c 	andi	r21,r21,1
 800a710:	a83f5826 	beq	r21,zero,800a474 <__alt_data_end+0xf800a474>
 800a714:	bd3fffc3 	ldbu	r20,-1(r23)
 800a718:	b8bfffc4 	addi	r2,r23,-1
 800a71c:	1007883a 	mov	r3,r2
 800a720:	01400e44 	movi	r5,57
 800a724:	d9800717 	ldw	r6,28(sp)
 800a728:	00000506 	br	800a740 <_dtoa_r+0x974>
 800a72c:	18ffffc4 	addi	r3,r3,-1
 800a730:	11824726 	beq	r2,r6,800b050 <_dtoa_r+0x1284>
 800a734:	1d000003 	ldbu	r20,0(r3)
 800a738:	102f883a 	mov	r23,r2
 800a73c:	10bfffc4 	addi	r2,r2,-1
 800a740:	a1003fcc 	andi	r4,r20,255
 800a744:	2100201c 	xori	r4,r4,128
 800a748:	213fe004 	addi	r4,r4,-128
 800a74c:	217ff726 	beq	r4,r5,800a72c <__alt_data_end+0xf800a72c>
 800a750:	a2000044 	addi	r8,r20,1
 800a754:	12000005 	stb	r8,0(r2)
 800a758:	003f4606 	br	800a474 <__alt_data_end+0xf800a474>
 800a75c:	d9000b17 	ldw	r4,44(sp)
 800a760:	2000c826 	beq	r4,zero,800aa84 <_dtoa_r+0xcb8>
 800a764:	d9800317 	ldw	r6,12(sp)
 800a768:	00c00044 	movi	r3,1
 800a76c:	1980f90e 	bge	r3,r6,800ab54 <_dtoa_r+0xd88>
 800a770:	d8800617 	ldw	r2,24(sp)
 800a774:	d8c00a17 	ldw	r3,40(sp)
 800a778:	157fffc4 	addi	r21,r2,-1
 800a77c:	1d41f316 	blt	r3,r21,800af4c <_dtoa_r+0x1180>
 800a780:	1d6bc83a 	sub	r21,r3,r21
 800a784:	d9c00617 	ldw	r7,24(sp)
 800a788:	3802aa16 	blt	r7,zero,800b234 <_dtoa_r+0x1468>
 800a78c:	dd000817 	ldw	r20,32(sp)
 800a790:	d8800617 	ldw	r2,24(sp)
 800a794:	d8c00817 	ldw	r3,32(sp)
 800a798:	01400044 	movi	r5,1
 800a79c:	e009883a 	mov	r4,fp
 800a7a0:	1887883a 	add	r3,r3,r2
 800a7a4:	d8c00815 	stw	r3,32(sp)
 800a7a8:	b0ad883a 	add	r22,r22,r2
 800a7ac:	800d6480 	call	800d648 <__i2b>
 800a7b0:	1023883a 	mov	r17,r2
 800a7b4:	a0000826 	beq	r20,zero,800a7d8 <_dtoa_r+0xa0c>
 800a7b8:	0580070e 	bge	zero,r22,800a7d8 <_dtoa_r+0xa0c>
 800a7bc:	a005883a 	mov	r2,r20
 800a7c0:	b500b916 	blt	r22,r20,800aaa8 <_dtoa_r+0xcdc>
 800a7c4:	d9000817 	ldw	r4,32(sp)
 800a7c8:	a0a9c83a 	sub	r20,r20,r2
 800a7cc:	b0adc83a 	sub	r22,r22,r2
 800a7d0:	2089c83a 	sub	r4,r4,r2
 800a7d4:	d9000815 	stw	r4,32(sp)
 800a7d8:	d9800a17 	ldw	r6,40(sp)
 800a7dc:	0181810e 	bge	zero,r6,800ade4 <_dtoa_r+0x1018>
 800a7e0:	d9c00b17 	ldw	r7,44(sp)
 800a7e4:	3800b326 	beq	r7,zero,800aab4 <_dtoa_r+0xce8>
 800a7e8:	a800b226 	beq	r21,zero,800aab4 <_dtoa_r+0xce8>
 800a7ec:	880b883a 	mov	r5,r17
 800a7f0:	a80d883a 	mov	r6,r21
 800a7f4:	e009883a 	mov	r4,fp
 800a7f8:	800d9100 	call	800d910 <__pow5mult>
 800a7fc:	d9800917 	ldw	r6,36(sp)
 800a800:	100b883a 	mov	r5,r2
 800a804:	e009883a 	mov	r4,fp
 800a808:	1023883a 	mov	r17,r2
 800a80c:	800d6840 	call	800d684 <__multiply>
 800a810:	1021883a 	mov	r16,r2
 800a814:	d8800a17 	ldw	r2,40(sp)
 800a818:	d9400917 	ldw	r5,36(sp)
 800a81c:	e009883a 	mov	r4,fp
 800a820:	1545c83a 	sub	r2,r2,r21
 800a824:	d8800a15 	stw	r2,40(sp)
 800a828:	800d2bc0 	call	800d2bc <_Bfree>
 800a82c:	d8c00a17 	ldw	r3,40(sp)
 800a830:	18009f1e 	bne	r3,zero,800aab0 <_dtoa_r+0xce4>
 800a834:	05c00044 	movi	r23,1
 800a838:	e009883a 	mov	r4,fp
 800a83c:	b80b883a 	mov	r5,r23
 800a840:	800d6480 	call	800d648 <__i2b>
 800a844:	d9000d17 	ldw	r4,52(sp)
 800a848:	102b883a 	mov	r21,r2
 800a84c:	2000ce26 	beq	r4,zero,800ab88 <_dtoa_r+0xdbc>
 800a850:	200d883a 	mov	r6,r4
 800a854:	100b883a 	mov	r5,r2
 800a858:	e009883a 	mov	r4,fp
 800a85c:	800d9100 	call	800d910 <__pow5mult>
 800a860:	d9800317 	ldw	r6,12(sp)
 800a864:	102b883a 	mov	r21,r2
 800a868:	b981810e 	bge	r23,r6,800ae70 <_dtoa_r+0x10a4>
 800a86c:	0027883a 	mov	r19,zero
 800a870:	a8800417 	ldw	r2,16(r21)
 800a874:	05c00804 	movi	r23,32
 800a878:	10800104 	addi	r2,r2,4
 800a87c:	1085883a 	add	r2,r2,r2
 800a880:	1085883a 	add	r2,r2,r2
 800a884:	a885883a 	add	r2,r21,r2
 800a888:	11000017 	ldw	r4,0(r2)
 800a88c:	800d5300 	call	800d530 <__hi0bits>
 800a890:	b885c83a 	sub	r2,r23,r2
 800a894:	1585883a 	add	r2,r2,r22
 800a898:	108007cc 	andi	r2,r2,31
 800a89c:	1000b326 	beq	r2,zero,800ab6c <_dtoa_r+0xda0>
 800a8a0:	00c00804 	movi	r3,32
 800a8a4:	1887c83a 	sub	r3,r3,r2
 800a8a8:	01000104 	movi	r4,4
 800a8ac:	20c2cd0e 	bge	r4,r3,800b3e4 <_dtoa_r+0x1618>
 800a8b0:	00c00704 	movi	r3,28
 800a8b4:	1885c83a 	sub	r2,r3,r2
 800a8b8:	d8c00817 	ldw	r3,32(sp)
 800a8bc:	a0a9883a 	add	r20,r20,r2
 800a8c0:	b0ad883a 	add	r22,r22,r2
 800a8c4:	1887883a 	add	r3,r3,r2
 800a8c8:	d8c00815 	stw	r3,32(sp)
 800a8cc:	d9800817 	ldw	r6,32(sp)
 800a8d0:	0180040e 	bge	zero,r6,800a8e4 <_dtoa_r+0xb18>
 800a8d4:	800b883a 	mov	r5,r16
 800a8d8:	e009883a 	mov	r4,fp
 800a8dc:	800da500 	call	800da50 <__lshift>
 800a8e0:	1021883a 	mov	r16,r2
 800a8e4:	0580050e 	bge	zero,r22,800a8fc <_dtoa_r+0xb30>
 800a8e8:	a80b883a 	mov	r5,r21
 800a8ec:	b00d883a 	mov	r6,r22
 800a8f0:	e009883a 	mov	r4,fp
 800a8f4:	800da500 	call	800da50 <__lshift>
 800a8f8:	102b883a 	mov	r21,r2
 800a8fc:	d9c00e17 	ldw	r7,56(sp)
 800a900:	3801211e 	bne	r7,zero,800ad88 <_dtoa_r+0xfbc>
 800a904:	d9800617 	ldw	r6,24(sp)
 800a908:	0181380e 	bge	zero,r6,800adec <_dtoa_r+0x1020>
 800a90c:	d8c00b17 	ldw	r3,44(sp)
 800a910:	1800ab1e 	bne	r3,zero,800abc0 <_dtoa_r+0xdf4>
 800a914:	dc800717 	ldw	r18,28(sp)
 800a918:	dcc00617 	ldw	r19,24(sp)
 800a91c:	9029883a 	mov	r20,r18
 800a920:	00000206 	br	800a92c <_dtoa_r+0xb60>
 800a924:	800d2e40 	call	800d2e4 <__multadd>
 800a928:	1021883a 	mov	r16,r2
 800a92c:	a80b883a 	mov	r5,r21
 800a930:	8009883a 	mov	r4,r16
 800a934:	8009ba40 	call	8009ba4 <quorem>
 800a938:	10800c04 	addi	r2,r2,48
 800a93c:	90800005 	stb	r2,0(r18)
 800a940:	94800044 	addi	r18,r18,1
 800a944:	9507c83a 	sub	r3,r18,r20
 800a948:	000f883a 	mov	r7,zero
 800a94c:	01800284 	movi	r6,10
 800a950:	800b883a 	mov	r5,r16
 800a954:	e009883a 	mov	r4,fp
 800a958:	1cfff216 	blt	r3,r19,800a924 <__alt_data_end+0xf800a924>
 800a95c:	1011883a 	mov	r8,r2
 800a960:	d8800617 	ldw	r2,24(sp)
 800a964:	0082370e 	bge	zero,r2,800b244 <_dtoa_r+0x1478>
 800a968:	d9000717 	ldw	r4,28(sp)
 800a96c:	0025883a 	mov	r18,zero
 800a970:	20af883a 	add	r23,r4,r2
 800a974:	01800044 	movi	r6,1
 800a978:	800b883a 	mov	r5,r16
 800a97c:	e009883a 	mov	r4,fp
 800a980:	da001715 	stw	r8,92(sp)
 800a984:	800da500 	call	800da50 <__lshift>
 800a988:	a80b883a 	mov	r5,r21
 800a98c:	1009883a 	mov	r4,r2
 800a990:	d8800915 	stw	r2,36(sp)
 800a994:	800db980 	call	800db98 <__mcmp>
 800a998:	da001717 	ldw	r8,92(sp)
 800a99c:	0081800e 	bge	zero,r2,800afa0 <_dtoa_r+0x11d4>
 800a9a0:	b93fffc3 	ldbu	r4,-1(r23)
 800a9a4:	b8bfffc4 	addi	r2,r23,-1
 800a9a8:	1007883a 	mov	r3,r2
 800a9ac:	01800e44 	movi	r6,57
 800a9b0:	d9c00717 	ldw	r7,28(sp)
 800a9b4:	00000506 	br	800a9cc <_dtoa_r+0xc00>
 800a9b8:	18ffffc4 	addi	r3,r3,-1
 800a9bc:	11c12326 	beq	r2,r7,800ae4c <_dtoa_r+0x1080>
 800a9c0:	19000003 	ldbu	r4,0(r3)
 800a9c4:	102f883a 	mov	r23,r2
 800a9c8:	10bfffc4 	addi	r2,r2,-1
 800a9cc:	21403fcc 	andi	r5,r4,255
 800a9d0:	2940201c 	xori	r5,r5,128
 800a9d4:	297fe004 	addi	r5,r5,-128
 800a9d8:	29bff726 	beq	r5,r6,800a9b8 <__alt_data_end+0xf800a9b8>
 800a9dc:	21000044 	addi	r4,r4,1
 800a9e0:	11000005 	stb	r4,0(r2)
 800a9e4:	a80b883a 	mov	r5,r21
 800a9e8:	e009883a 	mov	r4,fp
 800a9ec:	800d2bc0 	call	800d2bc <_Bfree>
 800a9f0:	883ea026 	beq	r17,zero,800a474 <__alt_data_end+0xf800a474>
 800a9f4:	90000426 	beq	r18,zero,800aa08 <_dtoa_r+0xc3c>
 800a9f8:	94400326 	beq	r18,r17,800aa08 <_dtoa_r+0xc3c>
 800a9fc:	900b883a 	mov	r5,r18
 800aa00:	e009883a 	mov	r4,fp
 800aa04:	800d2bc0 	call	800d2bc <_Bfree>
 800aa08:	880b883a 	mov	r5,r17
 800aa0c:	e009883a 	mov	r4,fp
 800aa10:	800d2bc0 	call	800d2bc <_Bfree>
 800aa14:	003e9706 	br	800a474 <__alt_data_end+0xf800a474>
 800aa18:	01800044 	movi	r6,1
 800aa1c:	d9800e15 	stw	r6,56(sp)
 800aa20:	003d9606 	br	800a07c <__alt_data_end+0xf800a07c>
 800aa24:	d8800817 	ldw	r2,32(sp)
 800aa28:	d8c00517 	ldw	r3,20(sp)
 800aa2c:	d8000d15 	stw	zero,52(sp)
 800aa30:	10c5c83a 	sub	r2,r2,r3
 800aa34:	00c9c83a 	sub	r4,zero,r3
 800aa38:	d8800815 	stw	r2,32(sp)
 800aa3c:	d9000a15 	stw	r4,40(sp)
 800aa40:	003d9706 	br	800a0a0 <__alt_data_end+0xf800a0a0>
 800aa44:	05adc83a 	sub	r22,zero,r22
 800aa48:	dd800815 	stw	r22,32(sp)
 800aa4c:	002d883a 	mov	r22,zero
 800aa50:	003d8e06 	br	800a08c <__alt_data_end+0xf800a08c>
 800aa54:	d9000517 	ldw	r4,20(sp)
 800aa58:	8013dd00 	call	8013dd0 <__floatsidf>
 800aa5c:	100d883a 	mov	r6,r2
 800aa60:	180f883a 	mov	r7,r3
 800aa64:	a009883a 	mov	r4,r20
 800aa68:	880b883a 	mov	r5,r17
 800aa6c:	80129900 	call	8012990 <__eqdf2>
 800aa70:	103d7126 	beq	r2,zero,800a038 <__alt_data_end+0xf800a038>
 800aa74:	d9c00517 	ldw	r7,20(sp)
 800aa78:	39ffffc4 	addi	r7,r7,-1
 800aa7c:	d9c00515 	stw	r7,20(sp)
 800aa80:	003d6d06 	br	800a038 <__alt_data_end+0xf800a038>
 800aa84:	dd400a17 	ldw	r21,40(sp)
 800aa88:	dd000817 	ldw	r20,32(sp)
 800aa8c:	0023883a 	mov	r17,zero
 800aa90:	003f4806 	br	800a7b4 <__alt_data_end+0xf800a7b4>
 800aa94:	10e3c83a 	sub	r17,r2,r3
 800aa98:	9448983a 	sll	r4,r18,r17
 800aa9c:	003d3206 	br	8009f68 <__alt_data_end+0xf8009f68>
 800aaa0:	d8000e15 	stw	zero,56(sp)
 800aaa4:	003d7506 	br	800a07c <__alt_data_end+0xf800a07c>
 800aaa8:	b005883a 	mov	r2,r22
 800aaac:	003f4506 	br	800a7c4 <__alt_data_end+0xf800a7c4>
 800aab0:	dc000915 	stw	r16,36(sp)
 800aab4:	d9800a17 	ldw	r6,40(sp)
 800aab8:	d9400917 	ldw	r5,36(sp)
 800aabc:	e009883a 	mov	r4,fp
 800aac0:	800d9100 	call	800d910 <__pow5mult>
 800aac4:	1021883a 	mov	r16,r2
 800aac8:	003f5a06 	br	800a834 <__alt_data_end+0xf800a834>
 800aacc:	01c00044 	movi	r7,1
 800aad0:	d9c00b15 	stw	r7,44(sp)
 800aad4:	d8802217 	ldw	r2,136(sp)
 800aad8:	0081280e 	bge	zero,r2,800af7c <_dtoa_r+0x11b0>
 800aadc:	100d883a 	mov	r6,r2
 800aae0:	1021883a 	mov	r16,r2
 800aae4:	d8800c15 	stw	r2,48(sp)
 800aae8:	d8800615 	stw	r2,24(sp)
 800aaec:	003d8806 	br	800a110 <__alt_data_end+0xf800a110>
 800aaf0:	d8800617 	ldw	r2,24(sp)
 800aaf4:	00be9b16 	blt	zero,r2,800a564 <__alt_data_end+0xf800a564>
 800aaf8:	10010f1e 	bne	r2,zero,800af38 <_dtoa_r+0x116c>
 800aafc:	880b883a 	mov	r5,r17
 800ab00:	000d883a 	mov	r6,zero
 800ab04:	01d00534 	movhi	r7,16404
 800ab08:	8009883a 	mov	r4,r16
 800ab0c:	8012be80 	call	8012be8 <__muldf3>
 800ab10:	900d883a 	mov	r6,r18
 800ab14:	980f883a 	mov	r7,r19
 800ab18:	1009883a 	mov	r4,r2
 800ab1c:	180b883a 	mov	r5,r3
 800ab20:	8012a180 	call	8012a18 <__gedf2>
 800ab24:	002b883a 	mov	r21,zero
 800ab28:	0023883a 	mov	r17,zero
 800ab2c:	1000bf16 	blt	r2,zero,800ae2c <_dtoa_r+0x1060>
 800ab30:	d9802217 	ldw	r6,136(sp)
 800ab34:	ddc00717 	ldw	r23,28(sp)
 800ab38:	018c303a 	nor	r6,zero,r6
 800ab3c:	d9800515 	stw	r6,20(sp)
 800ab40:	a80b883a 	mov	r5,r21
 800ab44:	e009883a 	mov	r4,fp
 800ab48:	800d2bc0 	call	800d2bc <_Bfree>
 800ab4c:	883e4926 	beq	r17,zero,800a474 <__alt_data_end+0xf800a474>
 800ab50:	003fad06 	br	800aa08 <__alt_data_end+0xf800aa08>
 800ab54:	d9c01117 	ldw	r7,68(sp)
 800ab58:	3801bc26 	beq	r7,zero,800b24c <_dtoa_r+0x1480>
 800ab5c:	10810cc4 	addi	r2,r2,1075
 800ab60:	dd400a17 	ldw	r21,40(sp)
 800ab64:	dd000817 	ldw	r20,32(sp)
 800ab68:	003f0a06 	br	800a794 <__alt_data_end+0xf800a794>
 800ab6c:	00800704 	movi	r2,28
 800ab70:	d9000817 	ldw	r4,32(sp)
 800ab74:	a0a9883a 	add	r20,r20,r2
 800ab78:	b0ad883a 	add	r22,r22,r2
 800ab7c:	2089883a 	add	r4,r4,r2
 800ab80:	d9000815 	stw	r4,32(sp)
 800ab84:	003f5106 	br	800a8cc <__alt_data_end+0xf800a8cc>
 800ab88:	d8c00317 	ldw	r3,12(sp)
 800ab8c:	b8c1fc0e 	bge	r23,r3,800b380 <_dtoa_r+0x15b4>
 800ab90:	0027883a 	mov	r19,zero
 800ab94:	b805883a 	mov	r2,r23
 800ab98:	003f3e06 	br	800a894 <__alt_data_end+0xf800a894>
 800ab9c:	880b883a 	mov	r5,r17
 800aba0:	e009883a 	mov	r4,fp
 800aba4:	000f883a 	mov	r7,zero
 800aba8:	01800284 	movi	r6,10
 800abac:	800d2e40 	call	800d2e4 <__multadd>
 800abb0:	d9000c17 	ldw	r4,48(sp)
 800abb4:	1023883a 	mov	r17,r2
 800abb8:	0102040e 	bge	zero,r4,800b3cc <_dtoa_r+0x1600>
 800abbc:	d9000615 	stw	r4,24(sp)
 800abc0:	0500050e 	bge	zero,r20,800abd8 <_dtoa_r+0xe0c>
 800abc4:	880b883a 	mov	r5,r17
 800abc8:	a00d883a 	mov	r6,r20
 800abcc:	e009883a 	mov	r4,fp
 800abd0:	800da500 	call	800da50 <__lshift>
 800abd4:	1023883a 	mov	r17,r2
 800abd8:	9801241e 	bne	r19,zero,800b06c <_dtoa_r+0x12a0>
 800abdc:	8829883a 	mov	r20,r17
 800abe0:	d9000617 	ldw	r4,24(sp)
 800abe4:	dcc00717 	ldw	r19,28(sp)
 800abe8:	9480004c 	andi	r18,r18,1
 800abec:	20bfffc4 	addi	r2,r4,-1
 800abf0:	9885883a 	add	r2,r19,r2
 800abf4:	d8800415 	stw	r2,16(sp)
 800abf8:	dc800615 	stw	r18,24(sp)
 800abfc:	a80b883a 	mov	r5,r21
 800ac00:	8009883a 	mov	r4,r16
 800ac04:	8009ba40 	call	8009ba4 <quorem>
 800ac08:	880b883a 	mov	r5,r17
 800ac0c:	8009883a 	mov	r4,r16
 800ac10:	102f883a 	mov	r23,r2
 800ac14:	800db980 	call	800db98 <__mcmp>
 800ac18:	a80b883a 	mov	r5,r21
 800ac1c:	a00d883a 	mov	r6,r20
 800ac20:	e009883a 	mov	r4,fp
 800ac24:	102d883a 	mov	r22,r2
 800ac28:	800dbf80 	call	800dbf8 <__mdiff>
 800ac2c:	1007883a 	mov	r3,r2
 800ac30:	10800317 	ldw	r2,12(r2)
 800ac34:	bc800c04 	addi	r18,r23,48
 800ac38:	180b883a 	mov	r5,r3
 800ac3c:	10004e1e 	bne	r2,zero,800ad78 <_dtoa_r+0xfac>
 800ac40:	8009883a 	mov	r4,r16
 800ac44:	d8c01615 	stw	r3,88(sp)
 800ac48:	800db980 	call	800db98 <__mcmp>
 800ac4c:	d8c01617 	ldw	r3,88(sp)
 800ac50:	e009883a 	mov	r4,fp
 800ac54:	d8801615 	stw	r2,88(sp)
 800ac58:	180b883a 	mov	r5,r3
 800ac5c:	800d2bc0 	call	800d2bc <_Bfree>
 800ac60:	d8801617 	ldw	r2,88(sp)
 800ac64:	1000041e 	bne	r2,zero,800ac78 <_dtoa_r+0xeac>
 800ac68:	d9800317 	ldw	r6,12(sp)
 800ac6c:	3000021e 	bne	r6,zero,800ac78 <_dtoa_r+0xeac>
 800ac70:	d8c00617 	ldw	r3,24(sp)
 800ac74:	18003726 	beq	r3,zero,800ad54 <_dtoa_r+0xf88>
 800ac78:	b0002016 	blt	r22,zero,800acfc <_dtoa_r+0xf30>
 800ac7c:	b000041e 	bne	r22,zero,800ac90 <_dtoa_r+0xec4>
 800ac80:	d9000317 	ldw	r4,12(sp)
 800ac84:	2000021e 	bne	r4,zero,800ac90 <_dtoa_r+0xec4>
 800ac88:	d8c00617 	ldw	r3,24(sp)
 800ac8c:	18001b26 	beq	r3,zero,800acfc <_dtoa_r+0xf30>
 800ac90:	00810716 	blt	zero,r2,800b0b0 <_dtoa_r+0x12e4>
 800ac94:	d8c00417 	ldw	r3,16(sp)
 800ac98:	9d800044 	addi	r22,r19,1
 800ac9c:	9c800005 	stb	r18,0(r19)
 800aca0:	b02f883a 	mov	r23,r22
 800aca4:	98c10626 	beq	r19,r3,800b0c0 <_dtoa_r+0x12f4>
 800aca8:	800b883a 	mov	r5,r16
 800acac:	000f883a 	mov	r7,zero
 800acb0:	01800284 	movi	r6,10
 800acb4:	e009883a 	mov	r4,fp
 800acb8:	800d2e40 	call	800d2e4 <__multadd>
 800acbc:	1021883a 	mov	r16,r2
 800acc0:	000f883a 	mov	r7,zero
 800acc4:	01800284 	movi	r6,10
 800acc8:	880b883a 	mov	r5,r17
 800accc:	e009883a 	mov	r4,fp
 800acd0:	8d002526 	beq	r17,r20,800ad68 <_dtoa_r+0xf9c>
 800acd4:	800d2e40 	call	800d2e4 <__multadd>
 800acd8:	a00b883a 	mov	r5,r20
 800acdc:	000f883a 	mov	r7,zero
 800ace0:	01800284 	movi	r6,10
 800ace4:	e009883a 	mov	r4,fp
 800ace8:	1023883a 	mov	r17,r2
 800acec:	800d2e40 	call	800d2e4 <__multadd>
 800acf0:	1029883a 	mov	r20,r2
 800acf4:	b027883a 	mov	r19,r22
 800acf8:	003fc006 	br	800abfc <__alt_data_end+0xf800abfc>
 800acfc:	9011883a 	mov	r8,r18
 800ad00:	00800e0e 	bge	zero,r2,800ad3c <_dtoa_r+0xf70>
 800ad04:	800b883a 	mov	r5,r16
 800ad08:	01800044 	movi	r6,1
 800ad0c:	e009883a 	mov	r4,fp
 800ad10:	da001715 	stw	r8,92(sp)
 800ad14:	800da500 	call	800da50 <__lshift>
 800ad18:	a80b883a 	mov	r5,r21
 800ad1c:	1009883a 	mov	r4,r2
 800ad20:	1021883a 	mov	r16,r2
 800ad24:	800db980 	call	800db98 <__mcmp>
 800ad28:	da001717 	ldw	r8,92(sp)
 800ad2c:	0081960e 	bge	zero,r2,800b388 <_dtoa_r+0x15bc>
 800ad30:	00800e44 	movi	r2,57
 800ad34:	40817026 	beq	r8,r2,800b2f8 <_dtoa_r+0x152c>
 800ad38:	ba000c44 	addi	r8,r23,49
 800ad3c:	8825883a 	mov	r18,r17
 800ad40:	9dc00044 	addi	r23,r19,1
 800ad44:	9a000005 	stb	r8,0(r19)
 800ad48:	a023883a 	mov	r17,r20
 800ad4c:	dc000915 	stw	r16,36(sp)
 800ad50:	003f2406 	br	800a9e4 <__alt_data_end+0xf800a9e4>
 800ad54:	00800e44 	movi	r2,57
 800ad58:	9011883a 	mov	r8,r18
 800ad5c:	90816626 	beq	r18,r2,800b2f8 <_dtoa_r+0x152c>
 800ad60:	05bff516 	blt	zero,r22,800ad38 <__alt_data_end+0xf800ad38>
 800ad64:	003ff506 	br	800ad3c <__alt_data_end+0xf800ad3c>
 800ad68:	800d2e40 	call	800d2e4 <__multadd>
 800ad6c:	1023883a 	mov	r17,r2
 800ad70:	1029883a 	mov	r20,r2
 800ad74:	003fdf06 	br	800acf4 <__alt_data_end+0xf800acf4>
 800ad78:	e009883a 	mov	r4,fp
 800ad7c:	800d2bc0 	call	800d2bc <_Bfree>
 800ad80:	00800044 	movi	r2,1
 800ad84:	003fbc06 	br	800ac78 <__alt_data_end+0xf800ac78>
 800ad88:	a80b883a 	mov	r5,r21
 800ad8c:	8009883a 	mov	r4,r16
 800ad90:	800db980 	call	800db98 <__mcmp>
 800ad94:	103edb0e 	bge	r2,zero,800a904 <__alt_data_end+0xf800a904>
 800ad98:	800b883a 	mov	r5,r16
 800ad9c:	000f883a 	mov	r7,zero
 800ada0:	01800284 	movi	r6,10
 800ada4:	e009883a 	mov	r4,fp
 800ada8:	800d2e40 	call	800d2e4 <__multadd>
 800adac:	1021883a 	mov	r16,r2
 800adb0:	d8800517 	ldw	r2,20(sp)
 800adb4:	d8c00b17 	ldw	r3,44(sp)
 800adb8:	10bfffc4 	addi	r2,r2,-1
 800adbc:	d8800515 	stw	r2,20(sp)
 800adc0:	183f761e 	bne	r3,zero,800ab9c <__alt_data_end+0xf800ab9c>
 800adc4:	d9000c17 	ldw	r4,48(sp)
 800adc8:	0101730e 	bge	zero,r4,800b398 <_dtoa_r+0x15cc>
 800adcc:	d9000615 	stw	r4,24(sp)
 800add0:	003ed006 	br	800a914 <__alt_data_end+0xf800a914>
 800add4:	00800084 	movi	r2,2
 800add8:	3081861e 	bne	r6,r2,800b3f4 <_dtoa_r+0x1628>
 800addc:	d8000b15 	stw	zero,44(sp)
 800ade0:	003f3c06 	br	800aad4 <__alt_data_end+0xf800aad4>
 800ade4:	dc000917 	ldw	r16,36(sp)
 800ade8:	003e9206 	br	800a834 <__alt_data_end+0xf800a834>
 800adec:	d9c00317 	ldw	r7,12(sp)
 800adf0:	00800084 	movi	r2,2
 800adf4:	11fec50e 	bge	r2,r7,800a90c <__alt_data_end+0xf800a90c>
 800adf8:	d9000617 	ldw	r4,24(sp)
 800adfc:	20013c1e 	bne	r4,zero,800b2f0 <_dtoa_r+0x1524>
 800ae00:	a80b883a 	mov	r5,r21
 800ae04:	000f883a 	mov	r7,zero
 800ae08:	01800144 	movi	r6,5
 800ae0c:	e009883a 	mov	r4,fp
 800ae10:	800d2e40 	call	800d2e4 <__multadd>
 800ae14:	100b883a 	mov	r5,r2
 800ae18:	8009883a 	mov	r4,r16
 800ae1c:	102b883a 	mov	r21,r2
 800ae20:	800db980 	call	800db98 <__mcmp>
 800ae24:	dc000915 	stw	r16,36(sp)
 800ae28:	00bf410e 	bge	zero,r2,800ab30 <__alt_data_end+0xf800ab30>
 800ae2c:	d9c00717 	ldw	r7,28(sp)
 800ae30:	00800c44 	movi	r2,49
 800ae34:	38800005 	stb	r2,0(r7)
 800ae38:	d8800517 	ldw	r2,20(sp)
 800ae3c:	3dc00044 	addi	r23,r7,1
 800ae40:	10800044 	addi	r2,r2,1
 800ae44:	d8800515 	stw	r2,20(sp)
 800ae48:	003f3d06 	br	800ab40 <__alt_data_end+0xf800ab40>
 800ae4c:	d9800517 	ldw	r6,20(sp)
 800ae50:	d9c00717 	ldw	r7,28(sp)
 800ae54:	00800c44 	movi	r2,49
 800ae58:	31800044 	addi	r6,r6,1
 800ae5c:	d9800515 	stw	r6,20(sp)
 800ae60:	38800005 	stb	r2,0(r7)
 800ae64:	003edf06 	br	800a9e4 <__alt_data_end+0xf800a9e4>
 800ae68:	d8000b15 	stw	zero,44(sp)
 800ae6c:	003c9f06 	br	800a0ec <__alt_data_end+0xf800a0ec>
 800ae70:	903e7e1e 	bne	r18,zero,800a86c <__alt_data_end+0xf800a86c>
 800ae74:	00800434 	movhi	r2,16
 800ae78:	10bfffc4 	addi	r2,r2,-1
 800ae7c:	9884703a 	and	r2,r19,r2
 800ae80:	1000ea1e 	bne	r2,zero,800b22c <_dtoa_r+0x1460>
 800ae84:	9cdffc2c 	andhi	r19,r19,32752
 800ae88:	9800e826 	beq	r19,zero,800b22c <_dtoa_r+0x1460>
 800ae8c:	d9c00817 	ldw	r7,32(sp)
 800ae90:	b5800044 	addi	r22,r22,1
 800ae94:	04c00044 	movi	r19,1
 800ae98:	39c00044 	addi	r7,r7,1
 800ae9c:	d9c00815 	stw	r7,32(sp)
 800aea0:	d8800d17 	ldw	r2,52(sp)
 800aea4:	103e721e 	bne	r2,zero,800a870 <__alt_data_end+0xf800a870>
 800aea8:	00800044 	movi	r2,1
 800aeac:	003e7906 	br	800a894 <__alt_data_end+0xf800a894>
 800aeb0:	8009883a 	mov	r4,r16
 800aeb4:	8013dd00 	call	8013dd0 <__floatsidf>
 800aeb8:	d9800f17 	ldw	r6,60(sp)
 800aebc:	d9c01017 	ldw	r7,64(sp)
 800aec0:	1009883a 	mov	r4,r2
 800aec4:	180b883a 	mov	r5,r3
 800aec8:	8012be80 	call	8012be8 <__muldf3>
 800aecc:	000d883a 	mov	r6,zero
 800aed0:	01d00734 	movhi	r7,16412
 800aed4:	1009883a 	mov	r4,r2
 800aed8:	180b883a 	mov	r5,r3
 800aedc:	80117140 	call	8011714 <__adddf3>
 800aee0:	047f3034 	movhi	r17,64704
 800aee4:	1021883a 	mov	r16,r2
 800aee8:	1c63883a 	add	r17,r3,r17
 800aeec:	d9000f17 	ldw	r4,60(sp)
 800aef0:	d9401017 	ldw	r5,64(sp)
 800aef4:	000d883a 	mov	r6,zero
 800aef8:	01d00534 	movhi	r7,16404
 800aefc:	80134540 	call	8013454 <__subdf3>
 800af00:	800d883a 	mov	r6,r16
 800af04:	880f883a 	mov	r7,r17
 800af08:	1009883a 	mov	r4,r2
 800af0c:	180b883a 	mov	r5,r3
 800af10:	102b883a 	mov	r21,r2
 800af14:	1829883a 	mov	r20,r3
 800af18:	8012a180 	call	8012a18 <__gedf2>
 800af1c:	00806c16 	blt	zero,r2,800b0d0 <_dtoa_r+0x1304>
 800af20:	89e0003c 	xorhi	r7,r17,32768
 800af24:	800d883a 	mov	r6,r16
 800af28:	a809883a 	mov	r4,r21
 800af2c:	a00b883a 	mov	r5,r20
 800af30:	8012af40 	call	8012af4 <__ledf2>
 800af34:	103d7e0e 	bge	r2,zero,800a530 <__alt_data_end+0xf800a530>
 800af38:	002b883a 	mov	r21,zero
 800af3c:	0023883a 	mov	r17,zero
 800af40:	003efb06 	br	800ab30 <__alt_data_end+0xf800ab30>
 800af44:	d8800717 	ldw	r2,28(sp)
 800af48:	003bd006 	br	8009e8c <__alt_data_end+0xf8009e8c>
 800af4c:	d9000a17 	ldw	r4,40(sp)
 800af50:	d9800d17 	ldw	r6,52(sp)
 800af54:	dd400a15 	stw	r21,40(sp)
 800af58:	a905c83a 	sub	r2,r21,r4
 800af5c:	308d883a 	add	r6,r6,r2
 800af60:	d9800d15 	stw	r6,52(sp)
 800af64:	002b883a 	mov	r21,zero
 800af68:	003e0606 	br	800a784 <__alt_data_end+0xf800a784>
 800af6c:	9023883a 	mov	r17,r18
 800af70:	9829883a 	mov	r20,r19
 800af74:	04000084 	movi	r16,2
 800af78:	003c9206 	br	800a1c4 <__alt_data_end+0xf800a1c4>
 800af7c:	04000044 	movi	r16,1
 800af80:	dc000c15 	stw	r16,48(sp)
 800af84:	dc000615 	stw	r16,24(sp)
 800af88:	dc002215 	stw	r16,136(sp)
 800af8c:	e0001115 	stw	zero,68(fp)
 800af90:	000b883a 	mov	r5,zero
 800af94:	003c6906 	br	800a13c <__alt_data_end+0xf800a13c>
 800af98:	3021883a 	mov	r16,r6
 800af9c:	003ffb06 	br	800af8c <__alt_data_end+0xf800af8c>
 800afa0:	1000021e 	bne	r2,zero,800afac <_dtoa_r+0x11e0>
 800afa4:	4200004c 	andi	r8,r8,1
 800afa8:	403e7d1e 	bne	r8,zero,800a9a0 <__alt_data_end+0xf800a9a0>
 800afac:	01000c04 	movi	r4,48
 800afb0:	00000106 	br	800afb8 <_dtoa_r+0x11ec>
 800afb4:	102f883a 	mov	r23,r2
 800afb8:	b8bfffc4 	addi	r2,r23,-1
 800afbc:	10c00007 	ldb	r3,0(r2)
 800afc0:	193ffc26 	beq	r3,r4,800afb4 <__alt_data_end+0xf800afb4>
 800afc4:	003e8706 	br	800a9e4 <__alt_data_end+0xf800a9e4>
 800afc8:	d8800517 	ldw	r2,20(sp)
 800afcc:	00a3c83a 	sub	r17,zero,r2
 800afd0:	8800a426 	beq	r17,zero,800b264 <_dtoa_r+0x1498>
 800afd4:	888003cc 	andi	r2,r17,15
 800afd8:	100490fa 	slli	r2,r2,3
 800afdc:	00c20074 	movhi	r3,2049
 800afe0:	18d9e504 	addi	r3,r3,26516
 800afe4:	1885883a 	add	r2,r3,r2
 800afe8:	11800017 	ldw	r6,0(r2)
 800afec:	11c00117 	ldw	r7,4(r2)
 800aff0:	9009883a 	mov	r4,r18
 800aff4:	980b883a 	mov	r5,r19
 800aff8:	8823d13a 	srai	r17,r17,4
 800affc:	8012be80 	call	8012be8 <__muldf3>
 800b000:	d8800f15 	stw	r2,60(sp)
 800b004:	d8c01015 	stw	r3,64(sp)
 800b008:	8800e826 	beq	r17,zero,800b3ac <_dtoa_r+0x15e0>
 800b00c:	05020074 	movhi	r20,2049
 800b010:	a519db04 	addi	r20,r20,26476
 800b014:	04000084 	movi	r16,2
 800b018:	8980004c 	andi	r6,r17,1
 800b01c:	1009883a 	mov	r4,r2
 800b020:	8823d07a 	srai	r17,r17,1
 800b024:	180b883a 	mov	r5,r3
 800b028:	30000426 	beq	r6,zero,800b03c <_dtoa_r+0x1270>
 800b02c:	a1800017 	ldw	r6,0(r20)
 800b030:	a1c00117 	ldw	r7,4(r20)
 800b034:	84000044 	addi	r16,r16,1
 800b038:	8012be80 	call	8012be8 <__muldf3>
 800b03c:	a5000204 	addi	r20,r20,8
 800b040:	883ff51e 	bne	r17,zero,800b018 <__alt_data_end+0xf800b018>
 800b044:	d8800f15 	stw	r2,60(sp)
 800b048:	d8c01015 	stw	r3,64(sp)
 800b04c:	003c7606 	br	800a228 <__alt_data_end+0xf800a228>
 800b050:	00c00c04 	movi	r3,48
 800b054:	10c00005 	stb	r3,0(r2)
 800b058:	d8c00517 	ldw	r3,20(sp)
 800b05c:	bd3fffc3 	ldbu	r20,-1(r23)
 800b060:	18c00044 	addi	r3,r3,1
 800b064:	d8c00515 	stw	r3,20(sp)
 800b068:	003db906 	br	800a750 <__alt_data_end+0xf800a750>
 800b06c:	89400117 	ldw	r5,4(r17)
 800b070:	e009883a 	mov	r4,fp
 800b074:	800d2140 	call	800d214 <_Balloc>
 800b078:	89800417 	ldw	r6,16(r17)
 800b07c:	89400304 	addi	r5,r17,12
 800b080:	11000304 	addi	r4,r2,12
 800b084:	31800084 	addi	r6,r6,2
 800b088:	318d883a 	add	r6,r6,r6
 800b08c:	318d883a 	add	r6,r6,r6
 800b090:	1027883a 	mov	r19,r2
 800b094:	80072540 	call	8007254 <memcpy>
 800b098:	01800044 	movi	r6,1
 800b09c:	980b883a 	mov	r5,r19
 800b0a0:	e009883a 	mov	r4,fp
 800b0a4:	800da500 	call	800da50 <__lshift>
 800b0a8:	1029883a 	mov	r20,r2
 800b0ac:	003ecc06 	br	800abe0 <__alt_data_end+0xf800abe0>
 800b0b0:	00800e44 	movi	r2,57
 800b0b4:	90809026 	beq	r18,r2,800b2f8 <_dtoa_r+0x152c>
 800b0b8:	92000044 	addi	r8,r18,1
 800b0bc:	003f1f06 	br	800ad3c <__alt_data_end+0xf800ad3c>
 800b0c0:	9011883a 	mov	r8,r18
 800b0c4:	8825883a 	mov	r18,r17
 800b0c8:	a023883a 	mov	r17,r20
 800b0cc:	003e2906 	br	800a974 <__alt_data_end+0xf800a974>
 800b0d0:	002b883a 	mov	r21,zero
 800b0d4:	0023883a 	mov	r17,zero
 800b0d8:	003f5406 	br	800ae2c <__alt_data_end+0xf800ae2c>
 800b0dc:	61bfffc4 	addi	r6,r12,-1
 800b0e0:	300490fa 	slli	r2,r6,3
 800b0e4:	00c20074 	movhi	r3,2049
 800b0e8:	18d9e504 	addi	r3,r3,26516
 800b0ec:	1885883a 	add	r2,r3,r2
 800b0f0:	11000017 	ldw	r4,0(r2)
 800b0f4:	11400117 	ldw	r5,4(r2)
 800b0f8:	d8800717 	ldw	r2,28(sp)
 800b0fc:	880f883a 	mov	r7,r17
 800b100:	d9801215 	stw	r6,72(sp)
 800b104:	800d883a 	mov	r6,r16
 800b108:	db001615 	stw	r12,88(sp)
 800b10c:	15c00044 	addi	r23,r2,1
 800b110:	8012be80 	call	8012be8 <__muldf3>
 800b114:	d9401017 	ldw	r5,64(sp)
 800b118:	d9000f17 	ldw	r4,60(sp)
 800b11c:	d8c01515 	stw	r3,84(sp)
 800b120:	d8801415 	stw	r2,80(sp)
 800b124:	8013d500 	call	8013d50 <__fixdfsi>
 800b128:	1009883a 	mov	r4,r2
 800b12c:	1021883a 	mov	r16,r2
 800b130:	8013dd00 	call	8013dd0 <__floatsidf>
 800b134:	d9000f17 	ldw	r4,60(sp)
 800b138:	d9401017 	ldw	r5,64(sp)
 800b13c:	100d883a 	mov	r6,r2
 800b140:	180f883a 	mov	r7,r3
 800b144:	80134540 	call	8013454 <__subdf3>
 800b148:	1829883a 	mov	r20,r3
 800b14c:	d8c00717 	ldw	r3,28(sp)
 800b150:	84000c04 	addi	r16,r16,48
 800b154:	1023883a 	mov	r17,r2
 800b158:	1c000005 	stb	r16,0(r3)
 800b15c:	db001617 	ldw	r12,88(sp)
 800b160:	00800044 	movi	r2,1
 800b164:	60802226 	beq	r12,r2,800b1f0 <_dtoa_r+0x1424>
 800b168:	d9c00717 	ldw	r7,28(sp)
 800b16c:	8805883a 	mov	r2,r17
 800b170:	b82b883a 	mov	r21,r23
 800b174:	3b19883a 	add	r12,r7,r12
 800b178:	6023883a 	mov	r17,r12
 800b17c:	a007883a 	mov	r3,r20
 800b180:	dc800f15 	stw	r18,60(sp)
 800b184:	000d883a 	mov	r6,zero
 800b188:	01d00934 	movhi	r7,16420
 800b18c:	1009883a 	mov	r4,r2
 800b190:	180b883a 	mov	r5,r3
 800b194:	8012be80 	call	8012be8 <__muldf3>
 800b198:	180b883a 	mov	r5,r3
 800b19c:	1009883a 	mov	r4,r2
 800b1a0:	1829883a 	mov	r20,r3
 800b1a4:	1025883a 	mov	r18,r2
 800b1a8:	8013d500 	call	8013d50 <__fixdfsi>
 800b1ac:	1009883a 	mov	r4,r2
 800b1b0:	1021883a 	mov	r16,r2
 800b1b4:	8013dd00 	call	8013dd0 <__floatsidf>
 800b1b8:	100d883a 	mov	r6,r2
 800b1bc:	180f883a 	mov	r7,r3
 800b1c0:	9009883a 	mov	r4,r18
 800b1c4:	a00b883a 	mov	r5,r20
 800b1c8:	84000c04 	addi	r16,r16,48
 800b1cc:	80134540 	call	8013454 <__subdf3>
 800b1d0:	ad400044 	addi	r21,r21,1
 800b1d4:	ac3fffc5 	stb	r16,-1(r21)
 800b1d8:	ac7fea1e 	bne	r21,r17,800b184 <__alt_data_end+0xf800b184>
 800b1dc:	1023883a 	mov	r17,r2
 800b1e0:	d8801217 	ldw	r2,72(sp)
 800b1e4:	dc800f17 	ldw	r18,60(sp)
 800b1e8:	1829883a 	mov	r20,r3
 800b1ec:	b8af883a 	add	r23,r23,r2
 800b1f0:	d9001417 	ldw	r4,80(sp)
 800b1f4:	d9401517 	ldw	r5,84(sp)
 800b1f8:	000d883a 	mov	r6,zero
 800b1fc:	01cff834 	movhi	r7,16352
 800b200:	80117140 	call	8011714 <__adddf3>
 800b204:	880d883a 	mov	r6,r17
 800b208:	a00f883a 	mov	r7,r20
 800b20c:	1009883a 	mov	r4,r2
 800b210:	180b883a 	mov	r5,r3
 800b214:	8012af40 	call	8012af4 <__ledf2>
 800b218:	10003e0e 	bge	r2,zero,800b314 <_dtoa_r+0x1548>
 800b21c:	d9001317 	ldw	r4,76(sp)
 800b220:	bd3fffc3 	ldbu	r20,-1(r23)
 800b224:	d9000515 	stw	r4,20(sp)
 800b228:	003d3b06 	br	800a718 <__alt_data_end+0xf800a718>
 800b22c:	0027883a 	mov	r19,zero
 800b230:	003f1b06 	br	800aea0 <__alt_data_end+0xf800aea0>
 800b234:	d8800817 	ldw	r2,32(sp)
 800b238:	11e9c83a 	sub	r20,r2,r7
 800b23c:	0005883a 	mov	r2,zero
 800b240:	003d5406 	br	800a794 <__alt_data_end+0xf800a794>
 800b244:	00800044 	movi	r2,1
 800b248:	003dc706 	br	800a968 <__alt_data_end+0xf800a968>
 800b24c:	d8c00217 	ldw	r3,8(sp)
 800b250:	00800d84 	movi	r2,54
 800b254:	dd400a17 	ldw	r21,40(sp)
 800b258:	10c5c83a 	sub	r2,r2,r3
 800b25c:	dd000817 	ldw	r20,32(sp)
 800b260:	003d4c06 	br	800a794 <__alt_data_end+0xf800a794>
 800b264:	dc800f15 	stw	r18,60(sp)
 800b268:	dcc01015 	stw	r19,64(sp)
 800b26c:	04000084 	movi	r16,2
 800b270:	003bed06 	br	800a228 <__alt_data_end+0xf800a228>
 800b274:	d9000617 	ldw	r4,24(sp)
 800b278:	203f0d26 	beq	r4,zero,800aeb0 <__alt_data_end+0xf800aeb0>
 800b27c:	d9800c17 	ldw	r6,48(sp)
 800b280:	01bcab0e 	bge	zero,r6,800a530 <__alt_data_end+0xf800a530>
 800b284:	d9401017 	ldw	r5,64(sp)
 800b288:	d9000f17 	ldw	r4,60(sp)
 800b28c:	000d883a 	mov	r6,zero
 800b290:	01d00934 	movhi	r7,16420
 800b294:	8012be80 	call	8012be8 <__muldf3>
 800b298:	81000044 	addi	r4,r16,1
 800b29c:	d8800f15 	stw	r2,60(sp)
 800b2a0:	d8c01015 	stw	r3,64(sp)
 800b2a4:	8013dd00 	call	8013dd0 <__floatsidf>
 800b2a8:	d9800f17 	ldw	r6,60(sp)
 800b2ac:	d9c01017 	ldw	r7,64(sp)
 800b2b0:	1009883a 	mov	r4,r2
 800b2b4:	180b883a 	mov	r5,r3
 800b2b8:	8012be80 	call	8012be8 <__muldf3>
 800b2bc:	01d00734 	movhi	r7,16412
 800b2c0:	000d883a 	mov	r6,zero
 800b2c4:	1009883a 	mov	r4,r2
 800b2c8:	180b883a 	mov	r5,r3
 800b2cc:	80117140 	call	8011714 <__adddf3>
 800b2d0:	d9c00517 	ldw	r7,20(sp)
 800b2d4:	047f3034 	movhi	r17,64704
 800b2d8:	1021883a 	mov	r16,r2
 800b2dc:	39ffffc4 	addi	r7,r7,-1
 800b2e0:	d9c01315 	stw	r7,76(sp)
 800b2e4:	1c63883a 	add	r17,r3,r17
 800b2e8:	db000c17 	ldw	r12,48(sp)
 800b2ec:	003bea06 	br	800a298 <__alt_data_end+0xf800a298>
 800b2f0:	dc000915 	stw	r16,36(sp)
 800b2f4:	003e0e06 	br	800ab30 <__alt_data_end+0xf800ab30>
 800b2f8:	01000e44 	movi	r4,57
 800b2fc:	8825883a 	mov	r18,r17
 800b300:	9dc00044 	addi	r23,r19,1
 800b304:	99000005 	stb	r4,0(r19)
 800b308:	a023883a 	mov	r17,r20
 800b30c:	dc000915 	stw	r16,36(sp)
 800b310:	003da406 	br	800a9a4 <__alt_data_end+0xf800a9a4>
 800b314:	d9801417 	ldw	r6,80(sp)
 800b318:	d9c01517 	ldw	r7,84(sp)
 800b31c:	0009883a 	mov	r4,zero
 800b320:	014ff834 	movhi	r5,16352
 800b324:	80134540 	call	8013454 <__subdf3>
 800b328:	880d883a 	mov	r6,r17
 800b32c:	a00f883a 	mov	r7,r20
 800b330:	1009883a 	mov	r4,r2
 800b334:	180b883a 	mov	r5,r3
 800b338:	8012a180 	call	8012a18 <__gedf2>
 800b33c:	00bc7c0e 	bge	zero,r2,800a530 <__alt_data_end+0xf800a530>
 800b340:	01000c04 	movi	r4,48
 800b344:	00000106 	br	800b34c <_dtoa_r+0x1580>
 800b348:	102f883a 	mov	r23,r2
 800b34c:	b8bfffc4 	addi	r2,r23,-1
 800b350:	10c00007 	ldb	r3,0(r2)
 800b354:	193ffc26 	beq	r3,r4,800b348 <__alt_data_end+0xf800b348>
 800b358:	d9801317 	ldw	r6,76(sp)
 800b35c:	d9800515 	stw	r6,20(sp)
 800b360:	003c4406 	br	800a474 <__alt_data_end+0xf800a474>
 800b364:	d9801317 	ldw	r6,76(sp)
 800b368:	d9800515 	stw	r6,20(sp)
 800b36c:	003cea06 	br	800a718 <__alt_data_end+0xf800a718>
 800b370:	dd800f17 	ldw	r22,60(sp)
 800b374:	dcc01017 	ldw	r19,64(sp)
 800b378:	dc801217 	ldw	r18,72(sp)
 800b37c:	003c6c06 	br	800a530 <__alt_data_end+0xf800a530>
 800b380:	903e031e 	bne	r18,zero,800ab90 <__alt_data_end+0xf800ab90>
 800b384:	003ebb06 	br	800ae74 <__alt_data_end+0xf800ae74>
 800b388:	103e6c1e 	bne	r2,zero,800ad3c <__alt_data_end+0xf800ad3c>
 800b38c:	4080004c 	andi	r2,r8,1
 800b390:	103e6a26 	beq	r2,zero,800ad3c <__alt_data_end+0xf800ad3c>
 800b394:	003e6606 	br	800ad30 <__alt_data_end+0xf800ad30>
 800b398:	d8c00317 	ldw	r3,12(sp)
 800b39c:	00800084 	movi	r2,2
 800b3a0:	10c02916 	blt	r2,r3,800b448 <_dtoa_r+0x167c>
 800b3a4:	d9000c17 	ldw	r4,48(sp)
 800b3a8:	003e8806 	br	800adcc <__alt_data_end+0xf800adcc>
 800b3ac:	04000084 	movi	r16,2
 800b3b0:	003b9d06 	br	800a228 <__alt_data_end+0xf800a228>
 800b3b4:	d9001317 	ldw	r4,76(sp)
 800b3b8:	d9000515 	stw	r4,20(sp)
 800b3bc:	003cd606 	br	800a718 <__alt_data_end+0xf800a718>
 800b3c0:	d8801317 	ldw	r2,76(sp)
 800b3c4:	d8800515 	stw	r2,20(sp)
 800b3c8:	003c2a06 	br	800a474 <__alt_data_end+0xf800a474>
 800b3cc:	d9800317 	ldw	r6,12(sp)
 800b3d0:	00800084 	movi	r2,2
 800b3d4:	11801516 	blt	r2,r6,800b42c <_dtoa_r+0x1660>
 800b3d8:	d9c00c17 	ldw	r7,48(sp)
 800b3dc:	d9c00615 	stw	r7,24(sp)
 800b3e0:	003df706 	br	800abc0 <__alt_data_end+0xf800abc0>
 800b3e4:	193d3926 	beq	r3,r4,800a8cc <__alt_data_end+0xf800a8cc>
 800b3e8:	00c00f04 	movi	r3,60
 800b3ec:	1885c83a 	sub	r2,r3,r2
 800b3f0:	003ddf06 	br	800ab70 <__alt_data_end+0xf800ab70>
 800b3f4:	e009883a 	mov	r4,fp
 800b3f8:	e0001115 	stw	zero,68(fp)
 800b3fc:	000b883a 	mov	r5,zero
 800b400:	800d2140 	call	800d214 <_Balloc>
 800b404:	d8800715 	stw	r2,28(sp)
 800b408:	d8c00717 	ldw	r3,28(sp)
 800b40c:	00bfffc4 	movi	r2,-1
 800b410:	01000044 	movi	r4,1
 800b414:	d8800c15 	stw	r2,48(sp)
 800b418:	e0c01015 	stw	r3,64(fp)
 800b41c:	d9000b15 	stw	r4,44(sp)
 800b420:	d8800615 	stw	r2,24(sp)
 800b424:	d8002215 	stw	zero,136(sp)
 800b428:	003c4106 	br	800a530 <__alt_data_end+0xf800a530>
 800b42c:	d8c00c17 	ldw	r3,48(sp)
 800b430:	d8c00615 	stw	r3,24(sp)
 800b434:	003e7006 	br	800adf8 <__alt_data_end+0xf800adf8>
 800b438:	04400044 	movi	r17,1
 800b43c:	003b2006 	br	800a0c0 <__alt_data_end+0xf800a0c0>
 800b440:	000b883a 	mov	r5,zero
 800b444:	003b3d06 	br	800a13c <__alt_data_end+0xf800a13c>
 800b448:	d8800c17 	ldw	r2,48(sp)
 800b44c:	d8800615 	stw	r2,24(sp)
 800b450:	003e6906 	br	800adf8 <__alt_data_end+0xf800adf8>

0800b454 <__sflush_r>:
 800b454:	2880030b 	ldhu	r2,12(r5)
 800b458:	defffb04 	addi	sp,sp,-20
 800b45c:	dcc00315 	stw	r19,12(sp)
 800b460:	dc400115 	stw	r17,4(sp)
 800b464:	dfc00415 	stw	ra,16(sp)
 800b468:	dc800215 	stw	r18,8(sp)
 800b46c:	dc000015 	stw	r16,0(sp)
 800b470:	10c0020c 	andi	r3,r2,8
 800b474:	2823883a 	mov	r17,r5
 800b478:	2027883a 	mov	r19,r4
 800b47c:	1800311e 	bne	r3,zero,800b544 <__sflush_r+0xf0>
 800b480:	28c00117 	ldw	r3,4(r5)
 800b484:	10820014 	ori	r2,r2,2048
 800b488:	2880030d 	sth	r2,12(r5)
 800b48c:	00c04b0e 	bge	zero,r3,800b5bc <__sflush_r+0x168>
 800b490:	8a000a17 	ldw	r8,40(r17)
 800b494:	40002326 	beq	r8,zero,800b524 <__sflush_r+0xd0>
 800b498:	9c000017 	ldw	r16,0(r19)
 800b49c:	10c4000c 	andi	r3,r2,4096
 800b4a0:	98000015 	stw	zero,0(r19)
 800b4a4:	18004826 	beq	r3,zero,800b5c8 <__sflush_r+0x174>
 800b4a8:	89801417 	ldw	r6,80(r17)
 800b4ac:	10c0010c 	andi	r3,r2,4
 800b4b0:	18000626 	beq	r3,zero,800b4cc <__sflush_r+0x78>
 800b4b4:	88c00117 	ldw	r3,4(r17)
 800b4b8:	88800c17 	ldw	r2,48(r17)
 800b4bc:	30cdc83a 	sub	r6,r6,r3
 800b4c0:	10000226 	beq	r2,zero,800b4cc <__sflush_r+0x78>
 800b4c4:	88800f17 	ldw	r2,60(r17)
 800b4c8:	308dc83a 	sub	r6,r6,r2
 800b4cc:	89400717 	ldw	r5,28(r17)
 800b4d0:	000f883a 	mov	r7,zero
 800b4d4:	9809883a 	mov	r4,r19
 800b4d8:	403ee83a 	callr	r8
 800b4dc:	00ffffc4 	movi	r3,-1
 800b4e0:	10c04426 	beq	r2,r3,800b5f4 <__sflush_r+0x1a0>
 800b4e4:	88c0030b 	ldhu	r3,12(r17)
 800b4e8:	89000417 	ldw	r4,16(r17)
 800b4ec:	88000115 	stw	zero,4(r17)
 800b4f0:	197dffcc 	andi	r5,r3,63487
 800b4f4:	8940030d 	sth	r5,12(r17)
 800b4f8:	89000015 	stw	r4,0(r17)
 800b4fc:	18c4000c 	andi	r3,r3,4096
 800b500:	18002c1e 	bne	r3,zero,800b5b4 <__sflush_r+0x160>
 800b504:	89400c17 	ldw	r5,48(r17)
 800b508:	9c000015 	stw	r16,0(r19)
 800b50c:	28000526 	beq	r5,zero,800b524 <__sflush_r+0xd0>
 800b510:	88801004 	addi	r2,r17,64
 800b514:	28800226 	beq	r5,r2,800b520 <__sflush_r+0xcc>
 800b518:	9809883a 	mov	r4,r19
 800b51c:	800bbd00 	call	800bbd0 <_free_r>
 800b520:	88000c15 	stw	zero,48(r17)
 800b524:	0005883a 	mov	r2,zero
 800b528:	dfc00417 	ldw	ra,16(sp)
 800b52c:	dcc00317 	ldw	r19,12(sp)
 800b530:	dc800217 	ldw	r18,8(sp)
 800b534:	dc400117 	ldw	r17,4(sp)
 800b538:	dc000017 	ldw	r16,0(sp)
 800b53c:	dec00504 	addi	sp,sp,20
 800b540:	f800283a 	ret
 800b544:	2c800417 	ldw	r18,16(r5)
 800b548:	903ff626 	beq	r18,zero,800b524 <__alt_data_end+0xf800b524>
 800b54c:	2c000017 	ldw	r16,0(r5)
 800b550:	108000cc 	andi	r2,r2,3
 800b554:	2c800015 	stw	r18,0(r5)
 800b558:	84a1c83a 	sub	r16,r16,r18
 800b55c:	1000131e 	bne	r2,zero,800b5ac <__sflush_r+0x158>
 800b560:	28800517 	ldw	r2,20(r5)
 800b564:	88800215 	stw	r2,8(r17)
 800b568:	04000316 	blt	zero,r16,800b578 <__sflush_r+0x124>
 800b56c:	003fed06 	br	800b524 <__alt_data_end+0xf800b524>
 800b570:	90a5883a 	add	r18,r18,r2
 800b574:	043feb0e 	bge	zero,r16,800b524 <__alt_data_end+0xf800b524>
 800b578:	88800917 	ldw	r2,36(r17)
 800b57c:	89400717 	ldw	r5,28(r17)
 800b580:	800f883a 	mov	r7,r16
 800b584:	900d883a 	mov	r6,r18
 800b588:	9809883a 	mov	r4,r19
 800b58c:	103ee83a 	callr	r2
 800b590:	80a1c83a 	sub	r16,r16,r2
 800b594:	00bff616 	blt	zero,r2,800b570 <__alt_data_end+0xf800b570>
 800b598:	88c0030b 	ldhu	r3,12(r17)
 800b59c:	00bfffc4 	movi	r2,-1
 800b5a0:	18c01014 	ori	r3,r3,64
 800b5a4:	88c0030d 	sth	r3,12(r17)
 800b5a8:	003fdf06 	br	800b528 <__alt_data_end+0xf800b528>
 800b5ac:	0005883a 	mov	r2,zero
 800b5b0:	003fec06 	br	800b564 <__alt_data_end+0xf800b564>
 800b5b4:	88801415 	stw	r2,80(r17)
 800b5b8:	003fd206 	br	800b504 <__alt_data_end+0xf800b504>
 800b5bc:	28c00f17 	ldw	r3,60(r5)
 800b5c0:	00ffb316 	blt	zero,r3,800b490 <__alt_data_end+0xf800b490>
 800b5c4:	003fd706 	br	800b524 <__alt_data_end+0xf800b524>
 800b5c8:	89400717 	ldw	r5,28(r17)
 800b5cc:	000d883a 	mov	r6,zero
 800b5d0:	01c00044 	movi	r7,1
 800b5d4:	9809883a 	mov	r4,r19
 800b5d8:	403ee83a 	callr	r8
 800b5dc:	100d883a 	mov	r6,r2
 800b5e0:	00bfffc4 	movi	r2,-1
 800b5e4:	30801426 	beq	r6,r2,800b638 <__sflush_r+0x1e4>
 800b5e8:	8880030b 	ldhu	r2,12(r17)
 800b5ec:	8a000a17 	ldw	r8,40(r17)
 800b5f0:	003fae06 	br	800b4ac <__alt_data_end+0xf800b4ac>
 800b5f4:	98c00017 	ldw	r3,0(r19)
 800b5f8:	183fba26 	beq	r3,zero,800b4e4 <__alt_data_end+0xf800b4e4>
 800b5fc:	01000744 	movi	r4,29
 800b600:	19000626 	beq	r3,r4,800b61c <__sflush_r+0x1c8>
 800b604:	01000584 	movi	r4,22
 800b608:	19000426 	beq	r3,r4,800b61c <__sflush_r+0x1c8>
 800b60c:	88c0030b 	ldhu	r3,12(r17)
 800b610:	18c01014 	ori	r3,r3,64
 800b614:	88c0030d 	sth	r3,12(r17)
 800b618:	003fc306 	br	800b528 <__alt_data_end+0xf800b528>
 800b61c:	8880030b 	ldhu	r2,12(r17)
 800b620:	88c00417 	ldw	r3,16(r17)
 800b624:	88000115 	stw	zero,4(r17)
 800b628:	10bdffcc 	andi	r2,r2,63487
 800b62c:	8880030d 	sth	r2,12(r17)
 800b630:	88c00015 	stw	r3,0(r17)
 800b634:	003fb306 	br	800b504 <__alt_data_end+0xf800b504>
 800b638:	98800017 	ldw	r2,0(r19)
 800b63c:	103fea26 	beq	r2,zero,800b5e8 <__alt_data_end+0xf800b5e8>
 800b640:	00c00744 	movi	r3,29
 800b644:	10c00226 	beq	r2,r3,800b650 <__sflush_r+0x1fc>
 800b648:	00c00584 	movi	r3,22
 800b64c:	10c0031e 	bne	r2,r3,800b65c <__sflush_r+0x208>
 800b650:	9c000015 	stw	r16,0(r19)
 800b654:	0005883a 	mov	r2,zero
 800b658:	003fb306 	br	800b528 <__alt_data_end+0xf800b528>
 800b65c:	88c0030b 	ldhu	r3,12(r17)
 800b660:	3005883a 	mov	r2,r6
 800b664:	18c01014 	ori	r3,r3,64
 800b668:	88c0030d 	sth	r3,12(r17)
 800b66c:	003fae06 	br	800b528 <__alt_data_end+0xf800b528>

0800b670 <_fflush_r>:
 800b670:	defffd04 	addi	sp,sp,-12
 800b674:	dc000115 	stw	r16,4(sp)
 800b678:	dfc00215 	stw	ra,8(sp)
 800b67c:	2021883a 	mov	r16,r4
 800b680:	20000226 	beq	r4,zero,800b68c <_fflush_r+0x1c>
 800b684:	20800e17 	ldw	r2,56(r4)
 800b688:	10000c26 	beq	r2,zero,800b6bc <_fflush_r+0x4c>
 800b68c:	2880030f 	ldh	r2,12(r5)
 800b690:	1000051e 	bne	r2,zero,800b6a8 <_fflush_r+0x38>
 800b694:	0005883a 	mov	r2,zero
 800b698:	dfc00217 	ldw	ra,8(sp)
 800b69c:	dc000117 	ldw	r16,4(sp)
 800b6a0:	dec00304 	addi	sp,sp,12
 800b6a4:	f800283a 	ret
 800b6a8:	8009883a 	mov	r4,r16
 800b6ac:	dfc00217 	ldw	ra,8(sp)
 800b6b0:	dc000117 	ldw	r16,4(sp)
 800b6b4:	dec00304 	addi	sp,sp,12
 800b6b8:	800b4541 	jmpi	800b454 <__sflush_r>
 800b6bc:	d9400015 	stw	r5,0(sp)
 800b6c0:	800ba5c0 	call	800ba5c <__sinit>
 800b6c4:	d9400017 	ldw	r5,0(sp)
 800b6c8:	003ff006 	br	800b68c <__alt_data_end+0xf800b68c>

0800b6cc <fflush>:
 800b6cc:	20000526 	beq	r4,zero,800b6e4 <fflush+0x18>
 800b6d0:	008200b4 	movhi	r2,2050
 800b6d4:	10a11504 	addi	r2,r2,-31660
 800b6d8:	200b883a 	mov	r5,r4
 800b6dc:	11000017 	ldw	r4,0(r2)
 800b6e0:	800b6701 	jmpi	800b670 <_fflush_r>
 800b6e4:	008200b4 	movhi	r2,2050
 800b6e8:	10a11404 	addi	r2,r2,-31664
 800b6ec:	11000017 	ldw	r4,0(r2)
 800b6f0:	01420074 	movhi	r5,2049
 800b6f4:	296d9c04 	addi	r5,r5,-18832
 800b6f8:	800c46c1 	jmpi	800c46c <_fwalk_reent>

0800b6fc <__fp_unlock>:
 800b6fc:	0005883a 	mov	r2,zero
 800b700:	f800283a 	ret

0800b704 <_cleanup_r>:
 800b704:	01420074 	movhi	r5,2049
 800b708:	2940e604 	addi	r5,r5,920
 800b70c:	800c46c1 	jmpi	800c46c <_fwalk_reent>

0800b710 <__sinit.part.1>:
 800b710:	defff704 	addi	sp,sp,-36
 800b714:	00c20074 	movhi	r3,2049
 800b718:	dfc00815 	stw	ra,32(sp)
 800b71c:	ddc00715 	stw	r23,28(sp)
 800b720:	dd800615 	stw	r22,24(sp)
 800b724:	dd400515 	stw	r21,20(sp)
 800b728:	dd000415 	stw	r20,16(sp)
 800b72c:	dcc00315 	stw	r19,12(sp)
 800b730:	dc800215 	stw	r18,8(sp)
 800b734:	dc400115 	stw	r17,4(sp)
 800b738:	dc000015 	stw	r16,0(sp)
 800b73c:	18edc104 	addi	r3,r3,-18684
 800b740:	24000117 	ldw	r16,4(r4)
 800b744:	20c00f15 	stw	r3,60(r4)
 800b748:	2080bb04 	addi	r2,r4,748
 800b74c:	00c000c4 	movi	r3,3
 800b750:	20c0b915 	stw	r3,740(r4)
 800b754:	2080ba15 	stw	r2,744(r4)
 800b758:	2000b815 	stw	zero,736(r4)
 800b75c:	05c00204 	movi	r23,8
 800b760:	00800104 	movi	r2,4
 800b764:	2025883a 	mov	r18,r4
 800b768:	b80d883a 	mov	r6,r23
 800b76c:	81001704 	addi	r4,r16,92
 800b770:	000b883a 	mov	r5,zero
 800b774:	80000015 	stw	zero,0(r16)
 800b778:	80000115 	stw	zero,4(r16)
 800b77c:	80000215 	stw	zero,8(r16)
 800b780:	8080030d 	sth	r2,12(r16)
 800b784:	80001915 	stw	zero,100(r16)
 800b788:	8000038d 	sth	zero,14(r16)
 800b78c:	80000415 	stw	zero,16(r16)
 800b790:	80000515 	stw	zero,20(r16)
 800b794:	80000615 	stw	zero,24(r16)
 800b798:	800739c0 	call	800739c <memset>
 800b79c:	05820074 	movhi	r22,2049
 800b7a0:	94400217 	ldw	r17,8(r18)
 800b7a4:	05420074 	movhi	r21,2049
 800b7a8:	05020074 	movhi	r20,2049
 800b7ac:	04c20074 	movhi	r19,2049
 800b7b0:	b5ba3e04 	addi	r22,r22,-5896
 800b7b4:	ad7a5504 	addi	r21,r21,-5804
 800b7b8:	a53a7404 	addi	r20,r20,-5680
 800b7bc:	9cfa8b04 	addi	r19,r19,-5588
 800b7c0:	85800815 	stw	r22,32(r16)
 800b7c4:	85400915 	stw	r21,36(r16)
 800b7c8:	85000a15 	stw	r20,40(r16)
 800b7cc:	84c00b15 	stw	r19,44(r16)
 800b7d0:	84000715 	stw	r16,28(r16)
 800b7d4:	00800284 	movi	r2,10
 800b7d8:	8880030d 	sth	r2,12(r17)
 800b7dc:	00800044 	movi	r2,1
 800b7e0:	b80d883a 	mov	r6,r23
 800b7e4:	89001704 	addi	r4,r17,92
 800b7e8:	000b883a 	mov	r5,zero
 800b7ec:	88000015 	stw	zero,0(r17)
 800b7f0:	88000115 	stw	zero,4(r17)
 800b7f4:	88000215 	stw	zero,8(r17)
 800b7f8:	88001915 	stw	zero,100(r17)
 800b7fc:	8880038d 	sth	r2,14(r17)
 800b800:	88000415 	stw	zero,16(r17)
 800b804:	88000515 	stw	zero,20(r17)
 800b808:	88000615 	stw	zero,24(r17)
 800b80c:	800739c0 	call	800739c <memset>
 800b810:	94000317 	ldw	r16,12(r18)
 800b814:	00800484 	movi	r2,18
 800b818:	8c400715 	stw	r17,28(r17)
 800b81c:	8d800815 	stw	r22,32(r17)
 800b820:	8d400915 	stw	r21,36(r17)
 800b824:	8d000a15 	stw	r20,40(r17)
 800b828:	8cc00b15 	stw	r19,44(r17)
 800b82c:	8080030d 	sth	r2,12(r16)
 800b830:	00800084 	movi	r2,2
 800b834:	80000015 	stw	zero,0(r16)
 800b838:	80000115 	stw	zero,4(r16)
 800b83c:	80000215 	stw	zero,8(r16)
 800b840:	80001915 	stw	zero,100(r16)
 800b844:	8080038d 	sth	r2,14(r16)
 800b848:	80000415 	stw	zero,16(r16)
 800b84c:	80000515 	stw	zero,20(r16)
 800b850:	80000615 	stw	zero,24(r16)
 800b854:	b80d883a 	mov	r6,r23
 800b858:	000b883a 	mov	r5,zero
 800b85c:	81001704 	addi	r4,r16,92
 800b860:	800739c0 	call	800739c <memset>
 800b864:	00800044 	movi	r2,1
 800b868:	84000715 	stw	r16,28(r16)
 800b86c:	85800815 	stw	r22,32(r16)
 800b870:	85400915 	stw	r21,36(r16)
 800b874:	85000a15 	stw	r20,40(r16)
 800b878:	84c00b15 	stw	r19,44(r16)
 800b87c:	90800e15 	stw	r2,56(r18)
 800b880:	dfc00817 	ldw	ra,32(sp)
 800b884:	ddc00717 	ldw	r23,28(sp)
 800b888:	dd800617 	ldw	r22,24(sp)
 800b88c:	dd400517 	ldw	r21,20(sp)
 800b890:	dd000417 	ldw	r20,16(sp)
 800b894:	dcc00317 	ldw	r19,12(sp)
 800b898:	dc800217 	ldw	r18,8(sp)
 800b89c:	dc400117 	ldw	r17,4(sp)
 800b8a0:	dc000017 	ldw	r16,0(sp)
 800b8a4:	dec00904 	addi	sp,sp,36
 800b8a8:	f800283a 	ret

0800b8ac <__fp_lock>:
 800b8ac:	0005883a 	mov	r2,zero
 800b8b0:	f800283a 	ret

0800b8b4 <__sfmoreglue>:
 800b8b4:	defffc04 	addi	sp,sp,-16
 800b8b8:	dc800215 	stw	r18,8(sp)
 800b8bc:	2825883a 	mov	r18,r5
 800b8c0:	dc000015 	stw	r16,0(sp)
 800b8c4:	01401a04 	movi	r5,104
 800b8c8:	2021883a 	mov	r16,r4
 800b8cc:	913fffc4 	addi	r4,r18,-1
 800b8d0:	dfc00315 	stw	ra,12(sp)
 800b8d4:	dc400115 	stw	r17,4(sp)
 800b8d8:	800722c0 	call	800722c <__mulsi3>
 800b8dc:	8009883a 	mov	r4,r16
 800b8e0:	11401d04 	addi	r5,r2,116
 800b8e4:	1023883a 	mov	r17,r2
 800b8e8:	800c7c80 	call	800c7c8 <_malloc_r>
 800b8ec:	1021883a 	mov	r16,r2
 800b8f0:	10000726 	beq	r2,zero,800b910 <__sfmoreglue+0x5c>
 800b8f4:	11000304 	addi	r4,r2,12
 800b8f8:	10000015 	stw	zero,0(r2)
 800b8fc:	14800115 	stw	r18,4(r2)
 800b900:	11000215 	stw	r4,8(r2)
 800b904:	89801a04 	addi	r6,r17,104
 800b908:	000b883a 	mov	r5,zero
 800b90c:	800739c0 	call	800739c <memset>
 800b910:	8005883a 	mov	r2,r16
 800b914:	dfc00317 	ldw	ra,12(sp)
 800b918:	dc800217 	ldw	r18,8(sp)
 800b91c:	dc400117 	ldw	r17,4(sp)
 800b920:	dc000017 	ldw	r16,0(sp)
 800b924:	dec00404 	addi	sp,sp,16
 800b928:	f800283a 	ret

0800b92c <__sfp>:
 800b92c:	defffb04 	addi	sp,sp,-20
 800b930:	dc000015 	stw	r16,0(sp)
 800b934:	040200b4 	movhi	r16,2050
 800b938:	84211404 	addi	r16,r16,-31664
 800b93c:	dcc00315 	stw	r19,12(sp)
 800b940:	2027883a 	mov	r19,r4
 800b944:	81000017 	ldw	r4,0(r16)
 800b948:	dfc00415 	stw	ra,16(sp)
 800b94c:	dc800215 	stw	r18,8(sp)
 800b950:	20800e17 	ldw	r2,56(r4)
 800b954:	dc400115 	stw	r17,4(sp)
 800b958:	1000021e 	bne	r2,zero,800b964 <__sfp+0x38>
 800b95c:	800b7100 	call	800b710 <__sinit.part.1>
 800b960:	81000017 	ldw	r4,0(r16)
 800b964:	2480b804 	addi	r18,r4,736
 800b968:	047fffc4 	movi	r17,-1
 800b96c:	91000117 	ldw	r4,4(r18)
 800b970:	94000217 	ldw	r16,8(r18)
 800b974:	213fffc4 	addi	r4,r4,-1
 800b978:	20000a16 	blt	r4,zero,800b9a4 <__sfp+0x78>
 800b97c:	8080030f 	ldh	r2,12(r16)
 800b980:	10000c26 	beq	r2,zero,800b9b4 <__sfp+0x88>
 800b984:	80c01d04 	addi	r3,r16,116
 800b988:	00000206 	br	800b994 <__sfp+0x68>
 800b98c:	18bfe60f 	ldh	r2,-104(r3)
 800b990:	10000826 	beq	r2,zero,800b9b4 <__sfp+0x88>
 800b994:	213fffc4 	addi	r4,r4,-1
 800b998:	1c3ffd04 	addi	r16,r3,-12
 800b99c:	18c01a04 	addi	r3,r3,104
 800b9a0:	247ffa1e 	bne	r4,r17,800b98c <__alt_data_end+0xf800b98c>
 800b9a4:	90800017 	ldw	r2,0(r18)
 800b9a8:	10001d26 	beq	r2,zero,800ba20 <__sfp+0xf4>
 800b9ac:	1025883a 	mov	r18,r2
 800b9b0:	003fee06 	br	800b96c <__alt_data_end+0xf800b96c>
 800b9b4:	00bfffc4 	movi	r2,-1
 800b9b8:	8080038d 	sth	r2,14(r16)
 800b9bc:	00800044 	movi	r2,1
 800b9c0:	8080030d 	sth	r2,12(r16)
 800b9c4:	80001915 	stw	zero,100(r16)
 800b9c8:	80000015 	stw	zero,0(r16)
 800b9cc:	80000215 	stw	zero,8(r16)
 800b9d0:	80000115 	stw	zero,4(r16)
 800b9d4:	80000415 	stw	zero,16(r16)
 800b9d8:	80000515 	stw	zero,20(r16)
 800b9dc:	80000615 	stw	zero,24(r16)
 800b9e0:	01800204 	movi	r6,8
 800b9e4:	000b883a 	mov	r5,zero
 800b9e8:	81001704 	addi	r4,r16,92
 800b9ec:	800739c0 	call	800739c <memset>
 800b9f0:	8005883a 	mov	r2,r16
 800b9f4:	80000c15 	stw	zero,48(r16)
 800b9f8:	80000d15 	stw	zero,52(r16)
 800b9fc:	80001115 	stw	zero,68(r16)
 800ba00:	80001215 	stw	zero,72(r16)
 800ba04:	dfc00417 	ldw	ra,16(sp)
 800ba08:	dcc00317 	ldw	r19,12(sp)
 800ba0c:	dc800217 	ldw	r18,8(sp)
 800ba10:	dc400117 	ldw	r17,4(sp)
 800ba14:	dc000017 	ldw	r16,0(sp)
 800ba18:	dec00504 	addi	sp,sp,20
 800ba1c:	f800283a 	ret
 800ba20:	01400104 	movi	r5,4
 800ba24:	9809883a 	mov	r4,r19
 800ba28:	800b8b40 	call	800b8b4 <__sfmoreglue>
 800ba2c:	90800015 	stw	r2,0(r18)
 800ba30:	103fde1e 	bne	r2,zero,800b9ac <__alt_data_end+0xf800b9ac>
 800ba34:	00800304 	movi	r2,12
 800ba38:	98800015 	stw	r2,0(r19)
 800ba3c:	0005883a 	mov	r2,zero
 800ba40:	003ff006 	br	800ba04 <__alt_data_end+0xf800ba04>

0800ba44 <_cleanup>:
 800ba44:	008200b4 	movhi	r2,2050
 800ba48:	10a11404 	addi	r2,r2,-31664
 800ba4c:	11000017 	ldw	r4,0(r2)
 800ba50:	01420074 	movhi	r5,2049
 800ba54:	2940e604 	addi	r5,r5,920
 800ba58:	800c46c1 	jmpi	800c46c <_fwalk_reent>

0800ba5c <__sinit>:
 800ba5c:	20800e17 	ldw	r2,56(r4)
 800ba60:	10000126 	beq	r2,zero,800ba68 <__sinit+0xc>
 800ba64:	f800283a 	ret
 800ba68:	800b7101 	jmpi	800b710 <__sinit.part.1>

0800ba6c <__sfp_lock_acquire>:
 800ba6c:	f800283a 	ret

0800ba70 <__sfp_lock_release>:
 800ba70:	f800283a 	ret

0800ba74 <__sinit_lock_acquire>:
 800ba74:	f800283a 	ret

0800ba78 <__sinit_lock_release>:
 800ba78:	f800283a 	ret

0800ba7c <__fp_lock_all>:
 800ba7c:	008200b4 	movhi	r2,2050
 800ba80:	10a11504 	addi	r2,r2,-31660
 800ba84:	11000017 	ldw	r4,0(r2)
 800ba88:	01420074 	movhi	r5,2049
 800ba8c:	296e2b04 	addi	r5,r5,-18260
 800ba90:	800c3a81 	jmpi	800c3a8 <_fwalk>

0800ba94 <__fp_unlock_all>:
 800ba94:	008200b4 	movhi	r2,2050
 800ba98:	10a11504 	addi	r2,r2,-31660
 800ba9c:	11000017 	ldw	r4,0(r2)
 800baa0:	01420074 	movhi	r5,2049
 800baa4:	296dbf04 	addi	r5,r5,-18692
 800baa8:	800c3a81 	jmpi	800c3a8 <_fwalk>

0800baac <_malloc_trim_r>:
 800baac:	defffb04 	addi	sp,sp,-20
 800bab0:	dcc00315 	stw	r19,12(sp)
 800bab4:	04c20074 	movhi	r19,2049
 800bab8:	dc800215 	stw	r18,8(sp)
 800babc:	dc400115 	stw	r17,4(sp)
 800bac0:	dc000015 	stw	r16,0(sp)
 800bac4:	dfc00415 	stw	ra,16(sp)
 800bac8:	2821883a 	mov	r16,r5
 800bacc:	9cdb8f04 	addi	r19,r19,28220
 800bad0:	2025883a 	mov	r18,r4
 800bad4:	80145540 	call	8014554 <__malloc_lock>
 800bad8:	98800217 	ldw	r2,8(r19)
 800badc:	14400117 	ldw	r17,4(r2)
 800bae0:	00bfff04 	movi	r2,-4
 800bae4:	88a2703a 	and	r17,r17,r2
 800bae8:	8c21c83a 	sub	r16,r17,r16
 800baec:	8403fbc4 	addi	r16,r16,4079
 800baf0:	8020d33a 	srli	r16,r16,12
 800baf4:	0083ffc4 	movi	r2,4095
 800baf8:	843fffc4 	addi	r16,r16,-1
 800bafc:	8020933a 	slli	r16,r16,12
 800bb00:	1400060e 	bge	r2,r16,800bb1c <_malloc_trim_r+0x70>
 800bb04:	000b883a 	mov	r5,zero
 800bb08:	9009883a 	mov	r4,r18
 800bb0c:	800e8a40 	call	800e8a4 <_sbrk_r>
 800bb10:	98c00217 	ldw	r3,8(r19)
 800bb14:	1c47883a 	add	r3,r3,r17
 800bb18:	10c00a26 	beq	r2,r3,800bb44 <_malloc_trim_r+0x98>
 800bb1c:	9009883a 	mov	r4,r18
 800bb20:	80145780 	call	8014578 <__malloc_unlock>
 800bb24:	0005883a 	mov	r2,zero
 800bb28:	dfc00417 	ldw	ra,16(sp)
 800bb2c:	dcc00317 	ldw	r19,12(sp)
 800bb30:	dc800217 	ldw	r18,8(sp)
 800bb34:	dc400117 	ldw	r17,4(sp)
 800bb38:	dc000017 	ldw	r16,0(sp)
 800bb3c:	dec00504 	addi	sp,sp,20
 800bb40:	f800283a 	ret
 800bb44:	040bc83a 	sub	r5,zero,r16
 800bb48:	9009883a 	mov	r4,r18
 800bb4c:	800e8a40 	call	800e8a4 <_sbrk_r>
 800bb50:	00ffffc4 	movi	r3,-1
 800bb54:	10c00d26 	beq	r2,r3,800bb8c <_malloc_trim_r+0xe0>
 800bb58:	00c220b4 	movhi	r3,2178
 800bb5c:	18e83104 	addi	r3,r3,-24380
 800bb60:	18800017 	ldw	r2,0(r3)
 800bb64:	99000217 	ldw	r4,8(r19)
 800bb68:	8c23c83a 	sub	r17,r17,r16
 800bb6c:	8c400054 	ori	r17,r17,1
 800bb70:	1421c83a 	sub	r16,r2,r16
 800bb74:	24400115 	stw	r17,4(r4)
 800bb78:	9009883a 	mov	r4,r18
 800bb7c:	1c000015 	stw	r16,0(r3)
 800bb80:	80145780 	call	8014578 <__malloc_unlock>
 800bb84:	00800044 	movi	r2,1
 800bb88:	003fe706 	br	800bb28 <__alt_data_end+0xf800bb28>
 800bb8c:	000b883a 	mov	r5,zero
 800bb90:	9009883a 	mov	r4,r18
 800bb94:	800e8a40 	call	800e8a4 <_sbrk_r>
 800bb98:	99000217 	ldw	r4,8(r19)
 800bb9c:	014003c4 	movi	r5,15
 800bba0:	1107c83a 	sub	r3,r2,r4
 800bba4:	28ffdd0e 	bge	r5,r3,800bb1c <__alt_data_end+0xf800bb1c>
 800bba8:	014200b4 	movhi	r5,2050
 800bbac:	29611704 	addi	r5,r5,-31652
 800bbb0:	29400017 	ldw	r5,0(r5)
 800bbb4:	18c00054 	ori	r3,r3,1
 800bbb8:	20c00115 	stw	r3,4(r4)
 800bbbc:	00c220b4 	movhi	r3,2178
 800bbc0:	1145c83a 	sub	r2,r2,r5
 800bbc4:	18e83104 	addi	r3,r3,-24380
 800bbc8:	18800015 	stw	r2,0(r3)
 800bbcc:	003fd306 	br	800bb1c <__alt_data_end+0xf800bb1c>

0800bbd0 <_free_r>:
 800bbd0:	28004126 	beq	r5,zero,800bcd8 <_free_r+0x108>
 800bbd4:	defffd04 	addi	sp,sp,-12
 800bbd8:	dc400115 	stw	r17,4(sp)
 800bbdc:	dc000015 	stw	r16,0(sp)
 800bbe0:	2023883a 	mov	r17,r4
 800bbe4:	2821883a 	mov	r16,r5
 800bbe8:	dfc00215 	stw	ra,8(sp)
 800bbec:	80145540 	call	8014554 <__malloc_lock>
 800bbf0:	81ffff17 	ldw	r7,-4(r16)
 800bbf4:	00bfff84 	movi	r2,-2
 800bbf8:	01020074 	movhi	r4,2049
 800bbfc:	81bffe04 	addi	r6,r16,-8
 800bc00:	3884703a 	and	r2,r7,r2
 800bc04:	211b8f04 	addi	r4,r4,28220
 800bc08:	308b883a 	add	r5,r6,r2
 800bc0c:	2a400117 	ldw	r9,4(r5)
 800bc10:	22000217 	ldw	r8,8(r4)
 800bc14:	00ffff04 	movi	r3,-4
 800bc18:	48c6703a 	and	r3,r9,r3
 800bc1c:	2a005726 	beq	r5,r8,800bd7c <_free_r+0x1ac>
 800bc20:	28c00115 	stw	r3,4(r5)
 800bc24:	39c0004c 	andi	r7,r7,1
 800bc28:	3800091e 	bne	r7,zero,800bc50 <_free_r+0x80>
 800bc2c:	823ffe17 	ldw	r8,-8(r16)
 800bc30:	22400204 	addi	r9,r4,8
 800bc34:	320dc83a 	sub	r6,r6,r8
 800bc38:	31c00217 	ldw	r7,8(r6)
 800bc3c:	1205883a 	add	r2,r2,r8
 800bc40:	3a406526 	beq	r7,r9,800bdd8 <_free_r+0x208>
 800bc44:	32000317 	ldw	r8,12(r6)
 800bc48:	3a000315 	stw	r8,12(r7)
 800bc4c:	41c00215 	stw	r7,8(r8)
 800bc50:	28cf883a 	add	r7,r5,r3
 800bc54:	39c00117 	ldw	r7,4(r7)
 800bc58:	39c0004c 	andi	r7,r7,1
 800bc5c:	38003a26 	beq	r7,zero,800bd48 <_free_r+0x178>
 800bc60:	10c00054 	ori	r3,r2,1
 800bc64:	30c00115 	stw	r3,4(r6)
 800bc68:	3087883a 	add	r3,r6,r2
 800bc6c:	18800015 	stw	r2,0(r3)
 800bc70:	00c07fc4 	movi	r3,511
 800bc74:	18801936 	bltu	r3,r2,800bcdc <_free_r+0x10c>
 800bc78:	1004d0fa 	srli	r2,r2,3
 800bc7c:	01c00044 	movi	r7,1
 800bc80:	21400117 	ldw	r5,4(r4)
 800bc84:	10c00044 	addi	r3,r2,1
 800bc88:	18c7883a 	add	r3,r3,r3
 800bc8c:	1005d0ba 	srai	r2,r2,2
 800bc90:	18c7883a 	add	r3,r3,r3
 800bc94:	18c7883a 	add	r3,r3,r3
 800bc98:	1907883a 	add	r3,r3,r4
 800bc9c:	3884983a 	sll	r2,r7,r2
 800bca0:	19c00017 	ldw	r7,0(r3)
 800bca4:	1a3ffe04 	addi	r8,r3,-8
 800bca8:	1144b03a 	or	r2,r2,r5
 800bcac:	32000315 	stw	r8,12(r6)
 800bcb0:	31c00215 	stw	r7,8(r6)
 800bcb4:	20800115 	stw	r2,4(r4)
 800bcb8:	19800015 	stw	r6,0(r3)
 800bcbc:	39800315 	stw	r6,12(r7)
 800bcc0:	8809883a 	mov	r4,r17
 800bcc4:	dfc00217 	ldw	ra,8(sp)
 800bcc8:	dc400117 	ldw	r17,4(sp)
 800bccc:	dc000017 	ldw	r16,0(sp)
 800bcd0:	dec00304 	addi	sp,sp,12
 800bcd4:	80145781 	jmpi	8014578 <__malloc_unlock>
 800bcd8:	f800283a 	ret
 800bcdc:	100ad27a 	srli	r5,r2,9
 800bce0:	00c00104 	movi	r3,4
 800bce4:	19404a36 	bltu	r3,r5,800be10 <_free_r+0x240>
 800bce8:	100ad1ba 	srli	r5,r2,6
 800bcec:	28c00e44 	addi	r3,r5,57
 800bcf0:	18c7883a 	add	r3,r3,r3
 800bcf4:	29400e04 	addi	r5,r5,56
 800bcf8:	18c7883a 	add	r3,r3,r3
 800bcfc:	18c7883a 	add	r3,r3,r3
 800bd00:	1909883a 	add	r4,r3,r4
 800bd04:	20c00017 	ldw	r3,0(r4)
 800bd08:	01c20074 	movhi	r7,2049
 800bd0c:	213ffe04 	addi	r4,r4,-8
 800bd10:	39db8f04 	addi	r7,r7,28220
 800bd14:	20c04426 	beq	r4,r3,800be28 <_free_r+0x258>
 800bd18:	01ffff04 	movi	r7,-4
 800bd1c:	19400117 	ldw	r5,4(r3)
 800bd20:	29ca703a 	and	r5,r5,r7
 800bd24:	1140022e 	bgeu	r2,r5,800bd30 <_free_r+0x160>
 800bd28:	18c00217 	ldw	r3,8(r3)
 800bd2c:	20fffb1e 	bne	r4,r3,800bd1c <__alt_data_end+0xf800bd1c>
 800bd30:	19000317 	ldw	r4,12(r3)
 800bd34:	31000315 	stw	r4,12(r6)
 800bd38:	30c00215 	stw	r3,8(r6)
 800bd3c:	21800215 	stw	r6,8(r4)
 800bd40:	19800315 	stw	r6,12(r3)
 800bd44:	003fde06 	br	800bcc0 <__alt_data_end+0xf800bcc0>
 800bd48:	29c00217 	ldw	r7,8(r5)
 800bd4c:	10c5883a 	add	r2,r2,r3
 800bd50:	00c20074 	movhi	r3,2049
 800bd54:	18db9104 	addi	r3,r3,28228
 800bd58:	38c03b26 	beq	r7,r3,800be48 <_free_r+0x278>
 800bd5c:	2a000317 	ldw	r8,12(r5)
 800bd60:	11400054 	ori	r5,r2,1
 800bd64:	3087883a 	add	r3,r6,r2
 800bd68:	3a000315 	stw	r8,12(r7)
 800bd6c:	41c00215 	stw	r7,8(r8)
 800bd70:	31400115 	stw	r5,4(r6)
 800bd74:	18800015 	stw	r2,0(r3)
 800bd78:	003fbd06 	br	800bc70 <__alt_data_end+0xf800bc70>
 800bd7c:	39c0004c 	andi	r7,r7,1
 800bd80:	10c5883a 	add	r2,r2,r3
 800bd84:	3800071e 	bne	r7,zero,800bda4 <_free_r+0x1d4>
 800bd88:	81fffe17 	ldw	r7,-8(r16)
 800bd8c:	31cdc83a 	sub	r6,r6,r7
 800bd90:	30c00317 	ldw	r3,12(r6)
 800bd94:	31400217 	ldw	r5,8(r6)
 800bd98:	11c5883a 	add	r2,r2,r7
 800bd9c:	28c00315 	stw	r3,12(r5)
 800bda0:	19400215 	stw	r5,8(r3)
 800bda4:	10c00054 	ori	r3,r2,1
 800bda8:	30c00115 	stw	r3,4(r6)
 800bdac:	00c200b4 	movhi	r3,2050
 800bdb0:	18e11804 	addi	r3,r3,-31648
 800bdb4:	18c00017 	ldw	r3,0(r3)
 800bdb8:	21800215 	stw	r6,8(r4)
 800bdbc:	10ffc036 	bltu	r2,r3,800bcc0 <__alt_data_end+0xf800bcc0>
 800bdc0:	008200b4 	movhi	r2,2050
 800bdc4:	10a7f604 	addi	r2,r2,-24616
 800bdc8:	11400017 	ldw	r5,0(r2)
 800bdcc:	8809883a 	mov	r4,r17
 800bdd0:	800baac0 	call	800baac <_malloc_trim_r>
 800bdd4:	003fba06 	br	800bcc0 <__alt_data_end+0xf800bcc0>
 800bdd8:	28c9883a 	add	r4,r5,r3
 800bddc:	21000117 	ldw	r4,4(r4)
 800bde0:	2100004c 	andi	r4,r4,1
 800bde4:	2000391e 	bne	r4,zero,800becc <_free_r+0x2fc>
 800bde8:	29c00217 	ldw	r7,8(r5)
 800bdec:	29000317 	ldw	r4,12(r5)
 800bdf0:	1885883a 	add	r2,r3,r2
 800bdf4:	10c00054 	ori	r3,r2,1
 800bdf8:	39000315 	stw	r4,12(r7)
 800bdfc:	21c00215 	stw	r7,8(r4)
 800be00:	30c00115 	stw	r3,4(r6)
 800be04:	308d883a 	add	r6,r6,r2
 800be08:	30800015 	stw	r2,0(r6)
 800be0c:	003fac06 	br	800bcc0 <__alt_data_end+0xf800bcc0>
 800be10:	00c00504 	movi	r3,20
 800be14:	19401536 	bltu	r3,r5,800be6c <_free_r+0x29c>
 800be18:	28c01704 	addi	r3,r5,92
 800be1c:	18c7883a 	add	r3,r3,r3
 800be20:	294016c4 	addi	r5,r5,91
 800be24:	003fb406 	br	800bcf8 <__alt_data_end+0xf800bcf8>
 800be28:	280bd0ba 	srai	r5,r5,2
 800be2c:	00c00044 	movi	r3,1
 800be30:	38800117 	ldw	r2,4(r7)
 800be34:	194a983a 	sll	r5,r3,r5
 800be38:	2007883a 	mov	r3,r4
 800be3c:	2884b03a 	or	r2,r5,r2
 800be40:	38800115 	stw	r2,4(r7)
 800be44:	003fbb06 	br	800bd34 <__alt_data_end+0xf800bd34>
 800be48:	21800515 	stw	r6,20(r4)
 800be4c:	21800415 	stw	r6,16(r4)
 800be50:	10c00054 	ori	r3,r2,1
 800be54:	31c00315 	stw	r7,12(r6)
 800be58:	31c00215 	stw	r7,8(r6)
 800be5c:	30c00115 	stw	r3,4(r6)
 800be60:	308d883a 	add	r6,r6,r2
 800be64:	30800015 	stw	r2,0(r6)
 800be68:	003f9506 	br	800bcc0 <__alt_data_end+0xf800bcc0>
 800be6c:	00c01504 	movi	r3,84
 800be70:	19400536 	bltu	r3,r5,800be88 <_free_r+0x2b8>
 800be74:	100ad33a 	srli	r5,r2,12
 800be78:	28c01bc4 	addi	r3,r5,111
 800be7c:	18c7883a 	add	r3,r3,r3
 800be80:	29401b84 	addi	r5,r5,110
 800be84:	003f9c06 	br	800bcf8 <__alt_data_end+0xf800bcf8>
 800be88:	00c05504 	movi	r3,340
 800be8c:	19400536 	bltu	r3,r5,800bea4 <_free_r+0x2d4>
 800be90:	100ad3fa 	srli	r5,r2,15
 800be94:	28c01e04 	addi	r3,r5,120
 800be98:	18c7883a 	add	r3,r3,r3
 800be9c:	29401dc4 	addi	r5,r5,119
 800bea0:	003f9506 	br	800bcf8 <__alt_data_end+0xf800bcf8>
 800bea4:	00c15504 	movi	r3,1364
 800bea8:	19400536 	bltu	r3,r5,800bec0 <_free_r+0x2f0>
 800beac:	100ad4ba 	srli	r5,r2,18
 800beb0:	28c01f44 	addi	r3,r5,125
 800beb4:	18c7883a 	add	r3,r3,r3
 800beb8:	29401f04 	addi	r5,r5,124
 800bebc:	003f8e06 	br	800bcf8 <__alt_data_end+0xf800bcf8>
 800bec0:	00c03f84 	movi	r3,254
 800bec4:	01401f84 	movi	r5,126
 800bec8:	003f8b06 	br	800bcf8 <__alt_data_end+0xf800bcf8>
 800becc:	10c00054 	ori	r3,r2,1
 800bed0:	30c00115 	stw	r3,4(r6)
 800bed4:	308d883a 	add	r6,r6,r2
 800bed8:	30800015 	stw	r2,0(r6)
 800bedc:	003f7806 	br	800bcc0 <__alt_data_end+0xf800bcc0>

0800bee0 <__sfvwrite_r>:
 800bee0:	30800217 	ldw	r2,8(r6)
 800bee4:	10006726 	beq	r2,zero,800c084 <__sfvwrite_r+0x1a4>
 800bee8:	28c0030b 	ldhu	r3,12(r5)
 800beec:	defff404 	addi	sp,sp,-48
 800bef0:	dd400715 	stw	r21,28(sp)
 800bef4:	dd000615 	stw	r20,24(sp)
 800bef8:	dc000215 	stw	r16,8(sp)
 800befc:	dfc00b15 	stw	ra,44(sp)
 800bf00:	df000a15 	stw	fp,40(sp)
 800bf04:	ddc00915 	stw	r23,36(sp)
 800bf08:	dd800815 	stw	r22,32(sp)
 800bf0c:	dcc00515 	stw	r19,20(sp)
 800bf10:	dc800415 	stw	r18,16(sp)
 800bf14:	dc400315 	stw	r17,12(sp)
 800bf18:	1880020c 	andi	r2,r3,8
 800bf1c:	2821883a 	mov	r16,r5
 800bf20:	202b883a 	mov	r21,r4
 800bf24:	3029883a 	mov	r20,r6
 800bf28:	10002726 	beq	r2,zero,800bfc8 <__sfvwrite_r+0xe8>
 800bf2c:	28800417 	ldw	r2,16(r5)
 800bf30:	10002526 	beq	r2,zero,800bfc8 <__sfvwrite_r+0xe8>
 800bf34:	1880008c 	andi	r2,r3,2
 800bf38:	a4400017 	ldw	r17,0(r20)
 800bf3c:	10002a26 	beq	r2,zero,800bfe8 <__sfvwrite_r+0x108>
 800bf40:	05a00034 	movhi	r22,32768
 800bf44:	0027883a 	mov	r19,zero
 800bf48:	0025883a 	mov	r18,zero
 800bf4c:	b5bf0004 	addi	r22,r22,-1024
 800bf50:	980d883a 	mov	r6,r19
 800bf54:	a809883a 	mov	r4,r21
 800bf58:	90004626 	beq	r18,zero,800c074 <__sfvwrite_r+0x194>
 800bf5c:	900f883a 	mov	r7,r18
 800bf60:	b480022e 	bgeu	r22,r18,800bf6c <__sfvwrite_r+0x8c>
 800bf64:	01e00034 	movhi	r7,32768
 800bf68:	39ff0004 	addi	r7,r7,-1024
 800bf6c:	80800917 	ldw	r2,36(r16)
 800bf70:	81400717 	ldw	r5,28(r16)
 800bf74:	103ee83a 	callr	r2
 800bf78:	00805a0e 	bge	zero,r2,800c0e4 <__sfvwrite_r+0x204>
 800bf7c:	a0c00217 	ldw	r3,8(r20)
 800bf80:	98a7883a 	add	r19,r19,r2
 800bf84:	90a5c83a 	sub	r18,r18,r2
 800bf88:	1885c83a 	sub	r2,r3,r2
 800bf8c:	a0800215 	stw	r2,8(r20)
 800bf90:	103fef1e 	bne	r2,zero,800bf50 <__alt_data_end+0xf800bf50>
 800bf94:	0005883a 	mov	r2,zero
 800bf98:	dfc00b17 	ldw	ra,44(sp)
 800bf9c:	df000a17 	ldw	fp,40(sp)
 800bfa0:	ddc00917 	ldw	r23,36(sp)
 800bfa4:	dd800817 	ldw	r22,32(sp)
 800bfa8:	dd400717 	ldw	r21,28(sp)
 800bfac:	dd000617 	ldw	r20,24(sp)
 800bfb0:	dcc00517 	ldw	r19,20(sp)
 800bfb4:	dc800417 	ldw	r18,16(sp)
 800bfb8:	dc400317 	ldw	r17,12(sp)
 800bfbc:	dc000217 	ldw	r16,8(sp)
 800bfc0:	dec00c04 	addi	sp,sp,48
 800bfc4:	f800283a 	ret
 800bfc8:	800b883a 	mov	r5,r16
 800bfcc:	a809883a 	mov	r4,r21
 800bfd0:	8009a500 	call	8009a50 <__swsetup_r>
 800bfd4:	1000ee1e 	bne	r2,zero,800c390 <__sfvwrite_r+0x4b0>
 800bfd8:	80c0030b 	ldhu	r3,12(r16)
 800bfdc:	a4400017 	ldw	r17,0(r20)
 800bfe0:	1880008c 	andi	r2,r3,2
 800bfe4:	103fd61e 	bne	r2,zero,800bf40 <__alt_data_end+0xf800bf40>
 800bfe8:	1880004c 	andi	r2,r3,1
 800bfec:	1000421e 	bne	r2,zero,800c0f8 <__sfvwrite_r+0x218>
 800bff0:	0039883a 	mov	fp,zero
 800bff4:	0025883a 	mov	r18,zero
 800bff8:	90001a26 	beq	r18,zero,800c064 <__sfvwrite_r+0x184>
 800bffc:	1880800c 	andi	r2,r3,512
 800c000:	84c00217 	ldw	r19,8(r16)
 800c004:	10002126 	beq	r2,zero,800c08c <__sfvwrite_r+0x1ac>
 800c008:	982f883a 	mov	r23,r19
 800c00c:	94c09636 	bltu	r18,r19,800c268 <__sfvwrite_r+0x388>
 800c010:	1881200c 	andi	r2,r3,1152
 800c014:	1000a11e 	bne	r2,zero,800c29c <__sfvwrite_r+0x3bc>
 800c018:	81000017 	ldw	r4,0(r16)
 800c01c:	b80d883a 	mov	r6,r23
 800c020:	e00b883a 	mov	r5,fp
 800c024:	800d0b80 	call	800d0b8 <memmove>
 800c028:	80c00217 	ldw	r3,8(r16)
 800c02c:	81000017 	ldw	r4,0(r16)
 800c030:	9005883a 	mov	r2,r18
 800c034:	1ce7c83a 	sub	r19,r3,r19
 800c038:	25cf883a 	add	r7,r4,r23
 800c03c:	84c00215 	stw	r19,8(r16)
 800c040:	81c00015 	stw	r7,0(r16)
 800c044:	a0c00217 	ldw	r3,8(r20)
 800c048:	e0b9883a 	add	fp,fp,r2
 800c04c:	90a5c83a 	sub	r18,r18,r2
 800c050:	18a7c83a 	sub	r19,r3,r2
 800c054:	a4c00215 	stw	r19,8(r20)
 800c058:	983fce26 	beq	r19,zero,800bf94 <__alt_data_end+0xf800bf94>
 800c05c:	80c0030b 	ldhu	r3,12(r16)
 800c060:	903fe61e 	bne	r18,zero,800bffc <__alt_data_end+0xf800bffc>
 800c064:	8f000017 	ldw	fp,0(r17)
 800c068:	8c800117 	ldw	r18,4(r17)
 800c06c:	8c400204 	addi	r17,r17,8
 800c070:	003fe106 	br	800bff8 <__alt_data_end+0xf800bff8>
 800c074:	8cc00017 	ldw	r19,0(r17)
 800c078:	8c800117 	ldw	r18,4(r17)
 800c07c:	8c400204 	addi	r17,r17,8
 800c080:	003fb306 	br	800bf50 <__alt_data_end+0xf800bf50>
 800c084:	0005883a 	mov	r2,zero
 800c088:	f800283a 	ret
 800c08c:	81000017 	ldw	r4,0(r16)
 800c090:	80800417 	ldw	r2,16(r16)
 800c094:	11005a36 	bltu	r2,r4,800c200 <__sfvwrite_r+0x320>
 800c098:	85c00517 	ldw	r23,20(r16)
 800c09c:	95c05836 	bltu	r18,r23,800c200 <__sfvwrite_r+0x320>
 800c0a0:	00a00034 	movhi	r2,32768
 800c0a4:	10bfffc4 	addi	r2,r2,-1
 800c0a8:	9009883a 	mov	r4,r18
 800c0ac:	1480012e 	bgeu	r2,r18,800c0b4 <__sfvwrite_r+0x1d4>
 800c0b0:	1009883a 	mov	r4,r2
 800c0b4:	b80b883a 	mov	r5,r23
 800c0b8:	80070780 	call	8007078 <__divsi3>
 800c0bc:	b80b883a 	mov	r5,r23
 800c0c0:	1009883a 	mov	r4,r2
 800c0c4:	800722c0 	call	800722c <__mulsi3>
 800c0c8:	81400717 	ldw	r5,28(r16)
 800c0cc:	80c00917 	ldw	r3,36(r16)
 800c0d0:	100f883a 	mov	r7,r2
 800c0d4:	e00d883a 	mov	r6,fp
 800c0d8:	a809883a 	mov	r4,r21
 800c0dc:	183ee83a 	callr	r3
 800c0e0:	00bfd816 	blt	zero,r2,800c044 <__alt_data_end+0xf800c044>
 800c0e4:	8080030b 	ldhu	r2,12(r16)
 800c0e8:	10801014 	ori	r2,r2,64
 800c0ec:	8080030d 	sth	r2,12(r16)
 800c0f0:	00bfffc4 	movi	r2,-1
 800c0f4:	003fa806 	br	800bf98 <__alt_data_end+0xf800bf98>
 800c0f8:	0027883a 	mov	r19,zero
 800c0fc:	0011883a 	mov	r8,zero
 800c100:	0039883a 	mov	fp,zero
 800c104:	0025883a 	mov	r18,zero
 800c108:	90001f26 	beq	r18,zero,800c188 <__sfvwrite_r+0x2a8>
 800c10c:	40005a26 	beq	r8,zero,800c278 <__sfvwrite_r+0x398>
 800c110:	982d883a 	mov	r22,r19
 800c114:	94c0012e 	bgeu	r18,r19,800c11c <__sfvwrite_r+0x23c>
 800c118:	902d883a 	mov	r22,r18
 800c11c:	81000017 	ldw	r4,0(r16)
 800c120:	80800417 	ldw	r2,16(r16)
 800c124:	b02f883a 	mov	r23,r22
 800c128:	81c00517 	ldw	r7,20(r16)
 800c12c:	1100032e 	bgeu	r2,r4,800c13c <__sfvwrite_r+0x25c>
 800c130:	80c00217 	ldw	r3,8(r16)
 800c134:	38c7883a 	add	r3,r7,r3
 800c138:	1d801816 	blt	r3,r22,800c19c <__sfvwrite_r+0x2bc>
 800c13c:	b1c03e16 	blt	r22,r7,800c238 <__sfvwrite_r+0x358>
 800c140:	80800917 	ldw	r2,36(r16)
 800c144:	81400717 	ldw	r5,28(r16)
 800c148:	e00d883a 	mov	r6,fp
 800c14c:	da000115 	stw	r8,4(sp)
 800c150:	a809883a 	mov	r4,r21
 800c154:	103ee83a 	callr	r2
 800c158:	102f883a 	mov	r23,r2
 800c15c:	da000117 	ldw	r8,4(sp)
 800c160:	00bfe00e 	bge	zero,r2,800c0e4 <__alt_data_end+0xf800c0e4>
 800c164:	9de7c83a 	sub	r19,r19,r23
 800c168:	98001f26 	beq	r19,zero,800c1e8 <__sfvwrite_r+0x308>
 800c16c:	a0800217 	ldw	r2,8(r20)
 800c170:	e5f9883a 	add	fp,fp,r23
 800c174:	95e5c83a 	sub	r18,r18,r23
 800c178:	15efc83a 	sub	r23,r2,r23
 800c17c:	a5c00215 	stw	r23,8(r20)
 800c180:	b83f8426 	beq	r23,zero,800bf94 <__alt_data_end+0xf800bf94>
 800c184:	903fe11e 	bne	r18,zero,800c10c <__alt_data_end+0xf800c10c>
 800c188:	8f000017 	ldw	fp,0(r17)
 800c18c:	8c800117 	ldw	r18,4(r17)
 800c190:	0011883a 	mov	r8,zero
 800c194:	8c400204 	addi	r17,r17,8
 800c198:	003fdb06 	br	800c108 <__alt_data_end+0xf800c108>
 800c19c:	180d883a 	mov	r6,r3
 800c1a0:	e00b883a 	mov	r5,fp
 800c1a4:	da000115 	stw	r8,4(sp)
 800c1a8:	d8c00015 	stw	r3,0(sp)
 800c1ac:	800d0b80 	call	800d0b8 <memmove>
 800c1b0:	d8c00017 	ldw	r3,0(sp)
 800c1b4:	80800017 	ldw	r2,0(r16)
 800c1b8:	800b883a 	mov	r5,r16
 800c1bc:	a809883a 	mov	r4,r21
 800c1c0:	10c5883a 	add	r2,r2,r3
 800c1c4:	80800015 	stw	r2,0(r16)
 800c1c8:	d8c00015 	stw	r3,0(sp)
 800c1cc:	800b6700 	call	800b670 <_fflush_r>
 800c1d0:	d8c00017 	ldw	r3,0(sp)
 800c1d4:	da000117 	ldw	r8,4(sp)
 800c1d8:	103fc21e 	bne	r2,zero,800c0e4 <__alt_data_end+0xf800c0e4>
 800c1dc:	182f883a 	mov	r23,r3
 800c1e0:	9de7c83a 	sub	r19,r19,r23
 800c1e4:	983fe11e 	bne	r19,zero,800c16c <__alt_data_end+0xf800c16c>
 800c1e8:	800b883a 	mov	r5,r16
 800c1ec:	a809883a 	mov	r4,r21
 800c1f0:	800b6700 	call	800b670 <_fflush_r>
 800c1f4:	103fbb1e 	bne	r2,zero,800c0e4 <__alt_data_end+0xf800c0e4>
 800c1f8:	0011883a 	mov	r8,zero
 800c1fc:	003fdb06 	br	800c16c <__alt_data_end+0xf800c16c>
 800c200:	94c0012e 	bgeu	r18,r19,800c208 <__sfvwrite_r+0x328>
 800c204:	9027883a 	mov	r19,r18
 800c208:	980d883a 	mov	r6,r19
 800c20c:	e00b883a 	mov	r5,fp
 800c210:	800d0b80 	call	800d0b8 <memmove>
 800c214:	80800217 	ldw	r2,8(r16)
 800c218:	80c00017 	ldw	r3,0(r16)
 800c21c:	14c5c83a 	sub	r2,r2,r19
 800c220:	1cc7883a 	add	r3,r3,r19
 800c224:	80800215 	stw	r2,8(r16)
 800c228:	80c00015 	stw	r3,0(r16)
 800c22c:	10004326 	beq	r2,zero,800c33c <__sfvwrite_r+0x45c>
 800c230:	9805883a 	mov	r2,r19
 800c234:	003f8306 	br	800c044 <__alt_data_end+0xf800c044>
 800c238:	b00d883a 	mov	r6,r22
 800c23c:	e00b883a 	mov	r5,fp
 800c240:	da000115 	stw	r8,4(sp)
 800c244:	800d0b80 	call	800d0b8 <memmove>
 800c248:	80800217 	ldw	r2,8(r16)
 800c24c:	80c00017 	ldw	r3,0(r16)
 800c250:	da000117 	ldw	r8,4(sp)
 800c254:	1585c83a 	sub	r2,r2,r22
 800c258:	1dad883a 	add	r22,r3,r22
 800c25c:	80800215 	stw	r2,8(r16)
 800c260:	85800015 	stw	r22,0(r16)
 800c264:	003fbf06 	br	800c164 <__alt_data_end+0xf800c164>
 800c268:	81000017 	ldw	r4,0(r16)
 800c26c:	9027883a 	mov	r19,r18
 800c270:	902f883a 	mov	r23,r18
 800c274:	003f6906 	br	800c01c <__alt_data_end+0xf800c01c>
 800c278:	900d883a 	mov	r6,r18
 800c27c:	01400284 	movi	r5,10
 800c280:	e009883a 	mov	r4,fp
 800c284:	800cfd40 	call	800cfd4 <memchr>
 800c288:	10003e26 	beq	r2,zero,800c384 <__sfvwrite_r+0x4a4>
 800c28c:	10800044 	addi	r2,r2,1
 800c290:	1727c83a 	sub	r19,r2,fp
 800c294:	02000044 	movi	r8,1
 800c298:	003f9d06 	br	800c110 <__alt_data_end+0xf800c110>
 800c29c:	80800517 	ldw	r2,20(r16)
 800c2a0:	81400417 	ldw	r5,16(r16)
 800c2a4:	81c00017 	ldw	r7,0(r16)
 800c2a8:	10a7883a 	add	r19,r2,r2
 800c2ac:	9885883a 	add	r2,r19,r2
 800c2b0:	1026d7fa 	srli	r19,r2,31
 800c2b4:	396dc83a 	sub	r22,r7,r5
 800c2b8:	b1000044 	addi	r4,r22,1
 800c2bc:	9885883a 	add	r2,r19,r2
 800c2c0:	1027d07a 	srai	r19,r2,1
 800c2c4:	2485883a 	add	r2,r4,r18
 800c2c8:	980d883a 	mov	r6,r19
 800c2cc:	9880022e 	bgeu	r19,r2,800c2d8 <__sfvwrite_r+0x3f8>
 800c2d0:	1027883a 	mov	r19,r2
 800c2d4:	100d883a 	mov	r6,r2
 800c2d8:	18c1000c 	andi	r3,r3,1024
 800c2dc:	18001c26 	beq	r3,zero,800c350 <__sfvwrite_r+0x470>
 800c2e0:	300b883a 	mov	r5,r6
 800c2e4:	a809883a 	mov	r4,r21
 800c2e8:	800c7c80 	call	800c7c8 <_malloc_r>
 800c2ec:	102f883a 	mov	r23,r2
 800c2f0:	10002926 	beq	r2,zero,800c398 <__sfvwrite_r+0x4b8>
 800c2f4:	81400417 	ldw	r5,16(r16)
 800c2f8:	b00d883a 	mov	r6,r22
 800c2fc:	1009883a 	mov	r4,r2
 800c300:	80072540 	call	8007254 <memcpy>
 800c304:	8080030b 	ldhu	r2,12(r16)
 800c308:	00fedfc4 	movi	r3,-1153
 800c30c:	10c4703a 	and	r2,r2,r3
 800c310:	10802014 	ori	r2,r2,128
 800c314:	8080030d 	sth	r2,12(r16)
 800c318:	bd89883a 	add	r4,r23,r22
 800c31c:	9d8fc83a 	sub	r7,r19,r22
 800c320:	85c00415 	stw	r23,16(r16)
 800c324:	84c00515 	stw	r19,20(r16)
 800c328:	81000015 	stw	r4,0(r16)
 800c32c:	9027883a 	mov	r19,r18
 800c330:	81c00215 	stw	r7,8(r16)
 800c334:	902f883a 	mov	r23,r18
 800c338:	003f3806 	br	800c01c <__alt_data_end+0xf800c01c>
 800c33c:	800b883a 	mov	r5,r16
 800c340:	a809883a 	mov	r4,r21
 800c344:	800b6700 	call	800b670 <_fflush_r>
 800c348:	103fb926 	beq	r2,zero,800c230 <__alt_data_end+0xf800c230>
 800c34c:	003f6506 	br	800c0e4 <__alt_data_end+0xf800c0e4>
 800c350:	a809883a 	mov	r4,r21
 800c354:	800e2cc0 	call	800e2cc <_realloc_r>
 800c358:	102f883a 	mov	r23,r2
 800c35c:	103fee1e 	bne	r2,zero,800c318 <__alt_data_end+0xf800c318>
 800c360:	81400417 	ldw	r5,16(r16)
 800c364:	a809883a 	mov	r4,r21
 800c368:	800bbd00 	call	800bbd0 <_free_r>
 800c36c:	8080030b 	ldhu	r2,12(r16)
 800c370:	00ffdfc4 	movi	r3,-129
 800c374:	1884703a 	and	r2,r3,r2
 800c378:	00c00304 	movi	r3,12
 800c37c:	a8c00015 	stw	r3,0(r21)
 800c380:	003f5906 	br	800c0e8 <__alt_data_end+0xf800c0e8>
 800c384:	94c00044 	addi	r19,r18,1
 800c388:	02000044 	movi	r8,1
 800c38c:	003f6006 	br	800c110 <__alt_data_end+0xf800c110>
 800c390:	00bfffc4 	movi	r2,-1
 800c394:	003f0006 	br	800bf98 <__alt_data_end+0xf800bf98>
 800c398:	00800304 	movi	r2,12
 800c39c:	a8800015 	stw	r2,0(r21)
 800c3a0:	8080030b 	ldhu	r2,12(r16)
 800c3a4:	003f5006 	br	800c0e8 <__alt_data_end+0xf800c0e8>

0800c3a8 <_fwalk>:
 800c3a8:	defff704 	addi	sp,sp,-36
 800c3ac:	dd000415 	stw	r20,16(sp)
 800c3b0:	dfc00815 	stw	ra,32(sp)
 800c3b4:	ddc00715 	stw	r23,28(sp)
 800c3b8:	dd800615 	stw	r22,24(sp)
 800c3bc:	dd400515 	stw	r21,20(sp)
 800c3c0:	dcc00315 	stw	r19,12(sp)
 800c3c4:	dc800215 	stw	r18,8(sp)
 800c3c8:	dc400115 	stw	r17,4(sp)
 800c3cc:	dc000015 	stw	r16,0(sp)
 800c3d0:	2500b804 	addi	r20,r4,736
 800c3d4:	a0002326 	beq	r20,zero,800c464 <_fwalk+0xbc>
 800c3d8:	282b883a 	mov	r21,r5
 800c3dc:	002f883a 	mov	r23,zero
 800c3e0:	05800044 	movi	r22,1
 800c3e4:	04ffffc4 	movi	r19,-1
 800c3e8:	a4400117 	ldw	r17,4(r20)
 800c3ec:	a4800217 	ldw	r18,8(r20)
 800c3f0:	8c7fffc4 	addi	r17,r17,-1
 800c3f4:	88000d16 	blt	r17,zero,800c42c <_fwalk+0x84>
 800c3f8:	94000304 	addi	r16,r18,12
 800c3fc:	94800384 	addi	r18,r18,14
 800c400:	8080000b 	ldhu	r2,0(r16)
 800c404:	8c7fffc4 	addi	r17,r17,-1
 800c408:	813ffd04 	addi	r4,r16,-12
 800c40c:	b080042e 	bgeu	r22,r2,800c420 <_fwalk+0x78>
 800c410:	9080000f 	ldh	r2,0(r18)
 800c414:	14c00226 	beq	r2,r19,800c420 <_fwalk+0x78>
 800c418:	a83ee83a 	callr	r21
 800c41c:	b8aeb03a 	or	r23,r23,r2
 800c420:	84001a04 	addi	r16,r16,104
 800c424:	94801a04 	addi	r18,r18,104
 800c428:	8cfff51e 	bne	r17,r19,800c400 <__alt_data_end+0xf800c400>
 800c42c:	a5000017 	ldw	r20,0(r20)
 800c430:	a03fed1e 	bne	r20,zero,800c3e8 <__alt_data_end+0xf800c3e8>
 800c434:	b805883a 	mov	r2,r23
 800c438:	dfc00817 	ldw	ra,32(sp)
 800c43c:	ddc00717 	ldw	r23,28(sp)
 800c440:	dd800617 	ldw	r22,24(sp)
 800c444:	dd400517 	ldw	r21,20(sp)
 800c448:	dd000417 	ldw	r20,16(sp)
 800c44c:	dcc00317 	ldw	r19,12(sp)
 800c450:	dc800217 	ldw	r18,8(sp)
 800c454:	dc400117 	ldw	r17,4(sp)
 800c458:	dc000017 	ldw	r16,0(sp)
 800c45c:	dec00904 	addi	sp,sp,36
 800c460:	f800283a 	ret
 800c464:	002f883a 	mov	r23,zero
 800c468:	003ff206 	br	800c434 <__alt_data_end+0xf800c434>

0800c46c <_fwalk_reent>:
 800c46c:	defff704 	addi	sp,sp,-36
 800c470:	dd000415 	stw	r20,16(sp)
 800c474:	dfc00815 	stw	ra,32(sp)
 800c478:	ddc00715 	stw	r23,28(sp)
 800c47c:	dd800615 	stw	r22,24(sp)
 800c480:	dd400515 	stw	r21,20(sp)
 800c484:	dcc00315 	stw	r19,12(sp)
 800c488:	dc800215 	stw	r18,8(sp)
 800c48c:	dc400115 	stw	r17,4(sp)
 800c490:	dc000015 	stw	r16,0(sp)
 800c494:	2500b804 	addi	r20,r4,736
 800c498:	a0002326 	beq	r20,zero,800c528 <_fwalk_reent+0xbc>
 800c49c:	282b883a 	mov	r21,r5
 800c4a0:	2027883a 	mov	r19,r4
 800c4a4:	002f883a 	mov	r23,zero
 800c4a8:	05800044 	movi	r22,1
 800c4ac:	04bfffc4 	movi	r18,-1
 800c4b0:	a4400117 	ldw	r17,4(r20)
 800c4b4:	a4000217 	ldw	r16,8(r20)
 800c4b8:	8c7fffc4 	addi	r17,r17,-1
 800c4bc:	88000c16 	blt	r17,zero,800c4f0 <_fwalk_reent+0x84>
 800c4c0:	84000304 	addi	r16,r16,12
 800c4c4:	8080000b 	ldhu	r2,0(r16)
 800c4c8:	8c7fffc4 	addi	r17,r17,-1
 800c4cc:	817ffd04 	addi	r5,r16,-12
 800c4d0:	b080052e 	bgeu	r22,r2,800c4e8 <_fwalk_reent+0x7c>
 800c4d4:	8080008f 	ldh	r2,2(r16)
 800c4d8:	9809883a 	mov	r4,r19
 800c4dc:	14800226 	beq	r2,r18,800c4e8 <_fwalk_reent+0x7c>
 800c4e0:	a83ee83a 	callr	r21
 800c4e4:	b8aeb03a 	or	r23,r23,r2
 800c4e8:	84001a04 	addi	r16,r16,104
 800c4ec:	8cbff51e 	bne	r17,r18,800c4c4 <__alt_data_end+0xf800c4c4>
 800c4f0:	a5000017 	ldw	r20,0(r20)
 800c4f4:	a03fee1e 	bne	r20,zero,800c4b0 <__alt_data_end+0xf800c4b0>
 800c4f8:	b805883a 	mov	r2,r23
 800c4fc:	dfc00817 	ldw	ra,32(sp)
 800c500:	ddc00717 	ldw	r23,28(sp)
 800c504:	dd800617 	ldw	r22,24(sp)
 800c508:	dd400517 	ldw	r21,20(sp)
 800c50c:	dd000417 	ldw	r20,16(sp)
 800c510:	dcc00317 	ldw	r19,12(sp)
 800c514:	dc800217 	ldw	r18,8(sp)
 800c518:	dc400117 	ldw	r17,4(sp)
 800c51c:	dc000017 	ldw	r16,0(sp)
 800c520:	dec00904 	addi	sp,sp,36
 800c524:	f800283a 	ret
 800c528:	002f883a 	mov	r23,zero
 800c52c:	003ff206 	br	800c4f8 <__alt_data_end+0xf800c4f8>

0800c530 <_setlocale_r>:
 800c530:	30001b26 	beq	r6,zero,800c5a0 <_setlocale_r+0x70>
 800c534:	01420074 	movhi	r5,2049
 800c538:	defffe04 	addi	sp,sp,-8
 800c53c:	2959cb04 	addi	r5,r5,26412
 800c540:	3009883a 	mov	r4,r6
 800c544:	dc000015 	stw	r16,0(sp)
 800c548:	dfc00115 	stw	ra,4(sp)
 800c54c:	3021883a 	mov	r16,r6
 800c550:	800ea340 	call	800ea34 <strcmp>
 800c554:	1000061e 	bne	r2,zero,800c570 <_setlocale_r+0x40>
 800c558:	00820074 	movhi	r2,2049
 800c55c:	1099ca04 	addi	r2,r2,26408
 800c560:	dfc00117 	ldw	ra,4(sp)
 800c564:	dc000017 	ldw	r16,0(sp)
 800c568:	dec00204 	addi	sp,sp,8
 800c56c:	f800283a 	ret
 800c570:	01420074 	movhi	r5,2049
 800c574:	2959ca04 	addi	r5,r5,26408
 800c578:	8009883a 	mov	r4,r16
 800c57c:	800ea340 	call	800ea34 <strcmp>
 800c580:	103ff526 	beq	r2,zero,800c558 <__alt_data_end+0xf800c558>
 800c584:	01420074 	movhi	r5,2049
 800c588:	2959b504 	addi	r5,r5,26324
 800c58c:	8009883a 	mov	r4,r16
 800c590:	800ea340 	call	800ea34 <strcmp>
 800c594:	103ff026 	beq	r2,zero,800c558 <__alt_data_end+0xf800c558>
 800c598:	0005883a 	mov	r2,zero
 800c59c:	003ff006 	br	800c560 <__alt_data_end+0xf800c560>
 800c5a0:	00820074 	movhi	r2,2049
 800c5a4:	1099ca04 	addi	r2,r2,26408
 800c5a8:	f800283a 	ret

0800c5ac <__locale_charset>:
 800c5ac:	00820074 	movhi	r2,2049
 800c5b0:	109b7904 	addi	r2,r2,28132
 800c5b4:	f800283a 	ret

0800c5b8 <__locale_mb_cur_max>:
 800c5b8:	008200b4 	movhi	r2,2050
 800c5bc:	10a11604 	addi	r2,r2,-31656
 800c5c0:	10800017 	ldw	r2,0(r2)
 800c5c4:	f800283a 	ret

0800c5c8 <__locale_msgcharset>:
 800c5c8:	00820074 	movhi	r2,2049
 800c5cc:	109b7104 	addi	r2,r2,28100
 800c5d0:	f800283a 	ret

0800c5d4 <__locale_cjk_lang>:
 800c5d4:	0005883a 	mov	r2,zero
 800c5d8:	f800283a 	ret

0800c5dc <_localeconv_r>:
 800c5dc:	00820074 	movhi	r2,2049
 800c5e0:	109b8104 	addi	r2,r2,28164
 800c5e4:	f800283a 	ret

0800c5e8 <setlocale>:
 800c5e8:	008200b4 	movhi	r2,2050
 800c5ec:	10a11504 	addi	r2,r2,-31660
 800c5f0:	280d883a 	mov	r6,r5
 800c5f4:	200b883a 	mov	r5,r4
 800c5f8:	11000017 	ldw	r4,0(r2)
 800c5fc:	800c5301 	jmpi	800c530 <_setlocale_r>

0800c600 <localeconv>:
 800c600:	00820074 	movhi	r2,2049
 800c604:	109b8104 	addi	r2,r2,28164
 800c608:	f800283a 	ret

0800c60c <__smakebuf_r>:
 800c60c:	2880030b 	ldhu	r2,12(r5)
 800c610:	10c0008c 	andi	r3,r2,2
 800c614:	1800411e 	bne	r3,zero,800c71c <__smakebuf_r+0x110>
 800c618:	deffec04 	addi	sp,sp,-80
 800c61c:	dc000f15 	stw	r16,60(sp)
 800c620:	2821883a 	mov	r16,r5
 800c624:	2940038f 	ldh	r5,14(r5)
 800c628:	dc401015 	stw	r17,64(sp)
 800c62c:	dfc01315 	stw	ra,76(sp)
 800c630:	dcc01215 	stw	r19,72(sp)
 800c634:	dc801115 	stw	r18,68(sp)
 800c638:	2023883a 	mov	r17,r4
 800c63c:	28001c16 	blt	r5,zero,800c6b0 <__smakebuf_r+0xa4>
 800c640:	d80d883a 	mov	r6,sp
 800c644:	80106a40 	call	80106a4 <_fstat_r>
 800c648:	10001816 	blt	r2,zero,800c6ac <__smakebuf_r+0xa0>
 800c64c:	d8800117 	ldw	r2,4(sp)
 800c650:	00e00014 	movui	r3,32768
 800c654:	10bc000c 	andi	r2,r2,61440
 800c658:	14c80020 	cmpeqi	r19,r2,8192
 800c65c:	10c03726 	beq	r2,r3,800c73c <__smakebuf_r+0x130>
 800c660:	80c0030b 	ldhu	r3,12(r16)
 800c664:	18c20014 	ori	r3,r3,2048
 800c668:	80c0030d 	sth	r3,12(r16)
 800c66c:	00c80004 	movi	r3,8192
 800c670:	10c0521e 	bne	r2,r3,800c7bc <__smakebuf_r+0x1b0>
 800c674:	8140038f 	ldh	r5,14(r16)
 800c678:	8809883a 	mov	r4,r17
 800c67c:	80107000 	call	8010700 <_isatty_r>
 800c680:	10004c26 	beq	r2,zero,800c7b4 <__smakebuf_r+0x1a8>
 800c684:	8080030b 	ldhu	r2,12(r16)
 800c688:	80c010c4 	addi	r3,r16,67
 800c68c:	80c00015 	stw	r3,0(r16)
 800c690:	10800054 	ori	r2,r2,1
 800c694:	8080030d 	sth	r2,12(r16)
 800c698:	00800044 	movi	r2,1
 800c69c:	80c00415 	stw	r3,16(r16)
 800c6a0:	80800515 	stw	r2,20(r16)
 800c6a4:	04810004 	movi	r18,1024
 800c6a8:	00000706 	br	800c6c8 <__smakebuf_r+0xbc>
 800c6ac:	8080030b 	ldhu	r2,12(r16)
 800c6b0:	10c0200c 	andi	r3,r2,128
 800c6b4:	18001f1e 	bne	r3,zero,800c734 <__smakebuf_r+0x128>
 800c6b8:	04810004 	movi	r18,1024
 800c6bc:	10820014 	ori	r2,r2,2048
 800c6c0:	8080030d 	sth	r2,12(r16)
 800c6c4:	0027883a 	mov	r19,zero
 800c6c8:	900b883a 	mov	r5,r18
 800c6cc:	8809883a 	mov	r4,r17
 800c6d0:	800c7c80 	call	800c7c8 <_malloc_r>
 800c6d4:	10002c26 	beq	r2,zero,800c788 <__smakebuf_r+0x17c>
 800c6d8:	80c0030b 	ldhu	r3,12(r16)
 800c6dc:	01020074 	movhi	r4,2049
 800c6e0:	212dc104 	addi	r4,r4,-18684
 800c6e4:	89000f15 	stw	r4,60(r17)
 800c6e8:	18c02014 	ori	r3,r3,128
 800c6ec:	80c0030d 	sth	r3,12(r16)
 800c6f0:	80800015 	stw	r2,0(r16)
 800c6f4:	80800415 	stw	r2,16(r16)
 800c6f8:	84800515 	stw	r18,20(r16)
 800c6fc:	98001a1e 	bne	r19,zero,800c768 <__smakebuf_r+0x15c>
 800c700:	dfc01317 	ldw	ra,76(sp)
 800c704:	dcc01217 	ldw	r19,72(sp)
 800c708:	dc801117 	ldw	r18,68(sp)
 800c70c:	dc401017 	ldw	r17,64(sp)
 800c710:	dc000f17 	ldw	r16,60(sp)
 800c714:	dec01404 	addi	sp,sp,80
 800c718:	f800283a 	ret
 800c71c:	288010c4 	addi	r2,r5,67
 800c720:	28800015 	stw	r2,0(r5)
 800c724:	28800415 	stw	r2,16(r5)
 800c728:	00800044 	movi	r2,1
 800c72c:	28800515 	stw	r2,20(r5)
 800c730:	f800283a 	ret
 800c734:	04801004 	movi	r18,64
 800c738:	003fe006 	br	800c6bc <__alt_data_end+0xf800c6bc>
 800c73c:	81000a17 	ldw	r4,40(r16)
 800c740:	00c20074 	movhi	r3,2049
 800c744:	18fa7404 	addi	r3,r3,-5680
 800c748:	20ffc51e 	bne	r4,r3,800c660 <__alt_data_end+0xf800c660>
 800c74c:	8080030b 	ldhu	r2,12(r16)
 800c750:	04810004 	movi	r18,1024
 800c754:	84801315 	stw	r18,76(r16)
 800c758:	1484b03a 	or	r2,r2,r18
 800c75c:	8080030d 	sth	r2,12(r16)
 800c760:	0027883a 	mov	r19,zero
 800c764:	003fd806 	br	800c6c8 <__alt_data_end+0xf800c6c8>
 800c768:	8140038f 	ldh	r5,14(r16)
 800c76c:	8809883a 	mov	r4,r17
 800c770:	80107000 	call	8010700 <_isatty_r>
 800c774:	103fe226 	beq	r2,zero,800c700 <__alt_data_end+0xf800c700>
 800c778:	8080030b 	ldhu	r2,12(r16)
 800c77c:	10800054 	ori	r2,r2,1
 800c780:	8080030d 	sth	r2,12(r16)
 800c784:	003fde06 	br	800c700 <__alt_data_end+0xf800c700>
 800c788:	8080030b 	ldhu	r2,12(r16)
 800c78c:	10c0800c 	andi	r3,r2,512
 800c790:	183fdb1e 	bne	r3,zero,800c700 <__alt_data_end+0xf800c700>
 800c794:	10800094 	ori	r2,r2,2
 800c798:	80c010c4 	addi	r3,r16,67
 800c79c:	8080030d 	sth	r2,12(r16)
 800c7a0:	00800044 	movi	r2,1
 800c7a4:	80c00015 	stw	r3,0(r16)
 800c7a8:	80c00415 	stw	r3,16(r16)
 800c7ac:	80800515 	stw	r2,20(r16)
 800c7b0:	003fd306 	br	800c700 <__alt_data_end+0xf800c700>
 800c7b4:	04810004 	movi	r18,1024
 800c7b8:	003fc306 	br	800c6c8 <__alt_data_end+0xf800c6c8>
 800c7bc:	0027883a 	mov	r19,zero
 800c7c0:	04810004 	movi	r18,1024
 800c7c4:	003fc006 	br	800c6c8 <__alt_data_end+0xf800c6c8>

0800c7c8 <_malloc_r>:
 800c7c8:	defff504 	addi	sp,sp,-44
 800c7cc:	dc800315 	stw	r18,12(sp)
 800c7d0:	dfc00a15 	stw	ra,40(sp)
 800c7d4:	df000915 	stw	fp,36(sp)
 800c7d8:	ddc00815 	stw	r23,32(sp)
 800c7dc:	dd800715 	stw	r22,28(sp)
 800c7e0:	dd400615 	stw	r21,24(sp)
 800c7e4:	dd000515 	stw	r20,20(sp)
 800c7e8:	dcc00415 	stw	r19,16(sp)
 800c7ec:	dc400215 	stw	r17,8(sp)
 800c7f0:	dc000115 	stw	r16,4(sp)
 800c7f4:	288002c4 	addi	r2,r5,11
 800c7f8:	00c00584 	movi	r3,22
 800c7fc:	2025883a 	mov	r18,r4
 800c800:	18807f2e 	bgeu	r3,r2,800ca00 <_malloc_r+0x238>
 800c804:	047ffe04 	movi	r17,-8
 800c808:	1462703a 	and	r17,r2,r17
 800c80c:	8800a316 	blt	r17,zero,800ca9c <_malloc_r+0x2d4>
 800c810:	8940a236 	bltu	r17,r5,800ca9c <_malloc_r+0x2d4>
 800c814:	80145540 	call	8014554 <__malloc_lock>
 800c818:	00807dc4 	movi	r2,503
 800c81c:	1441e92e 	bgeu	r2,r17,800cfc4 <_malloc_r+0x7fc>
 800c820:	8804d27a 	srli	r2,r17,9
 800c824:	1000a126 	beq	r2,zero,800caac <_malloc_r+0x2e4>
 800c828:	00c00104 	movi	r3,4
 800c82c:	18811e36 	bltu	r3,r2,800cca8 <_malloc_r+0x4e0>
 800c830:	8804d1ba 	srli	r2,r17,6
 800c834:	12000e44 	addi	r8,r2,57
 800c838:	11c00e04 	addi	r7,r2,56
 800c83c:	4209883a 	add	r4,r8,r8
 800c840:	04c20074 	movhi	r19,2049
 800c844:	2109883a 	add	r4,r4,r4
 800c848:	9cdb8f04 	addi	r19,r19,28220
 800c84c:	2109883a 	add	r4,r4,r4
 800c850:	9909883a 	add	r4,r19,r4
 800c854:	24000117 	ldw	r16,4(r4)
 800c858:	213ffe04 	addi	r4,r4,-8
 800c85c:	24009726 	beq	r4,r16,800cabc <_malloc_r+0x2f4>
 800c860:	80800117 	ldw	r2,4(r16)
 800c864:	01bfff04 	movi	r6,-4
 800c868:	014003c4 	movi	r5,15
 800c86c:	1184703a 	and	r2,r2,r6
 800c870:	1447c83a 	sub	r3,r2,r17
 800c874:	28c00716 	blt	r5,r3,800c894 <_malloc_r+0xcc>
 800c878:	1800920e 	bge	r3,zero,800cac4 <_malloc_r+0x2fc>
 800c87c:	84000317 	ldw	r16,12(r16)
 800c880:	24008e26 	beq	r4,r16,800cabc <_malloc_r+0x2f4>
 800c884:	80800117 	ldw	r2,4(r16)
 800c888:	1184703a 	and	r2,r2,r6
 800c88c:	1447c83a 	sub	r3,r2,r17
 800c890:	28fff90e 	bge	r5,r3,800c878 <__alt_data_end+0xf800c878>
 800c894:	3809883a 	mov	r4,r7
 800c898:	01820074 	movhi	r6,2049
 800c89c:	9c000417 	ldw	r16,16(r19)
 800c8a0:	319b8f04 	addi	r6,r6,28220
 800c8a4:	32000204 	addi	r8,r6,8
 800c8a8:	82013426 	beq	r16,r8,800cd7c <_malloc_r+0x5b4>
 800c8ac:	80c00117 	ldw	r3,4(r16)
 800c8b0:	00bfff04 	movi	r2,-4
 800c8b4:	188e703a 	and	r7,r3,r2
 800c8b8:	3c45c83a 	sub	r2,r7,r17
 800c8bc:	00c003c4 	movi	r3,15
 800c8c0:	18811f16 	blt	r3,r2,800cd40 <_malloc_r+0x578>
 800c8c4:	32000515 	stw	r8,20(r6)
 800c8c8:	32000415 	stw	r8,16(r6)
 800c8cc:	10007f0e 	bge	r2,zero,800cacc <_malloc_r+0x304>
 800c8d0:	00807fc4 	movi	r2,511
 800c8d4:	11c0fd36 	bltu	r2,r7,800cccc <_malloc_r+0x504>
 800c8d8:	3806d0fa 	srli	r3,r7,3
 800c8dc:	01c00044 	movi	r7,1
 800c8e0:	30800117 	ldw	r2,4(r6)
 800c8e4:	19400044 	addi	r5,r3,1
 800c8e8:	294b883a 	add	r5,r5,r5
 800c8ec:	1807d0ba 	srai	r3,r3,2
 800c8f0:	294b883a 	add	r5,r5,r5
 800c8f4:	294b883a 	add	r5,r5,r5
 800c8f8:	298b883a 	add	r5,r5,r6
 800c8fc:	38c6983a 	sll	r3,r7,r3
 800c900:	29c00017 	ldw	r7,0(r5)
 800c904:	2a7ffe04 	addi	r9,r5,-8
 800c908:	1886b03a 	or	r3,r3,r2
 800c90c:	82400315 	stw	r9,12(r16)
 800c910:	81c00215 	stw	r7,8(r16)
 800c914:	30c00115 	stw	r3,4(r6)
 800c918:	2c000015 	stw	r16,0(r5)
 800c91c:	3c000315 	stw	r16,12(r7)
 800c920:	2005d0ba 	srai	r2,r4,2
 800c924:	01400044 	movi	r5,1
 800c928:	288a983a 	sll	r5,r5,r2
 800c92c:	19406f36 	bltu	r3,r5,800caec <_malloc_r+0x324>
 800c930:	28c4703a 	and	r2,r5,r3
 800c934:	10000a1e 	bne	r2,zero,800c960 <_malloc_r+0x198>
 800c938:	00bfff04 	movi	r2,-4
 800c93c:	294b883a 	add	r5,r5,r5
 800c940:	2088703a 	and	r4,r4,r2
 800c944:	28c4703a 	and	r2,r5,r3
 800c948:	21000104 	addi	r4,r4,4
 800c94c:	1000041e 	bne	r2,zero,800c960 <_malloc_r+0x198>
 800c950:	294b883a 	add	r5,r5,r5
 800c954:	28c4703a 	and	r2,r5,r3
 800c958:	21000104 	addi	r4,r4,4
 800c95c:	103ffc26 	beq	r2,zero,800c950 <__alt_data_end+0xf800c950>
 800c960:	02bfff04 	movi	r10,-4
 800c964:	024003c4 	movi	r9,15
 800c968:	21800044 	addi	r6,r4,1
 800c96c:	318d883a 	add	r6,r6,r6
 800c970:	318d883a 	add	r6,r6,r6
 800c974:	318d883a 	add	r6,r6,r6
 800c978:	998d883a 	add	r6,r19,r6
 800c97c:	333ffe04 	addi	r12,r6,-8
 800c980:	2017883a 	mov	r11,r4
 800c984:	31800104 	addi	r6,r6,4
 800c988:	34000017 	ldw	r16,0(r6)
 800c98c:	31fffd04 	addi	r7,r6,-12
 800c990:	81c0041e 	bne	r16,r7,800c9a4 <_malloc_r+0x1dc>
 800c994:	0000fb06 	br	800cd84 <_malloc_r+0x5bc>
 800c998:	1801030e 	bge	r3,zero,800cda8 <_malloc_r+0x5e0>
 800c99c:	84000317 	ldw	r16,12(r16)
 800c9a0:	81c0f826 	beq	r16,r7,800cd84 <_malloc_r+0x5bc>
 800c9a4:	80800117 	ldw	r2,4(r16)
 800c9a8:	1284703a 	and	r2,r2,r10
 800c9ac:	1447c83a 	sub	r3,r2,r17
 800c9b0:	48fff90e 	bge	r9,r3,800c998 <__alt_data_end+0xf800c998>
 800c9b4:	80800317 	ldw	r2,12(r16)
 800c9b8:	81000217 	ldw	r4,8(r16)
 800c9bc:	89400054 	ori	r5,r17,1
 800c9c0:	81400115 	stw	r5,4(r16)
 800c9c4:	20800315 	stw	r2,12(r4)
 800c9c8:	11000215 	stw	r4,8(r2)
 800c9cc:	8463883a 	add	r17,r16,r17
 800c9d0:	9c400515 	stw	r17,20(r19)
 800c9d4:	9c400415 	stw	r17,16(r19)
 800c9d8:	18800054 	ori	r2,r3,1
 800c9dc:	88800115 	stw	r2,4(r17)
 800c9e0:	8a000315 	stw	r8,12(r17)
 800c9e4:	8a000215 	stw	r8,8(r17)
 800c9e8:	88e3883a 	add	r17,r17,r3
 800c9ec:	88c00015 	stw	r3,0(r17)
 800c9f0:	9009883a 	mov	r4,r18
 800c9f4:	80145780 	call	8014578 <__malloc_unlock>
 800c9f8:	80800204 	addi	r2,r16,8
 800c9fc:	00001b06 	br	800ca6c <_malloc_r+0x2a4>
 800ca00:	04400404 	movi	r17,16
 800ca04:	89402536 	bltu	r17,r5,800ca9c <_malloc_r+0x2d4>
 800ca08:	80145540 	call	8014554 <__malloc_lock>
 800ca0c:	00800184 	movi	r2,6
 800ca10:	01000084 	movi	r4,2
 800ca14:	04c20074 	movhi	r19,2049
 800ca18:	1085883a 	add	r2,r2,r2
 800ca1c:	9cdb8f04 	addi	r19,r19,28220
 800ca20:	1085883a 	add	r2,r2,r2
 800ca24:	9885883a 	add	r2,r19,r2
 800ca28:	14000117 	ldw	r16,4(r2)
 800ca2c:	10fffe04 	addi	r3,r2,-8
 800ca30:	80c0d926 	beq	r16,r3,800cd98 <_malloc_r+0x5d0>
 800ca34:	80c00117 	ldw	r3,4(r16)
 800ca38:	81000317 	ldw	r4,12(r16)
 800ca3c:	00bfff04 	movi	r2,-4
 800ca40:	1884703a 	and	r2,r3,r2
 800ca44:	81400217 	ldw	r5,8(r16)
 800ca48:	8085883a 	add	r2,r16,r2
 800ca4c:	10c00117 	ldw	r3,4(r2)
 800ca50:	29000315 	stw	r4,12(r5)
 800ca54:	21400215 	stw	r5,8(r4)
 800ca58:	18c00054 	ori	r3,r3,1
 800ca5c:	10c00115 	stw	r3,4(r2)
 800ca60:	9009883a 	mov	r4,r18
 800ca64:	80145780 	call	8014578 <__malloc_unlock>
 800ca68:	80800204 	addi	r2,r16,8
 800ca6c:	dfc00a17 	ldw	ra,40(sp)
 800ca70:	df000917 	ldw	fp,36(sp)
 800ca74:	ddc00817 	ldw	r23,32(sp)
 800ca78:	dd800717 	ldw	r22,28(sp)
 800ca7c:	dd400617 	ldw	r21,24(sp)
 800ca80:	dd000517 	ldw	r20,20(sp)
 800ca84:	dcc00417 	ldw	r19,16(sp)
 800ca88:	dc800317 	ldw	r18,12(sp)
 800ca8c:	dc400217 	ldw	r17,8(sp)
 800ca90:	dc000117 	ldw	r16,4(sp)
 800ca94:	dec00b04 	addi	sp,sp,44
 800ca98:	f800283a 	ret
 800ca9c:	00800304 	movi	r2,12
 800caa0:	90800015 	stw	r2,0(r18)
 800caa4:	0005883a 	mov	r2,zero
 800caa8:	003ff006 	br	800ca6c <__alt_data_end+0xf800ca6c>
 800caac:	01002004 	movi	r4,128
 800cab0:	02001004 	movi	r8,64
 800cab4:	01c00fc4 	movi	r7,63
 800cab8:	003f6106 	br	800c840 <__alt_data_end+0xf800c840>
 800cabc:	4009883a 	mov	r4,r8
 800cac0:	003f7506 	br	800c898 <__alt_data_end+0xf800c898>
 800cac4:	81000317 	ldw	r4,12(r16)
 800cac8:	003fde06 	br	800ca44 <__alt_data_end+0xf800ca44>
 800cacc:	81c5883a 	add	r2,r16,r7
 800cad0:	11400117 	ldw	r5,4(r2)
 800cad4:	9009883a 	mov	r4,r18
 800cad8:	29400054 	ori	r5,r5,1
 800cadc:	11400115 	stw	r5,4(r2)
 800cae0:	80145780 	call	8014578 <__malloc_unlock>
 800cae4:	80800204 	addi	r2,r16,8
 800cae8:	003fe006 	br	800ca6c <__alt_data_end+0xf800ca6c>
 800caec:	9c000217 	ldw	r16,8(r19)
 800caf0:	00bfff04 	movi	r2,-4
 800caf4:	85800117 	ldw	r22,4(r16)
 800caf8:	b0ac703a 	and	r22,r22,r2
 800cafc:	b4400336 	bltu	r22,r17,800cb0c <_malloc_r+0x344>
 800cb00:	b445c83a 	sub	r2,r22,r17
 800cb04:	00c003c4 	movi	r3,15
 800cb08:	18805d16 	blt	r3,r2,800cc80 <_malloc_r+0x4b8>
 800cb0c:	05c200b4 	movhi	r23,2050
 800cb10:	008200b4 	movhi	r2,2050
 800cb14:	10a7f604 	addi	r2,r2,-24616
 800cb18:	bde11704 	addi	r23,r23,-31652
 800cb1c:	15400017 	ldw	r21,0(r2)
 800cb20:	b8c00017 	ldw	r3,0(r23)
 800cb24:	00bfffc4 	movi	r2,-1
 800cb28:	858d883a 	add	r6,r16,r22
 800cb2c:	8d6b883a 	add	r21,r17,r21
 800cb30:	1880ea26 	beq	r3,r2,800cedc <_malloc_r+0x714>
 800cb34:	ad4403c4 	addi	r21,r21,4111
 800cb38:	00bc0004 	movi	r2,-4096
 800cb3c:	a8aa703a 	and	r21,r21,r2
 800cb40:	a80b883a 	mov	r5,r21
 800cb44:	9009883a 	mov	r4,r18
 800cb48:	d9800015 	stw	r6,0(sp)
 800cb4c:	800e8a40 	call	800e8a4 <_sbrk_r>
 800cb50:	1029883a 	mov	r20,r2
 800cb54:	00bfffc4 	movi	r2,-1
 800cb58:	d9800017 	ldw	r6,0(sp)
 800cb5c:	a080e826 	beq	r20,r2,800cf00 <_malloc_r+0x738>
 800cb60:	a180a636 	bltu	r20,r6,800cdfc <_malloc_r+0x634>
 800cb64:	070220b4 	movhi	fp,2178
 800cb68:	e7283104 	addi	fp,fp,-24380
 800cb6c:	e0800017 	ldw	r2,0(fp)
 800cb70:	a887883a 	add	r3,r21,r2
 800cb74:	e0c00015 	stw	r3,0(fp)
 800cb78:	3500e626 	beq	r6,r20,800cf14 <_malloc_r+0x74c>
 800cb7c:	b9000017 	ldw	r4,0(r23)
 800cb80:	00bfffc4 	movi	r2,-1
 800cb84:	2080ee26 	beq	r4,r2,800cf40 <_malloc_r+0x778>
 800cb88:	a185c83a 	sub	r2,r20,r6
 800cb8c:	10c5883a 	add	r2,r2,r3
 800cb90:	e0800015 	stw	r2,0(fp)
 800cb94:	a0c001cc 	andi	r3,r20,7
 800cb98:	1800bc26 	beq	r3,zero,800ce8c <_malloc_r+0x6c4>
 800cb9c:	a0e9c83a 	sub	r20,r20,r3
 800cba0:	00840204 	movi	r2,4104
 800cba4:	a5000204 	addi	r20,r20,8
 800cba8:	10c7c83a 	sub	r3,r2,r3
 800cbac:	a545883a 	add	r2,r20,r21
 800cbb0:	1083ffcc 	andi	r2,r2,4095
 800cbb4:	18abc83a 	sub	r21,r3,r2
 800cbb8:	a80b883a 	mov	r5,r21
 800cbbc:	9009883a 	mov	r4,r18
 800cbc0:	800e8a40 	call	800e8a4 <_sbrk_r>
 800cbc4:	00ffffc4 	movi	r3,-1
 800cbc8:	10c0e126 	beq	r2,r3,800cf50 <_malloc_r+0x788>
 800cbcc:	1505c83a 	sub	r2,r2,r20
 800cbd0:	1545883a 	add	r2,r2,r21
 800cbd4:	10800054 	ori	r2,r2,1
 800cbd8:	e0c00017 	ldw	r3,0(fp)
 800cbdc:	9d000215 	stw	r20,8(r19)
 800cbe0:	a0800115 	stw	r2,4(r20)
 800cbe4:	a8c7883a 	add	r3,r21,r3
 800cbe8:	e0c00015 	stw	r3,0(fp)
 800cbec:	84c00e26 	beq	r16,r19,800cc28 <_malloc_r+0x460>
 800cbf0:	018003c4 	movi	r6,15
 800cbf4:	3580a72e 	bgeu	r6,r22,800ce94 <_malloc_r+0x6cc>
 800cbf8:	81400117 	ldw	r5,4(r16)
 800cbfc:	013ffe04 	movi	r4,-8
 800cc00:	b0bffd04 	addi	r2,r22,-12
 800cc04:	1104703a 	and	r2,r2,r4
 800cc08:	2900004c 	andi	r4,r5,1
 800cc0c:	2088b03a 	or	r4,r4,r2
 800cc10:	81000115 	stw	r4,4(r16)
 800cc14:	01400144 	movi	r5,5
 800cc18:	8089883a 	add	r4,r16,r2
 800cc1c:	21400115 	stw	r5,4(r4)
 800cc20:	21400215 	stw	r5,8(r4)
 800cc24:	3080cd36 	bltu	r6,r2,800cf5c <_malloc_r+0x794>
 800cc28:	008200b4 	movhi	r2,2050
 800cc2c:	10a7f504 	addi	r2,r2,-24620
 800cc30:	11000017 	ldw	r4,0(r2)
 800cc34:	20c0012e 	bgeu	r4,r3,800cc3c <_malloc_r+0x474>
 800cc38:	10c00015 	stw	r3,0(r2)
 800cc3c:	008200b4 	movhi	r2,2050
 800cc40:	10a7f404 	addi	r2,r2,-24624
 800cc44:	11000017 	ldw	r4,0(r2)
 800cc48:	9c000217 	ldw	r16,8(r19)
 800cc4c:	20c0012e 	bgeu	r4,r3,800cc54 <_malloc_r+0x48c>
 800cc50:	10c00015 	stw	r3,0(r2)
 800cc54:	80c00117 	ldw	r3,4(r16)
 800cc58:	00bfff04 	movi	r2,-4
 800cc5c:	1886703a 	and	r3,r3,r2
 800cc60:	1c45c83a 	sub	r2,r3,r17
 800cc64:	1c400236 	bltu	r3,r17,800cc70 <_malloc_r+0x4a8>
 800cc68:	00c003c4 	movi	r3,15
 800cc6c:	18800416 	blt	r3,r2,800cc80 <_malloc_r+0x4b8>
 800cc70:	9009883a 	mov	r4,r18
 800cc74:	80145780 	call	8014578 <__malloc_unlock>
 800cc78:	0005883a 	mov	r2,zero
 800cc7c:	003f7b06 	br	800ca6c <__alt_data_end+0xf800ca6c>
 800cc80:	88c00054 	ori	r3,r17,1
 800cc84:	80c00115 	stw	r3,4(r16)
 800cc88:	8463883a 	add	r17,r16,r17
 800cc8c:	10800054 	ori	r2,r2,1
 800cc90:	9c400215 	stw	r17,8(r19)
 800cc94:	88800115 	stw	r2,4(r17)
 800cc98:	9009883a 	mov	r4,r18
 800cc9c:	80145780 	call	8014578 <__malloc_unlock>
 800cca0:	80800204 	addi	r2,r16,8
 800cca4:	003f7106 	br	800ca6c <__alt_data_end+0xf800ca6c>
 800cca8:	00c00504 	movi	r3,20
 800ccac:	18804a2e 	bgeu	r3,r2,800cdd8 <_malloc_r+0x610>
 800ccb0:	00c01504 	movi	r3,84
 800ccb4:	18806e36 	bltu	r3,r2,800ce70 <_malloc_r+0x6a8>
 800ccb8:	8804d33a 	srli	r2,r17,12
 800ccbc:	12001bc4 	addi	r8,r2,111
 800ccc0:	11c01b84 	addi	r7,r2,110
 800ccc4:	4209883a 	add	r4,r8,r8
 800ccc8:	003edd06 	br	800c840 <__alt_data_end+0xf800c840>
 800cccc:	3804d27a 	srli	r2,r7,9
 800ccd0:	00c00104 	movi	r3,4
 800ccd4:	1880442e 	bgeu	r3,r2,800cde8 <_malloc_r+0x620>
 800ccd8:	00c00504 	movi	r3,20
 800ccdc:	18808136 	bltu	r3,r2,800cee4 <_malloc_r+0x71c>
 800cce0:	11401704 	addi	r5,r2,92
 800cce4:	10c016c4 	addi	r3,r2,91
 800cce8:	294b883a 	add	r5,r5,r5
 800ccec:	294b883a 	add	r5,r5,r5
 800ccf0:	294b883a 	add	r5,r5,r5
 800ccf4:	994b883a 	add	r5,r19,r5
 800ccf8:	28800017 	ldw	r2,0(r5)
 800ccfc:	01820074 	movhi	r6,2049
 800cd00:	297ffe04 	addi	r5,r5,-8
 800cd04:	319b8f04 	addi	r6,r6,28220
 800cd08:	28806526 	beq	r5,r2,800cea0 <_malloc_r+0x6d8>
 800cd0c:	01bfff04 	movi	r6,-4
 800cd10:	10c00117 	ldw	r3,4(r2)
 800cd14:	1986703a 	and	r3,r3,r6
 800cd18:	38c0022e 	bgeu	r7,r3,800cd24 <_malloc_r+0x55c>
 800cd1c:	10800217 	ldw	r2,8(r2)
 800cd20:	28bffb1e 	bne	r5,r2,800cd10 <__alt_data_end+0xf800cd10>
 800cd24:	11400317 	ldw	r5,12(r2)
 800cd28:	98c00117 	ldw	r3,4(r19)
 800cd2c:	81400315 	stw	r5,12(r16)
 800cd30:	80800215 	stw	r2,8(r16)
 800cd34:	2c000215 	stw	r16,8(r5)
 800cd38:	14000315 	stw	r16,12(r2)
 800cd3c:	003ef806 	br	800c920 <__alt_data_end+0xf800c920>
 800cd40:	88c00054 	ori	r3,r17,1
 800cd44:	80c00115 	stw	r3,4(r16)
 800cd48:	8463883a 	add	r17,r16,r17
 800cd4c:	34400515 	stw	r17,20(r6)
 800cd50:	34400415 	stw	r17,16(r6)
 800cd54:	10c00054 	ori	r3,r2,1
 800cd58:	8a000315 	stw	r8,12(r17)
 800cd5c:	8a000215 	stw	r8,8(r17)
 800cd60:	88c00115 	stw	r3,4(r17)
 800cd64:	88a3883a 	add	r17,r17,r2
 800cd68:	88800015 	stw	r2,0(r17)
 800cd6c:	9009883a 	mov	r4,r18
 800cd70:	80145780 	call	8014578 <__malloc_unlock>
 800cd74:	80800204 	addi	r2,r16,8
 800cd78:	003f3c06 	br	800ca6c <__alt_data_end+0xf800ca6c>
 800cd7c:	30c00117 	ldw	r3,4(r6)
 800cd80:	003ee706 	br	800c920 <__alt_data_end+0xf800c920>
 800cd84:	5ac00044 	addi	r11,r11,1
 800cd88:	588000cc 	andi	r2,r11,3
 800cd8c:	31800204 	addi	r6,r6,8
 800cd90:	103efd1e 	bne	r2,zero,800c988 <__alt_data_end+0xf800c988>
 800cd94:	00002406 	br	800ce28 <_malloc_r+0x660>
 800cd98:	14000317 	ldw	r16,12(r2)
 800cd9c:	143f251e 	bne	r2,r16,800ca34 <__alt_data_end+0xf800ca34>
 800cda0:	21000084 	addi	r4,r4,2
 800cda4:	003ebc06 	br	800c898 <__alt_data_end+0xf800c898>
 800cda8:	8085883a 	add	r2,r16,r2
 800cdac:	10c00117 	ldw	r3,4(r2)
 800cdb0:	81000317 	ldw	r4,12(r16)
 800cdb4:	81400217 	ldw	r5,8(r16)
 800cdb8:	18c00054 	ori	r3,r3,1
 800cdbc:	10c00115 	stw	r3,4(r2)
 800cdc0:	29000315 	stw	r4,12(r5)
 800cdc4:	21400215 	stw	r5,8(r4)
 800cdc8:	9009883a 	mov	r4,r18
 800cdcc:	80145780 	call	8014578 <__malloc_unlock>
 800cdd0:	80800204 	addi	r2,r16,8
 800cdd4:	003f2506 	br	800ca6c <__alt_data_end+0xf800ca6c>
 800cdd8:	12001704 	addi	r8,r2,92
 800cddc:	11c016c4 	addi	r7,r2,91
 800cde0:	4209883a 	add	r4,r8,r8
 800cde4:	003e9606 	br	800c840 <__alt_data_end+0xf800c840>
 800cde8:	3804d1ba 	srli	r2,r7,6
 800cdec:	11400e44 	addi	r5,r2,57
 800cdf0:	10c00e04 	addi	r3,r2,56
 800cdf4:	294b883a 	add	r5,r5,r5
 800cdf8:	003fbc06 	br	800ccec <__alt_data_end+0xf800ccec>
 800cdfc:	84ff5926 	beq	r16,r19,800cb64 <__alt_data_end+0xf800cb64>
 800ce00:	00820074 	movhi	r2,2049
 800ce04:	109b8f04 	addi	r2,r2,28220
 800ce08:	14000217 	ldw	r16,8(r2)
 800ce0c:	00bfff04 	movi	r2,-4
 800ce10:	80c00117 	ldw	r3,4(r16)
 800ce14:	1886703a 	and	r3,r3,r2
 800ce18:	003f9106 	br	800cc60 <__alt_data_end+0xf800cc60>
 800ce1c:	60800217 	ldw	r2,8(r12)
 800ce20:	213fffc4 	addi	r4,r4,-1
 800ce24:	1300651e 	bne	r2,r12,800cfbc <_malloc_r+0x7f4>
 800ce28:	208000cc 	andi	r2,r4,3
 800ce2c:	633ffe04 	addi	r12,r12,-8
 800ce30:	103ffa1e 	bne	r2,zero,800ce1c <__alt_data_end+0xf800ce1c>
 800ce34:	98800117 	ldw	r2,4(r19)
 800ce38:	0146303a 	nor	r3,zero,r5
 800ce3c:	1884703a 	and	r2,r3,r2
 800ce40:	98800115 	stw	r2,4(r19)
 800ce44:	294b883a 	add	r5,r5,r5
 800ce48:	117f2836 	bltu	r2,r5,800caec <__alt_data_end+0xf800caec>
 800ce4c:	283f2726 	beq	r5,zero,800caec <__alt_data_end+0xf800caec>
 800ce50:	2886703a 	and	r3,r5,r2
 800ce54:	5809883a 	mov	r4,r11
 800ce58:	183ec31e 	bne	r3,zero,800c968 <__alt_data_end+0xf800c968>
 800ce5c:	294b883a 	add	r5,r5,r5
 800ce60:	2886703a 	and	r3,r5,r2
 800ce64:	21000104 	addi	r4,r4,4
 800ce68:	183ffc26 	beq	r3,zero,800ce5c <__alt_data_end+0xf800ce5c>
 800ce6c:	003ebe06 	br	800c968 <__alt_data_end+0xf800c968>
 800ce70:	00c05504 	movi	r3,340
 800ce74:	18801236 	bltu	r3,r2,800cec0 <_malloc_r+0x6f8>
 800ce78:	8804d3fa 	srli	r2,r17,15
 800ce7c:	12001e04 	addi	r8,r2,120
 800ce80:	11c01dc4 	addi	r7,r2,119
 800ce84:	4209883a 	add	r4,r8,r8
 800ce88:	003e6d06 	br	800c840 <__alt_data_end+0xf800c840>
 800ce8c:	00c40004 	movi	r3,4096
 800ce90:	003f4606 	br	800cbac <__alt_data_end+0xf800cbac>
 800ce94:	00800044 	movi	r2,1
 800ce98:	a0800115 	stw	r2,4(r20)
 800ce9c:	003f7406 	br	800cc70 <__alt_data_end+0xf800cc70>
 800cea0:	1805d0ba 	srai	r2,r3,2
 800cea4:	01c00044 	movi	r7,1
 800cea8:	30c00117 	ldw	r3,4(r6)
 800ceac:	388e983a 	sll	r7,r7,r2
 800ceb0:	2805883a 	mov	r2,r5
 800ceb4:	38c6b03a 	or	r3,r7,r3
 800ceb8:	30c00115 	stw	r3,4(r6)
 800cebc:	003f9b06 	br	800cd2c <__alt_data_end+0xf800cd2c>
 800cec0:	00c15504 	movi	r3,1364
 800cec4:	18801a36 	bltu	r3,r2,800cf30 <_malloc_r+0x768>
 800cec8:	8804d4ba 	srli	r2,r17,18
 800cecc:	12001f44 	addi	r8,r2,125
 800ced0:	11c01f04 	addi	r7,r2,124
 800ced4:	4209883a 	add	r4,r8,r8
 800ced8:	003e5906 	br	800c840 <__alt_data_end+0xf800c840>
 800cedc:	ad400404 	addi	r21,r21,16
 800cee0:	003f1706 	br	800cb40 <__alt_data_end+0xf800cb40>
 800cee4:	00c01504 	movi	r3,84
 800cee8:	18802336 	bltu	r3,r2,800cf78 <_malloc_r+0x7b0>
 800ceec:	3804d33a 	srli	r2,r7,12
 800cef0:	11401bc4 	addi	r5,r2,111
 800cef4:	10c01b84 	addi	r3,r2,110
 800cef8:	294b883a 	add	r5,r5,r5
 800cefc:	003f7b06 	br	800ccec <__alt_data_end+0xf800ccec>
 800cf00:	9c000217 	ldw	r16,8(r19)
 800cf04:	00bfff04 	movi	r2,-4
 800cf08:	80c00117 	ldw	r3,4(r16)
 800cf0c:	1886703a 	and	r3,r3,r2
 800cf10:	003f5306 	br	800cc60 <__alt_data_end+0xf800cc60>
 800cf14:	3083ffcc 	andi	r2,r6,4095
 800cf18:	103f181e 	bne	r2,zero,800cb7c <__alt_data_end+0xf800cb7c>
 800cf1c:	99000217 	ldw	r4,8(r19)
 800cf20:	b545883a 	add	r2,r22,r21
 800cf24:	10800054 	ori	r2,r2,1
 800cf28:	20800115 	stw	r2,4(r4)
 800cf2c:	003f3e06 	br	800cc28 <__alt_data_end+0xf800cc28>
 800cf30:	01003f84 	movi	r4,254
 800cf34:	02001fc4 	movi	r8,127
 800cf38:	01c01f84 	movi	r7,126
 800cf3c:	003e4006 	br	800c840 <__alt_data_end+0xf800c840>
 800cf40:	008200b4 	movhi	r2,2050
 800cf44:	10a11704 	addi	r2,r2,-31652
 800cf48:	15000015 	stw	r20,0(r2)
 800cf4c:	003f1106 	br	800cb94 <__alt_data_end+0xf800cb94>
 800cf50:	00800044 	movi	r2,1
 800cf54:	002b883a 	mov	r21,zero
 800cf58:	003f1f06 	br	800cbd8 <__alt_data_end+0xf800cbd8>
 800cf5c:	81400204 	addi	r5,r16,8
 800cf60:	9009883a 	mov	r4,r18
 800cf64:	800bbd00 	call	800bbd0 <_free_r>
 800cf68:	008220b4 	movhi	r2,2178
 800cf6c:	10a83104 	addi	r2,r2,-24380
 800cf70:	10c00017 	ldw	r3,0(r2)
 800cf74:	003f2c06 	br	800cc28 <__alt_data_end+0xf800cc28>
 800cf78:	00c05504 	movi	r3,340
 800cf7c:	18800536 	bltu	r3,r2,800cf94 <_malloc_r+0x7cc>
 800cf80:	3804d3fa 	srli	r2,r7,15
 800cf84:	11401e04 	addi	r5,r2,120
 800cf88:	10c01dc4 	addi	r3,r2,119
 800cf8c:	294b883a 	add	r5,r5,r5
 800cf90:	003f5606 	br	800ccec <__alt_data_end+0xf800ccec>
 800cf94:	00c15504 	movi	r3,1364
 800cf98:	18800536 	bltu	r3,r2,800cfb0 <_malloc_r+0x7e8>
 800cf9c:	3804d4ba 	srli	r2,r7,18
 800cfa0:	11401f44 	addi	r5,r2,125
 800cfa4:	10c01f04 	addi	r3,r2,124
 800cfa8:	294b883a 	add	r5,r5,r5
 800cfac:	003f4f06 	br	800ccec <__alt_data_end+0xf800ccec>
 800cfb0:	01403f84 	movi	r5,254
 800cfb4:	00c01f84 	movi	r3,126
 800cfb8:	003f4c06 	br	800ccec <__alt_data_end+0xf800ccec>
 800cfbc:	98800117 	ldw	r2,4(r19)
 800cfc0:	003fa006 	br	800ce44 <__alt_data_end+0xf800ce44>
 800cfc4:	8808d0fa 	srli	r4,r17,3
 800cfc8:	20800044 	addi	r2,r4,1
 800cfcc:	1085883a 	add	r2,r2,r2
 800cfd0:	003e9006 	br	800ca14 <__alt_data_end+0xf800ca14>

0800cfd4 <memchr>:
 800cfd4:	208000cc 	andi	r2,r4,3
 800cfd8:	280f883a 	mov	r7,r5
 800cfdc:	10003426 	beq	r2,zero,800d0b0 <memchr+0xdc>
 800cfe0:	30bfffc4 	addi	r2,r6,-1
 800cfe4:	30001a26 	beq	r6,zero,800d050 <memchr+0x7c>
 800cfe8:	20c00003 	ldbu	r3,0(r4)
 800cfec:	29803fcc 	andi	r6,r5,255
 800cff0:	30c0051e 	bne	r6,r3,800d008 <memchr+0x34>
 800cff4:	00001806 	br	800d058 <memchr+0x84>
 800cff8:	10001526 	beq	r2,zero,800d050 <memchr+0x7c>
 800cffc:	20c00003 	ldbu	r3,0(r4)
 800d000:	10bfffc4 	addi	r2,r2,-1
 800d004:	30c01426 	beq	r6,r3,800d058 <memchr+0x84>
 800d008:	21000044 	addi	r4,r4,1
 800d00c:	20c000cc 	andi	r3,r4,3
 800d010:	183ff91e 	bne	r3,zero,800cff8 <__alt_data_end+0xf800cff8>
 800d014:	020000c4 	movi	r8,3
 800d018:	40801136 	bltu	r8,r2,800d060 <memchr+0x8c>
 800d01c:	10000c26 	beq	r2,zero,800d050 <memchr+0x7c>
 800d020:	20c00003 	ldbu	r3,0(r4)
 800d024:	29403fcc 	andi	r5,r5,255
 800d028:	28c00b26 	beq	r5,r3,800d058 <memchr+0x84>
 800d02c:	20c00044 	addi	r3,r4,1
 800d030:	39803fcc 	andi	r6,r7,255
 800d034:	2089883a 	add	r4,r4,r2
 800d038:	00000306 	br	800d048 <memchr+0x74>
 800d03c:	18c00044 	addi	r3,r3,1
 800d040:	197fffc3 	ldbu	r5,-1(r3)
 800d044:	31400526 	beq	r6,r5,800d05c <memchr+0x88>
 800d048:	1805883a 	mov	r2,r3
 800d04c:	20fffb1e 	bne	r4,r3,800d03c <__alt_data_end+0xf800d03c>
 800d050:	0005883a 	mov	r2,zero
 800d054:	f800283a 	ret
 800d058:	2005883a 	mov	r2,r4
 800d05c:	f800283a 	ret
 800d060:	28c03fcc 	andi	r3,r5,255
 800d064:	1812923a 	slli	r9,r3,8
 800d068:	02ffbff4 	movhi	r11,65279
 800d06c:	02a02074 	movhi	r10,32897
 800d070:	48d2b03a 	or	r9,r9,r3
 800d074:	4806943a 	slli	r3,r9,16
 800d078:	5affbfc4 	addi	r11,r11,-257
 800d07c:	52a02004 	addi	r10,r10,-32640
 800d080:	48d2b03a 	or	r9,r9,r3
 800d084:	20c00017 	ldw	r3,0(r4)
 800d088:	48c6f03a 	xor	r3,r9,r3
 800d08c:	1acd883a 	add	r6,r3,r11
 800d090:	00c6303a 	nor	r3,zero,r3
 800d094:	30c6703a 	and	r3,r6,r3
 800d098:	1a86703a 	and	r3,r3,r10
 800d09c:	183fe01e 	bne	r3,zero,800d020 <__alt_data_end+0xf800d020>
 800d0a0:	10bfff04 	addi	r2,r2,-4
 800d0a4:	21000104 	addi	r4,r4,4
 800d0a8:	40bff636 	bltu	r8,r2,800d084 <__alt_data_end+0xf800d084>
 800d0ac:	003fdb06 	br	800d01c <__alt_data_end+0xf800d01c>
 800d0b0:	3005883a 	mov	r2,r6
 800d0b4:	003fd706 	br	800d014 <__alt_data_end+0xf800d014>

0800d0b8 <memmove>:
 800d0b8:	2005883a 	mov	r2,r4
 800d0bc:	29000b2e 	bgeu	r5,r4,800d0ec <memmove+0x34>
 800d0c0:	298f883a 	add	r7,r5,r6
 800d0c4:	21c0092e 	bgeu	r4,r7,800d0ec <memmove+0x34>
 800d0c8:	2187883a 	add	r3,r4,r6
 800d0cc:	198bc83a 	sub	r5,r3,r6
 800d0d0:	30004826 	beq	r6,zero,800d1f4 <memmove+0x13c>
 800d0d4:	39ffffc4 	addi	r7,r7,-1
 800d0d8:	39000003 	ldbu	r4,0(r7)
 800d0dc:	18ffffc4 	addi	r3,r3,-1
 800d0e0:	19000005 	stb	r4,0(r3)
 800d0e4:	28fffb1e 	bne	r5,r3,800d0d4 <__alt_data_end+0xf800d0d4>
 800d0e8:	f800283a 	ret
 800d0ec:	00c003c4 	movi	r3,15
 800d0f0:	1980412e 	bgeu	r3,r6,800d1f8 <memmove+0x140>
 800d0f4:	2886b03a 	or	r3,r5,r2
 800d0f8:	18c000cc 	andi	r3,r3,3
 800d0fc:	1800401e 	bne	r3,zero,800d200 <memmove+0x148>
 800d100:	33fffc04 	addi	r15,r6,-16
 800d104:	781ed13a 	srli	r15,r15,4
 800d108:	28c00104 	addi	r3,r5,4
 800d10c:	13400104 	addi	r13,r2,4
 800d110:	781c913a 	slli	r14,r15,4
 800d114:	2b000204 	addi	r12,r5,8
 800d118:	12c00204 	addi	r11,r2,8
 800d11c:	73800504 	addi	r14,r14,20
 800d120:	2a800304 	addi	r10,r5,12
 800d124:	12400304 	addi	r9,r2,12
 800d128:	2b9d883a 	add	r14,r5,r14
 800d12c:	2811883a 	mov	r8,r5
 800d130:	100f883a 	mov	r7,r2
 800d134:	41000017 	ldw	r4,0(r8)
 800d138:	39c00404 	addi	r7,r7,16
 800d13c:	18c00404 	addi	r3,r3,16
 800d140:	393ffc15 	stw	r4,-16(r7)
 800d144:	193ffc17 	ldw	r4,-16(r3)
 800d148:	6b400404 	addi	r13,r13,16
 800d14c:	5ac00404 	addi	r11,r11,16
 800d150:	693ffc15 	stw	r4,-16(r13)
 800d154:	61000017 	ldw	r4,0(r12)
 800d158:	4a400404 	addi	r9,r9,16
 800d15c:	42000404 	addi	r8,r8,16
 800d160:	593ffc15 	stw	r4,-16(r11)
 800d164:	51000017 	ldw	r4,0(r10)
 800d168:	63000404 	addi	r12,r12,16
 800d16c:	52800404 	addi	r10,r10,16
 800d170:	493ffc15 	stw	r4,-16(r9)
 800d174:	1bbfef1e 	bne	r3,r14,800d134 <__alt_data_end+0xf800d134>
 800d178:	79000044 	addi	r4,r15,1
 800d17c:	2008913a 	slli	r4,r4,4
 800d180:	328003cc 	andi	r10,r6,15
 800d184:	02c000c4 	movi	r11,3
 800d188:	1107883a 	add	r3,r2,r4
 800d18c:	290b883a 	add	r5,r5,r4
 800d190:	5a801e2e 	bgeu	r11,r10,800d20c <memmove+0x154>
 800d194:	1813883a 	mov	r9,r3
 800d198:	2811883a 	mov	r8,r5
 800d19c:	500f883a 	mov	r7,r10
 800d1a0:	41000017 	ldw	r4,0(r8)
 800d1a4:	4a400104 	addi	r9,r9,4
 800d1a8:	39ffff04 	addi	r7,r7,-4
 800d1ac:	493fff15 	stw	r4,-4(r9)
 800d1b0:	42000104 	addi	r8,r8,4
 800d1b4:	59fffa36 	bltu	r11,r7,800d1a0 <__alt_data_end+0xf800d1a0>
 800d1b8:	513fff04 	addi	r4,r10,-4
 800d1bc:	2008d0ba 	srli	r4,r4,2
 800d1c0:	318000cc 	andi	r6,r6,3
 800d1c4:	21000044 	addi	r4,r4,1
 800d1c8:	2109883a 	add	r4,r4,r4
 800d1cc:	2109883a 	add	r4,r4,r4
 800d1d0:	1907883a 	add	r3,r3,r4
 800d1d4:	290b883a 	add	r5,r5,r4
 800d1d8:	30000b26 	beq	r6,zero,800d208 <memmove+0x150>
 800d1dc:	198d883a 	add	r6,r3,r6
 800d1e0:	29c00003 	ldbu	r7,0(r5)
 800d1e4:	18c00044 	addi	r3,r3,1
 800d1e8:	29400044 	addi	r5,r5,1
 800d1ec:	19ffffc5 	stb	r7,-1(r3)
 800d1f0:	19bffb1e 	bne	r3,r6,800d1e0 <__alt_data_end+0xf800d1e0>
 800d1f4:	f800283a 	ret
 800d1f8:	1007883a 	mov	r3,r2
 800d1fc:	003ff606 	br	800d1d8 <__alt_data_end+0xf800d1d8>
 800d200:	1007883a 	mov	r3,r2
 800d204:	003ff506 	br	800d1dc <__alt_data_end+0xf800d1dc>
 800d208:	f800283a 	ret
 800d20c:	500d883a 	mov	r6,r10
 800d210:	003ff106 	br	800d1d8 <__alt_data_end+0xf800d1d8>

0800d214 <_Balloc>:
 800d214:	20801317 	ldw	r2,76(r4)
 800d218:	defffc04 	addi	sp,sp,-16
 800d21c:	dc400115 	stw	r17,4(sp)
 800d220:	dc000015 	stw	r16,0(sp)
 800d224:	dfc00315 	stw	ra,12(sp)
 800d228:	dc800215 	stw	r18,8(sp)
 800d22c:	2023883a 	mov	r17,r4
 800d230:	2821883a 	mov	r16,r5
 800d234:	10000f26 	beq	r2,zero,800d274 <_Balloc+0x60>
 800d238:	8407883a 	add	r3,r16,r16
 800d23c:	18c7883a 	add	r3,r3,r3
 800d240:	10c7883a 	add	r3,r2,r3
 800d244:	18800017 	ldw	r2,0(r3)
 800d248:	10001126 	beq	r2,zero,800d290 <_Balloc+0x7c>
 800d24c:	11000017 	ldw	r4,0(r2)
 800d250:	19000015 	stw	r4,0(r3)
 800d254:	10000415 	stw	zero,16(r2)
 800d258:	10000315 	stw	zero,12(r2)
 800d25c:	dfc00317 	ldw	ra,12(sp)
 800d260:	dc800217 	ldw	r18,8(sp)
 800d264:	dc400117 	ldw	r17,4(sp)
 800d268:	dc000017 	ldw	r16,0(sp)
 800d26c:	dec00404 	addi	sp,sp,16
 800d270:	f800283a 	ret
 800d274:	01800844 	movi	r6,33
 800d278:	01400104 	movi	r5,4
 800d27c:	80102bc0 	call	80102bc <_calloc_r>
 800d280:	88801315 	stw	r2,76(r17)
 800d284:	103fec1e 	bne	r2,zero,800d238 <__alt_data_end+0xf800d238>
 800d288:	0005883a 	mov	r2,zero
 800d28c:	003ff306 	br	800d25c <__alt_data_end+0xf800d25c>
 800d290:	01400044 	movi	r5,1
 800d294:	2c24983a 	sll	r18,r5,r16
 800d298:	8809883a 	mov	r4,r17
 800d29c:	91800144 	addi	r6,r18,5
 800d2a0:	318d883a 	add	r6,r6,r6
 800d2a4:	318d883a 	add	r6,r6,r6
 800d2a8:	80102bc0 	call	80102bc <_calloc_r>
 800d2ac:	103ff626 	beq	r2,zero,800d288 <__alt_data_end+0xf800d288>
 800d2b0:	14000115 	stw	r16,4(r2)
 800d2b4:	14800215 	stw	r18,8(r2)
 800d2b8:	003fe606 	br	800d254 <__alt_data_end+0xf800d254>

0800d2bc <_Bfree>:
 800d2bc:	28000826 	beq	r5,zero,800d2e0 <_Bfree+0x24>
 800d2c0:	28c00117 	ldw	r3,4(r5)
 800d2c4:	20801317 	ldw	r2,76(r4)
 800d2c8:	18c7883a 	add	r3,r3,r3
 800d2cc:	18c7883a 	add	r3,r3,r3
 800d2d0:	10c5883a 	add	r2,r2,r3
 800d2d4:	10c00017 	ldw	r3,0(r2)
 800d2d8:	28c00015 	stw	r3,0(r5)
 800d2dc:	11400015 	stw	r5,0(r2)
 800d2e0:	f800283a 	ret

0800d2e4 <__multadd>:
 800d2e4:	defff704 	addi	sp,sp,-36
 800d2e8:	dc800215 	stw	r18,8(sp)
 800d2ec:	2c800417 	ldw	r18,16(r5)
 800d2f0:	dd800615 	stw	r22,24(sp)
 800d2f4:	dd400515 	stw	r21,20(sp)
 800d2f8:	dd000415 	stw	r20,16(sp)
 800d2fc:	dcc00315 	stw	r19,12(sp)
 800d300:	dc400115 	stw	r17,4(sp)
 800d304:	dc000015 	stw	r16,0(sp)
 800d308:	dfc00815 	stw	ra,32(sp)
 800d30c:	ddc00715 	stw	r23,28(sp)
 800d310:	2827883a 	mov	r19,r5
 800d314:	2029883a 	mov	r20,r4
 800d318:	3023883a 	mov	r17,r6
 800d31c:	3821883a 	mov	r16,r7
 800d320:	2d400504 	addi	r21,r5,20
 800d324:	002d883a 	mov	r22,zero
 800d328:	adc00017 	ldw	r23,0(r21)
 800d32c:	880b883a 	mov	r5,r17
 800d330:	ad400104 	addi	r21,r21,4
 800d334:	b93fffcc 	andi	r4,r23,65535
 800d338:	800722c0 	call	800722c <__mulsi3>
 800d33c:	b808d43a 	srli	r4,r23,16
 800d340:	880b883a 	mov	r5,r17
 800d344:	1421883a 	add	r16,r2,r16
 800d348:	800722c0 	call	800722c <__mulsi3>
 800d34c:	800ed43a 	srli	r7,r16,16
 800d350:	80ffffcc 	andi	r3,r16,65535
 800d354:	b5800044 	addi	r22,r22,1
 800d358:	11c5883a 	add	r2,r2,r7
 800d35c:	100e943a 	slli	r7,r2,16
 800d360:	1020d43a 	srli	r16,r2,16
 800d364:	38c7883a 	add	r3,r7,r3
 800d368:	a8ffff15 	stw	r3,-4(r21)
 800d36c:	b4bfee16 	blt	r22,r18,800d328 <__alt_data_end+0xf800d328>
 800d370:	80000926 	beq	r16,zero,800d398 <__multadd+0xb4>
 800d374:	98800217 	ldw	r2,8(r19)
 800d378:	9080130e 	bge	r18,r2,800d3c8 <__multadd+0xe4>
 800d37c:	90800144 	addi	r2,r18,5
 800d380:	1085883a 	add	r2,r2,r2
 800d384:	1085883a 	add	r2,r2,r2
 800d388:	9885883a 	add	r2,r19,r2
 800d38c:	14000015 	stw	r16,0(r2)
 800d390:	94800044 	addi	r18,r18,1
 800d394:	9c800415 	stw	r18,16(r19)
 800d398:	9805883a 	mov	r2,r19
 800d39c:	dfc00817 	ldw	ra,32(sp)
 800d3a0:	ddc00717 	ldw	r23,28(sp)
 800d3a4:	dd800617 	ldw	r22,24(sp)
 800d3a8:	dd400517 	ldw	r21,20(sp)
 800d3ac:	dd000417 	ldw	r20,16(sp)
 800d3b0:	dcc00317 	ldw	r19,12(sp)
 800d3b4:	dc800217 	ldw	r18,8(sp)
 800d3b8:	dc400117 	ldw	r17,4(sp)
 800d3bc:	dc000017 	ldw	r16,0(sp)
 800d3c0:	dec00904 	addi	sp,sp,36
 800d3c4:	f800283a 	ret
 800d3c8:	99400117 	ldw	r5,4(r19)
 800d3cc:	a009883a 	mov	r4,r20
 800d3d0:	29400044 	addi	r5,r5,1
 800d3d4:	800d2140 	call	800d214 <_Balloc>
 800d3d8:	99800417 	ldw	r6,16(r19)
 800d3dc:	99400304 	addi	r5,r19,12
 800d3e0:	11000304 	addi	r4,r2,12
 800d3e4:	31800084 	addi	r6,r6,2
 800d3e8:	318d883a 	add	r6,r6,r6
 800d3ec:	318d883a 	add	r6,r6,r6
 800d3f0:	1023883a 	mov	r17,r2
 800d3f4:	80072540 	call	8007254 <memcpy>
 800d3f8:	98000a26 	beq	r19,zero,800d424 <__multadd+0x140>
 800d3fc:	98c00117 	ldw	r3,4(r19)
 800d400:	a0801317 	ldw	r2,76(r20)
 800d404:	18c7883a 	add	r3,r3,r3
 800d408:	18c7883a 	add	r3,r3,r3
 800d40c:	10c5883a 	add	r2,r2,r3
 800d410:	10c00017 	ldw	r3,0(r2)
 800d414:	98c00015 	stw	r3,0(r19)
 800d418:	14c00015 	stw	r19,0(r2)
 800d41c:	8827883a 	mov	r19,r17
 800d420:	003fd606 	br	800d37c <__alt_data_end+0xf800d37c>
 800d424:	8827883a 	mov	r19,r17
 800d428:	003fd406 	br	800d37c <__alt_data_end+0xf800d37c>

0800d42c <__s2b>:
 800d42c:	defff904 	addi	sp,sp,-28
 800d430:	dc400115 	stw	r17,4(sp)
 800d434:	dc000015 	stw	r16,0(sp)
 800d438:	2023883a 	mov	r17,r4
 800d43c:	2821883a 	mov	r16,r5
 800d440:	39000204 	addi	r4,r7,8
 800d444:	01400244 	movi	r5,9
 800d448:	dcc00315 	stw	r19,12(sp)
 800d44c:	dc800215 	stw	r18,8(sp)
 800d450:	dfc00615 	stw	ra,24(sp)
 800d454:	dd400515 	stw	r21,20(sp)
 800d458:	dd000415 	stw	r20,16(sp)
 800d45c:	3825883a 	mov	r18,r7
 800d460:	3027883a 	mov	r19,r6
 800d464:	80070780 	call	8007078 <__divsi3>
 800d468:	00c00044 	movi	r3,1
 800d46c:	000b883a 	mov	r5,zero
 800d470:	1880030e 	bge	r3,r2,800d480 <__s2b+0x54>
 800d474:	18c7883a 	add	r3,r3,r3
 800d478:	29400044 	addi	r5,r5,1
 800d47c:	18bffd16 	blt	r3,r2,800d474 <__alt_data_end+0xf800d474>
 800d480:	8809883a 	mov	r4,r17
 800d484:	800d2140 	call	800d214 <_Balloc>
 800d488:	d8c00717 	ldw	r3,28(sp)
 800d48c:	10c00515 	stw	r3,20(r2)
 800d490:	00c00044 	movi	r3,1
 800d494:	10c00415 	stw	r3,16(r2)
 800d498:	00c00244 	movi	r3,9
 800d49c:	1cc0210e 	bge	r3,r19,800d524 <__s2b+0xf8>
 800d4a0:	80eb883a 	add	r21,r16,r3
 800d4a4:	a829883a 	mov	r20,r21
 800d4a8:	84e1883a 	add	r16,r16,r19
 800d4ac:	a1c00007 	ldb	r7,0(r20)
 800d4b0:	01800284 	movi	r6,10
 800d4b4:	a5000044 	addi	r20,r20,1
 800d4b8:	100b883a 	mov	r5,r2
 800d4bc:	39fff404 	addi	r7,r7,-48
 800d4c0:	8809883a 	mov	r4,r17
 800d4c4:	800d2e40 	call	800d2e4 <__multadd>
 800d4c8:	a43ff81e 	bne	r20,r16,800d4ac <__alt_data_end+0xf800d4ac>
 800d4cc:	ace1883a 	add	r16,r21,r19
 800d4d0:	843ffe04 	addi	r16,r16,-8
 800d4d4:	9c800a0e 	bge	r19,r18,800d500 <__s2b+0xd4>
 800d4d8:	94e5c83a 	sub	r18,r18,r19
 800d4dc:	84a5883a 	add	r18,r16,r18
 800d4e0:	81c00007 	ldb	r7,0(r16)
 800d4e4:	01800284 	movi	r6,10
 800d4e8:	84000044 	addi	r16,r16,1
 800d4ec:	100b883a 	mov	r5,r2
 800d4f0:	39fff404 	addi	r7,r7,-48
 800d4f4:	8809883a 	mov	r4,r17
 800d4f8:	800d2e40 	call	800d2e4 <__multadd>
 800d4fc:	84bff81e 	bne	r16,r18,800d4e0 <__alt_data_end+0xf800d4e0>
 800d500:	dfc00617 	ldw	ra,24(sp)
 800d504:	dd400517 	ldw	r21,20(sp)
 800d508:	dd000417 	ldw	r20,16(sp)
 800d50c:	dcc00317 	ldw	r19,12(sp)
 800d510:	dc800217 	ldw	r18,8(sp)
 800d514:	dc400117 	ldw	r17,4(sp)
 800d518:	dc000017 	ldw	r16,0(sp)
 800d51c:	dec00704 	addi	sp,sp,28
 800d520:	f800283a 	ret
 800d524:	84000284 	addi	r16,r16,10
 800d528:	1827883a 	mov	r19,r3
 800d52c:	003fe906 	br	800d4d4 <__alt_data_end+0xf800d4d4>

0800d530 <__hi0bits>:
 800d530:	20bfffec 	andhi	r2,r4,65535
 800d534:	1000141e 	bne	r2,zero,800d588 <__hi0bits+0x58>
 800d538:	2008943a 	slli	r4,r4,16
 800d53c:	00800404 	movi	r2,16
 800d540:	20ffc02c 	andhi	r3,r4,65280
 800d544:	1800021e 	bne	r3,zero,800d550 <__hi0bits+0x20>
 800d548:	2008923a 	slli	r4,r4,8
 800d54c:	10800204 	addi	r2,r2,8
 800d550:	20fc002c 	andhi	r3,r4,61440
 800d554:	1800021e 	bne	r3,zero,800d560 <__hi0bits+0x30>
 800d558:	2008913a 	slli	r4,r4,4
 800d55c:	10800104 	addi	r2,r2,4
 800d560:	20f0002c 	andhi	r3,r4,49152
 800d564:	1800031e 	bne	r3,zero,800d574 <__hi0bits+0x44>
 800d568:	2109883a 	add	r4,r4,r4
 800d56c:	10800084 	addi	r2,r2,2
 800d570:	2109883a 	add	r4,r4,r4
 800d574:	20000316 	blt	r4,zero,800d584 <__hi0bits+0x54>
 800d578:	2110002c 	andhi	r4,r4,16384
 800d57c:	2000041e 	bne	r4,zero,800d590 <__hi0bits+0x60>
 800d580:	00800804 	movi	r2,32
 800d584:	f800283a 	ret
 800d588:	0005883a 	mov	r2,zero
 800d58c:	003fec06 	br	800d540 <__alt_data_end+0xf800d540>
 800d590:	10800044 	addi	r2,r2,1
 800d594:	f800283a 	ret

0800d598 <__lo0bits>:
 800d598:	20c00017 	ldw	r3,0(r4)
 800d59c:	188001cc 	andi	r2,r3,7
 800d5a0:	10000826 	beq	r2,zero,800d5c4 <__lo0bits+0x2c>
 800d5a4:	1880004c 	andi	r2,r3,1
 800d5a8:	1000211e 	bne	r2,zero,800d630 <__lo0bits+0x98>
 800d5ac:	1880008c 	andi	r2,r3,2
 800d5b0:	1000211e 	bne	r2,zero,800d638 <__lo0bits+0xa0>
 800d5b4:	1806d0ba 	srli	r3,r3,2
 800d5b8:	00800084 	movi	r2,2
 800d5bc:	20c00015 	stw	r3,0(r4)
 800d5c0:	f800283a 	ret
 800d5c4:	18bfffcc 	andi	r2,r3,65535
 800d5c8:	10001326 	beq	r2,zero,800d618 <__lo0bits+0x80>
 800d5cc:	0005883a 	mov	r2,zero
 800d5d0:	19403fcc 	andi	r5,r3,255
 800d5d4:	2800021e 	bne	r5,zero,800d5e0 <__lo0bits+0x48>
 800d5d8:	1806d23a 	srli	r3,r3,8
 800d5dc:	10800204 	addi	r2,r2,8
 800d5e0:	194003cc 	andi	r5,r3,15
 800d5e4:	2800021e 	bne	r5,zero,800d5f0 <__lo0bits+0x58>
 800d5e8:	1806d13a 	srli	r3,r3,4
 800d5ec:	10800104 	addi	r2,r2,4
 800d5f0:	194000cc 	andi	r5,r3,3
 800d5f4:	2800021e 	bne	r5,zero,800d600 <__lo0bits+0x68>
 800d5f8:	1806d0ba 	srli	r3,r3,2
 800d5fc:	10800084 	addi	r2,r2,2
 800d600:	1940004c 	andi	r5,r3,1
 800d604:	2800081e 	bne	r5,zero,800d628 <__lo0bits+0x90>
 800d608:	1806d07a 	srli	r3,r3,1
 800d60c:	1800051e 	bne	r3,zero,800d624 <__lo0bits+0x8c>
 800d610:	00800804 	movi	r2,32
 800d614:	f800283a 	ret
 800d618:	1806d43a 	srli	r3,r3,16
 800d61c:	00800404 	movi	r2,16
 800d620:	003feb06 	br	800d5d0 <__alt_data_end+0xf800d5d0>
 800d624:	10800044 	addi	r2,r2,1
 800d628:	20c00015 	stw	r3,0(r4)
 800d62c:	f800283a 	ret
 800d630:	0005883a 	mov	r2,zero
 800d634:	f800283a 	ret
 800d638:	1806d07a 	srli	r3,r3,1
 800d63c:	00800044 	movi	r2,1
 800d640:	20c00015 	stw	r3,0(r4)
 800d644:	f800283a 	ret

0800d648 <__i2b>:
 800d648:	defffd04 	addi	sp,sp,-12
 800d64c:	dc000015 	stw	r16,0(sp)
 800d650:	04000044 	movi	r16,1
 800d654:	dc400115 	stw	r17,4(sp)
 800d658:	2823883a 	mov	r17,r5
 800d65c:	800b883a 	mov	r5,r16
 800d660:	dfc00215 	stw	ra,8(sp)
 800d664:	800d2140 	call	800d214 <_Balloc>
 800d668:	14400515 	stw	r17,20(r2)
 800d66c:	14000415 	stw	r16,16(r2)
 800d670:	dfc00217 	ldw	ra,8(sp)
 800d674:	dc400117 	ldw	r17,4(sp)
 800d678:	dc000017 	ldw	r16,0(sp)
 800d67c:	dec00304 	addi	sp,sp,12
 800d680:	f800283a 	ret

0800d684 <__multiply>:
 800d684:	deffef04 	addi	sp,sp,-68
 800d688:	dc400815 	stw	r17,32(sp)
 800d68c:	dc000715 	stw	r16,28(sp)
 800d690:	34400417 	ldw	r17,16(r6)
 800d694:	2c000417 	ldw	r16,16(r5)
 800d698:	dd800d15 	stw	r22,52(sp)
 800d69c:	dc800915 	stw	r18,36(sp)
 800d6a0:	dfc01015 	stw	ra,64(sp)
 800d6a4:	df000f15 	stw	fp,60(sp)
 800d6a8:	ddc00e15 	stw	r23,56(sp)
 800d6ac:	dd400c15 	stw	r21,48(sp)
 800d6b0:	dd000b15 	stw	r20,44(sp)
 800d6b4:	dcc00a15 	stw	r19,40(sp)
 800d6b8:	2825883a 	mov	r18,r5
 800d6bc:	302d883a 	mov	r22,r6
 800d6c0:	8440050e 	bge	r16,r17,800d6d8 <__multiply+0x54>
 800d6c4:	8007883a 	mov	r3,r16
 800d6c8:	3025883a 	mov	r18,r6
 800d6cc:	8821883a 	mov	r16,r17
 800d6d0:	282d883a 	mov	r22,r5
 800d6d4:	1823883a 	mov	r17,r3
 800d6d8:	90800217 	ldw	r2,8(r18)
 800d6dc:	8447883a 	add	r3,r16,r17
 800d6e0:	d8c00215 	stw	r3,8(sp)
 800d6e4:	91400117 	ldw	r5,4(r18)
 800d6e8:	10c0010e 	bge	r2,r3,800d6f0 <__multiply+0x6c>
 800d6ec:	29400044 	addi	r5,r5,1
 800d6f0:	800d2140 	call	800d214 <_Balloc>
 800d6f4:	d8c00217 	ldw	r3,8(sp)
 800d6f8:	d8800615 	stw	r2,24(sp)
 800d6fc:	18eb883a 	add	r21,r3,r3
 800d700:	ad6b883a 	add	r21,r21,r21
 800d704:	10c00504 	addi	r3,r2,20
 800d708:	1d6b883a 	add	r21,r3,r21
 800d70c:	d8c00115 	stw	r3,4(sp)
 800d710:	dd400315 	stw	r21,12(sp)
 800d714:	1805883a 	mov	r2,r3
 800d718:	1d40042e 	bgeu	r3,r21,800d72c <__multiply+0xa8>
 800d71c:	d8c00317 	ldw	r3,12(sp)
 800d720:	10000015 	stw	zero,0(r2)
 800d724:	10800104 	addi	r2,r2,4
 800d728:	10fffc36 	bltu	r2,r3,800d71c <__alt_data_end+0xf800d71c>
 800d72c:	8c63883a 	add	r17,r17,r17
 800d730:	b5800504 	addi	r22,r22,20
 800d734:	8c63883a 	add	r17,r17,r17
 800d738:	94800504 	addi	r18,r18,20
 800d73c:	8421883a 	add	r16,r16,r16
 800d740:	b463883a 	add	r17,r22,r17
 800d744:	8421883a 	add	r16,r16,r16
 800d748:	dd800015 	stw	r22,0(sp)
 800d74c:	dc800415 	stw	r18,16(sp)
 800d750:	dc400515 	stw	r17,20(sp)
 800d754:	9429883a 	add	r20,r18,r16
 800d758:	b4404f2e 	bgeu	r22,r17,800d898 <__multiply+0x214>
 800d75c:	d8c00017 	ldw	r3,0(sp)
 800d760:	1c800017 	ldw	r18,0(r3)
 800d764:	947fffcc 	andi	r17,r18,65535
 800d768:	88001e26 	beq	r17,zero,800d7e4 <__multiply+0x160>
 800d76c:	dd800117 	ldw	r22,4(sp)
 800d770:	dd400417 	ldw	r21,16(sp)
 800d774:	0027883a 	mov	r19,zero
 800d778:	ac800017 	ldw	r18,0(r21)
 800d77c:	b4000017 	ldw	r16,0(r22)
 800d780:	880b883a 	mov	r5,r17
 800d784:	913fffcc 	andi	r4,r18,65535
 800d788:	800722c0 	call	800722c <__mulsi3>
 800d78c:	9008d43a 	srli	r4,r18,16
 800d790:	84bfffcc 	andi	r18,r16,65535
 800d794:	1485883a 	add	r2,r2,r18
 800d798:	14e5883a 	add	r18,r2,r19
 800d79c:	8020d43a 	srli	r16,r16,16
 800d7a0:	9026d43a 	srli	r19,r18,16
 800d7a4:	880b883a 	mov	r5,r17
 800d7a8:	800722c0 	call	800722c <__mulsi3>
 800d7ac:	1405883a 	add	r2,r2,r16
 800d7b0:	14e1883a 	add	r16,r2,r19
 800d7b4:	90ffffcc 	andi	r3,r18,65535
 800d7b8:	8024943a 	slli	r18,r16,16
 800d7bc:	ad400104 	addi	r21,r21,4
 800d7c0:	b005883a 	mov	r2,r22
 800d7c4:	90c6b03a 	or	r3,r18,r3
 800d7c8:	b0c00015 	stw	r3,0(r22)
 800d7cc:	8026d43a 	srli	r19,r16,16
 800d7d0:	b5800104 	addi	r22,r22,4
 800d7d4:	ad3fe836 	bltu	r21,r20,800d778 <__alt_data_end+0xf800d778>
 800d7d8:	d8c00017 	ldw	r3,0(sp)
 800d7dc:	14c00115 	stw	r19,4(r2)
 800d7e0:	1c800017 	ldw	r18,0(r3)
 800d7e4:	9024d43a 	srli	r18,r18,16
 800d7e8:	90002226 	beq	r18,zero,800d874 <__multiply+0x1f0>
 800d7ec:	d8c00117 	ldw	r3,4(sp)
 800d7f0:	dd800417 	ldw	r22,16(sp)
 800d7f4:	002f883a 	mov	r23,zero
 800d7f8:	1f000017 	ldw	fp,0(r3)
 800d7fc:	1823883a 	mov	r17,r3
 800d800:	182b883a 	mov	r21,r3
 800d804:	e021883a 	mov	r16,fp
 800d808:	00000106 	br	800d810 <__multiply+0x18c>
 800d80c:	982b883a 	mov	r21,r19
 800d810:	b100000b 	ldhu	r4,0(r22)
 800d814:	8020d43a 	srli	r16,r16,16
 800d818:	900b883a 	mov	r5,r18
 800d81c:	800722c0 	call	800722c <__mulsi3>
 800d820:	1405883a 	add	r2,r2,r16
 800d824:	15ef883a 	add	r23,r2,r23
 800d828:	b804943a 	slli	r2,r23,16
 800d82c:	e0ffffcc 	andi	r3,fp,65535
 800d830:	8c400104 	addi	r17,r17,4
 800d834:	10c6b03a 	or	r3,r2,r3
 800d838:	88ffff15 	stw	r3,-4(r17)
 800d83c:	b5800104 	addi	r22,r22,4
 800d840:	b13fff17 	ldw	r4,-4(r22)
 800d844:	acc00104 	addi	r19,r21,4
 800d848:	900b883a 	mov	r5,r18
 800d84c:	2008d43a 	srli	r4,r4,16
 800d850:	9c000017 	ldw	r16,0(r19)
 800d854:	800722c0 	call	800722c <__mulsi3>
 800d858:	b806d43a 	srli	r3,r23,16
 800d85c:	813fffcc 	andi	r4,r16,65535
 800d860:	1105883a 	add	r2,r2,r4
 800d864:	10f9883a 	add	fp,r2,r3
 800d868:	e02ed43a 	srli	r23,fp,16
 800d86c:	b53fe736 	bltu	r22,r20,800d80c <__alt_data_end+0xf800d80c>
 800d870:	af000115 	stw	fp,4(r21)
 800d874:	d8c00017 	ldw	r3,0(sp)
 800d878:	d9000517 	ldw	r4,20(sp)
 800d87c:	18c00104 	addi	r3,r3,4
 800d880:	d8c00015 	stw	r3,0(sp)
 800d884:	d8c00117 	ldw	r3,4(sp)
 800d888:	18c00104 	addi	r3,r3,4
 800d88c:	d8c00115 	stw	r3,4(sp)
 800d890:	d8c00017 	ldw	r3,0(sp)
 800d894:	193fb136 	bltu	r3,r4,800d75c <__alt_data_end+0xf800d75c>
 800d898:	d8c00217 	ldw	r3,8(sp)
 800d89c:	00c00c0e 	bge	zero,r3,800d8d0 <__multiply+0x24c>
 800d8a0:	d8c00317 	ldw	r3,12(sp)
 800d8a4:	18bfff17 	ldw	r2,-4(r3)
 800d8a8:	1d7fff04 	addi	r21,r3,-4
 800d8ac:	10000326 	beq	r2,zero,800d8bc <__multiply+0x238>
 800d8b0:	00000706 	br	800d8d0 <__multiply+0x24c>
 800d8b4:	a8800017 	ldw	r2,0(r21)
 800d8b8:	1000051e 	bne	r2,zero,800d8d0 <__multiply+0x24c>
 800d8bc:	d8c00217 	ldw	r3,8(sp)
 800d8c0:	ad7fff04 	addi	r21,r21,-4
 800d8c4:	18ffffc4 	addi	r3,r3,-1
 800d8c8:	d8c00215 	stw	r3,8(sp)
 800d8cc:	183ff91e 	bne	r3,zero,800d8b4 <__alt_data_end+0xf800d8b4>
 800d8d0:	d8c00617 	ldw	r3,24(sp)
 800d8d4:	d9000217 	ldw	r4,8(sp)
 800d8d8:	1805883a 	mov	r2,r3
 800d8dc:	19000415 	stw	r4,16(r3)
 800d8e0:	dfc01017 	ldw	ra,64(sp)
 800d8e4:	df000f17 	ldw	fp,60(sp)
 800d8e8:	ddc00e17 	ldw	r23,56(sp)
 800d8ec:	dd800d17 	ldw	r22,52(sp)
 800d8f0:	dd400c17 	ldw	r21,48(sp)
 800d8f4:	dd000b17 	ldw	r20,44(sp)
 800d8f8:	dcc00a17 	ldw	r19,40(sp)
 800d8fc:	dc800917 	ldw	r18,36(sp)
 800d900:	dc400817 	ldw	r17,32(sp)
 800d904:	dc000717 	ldw	r16,28(sp)
 800d908:	dec01104 	addi	sp,sp,68
 800d90c:	f800283a 	ret

0800d910 <__pow5mult>:
 800d910:	defffa04 	addi	sp,sp,-24
 800d914:	dcc00315 	stw	r19,12(sp)
 800d918:	dc000015 	stw	r16,0(sp)
 800d91c:	dfc00515 	stw	ra,20(sp)
 800d920:	dd000415 	stw	r20,16(sp)
 800d924:	dc800215 	stw	r18,8(sp)
 800d928:	dc400115 	stw	r17,4(sp)
 800d92c:	308000cc 	andi	r2,r6,3
 800d930:	3021883a 	mov	r16,r6
 800d934:	2027883a 	mov	r19,r4
 800d938:	10002f1e 	bne	r2,zero,800d9f8 <__pow5mult+0xe8>
 800d93c:	2825883a 	mov	r18,r5
 800d940:	8021d0ba 	srai	r16,r16,2
 800d944:	80001a26 	beq	r16,zero,800d9b0 <__pow5mult+0xa0>
 800d948:	9c401217 	ldw	r17,72(r19)
 800d94c:	8800061e 	bne	r17,zero,800d968 <__pow5mult+0x58>
 800d950:	00003406 	br	800da24 <__pow5mult+0x114>
 800d954:	8021d07a 	srai	r16,r16,1
 800d958:	80001526 	beq	r16,zero,800d9b0 <__pow5mult+0xa0>
 800d95c:	88800017 	ldw	r2,0(r17)
 800d960:	10001c26 	beq	r2,zero,800d9d4 <__pow5mult+0xc4>
 800d964:	1023883a 	mov	r17,r2
 800d968:	8080004c 	andi	r2,r16,1
 800d96c:	103ff926 	beq	r2,zero,800d954 <__alt_data_end+0xf800d954>
 800d970:	880d883a 	mov	r6,r17
 800d974:	900b883a 	mov	r5,r18
 800d978:	9809883a 	mov	r4,r19
 800d97c:	800d6840 	call	800d684 <__multiply>
 800d980:	90001b26 	beq	r18,zero,800d9f0 <__pow5mult+0xe0>
 800d984:	91000117 	ldw	r4,4(r18)
 800d988:	98c01317 	ldw	r3,76(r19)
 800d98c:	8021d07a 	srai	r16,r16,1
 800d990:	2109883a 	add	r4,r4,r4
 800d994:	2109883a 	add	r4,r4,r4
 800d998:	1907883a 	add	r3,r3,r4
 800d99c:	19000017 	ldw	r4,0(r3)
 800d9a0:	91000015 	stw	r4,0(r18)
 800d9a4:	1c800015 	stw	r18,0(r3)
 800d9a8:	1025883a 	mov	r18,r2
 800d9ac:	803feb1e 	bne	r16,zero,800d95c <__alt_data_end+0xf800d95c>
 800d9b0:	9005883a 	mov	r2,r18
 800d9b4:	dfc00517 	ldw	ra,20(sp)
 800d9b8:	dd000417 	ldw	r20,16(sp)
 800d9bc:	dcc00317 	ldw	r19,12(sp)
 800d9c0:	dc800217 	ldw	r18,8(sp)
 800d9c4:	dc400117 	ldw	r17,4(sp)
 800d9c8:	dc000017 	ldw	r16,0(sp)
 800d9cc:	dec00604 	addi	sp,sp,24
 800d9d0:	f800283a 	ret
 800d9d4:	880d883a 	mov	r6,r17
 800d9d8:	880b883a 	mov	r5,r17
 800d9dc:	9809883a 	mov	r4,r19
 800d9e0:	800d6840 	call	800d684 <__multiply>
 800d9e4:	88800015 	stw	r2,0(r17)
 800d9e8:	10000015 	stw	zero,0(r2)
 800d9ec:	003fdd06 	br	800d964 <__alt_data_end+0xf800d964>
 800d9f0:	1025883a 	mov	r18,r2
 800d9f4:	003fd706 	br	800d954 <__alt_data_end+0xf800d954>
 800d9f8:	10bfffc4 	addi	r2,r2,-1
 800d9fc:	1085883a 	add	r2,r2,r2
 800da00:	00c20074 	movhi	r3,2049
 800da04:	18d9ce04 	addi	r3,r3,26424
 800da08:	1085883a 	add	r2,r2,r2
 800da0c:	1885883a 	add	r2,r3,r2
 800da10:	11800017 	ldw	r6,0(r2)
 800da14:	000f883a 	mov	r7,zero
 800da18:	800d2e40 	call	800d2e4 <__multadd>
 800da1c:	1025883a 	mov	r18,r2
 800da20:	003fc706 	br	800d940 <__alt_data_end+0xf800d940>
 800da24:	05000044 	movi	r20,1
 800da28:	a00b883a 	mov	r5,r20
 800da2c:	9809883a 	mov	r4,r19
 800da30:	800d2140 	call	800d214 <_Balloc>
 800da34:	1023883a 	mov	r17,r2
 800da38:	00809c44 	movi	r2,625
 800da3c:	88800515 	stw	r2,20(r17)
 800da40:	8d000415 	stw	r20,16(r17)
 800da44:	9c401215 	stw	r17,72(r19)
 800da48:	88000015 	stw	zero,0(r17)
 800da4c:	003fc606 	br	800d968 <__alt_data_end+0xf800d968>

0800da50 <__lshift>:
 800da50:	defff904 	addi	sp,sp,-28
 800da54:	dd400515 	stw	r21,20(sp)
 800da58:	dcc00315 	stw	r19,12(sp)
 800da5c:	302bd17a 	srai	r21,r6,5
 800da60:	2cc00417 	ldw	r19,16(r5)
 800da64:	28800217 	ldw	r2,8(r5)
 800da68:	dd000415 	stw	r20,16(sp)
 800da6c:	ace7883a 	add	r19,r21,r19
 800da70:	dc800215 	stw	r18,8(sp)
 800da74:	dc400115 	stw	r17,4(sp)
 800da78:	dc000015 	stw	r16,0(sp)
 800da7c:	dfc00615 	stw	ra,24(sp)
 800da80:	9c000044 	addi	r16,r19,1
 800da84:	2823883a 	mov	r17,r5
 800da88:	3029883a 	mov	r20,r6
 800da8c:	2025883a 	mov	r18,r4
 800da90:	29400117 	ldw	r5,4(r5)
 800da94:	1400030e 	bge	r2,r16,800daa4 <__lshift+0x54>
 800da98:	1085883a 	add	r2,r2,r2
 800da9c:	29400044 	addi	r5,r5,1
 800daa0:	143ffd16 	blt	r2,r16,800da98 <__alt_data_end+0xf800da98>
 800daa4:	9009883a 	mov	r4,r18
 800daa8:	800d2140 	call	800d214 <_Balloc>
 800daac:	10c00504 	addi	r3,r2,20
 800dab0:	0540070e 	bge	zero,r21,800dad0 <__lshift+0x80>
 800dab4:	ad6b883a 	add	r21,r21,r21
 800dab8:	ad6b883a 	add	r21,r21,r21
 800dabc:	1809883a 	mov	r4,r3
 800dac0:	1d47883a 	add	r3,r3,r21
 800dac4:	20000015 	stw	zero,0(r4)
 800dac8:	21000104 	addi	r4,r4,4
 800dacc:	193ffd1e 	bne	r3,r4,800dac4 <__alt_data_end+0xf800dac4>
 800dad0:	8a000417 	ldw	r8,16(r17)
 800dad4:	89000504 	addi	r4,r17,20
 800dad8:	a18007cc 	andi	r6,r20,31
 800dadc:	4211883a 	add	r8,r8,r8
 800dae0:	4211883a 	add	r8,r8,r8
 800dae4:	2211883a 	add	r8,r4,r8
 800dae8:	30002326 	beq	r6,zero,800db78 <__lshift+0x128>
 800daec:	02400804 	movi	r9,32
 800daf0:	4993c83a 	sub	r9,r9,r6
 800daf4:	000b883a 	mov	r5,zero
 800daf8:	21c00017 	ldw	r7,0(r4)
 800dafc:	1815883a 	mov	r10,r3
 800db00:	18c00104 	addi	r3,r3,4
 800db04:	398e983a 	sll	r7,r7,r6
 800db08:	21000104 	addi	r4,r4,4
 800db0c:	394ab03a 	or	r5,r7,r5
 800db10:	197fff15 	stw	r5,-4(r3)
 800db14:	217fff17 	ldw	r5,-4(r4)
 800db18:	2a4ad83a 	srl	r5,r5,r9
 800db1c:	223ff636 	bltu	r4,r8,800daf8 <__alt_data_end+0xf800daf8>
 800db20:	51400115 	stw	r5,4(r10)
 800db24:	28001a1e 	bne	r5,zero,800db90 <__lshift+0x140>
 800db28:	843fffc4 	addi	r16,r16,-1
 800db2c:	14000415 	stw	r16,16(r2)
 800db30:	88000826 	beq	r17,zero,800db54 <__lshift+0x104>
 800db34:	89000117 	ldw	r4,4(r17)
 800db38:	90c01317 	ldw	r3,76(r18)
 800db3c:	2109883a 	add	r4,r4,r4
 800db40:	2109883a 	add	r4,r4,r4
 800db44:	1907883a 	add	r3,r3,r4
 800db48:	19000017 	ldw	r4,0(r3)
 800db4c:	89000015 	stw	r4,0(r17)
 800db50:	1c400015 	stw	r17,0(r3)
 800db54:	dfc00617 	ldw	ra,24(sp)
 800db58:	dd400517 	ldw	r21,20(sp)
 800db5c:	dd000417 	ldw	r20,16(sp)
 800db60:	dcc00317 	ldw	r19,12(sp)
 800db64:	dc800217 	ldw	r18,8(sp)
 800db68:	dc400117 	ldw	r17,4(sp)
 800db6c:	dc000017 	ldw	r16,0(sp)
 800db70:	dec00704 	addi	sp,sp,28
 800db74:	f800283a 	ret
 800db78:	21400017 	ldw	r5,0(r4)
 800db7c:	18c00104 	addi	r3,r3,4
 800db80:	21000104 	addi	r4,r4,4
 800db84:	197fff15 	stw	r5,-4(r3)
 800db88:	223ffb36 	bltu	r4,r8,800db78 <__alt_data_end+0xf800db78>
 800db8c:	003fe606 	br	800db28 <__alt_data_end+0xf800db28>
 800db90:	9c000084 	addi	r16,r19,2
 800db94:	003fe406 	br	800db28 <__alt_data_end+0xf800db28>

0800db98 <__mcmp>:
 800db98:	20800417 	ldw	r2,16(r4)
 800db9c:	28c00417 	ldw	r3,16(r5)
 800dba0:	10c5c83a 	sub	r2,r2,r3
 800dba4:	1000111e 	bne	r2,zero,800dbec <__mcmp+0x54>
 800dba8:	18c7883a 	add	r3,r3,r3
 800dbac:	18c7883a 	add	r3,r3,r3
 800dbb0:	21000504 	addi	r4,r4,20
 800dbb4:	29400504 	addi	r5,r5,20
 800dbb8:	20c5883a 	add	r2,r4,r3
 800dbbc:	28cb883a 	add	r5,r5,r3
 800dbc0:	00000106 	br	800dbc8 <__mcmp+0x30>
 800dbc4:	20800a2e 	bgeu	r4,r2,800dbf0 <__mcmp+0x58>
 800dbc8:	10bfff04 	addi	r2,r2,-4
 800dbcc:	297fff04 	addi	r5,r5,-4
 800dbd0:	11800017 	ldw	r6,0(r2)
 800dbd4:	28c00017 	ldw	r3,0(r5)
 800dbd8:	30fffa26 	beq	r6,r3,800dbc4 <__alt_data_end+0xf800dbc4>
 800dbdc:	30c00236 	bltu	r6,r3,800dbe8 <__mcmp+0x50>
 800dbe0:	00800044 	movi	r2,1
 800dbe4:	f800283a 	ret
 800dbe8:	00bfffc4 	movi	r2,-1
 800dbec:	f800283a 	ret
 800dbf0:	0005883a 	mov	r2,zero
 800dbf4:	f800283a 	ret

0800dbf8 <__mdiff>:
 800dbf8:	28c00417 	ldw	r3,16(r5)
 800dbfc:	30800417 	ldw	r2,16(r6)
 800dc00:	defffa04 	addi	sp,sp,-24
 800dc04:	dcc00315 	stw	r19,12(sp)
 800dc08:	dc800215 	stw	r18,8(sp)
 800dc0c:	dfc00515 	stw	ra,20(sp)
 800dc10:	dd000415 	stw	r20,16(sp)
 800dc14:	dc400115 	stw	r17,4(sp)
 800dc18:	dc000015 	stw	r16,0(sp)
 800dc1c:	1887c83a 	sub	r3,r3,r2
 800dc20:	2825883a 	mov	r18,r5
 800dc24:	3027883a 	mov	r19,r6
 800dc28:	1800141e 	bne	r3,zero,800dc7c <__mdiff+0x84>
 800dc2c:	1085883a 	add	r2,r2,r2
 800dc30:	1085883a 	add	r2,r2,r2
 800dc34:	2a000504 	addi	r8,r5,20
 800dc38:	34000504 	addi	r16,r6,20
 800dc3c:	4087883a 	add	r3,r8,r2
 800dc40:	8085883a 	add	r2,r16,r2
 800dc44:	00000106 	br	800dc4c <__mdiff+0x54>
 800dc48:	40c0592e 	bgeu	r8,r3,800ddb0 <__mdiff+0x1b8>
 800dc4c:	18ffff04 	addi	r3,r3,-4
 800dc50:	10bfff04 	addi	r2,r2,-4
 800dc54:	19c00017 	ldw	r7,0(r3)
 800dc58:	11400017 	ldw	r5,0(r2)
 800dc5c:	397ffa26 	beq	r7,r5,800dc48 <__alt_data_end+0xf800dc48>
 800dc60:	3940592e 	bgeu	r7,r5,800ddc8 <__mdiff+0x1d0>
 800dc64:	9005883a 	mov	r2,r18
 800dc68:	4023883a 	mov	r17,r8
 800dc6c:	9825883a 	mov	r18,r19
 800dc70:	05000044 	movi	r20,1
 800dc74:	1027883a 	mov	r19,r2
 800dc78:	00000406 	br	800dc8c <__mdiff+0x94>
 800dc7c:	18005616 	blt	r3,zero,800ddd8 <__mdiff+0x1e0>
 800dc80:	34400504 	addi	r17,r6,20
 800dc84:	2c000504 	addi	r16,r5,20
 800dc88:	0029883a 	mov	r20,zero
 800dc8c:	91400117 	ldw	r5,4(r18)
 800dc90:	800d2140 	call	800d214 <_Balloc>
 800dc94:	92400417 	ldw	r9,16(r18)
 800dc98:	9b000417 	ldw	r12,16(r19)
 800dc9c:	12c00504 	addi	r11,r2,20
 800dca0:	4a51883a 	add	r8,r9,r9
 800dca4:	6319883a 	add	r12,r12,r12
 800dca8:	4211883a 	add	r8,r8,r8
 800dcac:	6319883a 	add	r12,r12,r12
 800dcb0:	15000315 	stw	r20,12(r2)
 800dcb4:	8211883a 	add	r8,r16,r8
 800dcb8:	8b19883a 	add	r12,r17,r12
 800dcbc:	0007883a 	mov	r3,zero
 800dcc0:	81400017 	ldw	r5,0(r16)
 800dcc4:	89c00017 	ldw	r7,0(r17)
 800dcc8:	59800104 	addi	r6,r11,4
 800dccc:	293fffcc 	andi	r4,r5,65535
 800dcd0:	20c7883a 	add	r3,r4,r3
 800dcd4:	393fffcc 	andi	r4,r7,65535
 800dcd8:	1909c83a 	sub	r4,r3,r4
 800dcdc:	280ad43a 	srli	r5,r5,16
 800dce0:	380ed43a 	srli	r7,r7,16
 800dce4:	2007d43a 	srai	r3,r4,16
 800dce8:	213fffcc 	andi	r4,r4,65535
 800dcec:	29cbc83a 	sub	r5,r5,r7
 800dcf0:	28c7883a 	add	r3,r5,r3
 800dcf4:	180a943a 	slli	r5,r3,16
 800dcf8:	8c400104 	addi	r17,r17,4
 800dcfc:	84000104 	addi	r16,r16,4
 800dd00:	2908b03a 	or	r4,r5,r4
 800dd04:	59000015 	stw	r4,0(r11)
 800dd08:	1807d43a 	srai	r3,r3,16
 800dd0c:	3015883a 	mov	r10,r6
 800dd10:	3017883a 	mov	r11,r6
 800dd14:	8b3fea36 	bltu	r17,r12,800dcc0 <__alt_data_end+0xf800dcc0>
 800dd18:	8200162e 	bgeu	r16,r8,800dd74 <__mdiff+0x17c>
 800dd1c:	8017883a 	mov	r11,r16
 800dd20:	59400017 	ldw	r5,0(r11)
 800dd24:	31800104 	addi	r6,r6,4
 800dd28:	5ac00104 	addi	r11,r11,4
 800dd2c:	293fffcc 	andi	r4,r5,65535
 800dd30:	20c7883a 	add	r3,r4,r3
 800dd34:	280ed43a 	srli	r7,r5,16
 800dd38:	180bd43a 	srai	r5,r3,16
 800dd3c:	193fffcc 	andi	r4,r3,65535
 800dd40:	3947883a 	add	r3,r7,r5
 800dd44:	180a943a 	slli	r5,r3,16
 800dd48:	1807d43a 	srai	r3,r3,16
 800dd4c:	2908b03a 	or	r4,r5,r4
 800dd50:	313fff15 	stw	r4,-4(r6)
 800dd54:	5a3ff236 	bltu	r11,r8,800dd20 <__alt_data_end+0xf800dd20>
 800dd58:	0406303a 	nor	r3,zero,r16
 800dd5c:	1a07883a 	add	r3,r3,r8
 800dd60:	1806d0ba 	srli	r3,r3,2
 800dd64:	18c00044 	addi	r3,r3,1
 800dd68:	18c7883a 	add	r3,r3,r3
 800dd6c:	18c7883a 	add	r3,r3,r3
 800dd70:	50d5883a 	add	r10,r10,r3
 800dd74:	50ffff04 	addi	r3,r10,-4
 800dd78:	2000041e 	bne	r4,zero,800dd8c <__mdiff+0x194>
 800dd7c:	18ffff04 	addi	r3,r3,-4
 800dd80:	19000017 	ldw	r4,0(r3)
 800dd84:	4a7fffc4 	addi	r9,r9,-1
 800dd88:	203ffc26 	beq	r4,zero,800dd7c <__alt_data_end+0xf800dd7c>
 800dd8c:	12400415 	stw	r9,16(r2)
 800dd90:	dfc00517 	ldw	ra,20(sp)
 800dd94:	dd000417 	ldw	r20,16(sp)
 800dd98:	dcc00317 	ldw	r19,12(sp)
 800dd9c:	dc800217 	ldw	r18,8(sp)
 800dda0:	dc400117 	ldw	r17,4(sp)
 800dda4:	dc000017 	ldw	r16,0(sp)
 800dda8:	dec00604 	addi	sp,sp,24
 800ddac:	f800283a 	ret
 800ddb0:	000b883a 	mov	r5,zero
 800ddb4:	800d2140 	call	800d214 <_Balloc>
 800ddb8:	00c00044 	movi	r3,1
 800ddbc:	10c00415 	stw	r3,16(r2)
 800ddc0:	10000515 	stw	zero,20(r2)
 800ddc4:	003ff206 	br	800dd90 <__alt_data_end+0xf800dd90>
 800ddc8:	8023883a 	mov	r17,r16
 800ddcc:	0029883a 	mov	r20,zero
 800ddd0:	4021883a 	mov	r16,r8
 800ddd4:	003fad06 	br	800dc8c <__alt_data_end+0xf800dc8c>
 800ddd8:	9005883a 	mov	r2,r18
 800dddc:	94400504 	addi	r17,r18,20
 800dde0:	9c000504 	addi	r16,r19,20
 800dde4:	9825883a 	mov	r18,r19
 800dde8:	05000044 	movi	r20,1
 800ddec:	1027883a 	mov	r19,r2
 800ddf0:	003fa606 	br	800dc8c <__alt_data_end+0xf800dc8c>

0800ddf4 <__ulp>:
 800ddf4:	295ffc2c 	andhi	r5,r5,32752
 800ddf8:	00bf3034 	movhi	r2,64704
 800ddfc:	2887883a 	add	r3,r5,r2
 800de00:	00c0020e 	bge	zero,r3,800de0c <__ulp+0x18>
 800de04:	0005883a 	mov	r2,zero
 800de08:	f800283a 	ret
 800de0c:	00c7c83a 	sub	r3,zero,r3
 800de10:	1807d53a 	srai	r3,r3,20
 800de14:	008004c4 	movi	r2,19
 800de18:	10c00b0e 	bge	r2,r3,800de48 <__ulp+0x54>
 800de1c:	18bffb04 	addi	r2,r3,-20
 800de20:	01000784 	movi	r4,30
 800de24:	0007883a 	mov	r3,zero
 800de28:	20800516 	blt	r4,r2,800de40 <__ulp+0x4c>
 800de2c:	010007c4 	movi	r4,31
 800de30:	2089c83a 	sub	r4,r4,r2
 800de34:	00800044 	movi	r2,1
 800de38:	1104983a 	sll	r2,r2,r4
 800de3c:	f800283a 	ret
 800de40:	00800044 	movi	r2,1
 800de44:	f800283a 	ret
 800de48:	01400234 	movhi	r5,8
 800de4c:	28c7d83a 	sra	r3,r5,r3
 800de50:	0005883a 	mov	r2,zero
 800de54:	f800283a 	ret

0800de58 <__b2d>:
 800de58:	defffa04 	addi	sp,sp,-24
 800de5c:	dc000015 	stw	r16,0(sp)
 800de60:	24000417 	ldw	r16,16(r4)
 800de64:	dc400115 	stw	r17,4(sp)
 800de68:	24400504 	addi	r17,r4,20
 800de6c:	8421883a 	add	r16,r16,r16
 800de70:	8421883a 	add	r16,r16,r16
 800de74:	8c21883a 	add	r16,r17,r16
 800de78:	dc800215 	stw	r18,8(sp)
 800de7c:	84bfff17 	ldw	r18,-4(r16)
 800de80:	dd000415 	stw	r20,16(sp)
 800de84:	dcc00315 	stw	r19,12(sp)
 800de88:	9009883a 	mov	r4,r18
 800de8c:	2829883a 	mov	r20,r5
 800de90:	dfc00515 	stw	ra,20(sp)
 800de94:	800d5300 	call	800d530 <__hi0bits>
 800de98:	00c00804 	movi	r3,32
 800de9c:	1889c83a 	sub	r4,r3,r2
 800dea0:	a1000015 	stw	r4,0(r20)
 800dea4:	01000284 	movi	r4,10
 800dea8:	84ffff04 	addi	r19,r16,-4
 800deac:	20801216 	blt	r4,r2,800def8 <__b2d+0xa0>
 800deb0:	018002c4 	movi	r6,11
 800deb4:	308dc83a 	sub	r6,r6,r2
 800deb8:	9186d83a 	srl	r3,r18,r6
 800debc:	18cffc34 	orhi	r3,r3,16368
 800dec0:	8cc0212e 	bgeu	r17,r19,800df48 <__b2d+0xf0>
 800dec4:	813ffe17 	ldw	r4,-8(r16)
 800dec8:	218cd83a 	srl	r6,r4,r6
 800decc:	10800544 	addi	r2,r2,21
 800ded0:	9084983a 	sll	r2,r18,r2
 800ded4:	1184b03a 	or	r2,r2,r6
 800ded8:	dfc00517 	ldw	ra,20(sp)
 800dedc:	dd000417 	ldw	r20,16(sp)
 800dee0:	dcc00317 	ldw	r19,12(sp)
 800dee4:	dc800217 	ldw	r18,8(sp)
 800dee8:	dc400117 	ldw	r17,4(sp)
 800deec:	dc000017 	ldw	r16,0(sp)
 800def0:	dec00604 	addi	sp,sp,24
 800def4:	f800283a 	ret
 800def8:	8cc00f2e 	bgeu	r17,r19,800df38 <__b2d+0xe0>
 800defc:	117ffd44 	addi	r5,r2,-11
 800df00:	80bffe17 	ldw	r2,-8(r16)
 800df04:	28000e26 	beq	r5,zero,800df40 <__b2d+0xe8>
 800df08:	1949c83a 	sub	r4,r3,r5
 800df0c:	9164983a 	sll	r18,r18,r5
 800df10:	1106d83a 	srl	r3,r2,r4
 800df14:	81bffe04 	addi	r6,r16,-8
 800df18:	948ffc34 	orhi	r18,r18,16368
 800df1c:	90c6b03a 	or	r3,r18,r3
 800df20:	89800e2e 	bgeu	r17,r6,800df5c <__b2d+0x104>
 800df24:	81bffd17 	ldw	r6,-12(r16)
 800df28:	1144983a 	sll	r2,r2,r5
 800df2c:	310ad83a 	srl	r5,r6,r4
 800df30:	2884b03a 	or	r2,r5,r2
 800df34:	003fe806 	br	800ded8 <__alt_data_end+0xf800ded8>
 800df38:	10bffd44 	addi	r2,r2,-11
 800df3c:	1000041e 	bne	r2,zero,800df50 <__b2d+0xf8>
 800df40:	90cffc34 	orhi	r3,r18,16368
 800df44:	003fe406 	br	800ded8 <__alt_data_end+0xf800ded8>
 800df48:	000d883a 	mov	r6,zero
 800df4c:	003fdf06 	br	800decc <__alt_data_end+0xf800decc>
 800df50:	90a4983a 	sll	r18,r18,r2
 800df54:	0005883a 	mov	r2,zero
 800df58:	003ff906 	br	800df40 <__alt_data_end+0xf800df40>
 800df5c:	1144983a 	sll	r2,r2,r5
 800df60:	003fdd06 	br	800ded8 <__alt_data_end+0xf800ded8>

0800df64 <__d2b>:
 800df64:	defff804 	addi	sp,sp,-32
 800df68:	dc000215 	stw	r16,8(sp)
 800df6c:	3021883a 	mov	r16,r6
 800df70:	dc400315 	stw	r17,12(sp)
 800df74:	8022907a 	slli	r17,r16,1
 800df78:	dd000615 	stw	r20,24(sp)
 800df7c:	2829883a 	mov	r20,r5
 800df80:	01400044 	movi	r5,1
 800df84:	dcc00515 	stw	r19,20(sp)
 800df88:	dc800415 	stw	r18,16(sp)
 800df8c:	dfc00715 	stw	ra,28(sp)
 800df90:	3825883a 	mov	r18,r7
 800df94:	8822d57a 	srli	r17,r17,21
 800df98:	800d2140 	call	800d214 <_Balloc>
 800df9c:	1027883a 	mov	r19,r2
 800dfa0:	00800434 	movhi	r2,16
 800dfa4:	10bfffc4 	addi	r2,r2,-1
 800dfa8:	808c703a 	and	r6,r16,r2
 800dfac:	88000126 	beq	r17,zero,800dfb4 <__d2b+0x50>
 800dfb0:	31800434 	orhi	r6,r6,16
 800dfb4:	d9800015 	stw	r6,0(sp)
 800dfb8:	a0002426 	beq	r20,zero,800e04c <__d2b+0xe8>
 800dfbc:	d9000104 	addi	r4,sp,4
 800dfc0:	dd000115 	stw	r20,4(sp)
 800dfc4:	800d5980 	call	800d598 <__lo0bits>
 800dfc8:	d8c00017 	ldw	r3,0(sp)
 800dfcc:	10002f1e 	bne	r2,zero,800e08c <__d2b+0x128>
 800dfd0:	d9000117 	ldw	r4,4(sp)
 800dfd4:	99000515 	stw	r4,20(r19)
 800dfd8:	1821003a 	cmpeq	r16,r3,zero
 800dfdc:	01000084 	movi	r4,2
 800dfe0:	2421c83a 	sub	r16,r4,r16
 800dfe4:	98c00615 	stw	r3,24(r19)
 800dfe8:	9c000415 	stw	r16,16(r19)
 800dfec:	88001f1e 	bne	r17,zero,800e06c <__d2b+0x108>
 800dff0:	10bef384 	addi	r2,r2,-1074
 800dff4:	90800015 	stw	r2,0(r18)
 800dff8:	00900034 	movhi	r2,16384
 800dffc:	10bfffc4 	addi	r2,r2,-1
 800e000:	8085883a 	add	r2,r16,r2
 800e004:	1085883a 	add	r2,r2,r2
 800e008:	1085883a 	add	r2,r2,r2
 800e00c:	9885883a 	add	r2,r19,r2
 800e010:	11000517 	ldw	r4,20(r2)
 800e014:	8020917a 	slli	r16,r16,5
 800e018:	800d5300 	call	800d530 <__hi0bits>
 800e01c:	d8c00817 	ldw	r3,32(sp)
 800e020:	8085c83a 	sub	r2,r16,r2
 800e024:	18800015 	stw	r2,0(r3)
 800e028:	9805883a 	mov	r2,r19
 800e02c:	dfc00717 	ldw	ra,28(sp)
 800e030:	dd000617 	ldw	r20,24(sp)
 800e034:	dcc00517 	ldw	r19,20(sp)
 800e038:	dc800417 	ldw	r18,16(sp)
 800e03c:	dc400317 	ldw	r17,12(sp)
 800e040:	dc000217 	ldw	r16,8(sp)
 800e044:	dec00804 	addi	sp,sp,32
 800e048:	f800283a 	ret
 800e04c:	d809883a 	mov	r4,sp
 800e050:	800d5980 	call	800d598 <__lo0bits>
 800e054:	d8c00017 	ldw	r3,0(sp)
 800e058:	04000044 	movi	r16,1
 800e05c:	9c000415 	stw	r16,16(r19)
 800e060:	98c00515 	stw	r3,20(r19)
 800e064:	10800804 	addi	r2,r2,32
 800e068:	883fe126 	beq	r17,zero,800dff0 <__alt_data_end+0xf800dff0>
 800e06c:	00c00d44 	movi	r3,53
 800e070:	8c7ef344 	addi	r17,r17,-1075
 800e074:	88a3883a 	add	r17,r17,r2
 800e078:	1885c83a 	sub	r2,r3,r2
 800e07c:	d8c00817 	ldw	r3,32(sp)
 800e080:	94400015 	stw	r17,0(r18)
 800e084:	18800015 	stw	r2,0(r3)
 800e088:	003fe706 	br	800e028 <__alt_data_end+0xf800e028>
 800e08c:	01000804 	movi	r4,32
 800e090:	2089c83a 	sub	r4,r4,r2
 800e094:	1908983a 	sll	r4,r3,r4
 800e098:	d9400117 	ldw	r5,4(sp)
 800e09c:	1886d83a 	srl	r3,r3,r2
 800e0a0:	2148b03a 	or	r4,r4,r5
 800e0a4:	99000515 	stw	r4,20(r19)
 800e0a8:	d8c00015 	stw	r3,0(sp)
 800e0ac:	003fca06 	br	800dfd8 <__alt_data_end+0xf800dfd8>

0800e0b0 <__ratio>:
 800e0b0:	defff904 	addi	sp,sp,-28
 800e0b4:	dc400315 	stw	r17,12(sp)
 800e0b8:	2823883a 	mov	r17,r5
 800e0bc:	d9400104 	addi	r5,sp,4
 800e0c0:	dfc00615 	stw	ra,24(sp)
 800e0c4:	dcc00515 	stw	r19,20(sp)
 800e0c8:	dc800415 	stw	r18,16(sp)
 800e0cc:	2027883a 	mov	r19,r4
 800e0d0:	dc000215 	stw	r16,8(sp)
 800e0d4:	800de580 	call	800de58 <__b2d>
 800e0d8:	d80b883a 	mov	r5,sp
 800e0dc:	8809883a 	mov	r4,r17
 800e0e0:	1025883a 	mov	r18,r2
 800e0e4:	1821883a 	mov	r16,r3
 800e0e8:	800de580 	call	800de58 <__b2d>
 800e0ec:	8a000417 	ldw	r8,16(r17)
 800e0f0:	99000417 	ldw	r4,16(r19)
 800e0f4:	d9400117 	ldw	r5,4(sp)
 800e0f8:	2209c83a 	sub	r4,r4,r8
 800e0fc:	2010917a 	slli	r8,r4,5
 800e100:	d9000017 	ldw	r4,0(sp)
 800e104:	2909c83a 	sub	r4,r5,r4
 800e108:	4109883a 	add	r4,r8,r4
 800e10c:	01000e0e 	bge	zero,r4,800e148 <__ratio+0x98>
 800e110:	2008953a 	slli	r4,r4,20
 800e114:	2421883a 	add	r16,r4,r16
 800e118:	100d883a 	mov	r6,r2
 800e11c:	180f883a 	mov	r7,r3
 800e120:	9009883a 	mov	r4,r18
 800e124:	800b883a 	mov	r5,r16
 800e128:	8011fc00 	call	8011fc0 <__divdf3>
 800e12c:	dfc00617 	ldw	ra,24(sp)
 800e130:	dcc00517 	ldw	r19,20(sp)
 800e134:	dc800417 	ldw	r18,16(sp)
 800e138:	dc400317 	ldw	r17,12(sp)
 800e13c:	dc000217 	ldw	r16,8(sp)
 800e140:	dec00704 	addi	sp,sp,28
 800e144:	f800283a 	ret
 800e148:	2008953a 	slli	r4,r4,20
 800e14c:	1907c83a 	sub	r3,r3,r4
 800e150:	003ff106 	br	800e118 <__alt_data_end+0xf800e118>

0800e154 <_mprec_log10>:
 800e154:	defffe04 	addi	sp,sp,-8
 800e158:	dc000015 	stw	r16,0(sp)
 800e15c:	dfc00115 	stw	ra,4(sp)
 800e160:	008005c4 	movi	r2,23
 800e164:	2021883a 	mov	r16,r4
 800e168:	11000d0e 	bge	r2,r4,800e1a0 <_mprec_log10+0x4c>
 800e16c:	0005883a 	mov	r2,zero
 800e170:	00cffc34 	movhi	r3,16368
 800e174:	843fffc4 	addi	r16,r16,-1
 800e178:	000d883a 	mov	r6,zero
 800e17c:	01d00934 	movhi	r7,16420
 800e180:	1009883a 	mov	r4,r2
 800e184:	180b883a 	mov	r5,r3
 800e188:	8012be80 	call	8012be8 <__muldf3>
 800e18c:	803ff91e 	bne	r16,zero,800e174 <__alt_data_end+0xf800e174>
 800e190:	dfc00117 	ldw	ra,4(sp)
 800e194:	dc000017 	ldw	r16,0(sp)
 800e198:	dec00204 	addi	sp,sp,8
 800e19c:	f800283a 	ret
 800e1a0:	202090fa 	slli	r16,r4,3
 800e1a4:	00820074 	movhi	r2,2049
 800e1a8:	1099e504 	addi	r2,r2,26516
 800e1ac:	1421883a 	add	r16,r2,r16
 800e1b0:	80800017 	ldw	r2,0(r16)
 800e1b4:	80c00117 	ldw	r3,4(r16)
 800e1b8:	dfc00117 	ldw	ra,4(sp)
 800e1bc:	dc000017 	ldw	r16,0(sp)
 800e1c0:	dec00204 	addi	sp,sp,8
 800e1c4:	f800283a 	ret

0800e1c8 <__copybits>:
 800e1c8:	297fffc4 	addi	r5,r5,-1
 800e1cc:	280fd17a 	srai	r7,r5,5
 800e1d0:	30c00417 	ldw	r3,16(r6)
 800e1d4:	30800504 	addi	r2,r6,20
 800e1d8:	39c00044 	addi	r7,r7,1
 800e1dc:	18c7883a 	add	r3,r3,r3
 800e1e0:	39cf883a 	add	r7,r7,r7
 800e1e4:	18c7883a 	add	r3,r3,r3
 800e1e8:	39cf883a 	add	r7,r7,r7
 800e1ec:	10c7883a 	add	r3,r2,r3
 800e1f0:	21cf883a 	add	r7,r4,r7
 800e1f4:	10c00d2e 	bgeu	r2,r3,800e22c <__copybits+0x64>
 800e1f8:	200b883a 	mov	r5,r4
 800e1fc:	12000017 	ldw	r8,0(r2)
 800e200:	29400104 	addi	r5,r5,4
 800e204:	10800104 	addi	r2,r2,4
 800e208:	2a3fff15 	stw	r8,-4(r5)
 800e20c:	10fffb36 	bltu	r2,r3,800e1fc <__alt_data_end+0xf800e1fc>
 800e210:	1985c83a 	sub	r2,r3,r6
 800e214:	10bffac4 	addi	r2,r2,-21
 800e218:	1004d0ba 	srli	r2,r2,2
 800e21c:	10800044 	addi	r2,r2,1
 800e220:	1085883a 	add	r2,r2,r2
 800e224:	1085883a 	add	r2,r2,r2
 800e228:	2089883a 	add	r4,r4,r2
 800e22c:	21c0032e 	bgeu	r4,r7,800e23c <__copybits+0x74>
 800e230:	20000015 	stw	zero,0(r4)
 800e234:	21000104 	addi	r4,r4,4
 800e238:	21fffd36 	bltu	r4,r7,800e230 <__alt_data_end+0xf800e230>
 800e23c:	f800283a 	ret

0800e240 <__any_on>:
 800e240:	20c00417 	ldw	r3,16(r4)
 800e244:	2805d17a 	srai	r2,r5,5
 800e248:	21000504 	addi	r4,r4,20
 800e24c:	18800d0e 	bge	r3,r2,800e284 <__any_on+0x44>
 800e250:	18c7883a 	add	r3,r3,r3
 800e254:	18c7883a 	add	r3,r3,r3
 800e258:	20c7883a 	add	r3,r4,r3
 800e25c:	20c0192e 	bgeu	r4,r3,800e2c4 <__any_on+0x84>
 800e260:	18bfff17 	ldw	r2,-4(r3)
 800e264:	18ffff04 	addi	r3,r3,-4
 800e268:	1000041e 	bne	r2,zero,800e27c <__any_on+0x3c>
 800e26c:	20c0142e 	bgeu	r4,r3,800e2c0 <__any_on+0x80>
 800e270:	18ffff04 	addi	r3,r3,-4
 800e274:	19400017 	ldw	r5,0(r3)
 800e278:	283ffc26 	beq	r5,zero,800e26c <__alt_data_end+0xf800e26c>
 800e27c:	00800044 	movi	r2,1
 800e280:	f800283a 	ret
 800e284:	10c00a0e 	bge	r2,r3,800e2b0 <__any_on+0x70>
 800e288:	1085883a 	add	r2,r2,r2
 800e28c:	1085883a 	add	r2,r2,r2
 800e290:	294007cc 	andi	r5,r5,31
 800e294:	2087883a 	add	r3,r4,r2
 800e298:	283ff026 	beq	r5,zero,800e25c <__alt_data_end+0xf800e25c>
 800e29c:	19800017 	ldw	r6,0(r3)
 800e2a0:	3144d83a 	srl	r2,r6,r5
 800e2a4:	114a983a 	sll	r5,r2,r5
 800e2a8:	317ff41e 	bne	r6,r5,800e27c <__alt_data_end+0xf800e27c>
 800e2ac:	003feb06 	br	800e25c <__alt_data_end+0xf800e25c>
 800e2b0:	1085883a 	add	r2,r2,r2
 800e2b4:	1085883a 	add	r2,r2,r2
 800e2b8:	2087883a 	add	r3,r4,r2
 800e2bc:	003fe706 	br	800e25c <__alt_data_end+0xf800e25c>
 800e2c0:	f800283a 	ret
 800e2c4:	0005883a 	mov	r2,zero
 800e2c8:	f800283a 	ret

0800e2cc <_realloc_r>:
 800e2cc:	defff604 	addi	sp,sp,-40
 800e2d0:	dc800215 	stw	r18,8(sp)
 800e2d4:	dfc00915 	stw	ra,36(sp)
 800e2d8:	df000815 	stw	fp,32(sp)
 800e2dc:	ddc00715 	stw	r23,28(sp)
 800e2e0:	dd800615 	stw	r22,24(sp)
 800e2e4:	dd400515 	stw	r21,20(sp)
 800e2e8:	dd000415 	stw	r20,16(sp)
 800e2ec:	dcc00315 	stw	r19,12(sp)
 800e2f0:	dc400115 	stw	r17,4(sp)
 800e2f4:	dc000015 	stw	r16,0(sp)
 800e2f8:	3025883a 	mov	r18,r6
 800e2fc:	2800b726 	beq	r5,zero,800e5dc <_realloc_r+0x310>
 800e300:	282b883a 	mov	r21,r5
 800e304:	2029883a 	mov	r20,r4
 800e308:	80145540 	call	8014554 <__malloc_lock>
 800e30c:	a8bfff17 	ldw	r2,-4(r21)
 800e310:	043fff04 	movi	r16,-4
 800e314:	90c002c4 	addi	r3,r18,11
 800e318:	01000584 	movi	r4,22
 800e31c:	acfffe04 	addi	r19,r21,-8
 800e320:	1420703a 	and	r16,r2,r16
 800e324:	20c0332e 	bgeu	r4,r3,800e3f4 <_realloc_r+0x128>
 800e328:	047ffe04 	movi	r17,-8
 800e32c:	1c62703a 	and	r17,r3,r17
 800e330:	8807883a 	mov	r3,r17
 800e334:	88005816 	blt	r17,zero,800e498 <_realloc_r+0x1cc>
 800e338:	8c805736 	bltu	r17,r18,800e498 <_realloc_r+0x1cc>
 800e33c:	80c0300e 	bge	r16,r3,800e400 <_realloc_r+0x134>
 800e340:	07020074 	movhi	fp,2049
 800e344:	e71b8f04 	addi	fp,fp,28220
 800e348:	e1c00217 	ldw	r7,8(fp)
 800e34c:	9c09883a 	add	r4,r19,r16
 800e350:	22000117 	ldw	r8,4(r4)
 800e354:	21c06326 	beq	r4,r7,800e4e4 <_realloc_r+0x218>
 800e358:	017fff84 	movi	r5,-2
 800e35c:	414a703a 	and	r5,r8,r5
 800e360:	214b883a 	add	r5,r4,r5
 800e364:	29800117 	ldw	r6,4(r5)
 800e368:	3180004c 	andi	r6,r6,1
 800e36c:	30003f26 	beq	r6,zero,800e46c <_realloc_r+0x1a0>
 800e370:	1080004c 	andi	r2,r2,1
 800e374:	10008326 	beq	r2,zero,800e584 <_realloc_r+0x2b8>
 800e378:	900b883a 	mov	r5,r18
 800e37c:	a009883a 	mov	r4,r20
 800e380:	800c7c80 	call	800c7c8 <_malloc_r>
 800e384:	1025883a 	mov	r18,r2
 800e388:	10011e26 	beq	r2,zero,800e804 <_realloc_r+0x538>
 800e38c:	a93fff17 	ldw	r4,-4(r21)
 800e390:	10fffe04 	addi	r3,r2,-8
 800e394:	00bfff84 	movi	r2,-2
 800e398:	2084703a 	and	r2,r4,r2
 800e39c:	9885883a 	add	r2,r19,r2
 800e3a0:	1880ee26 	beq	r3,r2,800e75c <_realloc_r+0x490>
 800e3a4:	81bfff04 	addi	r6,r16,-4
 800e3a8:	00800904 	movi	r2,36
 800e3ac:	1180b836 	bltu	r2,r6,800e690 <_realloc_r+0x3c4>
 800e3b0:	00c004c4 	movi	r3,19
 800e3b4:	19809636 	bltu	r3,r6,800e610 <_realloc_r+0x344>
 800e3b8:	9005883a 	mov	r2,r18
 800e3bc:	a807883a 	mov	r3,r21
 800e3c0:	19000017 	ldw	r4,0(r3)
 800e3c4:	11000015 	stw	r4,0(r2)
 800e3c8:	19000117 	ldw	r4,4(r3)
 800e3cc:	11000115 	stw	r4,4(r2)
 800e3d0:	18c00217 	ldw	r3,8(r3)
 800e3d4:	10c00215 	stw	r3,8(r2)
 800e3d8:	a80b883a 	mov	r5,r21
 800e3dc:	a009883a 	mov	r4,r20
 800e3e0:	800bbd00 	call	800bbd0 <_free_r>
 800e3e4:	a009883a 	mov	r4,r20
 800e3e8:	80145780 	call	8014578 <__malloc_unlock>
 800e3ec:	9005883a 	mov	r2,r18
 800e3f0:	00001206 	br	800e43c <_realloc_r+0x170>
 800e3f4:	00c00404 	movi	r3,16
 800e3f8:	1823883a 	mov	r17,r3
 800e3fc:	003fce06 	br	800e338 <__alt_data_end+0xf800e338>
 800e400:	a825883a 	mov	r18,r21
 800e404:	8445c83a 	sub	r2,r16,r17
 800e408:	00c003c4 	movi	r3,15
 800e40c:	18802636 	bltu	r3,r2,800e4a8 <_realloc_r+0x1dc>
 800e410:	99800117 	ldw	r6,4(r19)
 800e414:	9c07883a 	add	r3,r19,r16
 800e418:	3180004c 	andi	r6,r6,1
 800e41c:	3420b03a 	or	r16,r6,r16
 800e420:	9c000115 	stw	r16,4(r19)
 800e424:	18800117 	ldw	r2,4(r3)
 800e428:	10800054 	ori	r2,r2,1
 800e42c:	18800115 	stw	r2,4(r3)
 800e430:	a009883a 	mov	r4,r20
 800e434:	80145780 	call	8014578 <__malloc_unlock>
 800e438:	9005883a 	mov	r2,r18
 800e43c:	dfc00917 	ldw	ra,36(sp)
 800e440:	df000817 	ldw	fp,32(sp)
 800e444:	ddc00717 	ldw	r23,28(sp)
 800e448:	dd800617 	ldw	r22,24(sp)
 800e44c:	dd400517 	ldw	r21,20(sp)
 800e450:	dd000417 	ldw	r20,16(sp)
 800e454:	dcc00317 	ldw	r19,12(sp)
 800e458:	dc800217 	ldw	r18,8(sp)
 800e45c:	dc400117 	ldw	r17,4(sp)
 800e460:	dc000017 	ldw	r16,0(sp)
 800e464:	dec00a04 	addi	sp,sp,40
 800e468:	f800283a 	ret
 800e46c:	017fff04 	movi	r5,-4
 800e470:	414a703a 	and	r5,r8,r5
 800e474:	814d883a 	add	r6,r16,r5
 800e478:	30c01f16 	blt	r6,r3,800e4f8 <_realloc_r+0x22c>
 800e47c:	20800317 	ldw	r2,12(r4)
 800e480:	20c00217 	ldw	r3,8(r4)
 800e484:	a825883a 	mov	r18,r21
 800e488:	3021883a 	mov	r16,r6
 800e48c:	18800315 	stw	r2,12(r3)
 800e490:	10c00215 	stw	r3,8(r2)
 800e494:	003fdb06 	br	800e404 <__alt_data_end+0xf800e404>
 800e498:	00800304 	movi	r2,12
 800e49c:	a0800015 	stw	r2,0(r20)
 800e4a0:	0005883a 	mov	r2,zero
 800e4a4:	003fe506 	br	800e43c <__alt_data_end+0xf800e43c>
 800e4a8:	98c00117 	ldw	r3,4(r19)
 800e4ac:	9c4b883a 	add	r5,r19,r17
 800e4b0:	11000054 	ori	r4,r2,1
 800e4b4:	18c0004c 	andi	r3,r3,1
 800e4b8:	1c62b03a 	or	r17,r3,r17
 800e4bc:	9c400115 	stw	r17,4(r19)
 800e4c0:	29000115 	stw	r4,4(r5)
 800e4c4:	2885883a 	add	r2,r5,r2
 800e4c8:	10c00117 	ldw	r3,4(r2)
 800e4cc:	29400204 	addi	r5,r5,8
 800e4d0:	a009883a 	mov	r4,r20
 800e4d4:	18c00054 	ori	r3,r3,1
 800e4d8:	10c00115 	stw	r3,4(r2)
 800e4dc:	800bbd00 	call	800bbd0 <_free_r>
 800e4e0:	003fd306 	br	800e430 <__alt_data_end+0xf800e430>
 800e4e4:	017fff04 	movi	r5,-4
 800e4e8:	414a703a 	and	r5,r8,r5
 800e4ec:	89800404 	addi	r6,r17,16
 800e4f0:	8151883a 	add	r8,r16,r5
 800e4f4:	4180590e 	bge	r8,r6,800e65c <_realloc_r+0x390>
 800e4f8:	1080004c 	andi	r2,r2,1
 800e4fc:	103f9e1e 	bne	r2,zero,800e378 <__alt_data_end+0xf800e378>
 800e500:	adbffe17 	ldw	r22,-8(r21)
 800e504:	00bfff04 	movi	r2,-4
 800e508:	9dadc83a 	sub	r22,r19,r22
 800e50c:	b1800117 	ldw	r6,4(r22)
 800e510:	3084703a 	and	r2,r6,r2
 800e514:	20002026 	beq	r4,zero,800e598 <_realloc_r+0x2cc>
 800e518:	80af883a 	add	r23,r16,r2
 800e51c:	b96f883a 	add	r23,r23,r5
 800e520:	21c05f26 	beq	r4,r7,800e6a0 <_realloc_r+0x3d4>
 800e524:	b8c01c16 	blt	r23,r3,800e598 <_realloc_r+0x2cc>
 800e528:	20800317 	ldw	r2,12(r4)
 800e52c:	20c00217 	ldw	r3,8(r4)
 800e530:	81bfff04 	addi	r6,r16,-4
 800e534:	01000904 	movi	r4,36
 800e538:	18800315 	stw	r2,12(r3)
 800e53c:	10c00215 	stw	r3,8(r2)
 800e540:	b0c00217 	ldw	r3,8(r22)
 800e544:	b0800317 	ldw	r2,12(r22)
 800e548:	b4800204 	addi	r18,r22,8
 800e54c:	18800315 	stw	r2,12(r3)
 800e550:	10c00215 	stw	r3,8(r2)
 800e554:	21801b36 	bltu	r4,r6,800e5c4 <_realloc_r+0x2f8>
 800e558:	008004c4 	movi	r2,19
 800e55c:	1180352e 	bgeu	r2,r6,800e634 <_realloc_r+0x368>
 800e560:	a8800017 	ldw	r2,0(r21)
 800e564:	b0800215 	stw	r2,8(r22)
 800e568:	a8800117 	ldw	r2,4(r21)
 800e56c:	b0800315 	stw	r2,12(r22)
 800e570:	008006c4 	movi	r2,27
 800e574:	11807f36 	bltu	r2,r6,800e774 <_realloc_r+0x4a8>
 800e578:	b0800404 	addi	r2,r22,16
 800e57c:	ad400204 	addi	r21,r21,8
 800e580:	00002d06 	br	800e638 <_realloc_r+0x36c>
 800e584:	adbffe17 	ldw	r22,-8(r21)
 800e588:	00bfff04 	movi	r2,-4
 800e58c:	9dadc83a 	sub	r22,r19,r22
 800e590:	b1000117 	ldw	r4,4(r22)
 800e594:	2084703a 	and	r2,r4,r2
 800e598:	b03f7726 	beq	r22,zero,800e378 <__alt_data_end+0xf800e378>
 800e59c:	80af883a 	add	r23,r16,r2
 800e5a0:	b8ff7516 	blt	r23,r3,800e378 <__alt_data_end+0xf800e378>
 800e5a4:	b0800317 	ldw	r2,12(r22)
 800e5a8:	b0c00217 	ldw	r3,8(r22)
 800e5ac:	81bfff04 	addi	r6,r16,-4
 800e5b0:	01000904 	movi	r4,36
 800e5b4:	18800315 	stw	r2,12(r3)
 800e5b8:	10c00215 	stw	r3,8(r2)
 800e5bc:	b4800204 	addi	r18,r22,8
 800e5c0:	21bfe52e 	bgeu	r4,r6,800e558 <__alt_data_end+0xf800e558>
 800e5c4:	a80b883a 	mov	r5,r21
 800e5c8:	9009883a 	mov	r4,r18
 800e5cc:	800d0b80 	call	800d0b8 <memmove>
 800e5d0:	b821883a 	mov	r16,r23
 800e5d4:	b027883a 	mov	r19,r22
 800e5d8:	003f8a06 	br	800e404 <__alt_data_end+0xf800e404>
 800e5dc:	300b883a 	mov	r5,r6
 800e5e0:	dfc00917 	ldw	ra,36(sp)
 800e5e4:	df000817 	ldw	fp,32(sp)
 800e5e8:	ddc00717 	ldw	r23,28(sp)
 800e5ec:	dd800617 	ldw	r22,24(sp)
 800e5f0:	dd400517 	ldw	r21,20(sp)
 800e5f4:	dd000417 	ldw	r20,16(sp)
 800e5f8:	dcc00317 	ldw	r19,12(sp)
 800e5fc:	dc800217 	ldw	r18,8(sp)
 800e600:	dc400117 	ldw	r17,4(sp)
 800e604:	dc000017 	ldw	r16,0(sp)
 800e608:	dec00a04 	addi	sp,sp,40
 800e60c:	800c7c81 	jmpi	800c7c8 <_malloc_r>
 800e610:	a8c00017 	ldw	r3,0(r21)
 800e614:	90c00015 	stw	r3,0(r18)
 800e618:	a8c00117 	ldw	r3,4(r21)
 800e61c:	90c00115 	stw	r3,4(r18)
 800e620:	00c006c4 	movi	r3,27
 800e624:	19804536 	bltu	r3,r6,800e73c <_realloc_r+0x470>
 800e628:	90800204 	addi	r2,r18,8
 800e62c:	a8c00204 	addi	r3,r21,8
 800e630:	003f6306 	br	800e3c0 <__alt_data_end+0xf800e3c0>
 800e634:	9005883a 	mov	r2,r18
 800e638:	a8c00017 	ldw	r3,0(r21)
 800e63c:	b821883a 	mov	r16,r23
 800e640:	b027883a 	mov	r19,r22
 800e644:	10c00015 	stw	r3,0(r2)
 800e648:	a8c00117 	ldw	r3,4(r21)
 800e64c:	10c00115 	stw	r3,4(r2)
 800e650:	a8c00217 	ldw	r3,8(r21)
 800e654:	10c00215 	stw	r3,8(r2)
 800e658:	003f6a06 	br	800e404 <__alt_data_end+0xf800e404>
 800e65c:	9c67883a 	add	r19,r19,r17
 800e660:	4445c83a 	sub	r2,r8,r17
 800e664:	e4c00215 	stw	r19,8(fp)
 800e668:	10800054 	ori	r2,r2,1
 800e66c:	98800115 	stw	r2,4(r19)
 800e670:	a8bfff17 	ldw	r2,-4(r21)
 800e674:	a009883a 	mov	r4,r20
 800e678:	1080004c 	andi	r2,r2,1
 800e67c:	1462b03a 	or	r17,r2,r17
 800e680:	ac7fff15 	stw	r17,-4(r21)
 800e684:	80145780 	call	8014578 <__malloc_unlock>
 800e688:	a805883a 	mov	r2,r21
 800e68c:	003f6b06 	br	800e43c <__alt_data_end+0xf800e43c>
 800e690:	a80b883a 	mov	r5,r21
 800e694:	9009883a 	mov	r4,r18
 800e698:	800d0b80 	call	800d0b8 <memmove>
 800e69c:	003f4e06 	br	800e3d8 <__alt_data_end+0xf800e3d8>
 800e6a0:	89000404 	addi	r4,r17,16
 800e6a4:	b93fbc16 	blt	r23,r4,800e598 <__alt_data_end+0xf800e598>
 800e6a8:	b0800317 	ldw	r2,12(r22)
 800e6ac:	b0c00217 	ldw	r3,8(r22)
 800e6b0:	81bfff04 	addi	r6,r16,-4
 800e6b4:	01000904 	movi	r4,36
 800e6b8:	18800315 	stw	r2,12(r3)
 800e6bc:	10c00215 	stw	r3,8(r2)
 800e6c0:	b4800204 	addi	r18,r22,8
 800e6c4:	21804336 	bltu	r4,r6,800e7d4 <_realloc_r+0x508>
 800e6c8:	008004c4 	movi	r2,19
 800e6cc:	11803f2e 	bgeu	r2,r6,800e7cc <_realloc_r+0x500>
 800e6d0:	a8800017 	ldw	r2,0(r21)
 800e6d4:	b0800215 	stw	r2,8(r22)
 800e6d8:	a8800117 	ldw	r2,4(r21)
 800e6dc:	b0800315 	stw	r2,12(r22)
 800e6e0:	008006c4 	movi	r2,27
 800e6e4:	11803f36 	bltu	r2,r6,800e7e4 <_realloc_r+0x518>
 800e6e8:	b0800404 	addi	r2,r22,16
 800e6ec:	ad400204 	addi	r21,r21,8
 800e6f0:	a8c00017 	ldw	r3,0(r21)
 800e6f4:	10c00015 	stw	r3,0(r2)
 800e6f8:	a8c00117 	ldw	r3,4(r21)
 800e6fc:	10c00115 	stw	r3,4(r2)
 800e700:	a8c00217 	ldw	r3,8(r21)
 800e704:	10c00215 	stw	r3,8(r2)
 800e708:	b447883a 	add	r3,r22,r17
 800e70c:	bc45c83a 	sub	r2,r23,r17
 800e710:	e0c00215 	stw	r3,8(fp)
 800e714:	10800054 	ori	r2,r2,1
 800e718:	18800115 	stw	r2,4(r3)
 800e71c:	b0800117 	ldw	r2,4(r22)
 800e720:	a009883a 	mov	r4,r20
 800e724:	1080004c 	andi	r2,r2,1
 800e728:	1462b03a 	or	r17,r2,r17
 800e72c:	b4400115 	stw	r17,4(r22)
 800e730:	80145780 	call	8014578 <__malloc_unlock>
 800e734:	9005883a 	mov	r2,r18
 800e738:	003f4006 	br	800e43c <__alt_data_end+0xf800e43c>
 800e73c:	a8c00217 	ldw	r3,8(r21)
 800e740:	90c00215 	stw	r3,8(r18)
 800e744:	a8c00317 	ldw	r3,12(r21)
 800e748:	90c00315 	stw	r3,12(r18)
 800e74c:	30801126 	beq	r6,r2,800e794 <_realloc_r+0x4c8>
 800e750:	90800404 	addi	r2,r18,16
 800e754:	a8c00404 	addi	r3,r21,16
 800e758:	003f1906 	br	800e3c0 <__alt_data_end+0xf800e3c0>
 800e75c:	90ffff17 	ldw	r3,-4(r18)
 800e760:	00bfff04 	movi	r2,-4
 800e764:	a825883a 	mov	r18,r21
 800e768:	1884703a 	and	r2,r3,r2
 800e76c:	80a1883a 	add	r16,r16,r2
 800e770:	003f2406 	br	800e404 <__alt_data_end+0xf800e404>
 800e774:	a8800217 	ldw	r2,8(r21)
 800e778:	b0800415 	stw	r2,16(r22)
 800e77c:	a8800317 	ldw	r2,12(r21)
 800e780:	b0800515 	stw	r2,20(r22)
 800e784:	31000a26 	beq	r6,r4,800e7b0 <_realloc_r+0x4e4>
 800e788:	b0800604 	addi	r2,r22,24
 800e78c:	ad400404 	addi	r21,r21,16
 800e790:	003fa906 	br	800e638 <__alt_data_end+0xf800e638>
 800e794:	a9000417 	ldw	r4,16(r21)
 800e798:	90800604 	addi	r2,r18,24
 800e79c:	a8c00604 	addi	r3,r21,24
 800e7a0:	91000415 	stw	r4,16(r18)
 800e7a4:	a9000517 	ldw	r4,20(r21)
 800e7a8:	91000515 	stw	r4,20(r18)
 800e7ac:	003f0406 	br	800e3c0 <__alt_data_end+0xf800e3c0>
 800e7b0:	a8c00417 	ldw	r3,16(r21)
 800e7b4:	ad400604 	addi	r21,r21,24
 800e7b8:	b0800804 	addi	r2,r22,32
 800e7bc:	b0c00615 	stw	r3,24(r22)
 800e7c0:	a8ffff17 	ldw	r3,-4(r21)
 800e7c4:	b0c00715 	stw	r3,28(r22)
 800e7c8:	003f9b06 	br	800e638 <__alt_data_end+0xf800e638>
 800e7cc:	9005883a 	mov	r2,r18
 800e7d0:	003fc706 	br	800e6f0 <__alt_data_end+0xf800e6f0>
 800e7d4:	a80b883a 	mov	r5,r21
 800e7d8:	9009883a 	mov	r4,r18
 800e7dc:	800d0b80 	call	800d0b8 <memmove>
 800e7e0:	003fc906 	br	800e708 <__alt_data_end+0xf800e708>
 800e7e4:	a8800217 	ldw	r2,8(r21)
 800e7e8:	b0800415 	stw	r2,16(r22)
 800e7ec:	a8800317 	ldw	r2,12(r21)
 800e7f0:	b0800515 	stw	r2,20(r22)
 800e7f4:	31000726 	beq	r6,r4,800e814 <_realloc_r+0x548>
 800e7f8:	b0800604 	addi	r2,r22,24
 800e7fc:	ad400404 	addi	r21,r21,16
 800e800:	003fbb06 	br	800e6f0 <__alt_data_end+0xf800e6f0>
 800e804:	a009883a 	mov	r4,r20
 800e808:	80145780 	call	8014578 <__malloc_unlock>
 800e80c:	0005883a 	mov	r2,zero
 800e810:	003f0a06 	br	800e43c <__alt_data_end+0xf800e43c>
 800e814:	a8c00417 	ldw	r3,16(r21)
 800e818:	ad400604 	addi	r21,r21,24
 800e81c:	b0800804 	addi	r2,r22,32
 800e820:	b0c00615 	stw	r3,24(r22)
 800e824:	a8ffff17 	ldw	r3,-4(r21)
 800e828:	b0c00715 	stw	r3,28(r22)
 800e82c:	003fb006 	br	800e6f0 <__alt_data_end+0xf800e6f0>

0800e830 <__fpclassifyd>:
 800e830:	00a00034 	movhi	r2,32768
 800e834:	10bfffc4 	addi	r2,r2,-1
 800e838:	2884703a 	and	r2,r5,r2
 800e83c:	10000726 	beq	r2,zero,800e85c <__fpclassifyd+0x2c>
 800e840:	00fffc34 	movhi	r3,65520
 800e844:	019ff834 	movhi	r6,32736
 800e848:	28c7883a 	add	r3,r5,r3
 800e84c:	31bfffc4 	addi	r6,r6,-1
 800e850:	30c00536 	bltu	r6,r3,800e868 <__fpclassifyd+0x38>
 800e854:	00800104 	movi	r2,4
 800e858:	f800283a 	ret
 800e85c:	2000021e 	bne	r4,zero,800e868 <__fpclassifyd+0x38>
 800e860:	00800084 	movi	r2,2
 800e864:	f800283a 	ret
 800e868:	00dffc34 	movhi	r3,32752
 800e86c:	019ff834 	movhi	r6,32736
 800e870:	28cb883a 	add	r5,r5,r3
 800e874:	31bfffc4 	addi	r6,r6,-1
 800e878:	317ff62e 	bgeu	r6,r5,800e854 <__alt_data_end+0xf800e854>
 800e87c:	01400434 	movhi	r5,16
 800e880:	297fffc4 	addi	r5,r5,-1
 800e884:	28800236 	bltu	r5,r2,800e890 <__fpclassifyd+0x60>
 800e888:	008000c4 	movi	r2,3
 800e88c:	f800283a 	ret
 800e890:	10c00226 	beq	r2,r3,800e89c <__fpclassifyd+0x6c>
 800e894:	0005883a 	mov	r2,zero
 800e898:	f800283a 	ret
 800e89c:	2005003a 	cmpeq	r2,r4,zero
 800e8a0:	f800283a 	ret

0800e8a4 <_sbrk_r>:
 800e8a4:	defffd04 	addi	sp,sp,-12
 800e8a8:	dc000015 	stw	r16,0(sp)
 800e8ac:	040200b4 	movhi	r16,2050
 800e8b0:	dc400115 	stw	r17,4(sp)
 800e8b4:	8427f704 	addi	r16,r16,-24612
 800e8b8:	2023883a 	mov	r17,r4
 800e8bc:	2809883a 	mov	r4,r5
 800e8c0:	dfc00215 	stw	ra,8(sp)
 800e8c4:	80000015 	stw	zero,0(r16)
 800e8c8:	80147600 	call	8014760 <sbrk>
 800e8cc:	00ffffc4 	movi	r3,-1
 800e8d0:	10c00526 	beq	r2,r3,800e8e8 <_sbrk_r+0x44>
 800e8d4:	dfc00217 	ldw	ra,8(sp)
 800e8d8:	dc400117 	ldw	r17,4(sp)
 800e8dc:	dc000017 	ldw	r16,0(sp)
 800e8e0:	dec00304 	addi	sp,sp,12
 800e8e4:	f800283a 	ret
 800e8e8:	80c00017 	ldw	r3,0(r16)
 800e8ec:	183ff926 	beq	r3,zero,800e8d4 <__alt_data_end+0xf800e8d4>
 800e8f0:	88c00015 	stw	r3,0(r17)
 800e8f4:	003ff706 	br	800e8d4 <__alt_data_end+0xf800e8d4>

0800e8f8 <__sread>:
 800e8f8:	defffe04 	addi	sp,sp,-8
 800e8fc:	dc000015 	stw	r16,0(sp)
 800e900:	2821883a 	mov	r16,r5
 800e904:	2940038f 	ldh	r5,14(r5)
 800e908:	dfc00115 	stw	ra,4(sp)
 800e90c:	80107b40 	call	80107b4 <_read_r>
 800e910:	10000716 	blt	r2,zero,800e930 <__sread+0x38>
 800e914:	80c01417 	ldw	r3,80(r16)
 800e918:	1887883a 	add	r3,r3,r2
 800e91c:	80c01415 	stw	r3,80(r16)
 800e920:	dfc00117 	ldw	ra,4(sp)
 800e924:	dc000017 	ldw	r16,0(sp)
 800e928:	dec00204 	addi	sp,sp,8
 800e92c:	f800283a 	ret
 800e930:	80c0030b 	ldhu	r3,12(r16)
 800e934:	18fbffcc 	andi	r3,r3,61439
 800e938:	80c0030d 	sth	r3,12(r16)
 800e93c:	dfc00117 	ldw	ra,4(sp)
 800e940:	dc000017 	ldw	r16,0(sp)
 800e944:	dec00204 	addi	sp,sp,8
 800e948:	f800283a 	ret

0800e94c <__seofread>:
 800e94c:	0005883a 	mov	r2,zero
 800e950:	f800283a 	ret

0800e954 <__swrite>:
 800e954:	2880030b 	ldhu	r2,12(r5)
 800e958:	defffb04 	addi	sp,sp,-20
 800e95c:	dcc00315 	stw	r19,12(sp)
 800e960:	dc800215 	stw	r18,8(sp)
 800e964:	dc400115 	stw	r17,4(sp)
 800e968:	dc000015 	stw	r16,0(sp)
 800e96c:	dfc00415 	stw	ra,16(sp)
 800e970:	10c0400c 	andi	r3,r2,256
 800e974:	2821883a 	mov	r16,r5
 800e978:	2023883a 	mov	r17,r4
 800e97c:	3025883a 	mov	r18,r6
 800e980:	3827883a 	mov	r19,r7
 800e984:	18000526 	beq	r3,zero,800e99c <__swrite+0x48>
 800e988:	2940038f 	ldh	r5,14(r5)
 800e98c:	01c00084 	movi	r7,2
 800e990:	000d883a 	mov	r6,zero
 800e994:	80107540 	call	8010754 <_lseek_r>
 800e998:	8080030b 	ldhu	r2,12(r16)
 800e99c:	8140038f 	ldh	r5,14(r16)
 800e9a0:	10bbffcc 	andi	r2,r2,61439
 800e9a4:	980f883a 	mov	r7,r19
 800e9a8:	900d883a 	mov	r6,r18
 800e9ac:	8809883a 	mov	r4,r17
 800e9b0:	8080030d 	sth	r2,12(r16)
 800e9b4:	dfc00417 	ldw	ra,16(sp)
 800e9b8:	dcc00317 	ldw	r19,12(sp)
 800e9bc:	dc800217 	ldw	r18,8(sp)
 800e9c0:	dc400117 	ldw	r17,4(sp)
 800e9c4:	dc000017 	ldw	r16,0(sp)
 800e9c8:	dec00504 	addi	sp,sp,20
 800e9cc:	80102081 	jmpi	8010208 <_write_r>

0800e9d0 <__sseek>:
 800e9d0:	defffe04 	addi	sp,sp,-8
 800e9d4:	dc000015 	stw	r16,0(sp)
 800e9d8:	2821883a 	mov	r16,r5
 800e9dc:	2940038f 	ldh	r5,14(r5)
 800e9e0:	dfc00115 	stw	ra,4(sp)
 800e9e4:	80107540 	call	8010754 <_lseek_r>
 800e9e8:	00ffffc4 	movi	r3,-1
 800e9ec:	10c00826 	beq	r2,r3,800ea10 <__sseek+0x40>
 800e9f0:	80c0030b 	ldhu	r3,12(r16)
 800e9f4:	80801415 	stw	r2,80(r16)
 800e9f8:	18c40014 	ori	r3,r3,4096
 800e9fc:	80c0030d 	sth	r3,12(r16)
 800ea00:	dfc00117 	ldw	ra,4(sp)
 800ea04:	dc000017 	ldw	r16,0(sp)
 800ea08:	dec00204 	addi	sp,sp,8
 800ea0c:	f800283a 	ret
 800ea10:	80c0030b 	ldhu	r3,12(r16)
 800ea14:	18fbffcc 	andi	r3,r3,61439
 800ea18:	80c0030d 	sth	r3,12(r16)
 800ea1c:	dfc00117 	ldw	ra,4(sp)
 800ea20:	dc000017 	ldw	r16,0(sp)
 800ea24:	dec00204 	addi	sp,sp,8
 800ea28:	f800283a 	ret

0800ea2c <__sclose>:
 800ea2c:	2940038f 	ldh	r5,14(r5)
 800ea30:	80102681 	jmpi	8010268 <_close_r>

0800ea34 <strcmp>:
 800ea34:	2144b03a 	or	r2,r4,r5
 800ea38:	108000cc 	andi	r2,r2,3
 800ea3c:	1000171e 	bne	r2,zero,800ea9c <strcmp+0x68>
 800ea40:	20800017 	ldw	r2,0(r4)
 800ea44:	28c00017 	ldw	r3,0(r5)
 800ea48:	10c0141e 	bne	r2,r3,800ea9c <strcmp+0x68>
 800ea4c:	027fbff4 	movhi	r9,65279
 800ea50:	4a7fbfc4 	addi	r9,r9,-257
 800ea54:	0086303a 	nor	r3,zero,r2
 800ea58:	02202074 	movhi	r8,32897
 800ea5c:	1245883a 	add	r2,r2,r9
 800ea60:	42202004 	addi	r8,r8,-32640
 800ea64:	10c4703a 	and	r2,r2,r3
 800ea68:	1204703a 	and	r2,r2,r8
 800ea6c:	10000226 	beq	r2,zero,800ea78 <strcmp+0x44>
 800ea70:	00002306 	br	800eb00 <strcmp+0xcc>
 800ea74:	1000221e 	bne	r2,zero,800eb00 <strcmp+0xcc>
 800ea78:	21000104 	addi	r4,r4,4
 800ea7c:	20c00017 	ldw	r3,0(r4)
 800ea80:	29400104 	addi	r5,r5,4
 800ea84:	29800017 	ldw	r6,0(r5)
 800ea88:	1a4f883a 	add	r7,r3,r9
 800ea8c:	00c4303a 	nor	r2,zero,r3
 800ea90:	3884703a 	and	r2,r7,r2
 800ea94:	1204703a 	and	r2,r2,r8
 800ea98:	19bff626 	beq	r3,r6,800ea74 <__alt_data_end+0xf800ea74>
 800ea9c:	20800003 	ldbu	r2,0(r4)
 800eaa0:	10c03fcc 	andi	r3,r2,255
 800eaa4:	18c0201c 	xori	r3,r3,128
 800eaa8:	18ffe004 	addi	r3,r3,-128
 800eaac:	18000c26 	beq	r3,zero,800eae0 <strcmp+0xac>
 800eab0:	29800007 	ldb	r6,0(r5)
 800eab4:	19800326 	beq	r3,r6,800eac4 <strcmp+0x90>
 800eab8:	00001306 	br	800eb08 <strcmp+0xd4>
 800eabc:	29800007 	ldb	r6,0(r5)
 800eac0:	11800b1e 	bne	r2,r6,800eaf0 <strcmp+0xbc>
 800eac4:	21000044 	addi	r4,r4,1
 800eac8:	20c00003 	ldbu	r3,0(r4)
 800eacc:	29400044 	addi	r5,r5,1
 800ead0:	18803fcc 	andi	r2,r3,255
 800ead4:	1080201c 	xori	r2,r2,128
 800ead8:	10bfe004 	addi	r2,r2,-128
 800eadc:	103ff71e 	bne	r2,zero,800eabc <__alt_data_end+0xf800eabc>
 800eae0:	0007883a 	mov	r3,zero
 800eae4:	28800003 	ldbu	r2,0(r5)
 800eae8:	1885c83a 	sub	r2,r3,r2
 800eaec:	f800283a 	ret
 800eaf0:	28800003 	ldbu	r2,0(r5)
 800eaf4:	18c03fcc 	andi	r3,r3,255
 800eaf8:	1885c83a 	sub	r2,r3,r2
 800eafc:	f800283a 	ret
 800eb00:	0005883a 	mov	r2,zero
 800eb04:	f800283a 	ret
 800eb08:	10c03fcc 	andi	r3,r2,255
 800eb0c:	003ff506 	br	800eae4 <__alt_data_end+0xf800eae4>

0800eb10 <__sprint_r.part.0>:
 800eb10:	28801917 	ldw	r2,100(r5)
 800eb14:	defff604 	addi	sp,sp,-40
 800eb18:	dd400515 	stw	r21,20(sp)
 800eb1c:	dfc00915 	stw	ra,36(sp)
 800eb20:	df000815 	stw	fp,32(sp)
 800eb24:	ddc00715 	stw	r23,28(sp)
 800eb28:	dd800615 	stw	r22,24(sp)
 800eb2c:	dd000415 	stw	r20,16(sp)
 800eb30:	dcc00315 	stw	r19,12(sp)
 800eb34:	dc800215 	stw	r18,8(sp)
 800eb38:	dc400115 	stw	r17,4(sp)
 800eb3c:	dc000015 	stw	r16,0(sp)
 800eb40:	1088000c 	andi	r2,r2,8192
 800eb44:	302b883a 	mov	r21,r6
 800eb48:	10002e26 	beq	r2,zero,800ec04 <__sprint_r.part.0+0xf4>
 800eb4c:	30800217 	ldw	r2,8(r6)
 800eb50:	35800017 	ldw	r22,0(r6)
 800eb54:	10002926 	beq	r2,zero,800ebfc <__sprint_r.part.0+0xec>
 800eb58:	2827883a 	mov	r19,r5
 800eb5c:	2029883a 	mov	r20,r4
 800eb60:	b5c00104 	addi	r23,r22,4
 800eb64:	04bfffc4 	movi	r18,-1
 800eb68:	bc400017 	ldw	r17,0(r23)
 800eb6c:	b4000017 	ldw	r16,0(r22)
 800eb70:	0039883a 	mov	fp,zero
 800eb74:	8822d0ba 	srli	r17,r17,2
 800eb78:	8800031e 	bne	r17,zero,800eb88 <__sprint_r.part.0+0x78>
 800eb7c:	00001806 	br	800ebe0 <__sprint_r.part.0+0xd0>
 800eb80:	84000104 	addi	r16,r16,4
 800eb84:	8f001526 	beq	r17,fp,800ebdc <__sprint_r.part.0+0xcc>
 800eb88:	81400017 	ldw	r5,0(r16)
 800eb8c:	980d883a 	mov	r6,r19
 800eb90:	a009883a 	mov	r4,r20
 800eb94:	80106000 	call	8010600 <_fputwc_r>
 800eb98:	e7000044 	addi	fp,fp,1
 800eb9c:	14bff81e 	bne	r2,r18,800eb80 <__alt_data_end+0xf800eb80>
 800eba0:	9005883a 	mov	r2,r18
 800eba4:	a8000215 	stw	zero,8(r21)
 800eba8:	a8000115 	stw	zero,4(r21)
 800ebac:	dfc00917 	ldw	ra,36(sp)
 800ebb0:	df000817 	ldw	fp,32(sp)
 800ebb4:	ddc00717 	ldw	r23,28(sp)
 800ebb8:	dd800617 	ldw	r22,24(sp)
 800ebbc:	dd400517 	ldw	r21,20(sp)
 800ebc0:	dd000417 	ldw	r20,16(sp)
 800ebc4:	dcc00317 	ldw	r19,12(sp)
 800ebc8:	dc800217 	ldw	r18,8(sp)
 800ebcc:	dc400117 	ldw	r17,4(sp)
 800ebd0:	dc000017 	ldw	r16,0(sp)
 800ebd4:	dec00a04 	addi	sp,sp,40
 800ebd8:	f800283a 	ret
 800ebdc:	a8800217 	ldw	r2,8(r21)
 800ebe0:	8c63883a 	add	r17,r17,r17
 800ebe4:	8c63883a 	add	r17,r17,r17
 800ebe8:	1445c83a 	sub	r2,r2,r17
 800ebec:	a8800215 	stw	r2,8(r21)
 800ebf0:	b5800204 	addi	r22,r22,8
 800ebf4:	bdc00204 	addi	r23,r23,8
 800ebf8:	103fdb1e 	bne	r2,zero,800eb68 <__alt_data_end+0xf800eb68>
 800ebfc:	0005883a 	mov	r2,zero
 800ec00:	003fe806 	br	800eba4 <__alt_data_end+0xf800eba4>
 800ec04:	800bee00 	call	800bee0 <__sfvwrite_r>
 800ec08:	003fe606 	br	800eba4 <__alt_data_end+0xf800eba4>

0800ec0c <__sprint_r>:
 800ec0c:	30c00217 	ldw	r3,8(r6)
 800ec10:	18000126 	beq	r3,zero,800ec18 <__sprint_r+0xc>
 800ec14:	800eb101 	jmpi	800eb10 <__sprint_r.part.0>
 800ec18:	30000115 	stw	zero,4(r6)
 800ec1c:	0005883a 	mov	r2,zero
 800ec20:	f800283a 	ret

0800ec24 <___vfiprintf_internal_r>:
 800ec24:	deffca04 	addi	sp,sp,-216
 800ec28:	dd403115 	stw	r21,196(sp)
 800ec2c:	dfc03515 	stw	ra,212(sp)
 800ec30:	df003415 	stw	fp,208(sp)
 800ec34:	ddc03315 	stw	r23,204(sp)
 800ec38:	dd803215 	stw	r22,200(sp)
 800ec3c:	dd003015 	stw	r20,192(sp)
 800ec40:	dcc02f15 	stw	r19,188(sp)
 800ec44:	dc802e15 	stw	r18,184(sp)
 800ec48:	dc402d15 	stw	r17,180(sp)
 800ec4c:	dc002c15 	stw	r16,176(sp)
 800ec50:	d9002115 	stw	r4,132(sp)
 800ec54:	d9402015 	stw	r5,128(sp)
 800ec58:	d9c02215 	stw	r7,136(sp)
 800ec5c:	302b883a 	mov	r21,r6
 800ec60:	20000226 	beq	r4,zero,800ec6c <___vfiprintf_internal_r+0x48>
 800ec64:	20800e17 	ldw	r2,56(r4)
 800ec68:	1000cf26 	beq	r2,zero,800efa8 <___vfiprintf_internal_r+0x384>
 800ec6c:	d8c02017 	ldw	r3,128(sp)
 800ec70:	1880030b 	ldhu	r2,12(r3)
 800ec74:	10c8000c 	andi	r3,r2,8192
 800ec78:	1800071e 	bne	r3,zero,800ec98 <___vfiprintf_internal_r+0x74>
 800ec7c:	d9402017 	ldw	r5,128(sp)
 800ec80:	00f7ffc4 	movi	r3,-8193
 800ec84:	10880014 	ori	r2,r2,8192
 800ec88:	29001917 	ldw	r4,100(r5)
 800ec8c:	2880030d 	sth	r2,12(r5)
 800ec90:	20c6703a 	and	r3,r4,r3
 800ec94:	28c01915 	stw	r3,100(r5)
 800ec98:	10c0020c 	andi	r3,r2,8
 800ec9c:	1800a526 	beq	r3,zero,800ef34 <___vfiprintf_internal_r+0x310>
 800eca0:	d9002017 	ldw	r4,128(sp)
 800eca4:	20c00417 	ldw	r3,16(r4)
 800eca8:	1800a226 	beq	r3,zero,800ef34 <___vfiprintf_internal_r+0x310>
 800ecac:	1080068c 	andi	r2,r2,26
 800ecb0:	00c00284 	movi	r3,10
 800ecb4:	10c0a826 	beq	r2,r3,800ef58 <___vfiprintf_internal_r+0x334>
 800ecb8:	d9001a04 	addi	r4,sp,104
 800ecbc:	d94019c4 	addi	r5,sp,103
 800ecc0:	04820074 	movhi	r18,2049
 800ecc4:	2145c83a 	sub	r2,r4,r5
 800ecc8:	949a1704 	addi	r18,r18,26716
 800eccc:	d9001e15 	stw	r4,120(sp)
 800ecd0:	d9401f15 	stw	r5,124(sp)
 800ecd4:	dec01a15 	stw	sp,104(sp)
 800ecd8:	d8001c15 	stw	zero,112(sp)
 800ecdc:	d8001b15 	stw	zero,108(sp)
 800ece0:	d811883a 	mov	r8,sp
 800ece4:	d8002615 	stw	zero,152(sp)
 800ece8:	d8002415 	stw	zero,144(sp)
 800ecec:	d8802815 	stw	r2,160(sp)
 800ecf0:	a82d883a 	mov	r22,r21
 800ecf4:	b0800007 	ldb	r2,0(r22)
 800ecf8:	10040d26 	beq	r2,zero,800fd30 <___vfiprintf_internal_r+0x110c>
 800ecfc:	00c00944 	movi	r3,37
 800ed00:	b029883a 	mov	r20,r22
 800ed04:	10c0021e 	bne	r2,r3,800ed10 <___vfiprintf_internal_r+0xec>
 800ed08:	00001606 	br	800ed64 <___vfiprintf_internal_r+0x140>
 800ed0c:	10c00326 	beq	r2,r3,800ed1c <___vfiprintf_internal_r+0xf8>
 800ed10:	a5000044 	addi	r20,r20,1
 800ed14:	a0800007 	ldb	r2,0(r20)
 800ed18:	103ffc1e 	bne	r2,zero,800ed0c <__alt_data_end+0xf800ed0c>
 800ed1c:	a5a1c83a 	sub	r16,r20,r22
 800ed20:	80001026 	beq	r16,zero,800ed64 <___vfiprintf_internal_r+0x140>
 800ed24:	d8c01c17 	ldw	r3,112(sp)
 800ed28:	d8801b17 	ldw	r2,108(sp)
 800ed2c:	45800015 	stw	r22,0(r8)
 800ed30:	80c7883a 	add	r3,r16,r3
 800ed34:	10800044 	addi	r2,r2,1
 800ed38:	44000115 	stw	r16,4(r8)
 800ed3c:	d8c01c15 	stw	r3,112(sp)
 800ed40:	d8801b15 	stw	r2,108(sp)
 800ed44:	010001c4 	movi	r4,7
 800ed48:	2080750e 	bge	r4,r2,800ef20 <___vfiprintf_internal_r+0x2fc>
 800ed4c:	1803951e 	bne	r3,zero,800fba4 <___vfiprintf_internal_r+0xf80>
 800ed50:	d8c02417 	ldw	r3,144(sp)
 800ed54:	d8001b15 	stw	zero,108(sp)
 800ed58:	d811883a 	mov	r8,sp
 800ed5c:	1c07883a 	add	r3,r3,r16
 800ed60:	d8c02415 	stw	r3,144(sp)
 800ed64:	a0800007 	ldb	r2,0(r20)
 800ed68:	1002e026 	beq	r2,zero,800f8ec <___vfiprintf_internal_r+0xcc8>
 800ed6c:	a5800044 	addi	r22,r20,1
 800ed70:	a0c00047 	ldb	r3,1(r20)
 800ed74:	d8001d85 	stb	zero,118(sp)
 800ed78:	0027883a 	mov	r19,zero
 800ed7c:	d8002305 	stb	zero,140(sp)
 800ed80:	043fffc4 	movi	r16,-1
 800ed84:	d8002515 	stw	zero,148(sp)
 800ed88:	0023883a 	mov	r17,zero
 800ed8c:	05001604 	movi	r20,88
 800ed90:	05400244 	movi	r21,9
 800ed94:	402f883a 	mov	r23,r8
 800ed98:	b5800044 	addi	r22,r22,1
 800ed9c:	18bff804 	addi	r2,r3,-32
 800eda0:	a0827736 	bltu	r20,r2,800f780 <___vfiprintf_internal_r+0xb5c>
 800eda4:	100490ba 	slli	r2,r2,2
 800eda8:	01020074 	movhi	r4,2049
 800edac:	213b6f04 	addi	r4,r4,-4676
 800edb0:	1105883a 	add	r2,r2,r4
 800edb4:	10800017 	ldw	r2,0(r2)
 800edb8:	1000683a 	jmp	r2
 800edbc:	0800f480 	call	800f48 <__alt_mem_sdram-0x77ff0b8>
 800edc0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edc4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edc8:	0800f49c 	xori	zero,at,978
 800edcc:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edd0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edd4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edd8:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eddc:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ede0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ede4:	0800f6a4 	muli	zero,at,986
 800ede8:	0800f6c8 	cmpgei	zero,at,987
 800edec:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edf0:	0800efc0 	call	800efc <__alt_mem_sdram-0x77ff104>
 800edf4:	0800f6dc 	xori	zero,at,987
 800edf8:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800edfc:	0800f4a8 	cmpgeui	zero,at,978
 800ee00:	0800f4b4 	orhi	zero,at,978
 800ee04:	0800f4b4 	orhi	zero,at,978
 800ee08:	0800f4b4 	orhi	zero,at,978
 800ee0c:	0800f4b4 	orhi	zero,at,978
 800ee10:	0800f4b4 	orhi	zero,at,978
 800ee14:	0800f4b4 	orhi	zero,at,978
 800ee18:	0800f4b4 	orhi	zero,at,978
 800ee1c:	0800f4b4 	orhi	zero,at,978
 800ee20:	0800f4b4 	orhi	zero,at,978
 800ee24:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee28:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee2c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee30:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee34:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee38:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee3c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee40:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee44:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee48:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee4c:	0800f4f4 	orhi	zero,at,979
 800ee50:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee54:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee58:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee5c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee60:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee64:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee68:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee6c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee70:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee74:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee78:	0800f530 	cmpltui	zero,at,980
 800ee7c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee80:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee84:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee88:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee8c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee90:	0800f58c 	andi	zero,at,982
 800ee94:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee98:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ee9c:	0800f600 	call	800f60 <__alt_mem_sdram-0x77ff0a0>
 800eea0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eea4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eea8:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eeac:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eeb0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eeb4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eeb8:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eebc:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eec0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eec4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eec8:	0800f3a8 	cmpgeui	zero,at,974
 800eecc:	0800f3d8 	cmpnei	zero,at,975
 800eed0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eed4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eed8:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eedc:	0800f728 	cmpgeui	zero,at,988
 800eee0:	0800f3d8 	cmpnei	zero,at,975
 800eee4:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eee8:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eeec:	0800f280 	call	800f28 <__alt_mem_sdram-0x77ff0d8>
 800eef0:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800eef4:	0800f294 	ori	zero,at,970
 800eef8:	0800f2cc 	andi	zero,at,971
 800eefc:	0800efcc 	andi	zero,at,959
 800ef00:	0800f274 	orhi	zero,at,969
 800ef04:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ef08:	0800f640 	call	800f64 <__alt_mem_sdram-0x77ff09c>
 800ef0c:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ef10:	0800f68c 	andi	zero,at,986
 800ef14:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ef18:	0800f780 	call	800f78 <__alt_mem_sdram-0x77ff088>
 800ef1c:	0800f350 	cmplti	zero,at,973
 800ef20:	42000204 	addi	r8,r8,8
 800ef24:	d8c02417 	ldw	r3,144(sp)
 800ef28:	1c07883a 	add	r3,r3,r16
 800ef2c:	d8c02415 	stw	r3,144(sp)
 800ef30:	003f8c06 	br	800ed64 <__alt_data_end+0xf800ed64>
 800ef34:	d9402017 	ldw	r5,128(sp)
 800ef38:	d9002117 	ldw	r4,132(sp)
 800ef3c:	8009a500 	call	8009a50 <__swsetup_r>
 800ef40:	1003c11e 	bne	r2,zero,800fe48 <___vfiprintf_internal_r+0x1224>
 800ef44:	d9402017 	ldw	r5,128(sp)
 800ef48:	00c00284 	movi	r3,10
 800ef4c:	2880030b 	ldhu	r2,12(r5)
 800ef50:	1080068c 	andi	r2,r2,26
 800ef54:	10ff581e 	bne	r2,r3,800ecb8 <__alt_data_end+0xf800ecb8>
 800ef58:	d8c02017 	ldw	r3,128(sp)
 800ef5c:	1880038f 	ldh	r2,14(r3)
 800ef60:	103f5516 	blt	r2,zero,800ecb8 <__alt_data_end+0xf800ecb8>
 800ef64:	d9c02217 	ldw	r7,136(sp)
 800ef68:	d9002117 	ldw	r4,132(sp)
 800ef6c:	a80d883a 	mov	r6,r21
 800ef70:	180b883a 	mov	r5,r3
 800ef74:	801014c0 	call	801014c <__sbprintf>
 800ef78:	dfc03517 	ldw	ra,212(sp)
 800ef7c:	df003417 	ldw	fp,208(sp)
 800ef80:	ddc03317 	ldw	r23,204(sp)
 800ef84:	dd803217 	ldw	r22,200(sp)
 800ef88:	dd403117 	ldw	r21,196(sp)
 800ef8c:	dd003017 	ldw	r20,192(sp)
 800ef90:	dcc02f17 	ldw	r19,188(sp)
 800ef94:	dc802e17 	ldw	r18,184(sp)
 800ef98:	dc402d17 	ldw	r17,180(sp)
 800ef9c:	dc002c17 	ldw	r16,176(sp)
 800efa0:	dec03604 	addi	sp,sp,216
 800efa4:	f800283a 	ret
 800efa8:	800ba5c0 	call	800ba5c <__sinit>
 800efac:	003f2f06 	br	800ec6c <__alt_data_end+0xf800ec6c>
 800efb0:	d8c02517 	ldw	r3,148(sp)
 800efb4:	d8802215 	stw	r2,136(sp)
 800efb8:	00c7c83a 	sub	r3,zero,r3
 800efbc:	d8c02515 	stw	r3,148(sp)
 800efc0:	8c400114 	ori	r17,r17,4
 800efc4:	b0c00007 	ldb	r3,0(r22)
 800efc8:	003f7306 	br	800ed98 <__alt_data_end+0xf800ed98>
 800efcc:	00800c04 	movi	r2,48
 800efd0:	d9402217 	ldw	r5,136(sp)
 800efd4:	d8801d05 	stb	r2,116(sp)
 800efd8:	00801e04 	movi	r2,120
 800efdc:	d8801d45 	stb	r2,117(sp)
 800efe0:	d8001d85 	stb	zero,118(sp)
 800efe4:	b811883a 	mov	r8,r23
 800efe8:	28c00104 	addi	r3,r5,4
 800efec:	2cc00017 	ldw	r19,0(r5)
 800eff0:	0029883a 	mov	r20,zero
 800eff4:	88800094 	ori	r2,r17,2
 800eff8:	80032516 	blt	r16,zero,800fc90 <___vfiprintf_internal_r+0x106c>
 800effc:	00bfdfc4 	movi	r2,-129
 800f000:	88a2703a 	and	r17,r17,r2
 800f004:	d8c02215 	stw	r3,136(sp)
 800f008:	8c400094 	ori	r17,r17,2
 800f00c:	98032a1e 	bne	r19,zero,800fcb8 <___vfiprintf_internal_r+0x1094>
 800f010:	00820074 	movhi	r2,2049
 800f014:	1099b604 	addi	r2,r2,26328
 800f018:	d8802615 	stw	r2,152(sp)
 800f01c:	002b883a 	mov	r21,zero
 800f020:	8001741e 	bne	r16,zero,800f5f4 <___vfiprintf_internal_r+0x9d0>
 800f024:	0021883a 	mov	r16,zero
 800f028:	0029883a 	mov	r20,zero
 800f02c:	ddc01a04 	addi	r23,sp,104
 800f030:	8027883a 	mov	r19,r16
 800f034:	8500010e 	bge	r16,r20,800f03c <___vfiprintf_internal_r+0x418>
 800f038:	a027883a 	mov	r19,r20
 800f03c:	ad403fcc 	andi	r21,r21,255
 800f040:	ad40201c 	xori	r21,r21,128
 800f044:	ad7fe004 	addi	r21,r21,-128
 800f048:	a8000126 	beq	r21,zero,800f050 <___vfiprintf_internal_r+0x42c>
 800f04c:	9cc00044 	addi	r19,r19,1
 800f050:	89c0008c 	andi	r7,r17,2
 800f054:	38000126 	beq	r7,zero,800f05c <___vfiprintf_internal_r+0x438>
 800f058:	9cc00084 	addi	r19,r19,2
 800f05c:	88c0210c 	andi	r3,r17,132
 800f060:	1801dd1e 	bne	r3,zero,800f7d8 <___vfiprintf_internal_r+0xbb4>
 800f064:	d9402517 	ldw	r5,148(sp)
 800f068:	2cebc83a 	sub	r21,r5,r19
 800f06c:	0541da0e 	bge	zero,r21,800f7d8 <___vfiprintf_internal_r+0xbb4>
 800f070:	07000404 	movi	fp,16
 800f074:	d8801c17 	ldw	r2,112(sp)
 800f078:	e543be0e 	bge	fp,r21,800ff74 <___vfiprintf_internal_r+0x1350>
 800f07c:	01420074 	movhi	r5,2049
 800f080:	295a1b04 	addi	r5,r5,26732
 800f084:	dc002715 	stw	r16,156(sp)
 800f088:	d9801b17 	ldw	r6,108(sp)
 800f08c:	a821883a 	mov	r16,r21
 800f090:	d9402315 	stw	r5,140(sp)
 800f094:	028001c4 	movi	r10,7
 800f098:	d9c02915 	stw	r7,164(sp)
 800f09c:	182b883a 	mov	r21,r3
 800f0a0:	00000506 	br	800f0b8 <___vfiprintf_internal_r+0x494>
 800f0a4:	31000084 	addi	r4,r6,2
 800f0a8:	42000204 	addi	r8,r8,8
 800f0ac:	180d883a 	mov	r6,r3
 800f0b0:	843ffc04 	addi	r16,r16,-16
 800f0b4:	e4000f0e 	bge	fp,r16,800f0f4 <___vfiprintf_internal_r+0x4d0>
 800f0b8:	01020074 	movhi	r4,2049
 800f0bc:	10800404 	addi	r2,r2,16
 800f0c0:	30c00044 	addi	r3,r6,1
 800f0c4:	211a1b04 	addi	r4,r4,26732
 800f0c8:	41000015 	stw	r4,0(r8)
 800f0cc:	47000115 	stw	fp,4(r8)
 800f0d0:	d8801c15 	stw	r2,112(sp)
 800f0d4:	d8c01b15 	stw	r3,108(sp)
 800f0d8:	50fff20e 	bge	r10,r3,800f0a4 <__alt_data_end+0xf800f0a4>
 800f0dc:	1001b21e 	bne	r2,zero,800f7a8 <___vfiprintf_internal_r+0xb84>
 800f0e0:	843ffc04 	addi	r16,r16,-16
 800f0e4:	000d883a 	mov	r6,zero
 800f0e8:	01000044 	movi	r4,1
 800f0ec:	d811883a 	mov	r8,sp
 800f0f0:	e43ff116 	blt	fp,r16,800f0b8 <__alt_data_end+0xf800f0b8>
 800f0f4:	a807883a 	mov	r3,r21
 800f0f8:	d9c02917 	ldw	r7,164(sp)
 800f0fc:	802b883a 	mov	r21,r16
 800f100:	dc002717 	ldw	r16,156(sp)
 800f104:	d9402317 	ldw	r5,140(sp)
 800f108:	a885883a 	add	r2,r21,r2
 800f10c:	45400115 	stw	r21,4(r8)
 800f110:	41400015 	stw	r5,0(r8)
 800f114:	d8801c15 	stw	r2,112(sp)
 800f118:	d9001b15 	stw	r4,108(sp)
 800f11c:	014001c4 	movi	r5,7
 800f120:	29026216 	blt	r5,r4,800faac <___vfiprintf_internal_r+0xe88>
 800f124:	d9801d87 	ldb	r6,118(sp)
 800f128:	42000204 	addi	r8,r8,8
 800f12c:	21400044 	addi	r5,r4,1
 800f130:	3001ae1e 	bne	r6,zero,800f7ec <___vfiprintf_internal_r+0xbc8>
 800f134:	3801bb26 	beq	r7,zero,800f824 <___vfiprintf_internal_r+0xc00>
 800f138:	d9001d04 	addi	r4,sp,116
 800f13c:	10800084 	addi	r2,r2,2
 800f140:	41000015 	stw	r4,0(r8)
 800f144:	01000084 	movi	r4,2
 800f148:	41000115 	stw	r4,4(r8)
 800f14c:	d8801c15 	stw	r2,112(sp)
 800f150:	d9401b15 	stw	r5,108(sp)
 800f154:	010001c4 	movi	r4,7
 800f158:	2142680e 	bge	r4,r5,800fafc <___vfiprintf_internal_r+0xed8>
 800f15c:	1002b11e 	bne	r2,zero,800fc24 <___vfiprintf_internal_r+0x1000>
 800f160:	01802004 	movi	r6,128
 800f164:	01400044 	movi	r5,1
 800f168:	0009883a 	mov	r4,zero
 800f16c:	d811883a 	mov	r8,sp
 800f170:	1981ae1e 	bne	r3,r6,800f82c <___vfiprintf_internal_r+0xc08>
 800f174:	d8c02517 	ldw	r3,148(sp)
 800f178:	1cf9c83a 	sub	fp,r3,r19
 800f17c:	0701ab0e 	bge	zero,fp,800f82c <___vfiprintf_internal_r+0xc08>
 800f180:	05400404 	movi	r21,16
 800f184:	af03a90e 	bge	r21,fp,801002c <___vfiprintf_internal_r+0x1408>
 800f188:	01420074 	movhi	r5,2049
 800f18c:	295a1704 	addi	r5,r5,26716
 800f190:	d9402315 	stw	r5,140(sp)
 800f194:	01c001c4 	movi	r7,7
 800f198:	00000506 	br	800f1b0 <___vfiprintf_internal_r+0x58c>
 800f19c:	21800084 	addi	r6,r4,2
 800f1a0:	42000204 	addi	r8,r8,8
 800f1a4:	1809883a 	mov	r4,r3
 800f1a8:	e73ffc04 	addi	fp,fp,-16
 800f1ac:	af000d0e 	bge	r21,fp,800f1e4 <___vfiprintf_internal_r+0x5c0>
 800f1b0:	10800404 	addi	r2,r2,16
 800f1b4:	20c00044 	addi	r3,r4,1
 800f1b8:	44800015 	stw	r18,0(r8)
 800f1bc:	45400115 	stw	r21,4(r8)
 800f1c0:	d8801c15 	stw	r2,112(sp)
 800f1c4:	d8c01b15 	stw	r3,108(sp)
 800f1c8:	38fff40e 	bge	r7,r3,800f19c <__alt_data_end+0xf800f19c>
 800f1cc:	10022b1e 	bne	r2,zero,800fa7c <___vfiprintf_internal_r+0xe58>
 800f1d0:	e73ffc04 	addi	fp,fp,-16
 800f1d4:	01800044 	movi	r6,1
 800f1d8:	0009883a 	mov	r4,zero
 800f1dc:	d811883a 	mov	r8,sp
 800f1e0:	af3ff316 	blt	r21,fp,800f1b0 <__alt_data_end+0xf800f1b0>
 800f1e4:	d8c02317 	ldw	r3,140(sp)
 800f1e8:	1705883a 	add	r2,r2,fp
 800f1ec:	47000115 	stw	fp,4(r8)
 800f1f0:	40c00015 	stw	r3,0(r8)
 800f1f4:	d8801c15 	stw	r2,112(sp)
 800f1f8:	d9801b15 	stw	r6,108(sp)
 800f1fc:	00c001c4 	movi	r3,7
 800f200:	19829416 	blt	r3,r6,800fc54 <___vfiprintf_internal_r+0x1030>
 800f204:	8521c83a 	sub	r16,r16,r20
 800f208:	42000204 	addi	r8,r8,8
 800f20c:	31400044 	addi	r5,r6,1
 800f210:	3009883a 	mov	r4,r6
 800f214:	04018716 	blt	zero,r16,800f834 <___vfiprintf_internal_r+0xc10>
 800f218:	a085883a 	add	r2,r20,r2
 800f21c:	45c00015 	stw	r23,0(r8)
 800f220:	45000115 	stw	r20,4(r8)
 800f224:	d8801c15 	stw	r2,112(sp)
 800f228:	d9401b15 	stw	r5,108(sp)
 800f22c:	00c001c4 	movi	r3,7
 800f230:	1941c20e 	bge	r3,r5,800f93c <___vfiprintf_internal_r+0xd18>
 800f234:	1002531e 	bne	r2,zero,800fb84 <___vfiprintf_internal_r+0xf60>
 800f238:	d8001b15 	stw	zero,108(sp)
 800f23c:	8c40010c 	andi	r17,r17,4
 800f240:	88023226 	beq	r17,zero,800fb0c <___vfiprintf_internal_r+0xee8>
 800f244:	d9002517 	ldw	r4,148(sp)
 800f248:	24e3c83a 	sub	r17,r4,r19
 800f24c:	04432916 	blt	zero,r17,800fef4 <___vfiprintf_internal_r+0x12d0>
 800f250:	d8802517 	ldw	r2,148(sp)
 800f254:	14c0010e 	bge	r2,r19,800f25c <___vfiprintf_internal_r+0x638>
 800f258:	9805883a 	mov	r2,r19
 800f25c:	d8c02417 	ldw	r3,144(sp)
 800f260:	1887883a 	add	r3,r3,r2
 800f264:	d8c02415 	stw	r3,144(sp)
 800f268:	d8001b15 	stw	zero,108(sp)
 800f26c:	d811883a 	mov	r8,sp
 800f270:	003ea006 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800f274:	8c400814 	ori	r17,r17,32
 800f278:	b0c00007 	ldb	r3,0(r22)
 800f27c:	003ec606 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f280:	b0c00007 	ldb	r3,0(r22)
 800f284:	00801b04 	movi	r2,108
 800f288:	18832026 	beq	r3,r2,800ff0c <___vfiprintf_internal_r+0x12e8>
 800f28c:	8c400414 	ori	r17,r17,16
 800f290:	003ec106 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f294:	9cc03fcc 	andi	r19,r19,255
 800f298:	b811883a 	mov	r8,r23
 800f29c:	9803981e 	bne	r19,zero,8010100 <___vfiprintf_internal_r+0x14dc>
 800f2a0:	8880080c 	andi	r2,r17,32
 800f2a4:	1002be26 	beq	r2,zero,800fda0 <___vfiprintf_internal_r+0x117c>
 800f2a8:	d9002217 	ldw	r4,136(sp)
 800f2ac:	d9402417 	ldw	r5,144(sp)
 800f2b0:	20800017 	ldw	r2,0(r4)
 800f2b4:	2807d7fa 	srai	r3,r5,31
 800f2b8:	21000104 	addi	r4,r4,4
 800f2bc:	d9002215 	stw	r4,136(sp)
 800f2c0:	11400015 	stw	r5,0(r2)
 800f2c4:	10c00115 	stw	r3,4(r2)
 800f2c8:	003e8a06 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800f2cc:	9cc03fcc 	andi	r19,r19,255
 800f2d0:	b811883a 	mov	r8,r23
 800f2d4:	9803871e 	bne	r19,zero,80100f4 <___vfiprintf_internal_r+0x14d0>
 800f2d8:	8880080c 	andi	r2,r17,32
 800f2dc:	10009a26 	beq	r2,zero,800f548 <___vfiprintf_internal_r+0x924>
 800f2e0:	d9002217 	ldw	r4,136(sp)
 800f2e4:	d8001d85 	stb	zero,118(sp)
 800f2e8:	20800204 	addi	r2,r4,8
 800f2ec:	24c00017 	ldw	r19,0(r4)
 800f2f0:	25000117 	ldw	r20,4(r4)
 800f2f4:	8002a416 	blt	r16,zero,800fd88 <___vfiprintf_internal_r+0x1164>
 800f2f8:	013fdfc4 	movi	r4,-129
 800f2fc:	9d06b03a 	or	r3,r19,r20
 800f300:	d8802215 	stw	r2,136(sp)
 800f304:	8922703a 	and	r17,r17,r4
 800f308:	18009b26 	beq	r3,zero,800f578 <___vfiprintf_internal_r+0x954>
 800f30c:	002b883a 	mov	r21,zero
 800f310:	ddc01a04 	addi	r23,sp,104
 800f314:	9806d0fa 	srli	r3,r19,3
 800f318:	a008977a 	slli	r4,r20,29
 800f31c:	a028d0fa 	srli	r20,r20,3
 800f320:	9cc001cc 	andi	r19,r19,7
 800f324:	98800c04 	addi	r2,r19,48
 800f328:	bdffffc4 	addi	r23,r23,-1
 800f32c:	20e6b03a 	or	r19,r4,r3
 800f330:	b8800005 	stb	r2,0(r23)
 800f334:	9d06b03a 	or	r3,r19,r20
 800f338:	183ff61e 	bne	r3,zero,800f314 <__alt_data_end+0xf800f314>
 800f33c:	88c0004c 	andi	r3,r17,1
 800f340:	18021f1e 	bne	r3,zero,800fbc0 <___vfiprintf_internal_r+0xf9c>
 800f344:	d9401e17 	ldw	r5,120(sp)
 800f348:	2de9c83a 	sub	r20,r5,r23
 800f34c:	003f3806 	br	800f030 <__alt_data_end+0xf800f030>
 800f350:	9cc03fcc 	andi	r19,r19,255
 800f354:	b811883a 	mov	r8,r23
 800f358:	98034f1e 	bne	r19,zero,8010098 <___vfiprintf_internal_r+0x1474>
 800f35c:	00820074 	movhi	r2,2049
 800f360:	1099b604 	addi	r2,r2,26328
 800f364:	d8802615 	stw	r2,152(sp)
 800f368:	8880080c 	andi	r2,r17,32
 800f36c:	1000ac26 	beq	r2,zero,800f620 <___vfiprintf_internal_r+0x9fc>
 800f370:	d9002217 	ldw	r4,136(sp)
 800f374:	24c00017 	ldw	r19,0(r4)
 800f378:	25000117 	ldw	r20,4(r4)
 800f37c:	21000204 	addi	r4,r4,8
 800f380:	d9002215 	stw	r4,136(sp)
 800f384:	8880004c 	andi	r2,r17,1
 800f388:	1001e726 	beq	r2,zero,800fb28 <___vfiprintf_internal_r+0xf04>
 800f38c:	9d04b03a 	or	r2,r19,r20
 800f390:	10025c1e 	bne	r2,zero,800fd04 <___vfiprintf_internal_r+0x10e0>
 800f394:	d8001d85 	stb	zero,118(sp)
 800f398:	80024416 	blt	r16,zero,800fcac <___vfiprintf_internal_r+0x1088>
 800f39c:	00bfdfc4 	movi	r2,-129
 800f3a0:	88a2703a 	and	r17,r17,r2
 800f3a4:	003f1d06 	br	800f01c <__alt_data_end+0xf800f01c>
 800f3a8:	d8c02217 	ldw	r3,136(sp)
 800f3ac:	04c00044 	movi	r19,1
 800f3b0:	b811883a 	mov	r8,r23
 800f3b4:	18800017 	ldw	r2,0(r3)
 800f3b8:	18c00104 	addi	r3,r3,4
 800f3bc:	d8001d85 	stb	zero,118(sp)
 800f3c0:	d8801005 	stb	r2,64(sp)
 800f3c4:	d8c02215 	stw	r3,136(sp)
 800f3c8:	9829883a 	mov	r20,r19
 800f3cc:	ddc01004 	addi	r23,sp,64
 800f3d0:	0021883a 	mov	r16,zero
 800f3d4:	003f1e06 	br	800f050 <__alt_data_end+0xf800f050>
 800f3d8:	9cc03fcc 	andi	r19,r19,255
 800f3dc:	b811883a 	mov	r8,r23
 800f3e0:	9803331e 	bne	r19,zero,80100b0 <___vfiprintf_internal_r+0x148c>
 800f3e4:	8880080c 	andi	r2,r17,32
 800f3e8:	10004826 	beq	r2,zero,800f50c <___vfiprintf_internal_r+0x8e8>
 800f3ec:	d9002217 	ldw	r4,136(sp)
 800f3f0:	20800117 	ldw	r2,4(r4)
 800f3f4:	24c00017 	ldw	r19,0(r4)
 800f3f8:	21000204 	addi	r4,r4,8
 800f3fc:	d9002215 	stw	r4,136(sp)
 800f400:	1029883a 	mov	r20,r2
 800f404:	10024c16 	blt	r2,zero,800fd38 <___vfiprintf_internal_r+0x1114>
 800f408:	dd401d83 	ldbu	r21,118(sp)
 800f40c:	80007116 	blt	r16,zero,800f5d4 <___vfiprintf_internal_r+0x9b0>
 800f410:	00ffdfc4 	movi	r3,-129
 800f414:	9d04b03a 	or	r2,r19,r20
 800f418:	88e2703a 	and	r17,r17,r3
 800f41c:	1000d126 	beq	r2,zero,800f764 <___vfiprintf_internal_r+0xb40>
 800f420:	a0023526 	beq	r20,zero,800fcf8 <___vfiprintf_internal_r+0x10d4>
 800f424:	ddc01a04 	addi	r23,sp,104
 800f428:	4039883a 	mov	fp,r8
 800f42c:	9809883a 	mov	r4,r19
 800f430:	a00b883a 	mov	r5,r20
 800f434:	01800284 	movi	r6,10
 800f438:	000f883a 	mov	r7,zero
 800f43c:	80111500 	call	8011150 <__umoddi3>
 800f440:	10800c04 	addi	r2,r2,48
 800f444:	bdffffc4 	addi	r23,r23,-1
 800f448:	9809883a 	mov	r4,r19
 800f44c:	a00b883a 	mov	r5,r20
 800f450:	b8800005 	stb	r2,0(r23)
 800f454:	01800284 	movi	r6,10
 800f458:	000f883a 	mov	r7,zero
 800f45c:	8010b540 	call	8010b54 <__udivdi3>
 800f460:	1027883a 	mov	r19,r2
 800f464:	10c4b03a 	or	r2,r2,r3
 800f468:	1829883a 	mov	r20,r3
 800f46c:	103fef1e 	bne	r2,zero,800f42c <__alt_data_end+0xf800f42c>
 800f470:	d9001e17 	ldw	r4,120(sp)
 800f474:	e011883a 	mov	r8,fp
 800f478:	25e9c83a 	sub	r20,r4,r23
 800f47c:	003eec06 	br	800f030 <__alt_data_end+0xf800f030>
 800f480:	d8802307 	ldb	r2,140(sp)
 800f484:	1002361e 	bne	r2,zero,800fd60 <___vfiprintf_internal_r+0x113c>
 800f488:	00c00804 	movi	r3,32
 800f48c:	d8c02305 	stb	r3,140(sp)
 800f490:	04c00044 	movi	r19,1
 800f494:	b0c00007 	ldb	r3,0(r22)
 800f498:	003e3f06 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f49c:	8c400054 	ori	r17,r17,1
 800f4a0:	b0c00007 	ldb	r3,0(r22)
 800f4a4:	003e3c06 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f4a8:	8c402014 	ori	r17,r17,128
 800f4ac:	b0c00007 	ldb	r3,0(r22)
 800f4b0:	003e3906 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f4b4:	dc002715 	stw	r16,156(sp)
 800f4b8:	d8002515 	stw	zero,148(sp)
 800f4bc:	1f3ff404 	addi	fp,r3,-48
 800f4c0:	0009883a 	mov	r4,zero
 800f4c4:	b021883a 	mov	r16,r22
 800f4c8:	01400284 	movi	r5,10
 800f4cc:	800722c0 	call	800722c <__mulsi3>
 800f4d0:	80c00007 	ldb	r3,0(r16)
 800f4d4:	e089883a 	add	r4,fp,r2
 800f4d8:	b5800044 	addi	r22,r22,1
 800f4dc:	1f3ff404 	addi	fp,r3,-48
 800f4e0:	b021883a 	mov	r16,r22
 800f4e4:	af3ff82e 	bgeu	r21,fp,800f4c8 <__alt_data_end+0xf800f4c8>
 800f4e8:	d9002515 	stw	r4,148(sp)
 800f4ec:	dc002717 	ldw	r16,156(sp)
 800f4f0:	003e2a06 	br	800ed9c <__alt_data_end+0xf800ed9c>
 800f4f4:	9cc03fcc 	andi	r19,r19,255
 800f4f8:	b811883a 	mov	r8,r23
 800f4fc:	9802e91e 	bne	r19,zero,80100a4 <___vfiprintf_internal_r+0x1480>
 800f500:	8c400414 	ori	r17,r17,16
 800f504:	8880080c 	andi	r2,r17,32
 800f508:	103fb81e 	bne	r2,zero,800f3ec <__alt_data_end+0xf800f3ec>
 800f50c:	8880040c 	andi	r2,r17,16
 800f510:	10022e26 	beq	r2,zero,800fdcc <___vfiprintf_internal_r+0x11a8>
 800f514:	d9402217 	ldw	r5,136(sp)
 800f518:	2cc00017 	ldw	r19,0(r5)
 800f51c:	29400104 	addi	r5,r5,4
 800f520:	d9402215 	stw	r5,136(sp)
 800f524:	9829d7fa 	srai	r20,r19,31
 800f528:	a005883a 	mov	r2,r20
 800f52c:	003fb506 	br	800f404 <__alt_data_end+0xf800f404>
 800f530:	9cc03fcc 	andi	r19,r19,255
 800f534:	b811883a 	mov	r8,r23
 800f538:	9802fa1e 	bne	r19,zero,8010124 <___vfiprintf_internal_r+0x1500>
 800f53c:	8c400414 	ori	r17,r17,16
 800f540:	8880080c 	andi	r2,r17,32
 800f544:	103f661e 	bne	r2,zero,800f2e0 <__alt_data_end+0xf800f2e0>
 800f548:	8880040c 	andi	r2,r17,16
 800f54c:	10020626 	beq	r2,zero,800fd68 <___vfiprintf_internal_r+0x1144>
 800f550:	d9402217 	ldw	r5,136(sp)
 800f554:	d8001d85 	stb	zero,118(sp)
 800f558:	0029883a 	mov	r20,zero
 800f55c:	28800104 	addi	r2,r5,4
 800f560:	2cc00017 	ldw	r19,0(r5)
 800f564:	80020816 	blt	r16,zero,800fd88 <___vfiprintf_internal_r+0x1164>
 800f568:	00ffdfc4 	movi	r3,-129
 800f56c:	d8802215 	stw	r2,136(sp)
 800f570:	88e2703a 	and	r17,r17,r3
 800f574:	983f651e 	bne	r19,zero,800f30c <__alt_data_end+0xf800f30c>
 800f578:	002b883a 	mov	r21,zero
 800f57c:	8002cf26 	beq	r16,zero,80100bc <___vfiprintf_internal_r+0x1498>
 800f580:	0027883a 	mov	r19,zero
 800f584:	0029883a 	mov	r20,zero
 800f588:	003f6106 	br	800f310 <__alt_data_end+0xf800f310>
 800f58c:	9cc03fcc 	andi	r19,r19,255
 800f590:	b811883a 	mov	r8,r23
 800f594:	9802e01e 	bne	r19,zero,8010118 <___vfiprintf_internal_r+0x14f4>
 800f598:	8c400414 	ori	r17,r17,16
 800f59c:	8880080c 	andi	r2,r17,32
 800f5a0:	1000641e 	bne	r2,zero,800f734 <___vfiprintf_internal_r+0xb10>
 800f5a4:	8880040c 	andi	r2,r17,16
 800f5a8:	1001c81e 	bne	r2,zero,800fccc <___vfiprintf_internal_r+0x10a8>
 800f5ac:	8880100c 	andi	r2,r17,64
 800f5b0:	d8001d85 	stb	zero,118(sp)
 800f5b4:	1002281e 	bne	r2,zero,800fe58 <___vfiprintf_internal_r+0x1234>
 800f5b8:	d9002217 	ldw	r4,136(sp)
 800f5bc:	0029883a 	mov	r20,zero
 800f5c0:	20800104 	addi	r2,r4,4
 800f5c4:	24c00017 	ldw	r19,0(r4)
 800f5c8:	8001c60e 	bge	r16,zero,800fce4 <___vfiprintf_internal_r+0x10c0>
 800f5cc:	d8802215 	stw	r2,136(sp)
 800f5d0:	002b883a 	mov	r21,zero
 800f5d4:	9d04b03a 	or	r2,r19,r20
 800f5d8:	103f911e 	bne	r2,zero,800f420 <__alt_data_end+0xf800f420>
 800f5dc:	00800044 	movi	r2,1
 800f5e0:	10803fcc 	andi	r2,r2,255
 800f5e4:	00c00044 	movi	r3,1
 800f5e8:	10c05f26 	beq	r2,r3,800f768 <___vfiprintf_internal_r+0xb44>
 800f5ec:	00c00084 	movi	r3,2
 800f5f0:	10ffe31e 	bne	r2,r3,800f580 <__alt_data_end+0xf800f580>
 800f5f4:	0027883a 	mov	r19,zero
 800f5f8:	0029883a 	mov	r20,zero
 800f5fc:	00015106 	br	800fb44 <___vfiprintf_internal_r+0xf20>
 800f600:	9cc03fcc 	andi	r19,r19,255
 800f604:	b811883a 	mov	r8,r23
 800f608:	9802c01e 	bne	r19,zero,801010c <___vfiprintf_internal_r+0x14e8>
 800f60c:	01420074 	movhi	r5,2049
 800f610:	2959b104 	addi	r5,r5,26308
 800f614:	d9402615 	stw	r5,152(sp)
 800f618:	8880080c 	andi	r2,r17,32
 800f61c:	103f541e 	bne	r2,zero,800f370 <__alt_data_end+0xf800f370>
 800f620:	8880040c 	andi	r2,r17,16
 800f624:	1001f226 	beq	r2,zero,800fdf0 <___vfiprintf_internal_r+0x11cc>
 800f628:	d9402217 	ldw	r5,136(sp)
 800f62c:	0029883a 	mov	r20,zero
 800f630:	2cc00017 	ldw	r19,0(r5)
 800f634:	29400104 	addi	r5,r5,4
 800f638:	d9402215 	stw	r5,136(sp)
 800f63c:	003f5106 	br	800f384 <__alt_data_end+0xf800f384>
 800f640:	d8c02217 	ldw	r3,136(sp)
 800f644:	b811883a 	mov	r8,r23
 800f648:	d8001d85 	stb	zero,118(sp)
 800f64c:	1dc00017 	ldw	r23,0(r3)
 800f650:	1f000104 	addi	fp,r3,4
 800f654:	b8025926 	beq	r23,zero,800ffbc <___vfiprintf_internal_r+0x1398>
 800f658:	80023316 	blt	r16,zero,800ff28 <___vfiprintf_internal_r+0x1304>
 800f65c:	800d883a 	mov	r6,r16
 800f660:	000b883a 	mov	r5,zero
 800f664:	b809883a 	mov	r4,r23
 800f668:	da002a15 	stw	r8,168(sp)
 800f66c:	800cfd40 	call	800cfd4 <memchr>
 800f670:	da002a17 	ldw	r8,168(sp)
 800f674:	10026826 	beq	r2,zero,8010018 <___vfiprintf_internal_r+0x13f4>
 800f678:	15e9c83a 	sub	r20,r2,r23
 800f67c:	dd401d83 	ldbu	r21,118(sp)
 800f680:	df002215 	stw	fp,136(sp)
 800f684:	0021883a 	mov	r16,zero
 800f688:	003e6906 	br	800f030 <__alt_data_end+0xf800f030>
 800f68c:	9cc03fcc 	andi	r19,r19,255
 800f690:	b811883a 	mov	r8,r23
 800f694:	983fc126 	beq	r19,zero,800f59c <__alt_data_end+0xf800f59c>
 800f698:	d8c02303 	ldbu	r3,140(sp)
 800f69c:	d8c01d85 	stb	r3,118(sp)
 800f6a0:	003fbe06 	br	800f59c <__alt_data_end+0xf800f59c>
 800f6a4:	d9002217 	ldw	r4,136(sp)
 800f6a8:	d9402217 	ldw	r5,136(sp)
 800f6ac:	21000017 	ldw	r4,0(r4)
 800f6b0:	28800104 	addi	r2,r5,4
 800f6b4:	d9002515 	stw	r4,148(sp)
 800f6b8:	203e3d16 	blt	r4,zero,800efb0 <__alt_data_end+0xf800efb0>
 800f6bc:	d8802215 	stw	r2,136(sp)
 800f6c0:	b0c00007 	ldb	r3,0(r22)
 800f6c4:	003db406 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f6c8:	00c00ac4 	movi	r3,43
 800f6cc:	d8c02305 	stb	r3,140(sp)
 800f6d0:	04c00044 	movi	r19,1
 800f6d4:	b0c00007 	ldb	r3,0(r22)
 800f6d8:	003daf06 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f6dc:	b0c00007 	ldb	r3,0(r22)
 800f6e0:	01000a84 	movi	r4,42
 800f6e4:	b4000044 	addi	r16,r22,1
 800f6e8:	19025e26 	beq	r3,r4,8010064 <___vfiprintf_internal_r+0x1440>
 800f6ec:	1f3ff404 	addi	fp,r3,-48
 800f6f0:	0009883a 	mov	r4,zero
 800f6f4:	af025236 	bltu	r21,fp,8010040 <___vfiprintf_internal_r+0x141c>
 800f6f8:	01400284 	movi	r5,10
 800f6fc:	800722c0 	call	800722c <__mulsi3>
 800f700:	80c00007 	ldb	r3,0(r16)
 800f704:	1709883a 	add	r4,r2,fp
 800f708:	85800044 	addi	r22,r16,1
 800f70c:	1f3ff404 	addi	fp,r3,-48
 800f710:	b021883a 	mov	r16,r22
 800f714:	af3ff82e 	bgeu	r21,fp,800f6f8 <__alt_data_end+0xf800f6f8>
 800f718:	2021883a 	mov	r16,r4
 800f71c:	203d9f0e 	bge	r4,zero,800ed9c <__alt_data_end+0xf800ed9c>
 800f720:	043fffc4 	movi	r16,-1
 800f724:	003d9d06 	br	800ed9c <__alt_data_end+0xf800ed9c>
 800f728:	8c401014 	ori	r17,r17,64
 800f72c:	b0c00007 	ldb	r3,0(r22)
 800f730:	003d9906 	br	800ed98 <__alt_data_end+0xf800ed98>
 800f734:	d9002217 	ldw	r4,136(sp)
 800f738:	d8001d85 	stb	zero,118(sp)
 800f73c:	20c00204 	addi	r3,r4,8
 800f740:	24c00017 	ldw	r19,0(r4)
 800f744:	25000117 	ldw	r20,4(r4)
 800f748:	8001e716 	blt	r16,zero,800fee8 <___vfiprintf_internal_r+0x12c4>
 800f74c:	013fdfc4 	movi	r4,-129
 800f750:	9d04b03a 	or	r2,r19,r20
 800f754:	d8c02215 	stw	r3,136(sp)
 800f758:	8922703a 	and	r17,r17,r4
 800f75c:	002b883a 	mov	r21,zero
 800f760:	103f2f1e 	bne	r2,zero,800f420 <__alt_data_end+0xf800f420>
 800f764:	803e2f26 	beq	r16,zero,800f024 <__alt_data_end+0xf800f024>
 800f768:	0027883a 	mov	r19,zero
 800f76c:	9cc00c04 	addi	r19,r19,48
 800f770:	dcc019c5 	stb	r19,103(sp)
 800f774:	dd002817 	ldw	r20,160(sp)
 800f778:	ddc019c4 	addi	r23,sp,103
 800f77c:	003e2c06 	br	800f030 <__alt_data_end+0xf800f030>
 800f780:	9cc03fcc 	andi	r19,r19,255
 800f784:	b811883a 	mov	r8,r23
 800f788:	9802571e 	bne	r19,zero,80100e8 <___vfiprintf_internal_r+0x14c4>
 800f78c:	18005726 	beq	r3,zero,800f8ec <___vfiprintf_internal_r+0xcc8>
 800f790:	04c00044 	movi	r19,1
 800f794:	d8c01005 	stb	r3,64(sp)
 800f798:	d8001d85 	stb	zero,118(sp)
 800f79c:	9829883a 	mov	r20,r19
 800f7a0:	ddc01004 	addi	r23,sp,64
 800f7a4:	003f0a06 	br	800f3d0 <__alt_data_end+0xf800f3d0>
 800f7a8:	d9402017 	ldw	r5,128(sp)
 800f7ac:	d9002117 	ldw	r4,132(sp)
 800f7b0:	d9801a04 	addi	r6,sp,104
 800f7b4:	da802a15 	stw	r10,168(sp)
 800f7b8:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800f7bc:	da802a17 	ldw	r10,168(sp)
 800f7c0:	1000501e 	bne	r2,zero,800f904 <___vfiprintf_internal_r+0xce0>
 800f7c4:	d9801b17 	ldw	r6,108(sp)
 800f7c8:	d8801c17 	ldw	r2,112(sp)
 800f7cc:	d811883a 	mov	r8,sp
 800f7d0:	31000044 	addi	r4,r6,1
 800f7d4:	003e3606 	br	800f0b0 <__alt_data_end+0xf800f0b0>
 800f7d8:	d9001b17 	ldw	r4,108(sp)
 800f7dc:	d8801c17 	ldw	r2,112(sp)
 800f7e0:	21400044 	addi	r5,r4,1
 800f7e4:	d9801d87 	ldb	r6,118(sp)
 800f7e8:	303e5226 	beq	r6,zero,800f134 <__alt_data_end+0xf800f134>
 800f7ec:	01800044 	movi	r6,1
 800f7f0:	d9001d84 	addi	r4,sp,118
 800f7f4:	1185883a 	add	r2,r2,r6
 800f7f8:	41000015 	stw	r4,0(r8)
 800f7fc:	41800115 	stw	r6,4(r8)
 800f800:	d8801c15 	stw	r2,112(sp)
 800f804:	d9401b15 	stw	r5,108(sp)
 800f808:	010001c4 	movi	r4,7
 800f80c:	2140b00e 	bge	r4,r5,800fad0 <___vfiprintf_internal_r+0xeac>
 800f810:	1000f61e 	bne	r2,zero,800fbec <___vfiprintf_internal_r+0xfc8>
 800f814:	3800b31e 	bne	r7,zero,800fae4 <___vfiprintf_internal_r+0xec0>
 800f818:	0009883a 	mov	r4,zero
 800f81c:	300b883a 	mov	r5,r6
 800f820:	d811883a 	mov	r8,sp
 800f824:	01802004 	movi	r6,128
 800f828:	19be5226 	beq	r3,r6,800f174 <__alt_data_end+0xf800f174>
 800f82c:	8521c83a 	sub	r16,r16,r20
 800f830:	043e790e 	bge	zero,r16,800f218 <__alt_data_end+0xf800f218>
 800f834:	05400404 	movi	r21,16
 800f838:	ac01b00e 	bge	r21,r16,800fefc <___vfiprintf_internal_r+0x12d8>
 800f83c:	01420074 	movhi	r5,2049
 800f840:	295a1704 	addi	r5,r5,26716
 800f844:	d9402315 	stw	r5,140(sp)
 800f848:	070001c4 	movi	fp,7
 800f84c:	00000506 	br	800f864 <___vfiprintf_internal_r+0xc40>
 800f850:	21400084 	addi	r5,r4,2
 800f854:	42000204 	addi	r8,r8,8
 800f858:	1809883a 	mov	r4,r3
 800f85c:	843ffc04 	addi	r16,r16,-16
 800f860:	ac000d0e 	bge	r21,r16,800f898 <___vfiprintf_internal_r+0xc74>
 800f864:	10800404 	addi	r2,r2,16
 800f868:	20c00044 	addi	r3,r4,1
 800f86c:	44800015 	stw	r18,0(r8)
 800f870:	45400115 	stw	r21,4(r8)
 800f874:	d8801c15 	stw	r2,112(sp)
 800f878:	d8c01b15 	stw	r3,108(sp)
 800f87c:	e0fff40e 	bge	fp,r3,800f850 <__alt_data_end+0xf800f850>
 800f880:	1000101e 	bne	r2,zero,800f8c4 <___vfiprintf_internal_r+0xca0>
 800f884:	843ffc04 	addi	r16,r16,-16
 800f888:	01400044 	movi	r5,1
 800f88c:	0009883a 	mov	r4,zero
 800f890:	d811883a 	mov	r8,sp
 800f894:	ac3ff316 	blt	r21,r16,800f864 <__alt_data_end+0xf800f864>
 800f898:	d8c02317 	ldw	r3,140(sp)
 800f89c:	1405883a 	add	r2,r2,r16
 800f8a0:	44000115 	stw	r16,4(r8)
 800f8a4:	40c00015 	stw	r3,0(r8)
 800f8a8:	d8801c15 	stw	r2,112(sp)
 800f8ac:	d9401b15 	stw	r5,108(sp)
 800f8b0:	00c001c4 	movi	r3,7
 800f8b4:	19401916 	blt	r3,r5,800f91c <___vfiprintf_internal_r+0xcf8>
 800f8b8:	42000204 	addi	r8,r8,8
 800f8bc:	29400044 	addi	r5,r5,1
 800f8c0:	003e5506 	br	800f218 <__alt_data_end+0xf800f218>
 800f8c4:	d9402017 	ldw	r5,128(sp)
 800f8c8:	d9002117 	ldw	r4,132(sp)
 800f8cc:	d9801a04 	addi	r6,sp,104
 800f8d0:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800f8d4:	10000b1e 	bne	r2,zero,800f904 <___vfiprintf_internal_r+0xce0>
 800f8d8:	d9001b17 	ldw	r4,108(sp)
 800f8dc:	d8801c17 	ldw	r2,112(sp)
 800f8e0:	d811883a 	mov	r8,sp
 800f8e4:	21400044 	addi	r5,r4,1
 800f8e8:	003fdc06 	br	800f85c <__alt_data_end+0xf800f85c>
 800f8ec:	d8801c17 	ldw	r2,112(sp)
 800f8f0:	10000426 	beq	r2,zero,800f904 <___vfiprintf_internal_r+0xce0>
 800f8f4:	d9402017 	ldw	r5,128(sp)
 800f8f8:	d9002117 	ldw	r4,132(sp)
 800f8fc:	d9801a04 	addi	r6,sp,104
 800f900:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800f904:	d9402017 	ldw	r5,128(sp)
 800f908:	2880030b 	ldhu	r2,12(r5)
 800f90c:	1080100c 	andi	r2,r2,64
 800f910:	10014d1e 	bne	r2,zero,800fe48 <___vfiprintf_internal_r+0x1224>
 800f914:	d8802417 	ldw	r2,144(sp)
 800f918:	003d9706 	br	800ef78 <__alt_data_end+0xf800ef78>
 800f91c:	1000d21e 	bne	r2,zero,800fc68 <___vfiprintf_internal_r+0x1044>
 800f920:	00c00044 	movi	r3,1
 800f924:	a005883a 	mov	r2,r20
 800f928:	ddc00015 	stw	r23,0(sp)
 800f92c:	dd000115 	stw	r20,4(sp)
 800f930:	dd001c15 	stw	r20,112(sp)
 800f934:	d8c01b15 	stw	r3,108(sp)
 800f938:	d811883a 	mov	r8,sp
 800f93c:	42000204 	addi	r8,r8,8
 800f940:	8c40010c 	andi	r17,r17,4
 800f944:	88004026 	beq	r17,zero,800fa48 <___vfiprintf_internal_r+0xe24>
 800f948:	d9002517 	ldw	r4,148(sp)
 800f94c:	24e3c83a 	sub	r17,r4,r19
 800f950:	04403d0e 	bge	zero,r17,800fa48 <___vfiprintf_internal_r+0xe24>
 800f954:	04000404 	movi	r16,16
 800f958:	8441a90e 	bge	r16,r17,8010000 <___vfiprintf_internal_r+0x13dc>
 800f95c:	00c20074 	movhi	r3,2049
 800f960:	18da1b04 	addi	r3,r3,26732
 800f964:	d9001b17 	ldw	r4,108(sp)
 800f968:	d8c02315 	stw	r3,140(sp)
 800f96c:	050001c4 	movi	r20,7
 800f970:	dd402117 	ldw	r21,132(sp)
 800f974:	ddc02017 	ldw	r23,128(sp)
 800f978:	00000506 	br	800f990 <___vfiprintf_internal_r+0xd6c>
 800f97c:	21400084 	addi	r5,r4,2
 800f980:	42000204 	addi	r8,r8,8
 800f984:	1809883a 	mov	r4,r3
 800f988:	8c7ffc04 	addi	r17,r17,-16
 800f98c:	84400f0e 	bge	r16,r17,800f9cc <___vfiprintf_internal_r+0xda8>
 800f990:	01420074 	movhi	r5,2049
 800f994:	10800404 	addi	r2,r2,16
 800f998:	20c00044 	addi	r3,r4,1
 800f99c:	295a1b04 	addi	r5,r5,26732
 800f9a0:	41400015 	stw	r5,0(r8)
 800f9a4:	44000115 	stw	r16,4(r8)
 800f9a8:	d8801c15 	stw	r2,112(sp)
 800f9ac:	d8c01b15 	stw	r3,108(sp)
 800f9b0:	a0fff20e 	bge	r20,r3,800f97c <__alt_data_end+0xf800f97c>
 800f9b4:	1000141e 	bne	r2,zero,800fa08 <___vfiprintf_internal_r+0xde4>
 800f9b8:	8c7ffc04 	addi	r17,r17,-16
 800f9bc:	01400044 	movi	r5,1
 800f9c0:	0009883a 	mov	r4,zero
 800f9c4:	d811883a 	mov	r8,sp
 800f9c8:	847ff116 	blt	r16,r17,800f990 <__alt_data_end+0xf800f990>
 800f9cc:	d8c02317 	ldw	r3,140(sp)
 800f9d0:	1445883a 	add	r2,r2,r17
 800f9d4:	44400115 	stw	r17,4(r8)
 800f9d8:	40c00015 	stw	r3,0(r8)
 800f9dc:	d8801c15 	stw	r2,112(sp)
 800f9e0:	d9401b15 	stw	r5,108(sp)
 800f9e4:	00c001c4 	movi	r3,7
 800f9e8:	1940170e 	bge	r3,r5,800fa48 <___vfiprintf_internal_r+0xe24>
 800f9ec:	1000101e 	bne	r2,zero,800fa30 <___vfiprintf_internal_r+0xe0c>
 800f9f0:	d8802517 	ldw	r2,148(sp)
 800f9f4:	14c11616 	blt	r2,r19,800fe50 <___vfiprintf_internal_r+0x122c>
 800f9f8:	d9002417 	ldw	r4,144(sp)
 800f9fc:	2089883a 	add	r4,r4,r2
 800fa00:	d9002415 	stw	r4,144(sp)
 800fa04:	003e1806 	br	800f268 <__alt_data_end+0xf800f268>
 800fa08:	d9801a04 	addi	r6,sp,104
 800fa0c:	b80b883a 	mov	r5,r23
 800fa10:	a809883a 	mov	r4,r21
 800fa14:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fa18:	103fba1e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fa1c:	d9001b17 	ldw	r4,108(sp)
 800fa20:	d8801c17 	ldw	r2,112(sp)
 800fa24:	d811883a 	mov	r8,sp
 800fa28:	21400044 	addi	r5,r4,1
 800fa2c:	003fd606 	br	800f988 <__alt_data_end+0xf800f988>
 800fa30:	d9402017 	ldw	r5,128(sp)
 800fa34:	d9002117 	ldw	r4,132(sp)
 800fa38:	d9801a04 	addi	r6,sp,104
 800fa3c:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fa40:	103fb01e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fa44:	d8801c17 	ldw	r2,112(sp)
 800fa48:	d8c02517 	ldw	r3,148(sp)
 800fa4c:	1cc0010e 	bge	r3,r19,800fa54 <___vfiprintf_internal_r+0xe30>
 800fa50:	9807883a 	mov	r3,r19
 800fa54:	d9002417 	ldw	r4,144(sp)
 800fa58:	20c9883a 	add	r4,r4,r3
 800fa5c:	d9002415 	stw	r4,144(sp)
 800fa60:	103e0126 	beq	r2,zero,800f268 <__alt_data_end+0xf800f268>
 800fa64:	d9402017 	ldw	r5,128(sp)
 800fa68:	d9002117 	ldw	r4,132(sp)
 800fa6c:	d9801a04 	addi	r6,sp,104
 800fa70:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fa74:	103dfc26 	beq	r2,zero,800f268 <__alt_data_end+0xf800f268>
 800fa78:	003fa206 	br	800f904 <__alt_data_end+0xf800f904>
 800fa7c:	d9402017 	ldw	r5,128(sp)
 800fa80:	d9002117 	ldw	r4,132(sp)
 800fa84:	d9801a04 	addi	r6,sp,104
 800fa88:	d9c02b15 	stw	r7,172(sp)
 800fa8c:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fa90:	d9c02b17 	ldw	r7,172(sp)
 800fa94:	103f9b1e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fa98:	d9001b17 	ldw	r4,108(sp)
 800fa9c:	d8801c17 	ldw	r2,112(sp)
 800faa0:	d811883a 	mov	r8,sp
 800faa4:	21800044 	addi	r6,r4,1
 800faa8:	003dbf06 	br	800f1a8 <__alt_data_end+0xf800f1a8>
 800faac:	1000d81e 	bne	r2,zero,800fe10 <___vfiprintf_internal_r+0x11ec>
 800fab0:	d9001d87 	ldb	r4,118(sp)
 800fab4:	20000a26 	beq	r4,zero,800fae0 <___vfiprintf_internal_r+0xebc>
 800fab8:	00800044 	movi	r2,1
 800fabc:	d9001d84 	addi	r4,sp,118
 800fac0:	100b883a 	mov	r5,r2
 800fac4:	d9000015 	stw	r4,0(sp)
 800fac8:	d8800115 	stw	r2,4(sp)
 800facc:	d811883a 	mov	r8,sp
 800fad0:	2809883a 	mov	r4,r5
 800fad4:	42000204 	addi	r8,r8,8
 800fad8:	29400044 	addi	r5,r5,1
 800fadc:	003d9506 	br	800f134 <__alt_data_end+0xf800f134>
 800fae0:	3800fd26 	beq	r7,zero,800fed8 <___vfiprintf_internal_r+0x12b4>
 800fae4:	00800084 	movi	r2,2
 800fae8:	d9001d04 	addi	r4,sp,116
 800faec:	d9000015 	stw	r4,0(sp)
 800faf0:	d8800115 	stw	r2,4(sp)
 800faf4:	01400044 	movi	r5,1
 800faf8:	d811883a 	mov	r8,sp
 800fafc:	2809883a 	mov	r4,r5
 800fb00:	42000204 	addi	r8,r8,8
 800fb04:	29400044 	addi	r5,r5,1
 800fb08:	003f4606 	br	800f824 <__alt_data_end+0xf800f824>
 800fb0c:	d8802517 	ldw	r2,148(sp)
 800fb10:	14c0010e 	bge	r2,r19,800fb18 <___vfiprintf_internal_r+0xef4>
 800fb14:	9805883a 	mov	r2,r19
 800fb18:	d9402417 	ldw	r5,144(sp)
 800fb1c:	288b883a 	add	r5,r5,r2
 800fb20:	d9402415 	stw	r5,144(sp)
 800fb24:	003dd006 	br	800f268 <__alt_data_end+0xf800f268>
 800fb28:	d8001d85 	stb	zero,118(sp)
 800fb2c:	80005d16 	blt	r16,zero,800fca4 <___vfiprintf_internal_r+0x1080>
 800fb30:	00ffdfc4 	movi	r3,-129
 800fb34:	9d04b03a 	or	r2,r19,r20
 800fb38:	88e2703a 	and	r17,r17,r3
 800fb3c:	103d3726 	beq	r2,zero,800f01c <__alt_data_end+0xf800f01c>
 800fb40:	002b883a 	mov	r21,zero
 800fb44:	d9002617 	ldw	r4,152(sp)
 800fb48:	ddc01a04 	addi	r23,sp,104
 800fb4c:	988003cc 	andi	r2,r19,15
 800fb50:	a006973a 	slli	r3,r20,28
 800fb54:	2085883a 	add	r2,r4,r2
 800fb58:	9826d13a 	srli	r19,r19,4
 800fb5c:	10800003 	ldbu	r2,0(r2)
 800fb60:	a028d13a 	srli	r20,r20,4
 800fb64:	bdffffc4 	addi	r23,r23,-1
 800fb68:	1ce6b03a 	or	r19,r3,r19
 800fb6c:	b8800005 	stb	r2,0(r23)
 800fb70:	9d04b03a 	or	r2,r19,r20
 800fb74:	103ff51e 	bne	r2,zero,800fb4c <__alt_data_end+0xf800fb4c>
 800fb78:	d8801e17 	ldw	r2,120(sp)
 800fb7c:	15e9c83a 	sub	r20,r2,r23
 800fb80:	003d2b06 	br	800f030 <__alt_data_end+0xf800f030>
 800fb84:	d9402017 	ldw	r5,128(sp)
 800fb88:	d9002117 	ldw	r4,132(sp)
 800fb8c:	d9801a04 	addi	r6,sp,104
 800fb90:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fb94:	103f5b1e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fb98:	d8801c17 	ldw	r2,112(sp)
 800fb9c:	d811883a 	mov	r8,sp
 800fba0:	003f6706 	br	800f940 <__alt_data_end+0xf800f940>
 800fba4:	d9402017 	ldw	r5,128(sp)
 800fba8:	d9002117 	ldw	r4,132(sp)
 800fbac:	d9801a04 	addi	r6,sp,104
 800fbb0:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fbb4:	103f531e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fbb8:	d811883a 	mov	r8,sp
 800fbbc:	003cd906 	br	800ef24 <__alt_data_end+0xf800ef24>
 800fbc0:	10803fcc 	andi	r2,r2,255
 800fbc4:	1080201c 	xori	r2,r2,128
 800fbc8:	10bfe004 	addi	r2,r2,-128
 800fbcc:	00c00c04 	movi	r3,48
 800fbd0:	10ffe926 	beq	r2,r3,800fb78 <__alt_data_end+0xf800fb78>
 800fbd4:	b8ffffc5 	stb	r3,-1(r23)
 800fbd8:	d8c01e17 	ldw	r3,120(sp)
 800fbdc:	b8bfffc4 	addi	r2,r23,-1
 800fbe0:	102f883a 	mov	r23,r2
 800fbe4:	18a9c83a 	sub	r20,r3,r2
 800fbe8:	003d1106 	br	800f030 <__alt_data_end+0xf800f030>
 800fbec:	d9402017 	ldw	r5,128(sp)
 800fbf0:	d9002117 	ldw	r4,132(sp)
 800fbf4:	d9801a04 	addi	r6,sp,104
 800fbf8:	d8c02a15 	stw	r3,168(sp)
 800fbfc:	d9c02b15 	stw	r7,172(sp)
 800fc00:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fc04:	d8c02a17 	ldw	r3,168(sp)
 800fc08:	d9c02b17 	ldw	r7,172(sp)
 800fc0c:	103f3d1e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fc10:	d9001b17 	ldw	r4,108(sp)
 800fc14:	d8801c17 	ldw	r2,112(sp)
 800fc18:	d811883a 	mov	r8,sp
 800fc1c:	21400044 	addi	r5,r4,1
 800fc20:	003d4406 	br	800f134 <__alt_data_end+0xf800f134>
 800fc24:	d9402017 	ldw	r5,128(sp)
 800fc28:	d9002117 	ldw	r4,132(sp)
 800fc2c:	d9801a04 	addi	r6,sp,104
 800fc30:	d8c02a15 	stw	r3,168(sp)
 800fc34:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fc38:	d8c02a17 	ldw	r3,168(sp)
 800fc3c:	103f311e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fc40:	d9001b17 	ldw	r4,108(sp)
 800fc44:	d8801c17 	ldw	r2,112(sp)
 800fc48:	d811883a 	mov	r8,sp
 800fc4c:	21400044 	addi	r5,r4,1
 800fc50:	003ef406 	br	800f824 <__alt_data_end+0xf800f824>
 800fc54:	1000bd1e 	bne	r2,zero,800ff4c <___vfiprintf_internal_r+0x1328>
 800fc58:	01400044 	movi	r5,1
 800fc5c:	0009883a 	mov	r4,zero
 800fc60:	d811883a 	mov	r8,sp
 800fc64:	003ef106 	br	800f82c <__alt_data_end+0xf800f82c>
 800fc68:	d9402017 	ldw	r5,128(sp)
 800fc6c:	d9002117 	ldw	r4,132(sp)
 800fc70:	d9801a04 	addi	r6,sp,104
 800fc74:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fc78:	103f221e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fc7c:	d9401b17 	ldw	r5,108(sp)
 800fc80:	d8801c17 	ldw	r2,112(sp)
 800fc84:	d811883a 	mov	r8,sp
 800fc88:	29400044 	addi	r5,r5,1
 800fc8c:	003d6206 	br	800f218 <__alt_data_end+0xf800f218>
 800fc90:	01420074 	movhi	r5,2049
 800fc94:	2959b604 	addi	r5,r5,26328
 800fc98:	d9402615 	stw	r5,152(sp)
 800fc9c:	d8c02215 	stw	r3,136(sp)
 800fca0:	1023883a 	mov	r17,r2
 800fca4:	9d04b03a 	or	r2,r19,r20
 800fca8:	103fa51e 	bne	r2,zero,800fb40 <__alt_data_end+0xf800fb40>
 800fcac:	002b883a 	mov	r21,zero
 800fcb0:	00800084 	movi	r2,2
 800fcb4:	003e4a06 	br	800f5e0 <__alt_data_end+0xf800f5e0>
 800fcb8:	01420074 	movhi	r5,2049
 800fcbc:	2959b604 	addi	r5,r5,26328
 800fcc0:	002b883a 	mov	r21,zero
 800fcc4:	d9402615 	stw	r5,152(sp)
 800fcc8:	003f9e06 	br	800fb44 <__alt_data_end+0xf800fb44>
 800fccc:	d9402217 	ldw	r5,136(sp)
 800fcd0:	d8001d85 	stb	zero,118(sp)
 800fcd4:	0029883a 	mov	r20,zero
 800fcd8:	28800104 	addi	r2,r5,4
 800fcdc:	2cc00017 	ldw	r19,0(r5)
 800fce0:	803e3a16 	blt	r16,zero,800f5cc <__alt_data_end+0xf800f5cc>
 800fce4:	00ffdfc4 	movi	r3,-129
 800fce8:	d8802215 	stw	r2,136(sp)
 800fcec:	88e2703a 	and	r17,r17,r3
 800fcf0:	002b883a 	mov	r21,zero
 800fcf4:	983e9b26 	beq	r19,zero,800f764 <__alt_data_end+0xf800f764>
 800fcf8:	00800244 	movi	r2,9
 800fcfc:	14fdc936 	bltu	r2,r19,800f424 <__alt_data_end+0xf800f424>
 800fd00:	003e9a06 	br	800f76c <__alt_data_end+0xf800f76c>
 800fd04:	00800c04 	movi	r2,48
 800fd08:	d8c01d45 	stb	r3,117(sp)
 800fd0c:	d8801d05 	stb	r2,116(sp)
 800fd10:	d8001d85 	stb	zero,118(sp)
 800fd14:	88c00094 	ori	r3,r17,2
 800fd18:	80009c16 	blt	r16,zero,800ff8c <___vfiprintf_internal_r+0x1368>
 800fd1c:	00bfdfc4 	movi	r2,-129
 800fd20:	88a2703a 	and	r17,r17,r2
 800fd24:	8c400094 	ori	r17,r17,2
 800fd28:	002b883a 	mov	r21,zero
 800fd2c:	003f8506 	br	800fb44 <__alt_data_end+0xf800fb44>
 800fd30:	b029883a 	mov	r20,r22
 800fd34:	003c0b06 	br	800ed64 <__alt_data_end+0xf800ed64>
 800fd38:	04e7c83a 	sub	r19,zero,r19
 800fd3c:	05400b44 	movi	r21,45
 800fd40:	9804c03a 	cmpne	r2,r19,zero
 800fd44:	0529c83a 	sub	r20,zero,r20
 800fd48:	dd401d85 	stb	r21,118(sp)
 800fd4c:	a0a9c83a 	sub	r20,r20,r2
 800fd50:	80009716 	blt	r16,zero,800ffb0 <___vfiprintf_internal_r+0x138c>
 800fd54:	00bfdfc4 	movi	r2,-129
 800fd58:	88a2703a 	and	r17,r17,r2
 800fd5c:	003db006 	br	800f420 <__alt_data_end+0xf800f420>
 800fd60:	b0c00007 	ldb	r3,0(r22)
 800fd64:	003c0c06 	br	800ed98 <__alt_data_end+0xf800ed98>
 800fd68:	8880100c 	andi	r2,r17,64
 800fd6c:	d8001d85 	stb	zero,118(sp)
 800fd70:	1000461e 	bne	r2,zero,800fe8c <___vfiprintf_internal_r+0x1268>
 800fd74:	d9002217 	ldw	r4,136(sp)
 800fd78:	0029883a 	mov	r20,zero
 800fd7c:	20800104 	addi	r2,r4,4
 800fd80:	24c00017 	ldw	r19,0(r4)
 800fd84:	803df80e 	bge	r16,zero,800f568 <__alt_data_end+0xf800f568>
 800fd88:	9d06b03a 	or	r3,r19,r20
 800fd8c:	d8802215 	stw	r2,136(sp)
 800fd90:	183d5e1e 	bne	r3,zero,800f30c <__alt_data_end+0xf800f30c>
 800fd94:	002b883a 	mov	r21,zero
 800fd98:	0005883a 	mov	r2,zero
 800fd9c:	003e1006 	br	800f5e0 <__alt_data_end+0xf800f5e0>
 800fda0:	8880040c 	andi	r2,r17,16
 800fda4:	1000321e 	bne	r2,zero,800fe70 <___vfiprintf_internal_r+0x124c>
 800fda8:	8c40100c 	andi	r17,r17,64
 800fdac:	88008d26 	beq	r17,zero,800ffe4 <___vfiprintf_internal_r+0x13c0>
 800fdb0:	d9402217 	ldw	r5,136(sp)
 800fdb4:	d8c02417 	ldw	r3,144(sp)
 800fdb8:	28800017 	ldw	r2,0(r5)
 800fdbc:	29400104 	addi	r5,r5,4
 800fdc0:	d9402215 	stw	r5,136(sp)
 800fdc4:	10c0000d 	sth	r3,0(r2)
 800fdc8:	003bca06 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800fdcc:	8880100c 	andi	r2,r17,64
 800fdd0:	10003a26 	beq	r2,zero,800febc <___vfiprintf_internal_r+0x1298>
 800fdd4:	d8802217 	ldw	r2,136(sp)
 800fdd8:	14c0000f 	ldh	r19,0(r2)
 800fddc:	10800104 	addi	r2,r2,4
 800fde0:	d8802215 	stw	r2,136(sp)
 800fde4:	9829d7fa 	srai	r20,r19,31
 800fde8:	a005883a 	mov	r2,r20
 800fdec:	003d8506 	br	800f404 <__alt_data_end+0xf800f404>
 800fdf0:	8880100c 	andi	r2,r17,64
 800fdf4:	10002b26 	beq	r2,zero,800fea4 <___vfiprintf_internal_r+0x1280>
 800fdf8:	d8802217 	ldw	r2,136(sp)
 800fdfc:	0029883a 	mov	r20,zero
 800fe00:	14c0000b 	ldhu	r19,0(r2)
 800fe04:	10800104 	addi	r2,r2,4
 800fe08:	d8802215 	stw	r2,136(sp)
 800fe0c:	003d5d06 	br	800f384 <__alt_data_end+0xf800f384>
 800fe10:	d9402017 	ldw	r5,128(sp)
 800fe14:	d9002117 	ldw	r4,132(sp)
 800fe18:	d9801a04 	addi	r6,sp,104
 800fe1c:	d8c02a15 	stw	r3,168(sp)
 800fe20:	d9c02b15 	stw	r7,172(sp)
 800fe24:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800fe28:	d8c02a17 	ldw	r3,168(sp)
 800fe2c:	d9c02b17 	ldw	r7,172(sp)
 800fe30:	103eb41e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800fe34:	d9001b17 	ldw	r4,108(sp)
 800fe38:	d8801c17 	ldw	r2,112(sp)
 800fe3c:	d811883a 	mov	r8,sp
 800fe40:	21400044 	addi	r5,r4,1
 800fe44:	003e6706 	br	800f7e4 <__alt_data_end+0xf800f7e4>
 800fe48:	00bfffc4 	movi	r2,-1
 800fe4c:	003c4a06 	br	800ef78 <__alt_data_end+0xf800ef78>
 800fe50:	9805883a 	mov	r2,r19
 800fe54:	003ee806 	br	800f9f8 <__alt_data_end+0xf800f9f8>
 800fe58:	d8c02217 	ldw	r3,136(sp)
 800fe5c:	0029883a 	mov	r20,zero
 800fe60:	18800104 	addi	r2,r3,4
 800fe64:	1cc0000b 	ldhu	r19,0(r3)
 800fe68:	803f9e0e 	bge	r16,zero,800fce4 <__alt_data_end+0xf800fce4>
 800fe6c:	003dd706 	br	800f5cc <__alt_data_end+0xf800f5cc>
 800fe70:	d8c02217 	ldw	r3,136(sp)
 800fe74:	d9002417 	ldw	r4,144(sp)
 800fe78:	18800017 	ldw	r2,0(r3)
 800fe7c:	18c00104 	addi	r3,r3,4
 800fe80:	d8c02215 	stw	r3,136(sp)
 800fe84:	11000015 	stw	r4,0(r2)
 800fe88:	003b9a06 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800fe8c:	d8c02217 	ldw	r3,136(sp)
 800fe90:	0029883a 	mov	r20,zero
 800fe94:	18800104 	addi	r2,r3,4
 800fe98:	1cc0000b 	ldhu	r19,0(r3)
 800fe9c:	803db20e 	bge	r16,zero,800f568 <__alt_data_end+0xf800f568>
 800fea0:	003fb906 	br	800fd88 <__alt_data_end+0xf800fd88>
 800fea4:	d9002217 	ldw	r4,136(sp)
 800fea8:	0029883a 	mov	r20,zero
 800feac:	24c00017 	ldw	r19,0(r4)
 800feb0:	21000104 	addi	r4,r4,4
 800feb4:	d9002215 	stw	r4,136(sp)
 800feb8:	003d3206 	br	800f384 <__alt_data_end+0xf800f384>
 800febc:	d8c02217 	ldw	r3,136(sp)
 800fec0:	1cc00017 	ldw	r19,0(r3)
 800fec4:	18c00104 	addi	r3,r3,4
 800fec8:	d8c02215 	stw	r3,136(sp)
 800fecc:	9829d7fa 	srai	r20,r19,31
 800fed0:	a005883a 	mov	r2,r20
 800fed4:	003d4b06 	br	800f404 <__alt_data_end+0xf800f404>
 800fed8:	0009883a 	mov	r4,zero
 800fedc:	01400044 	movi	r5,1
 800fee0:	d811883a 	mov	r8,sp
 800fee4:	003e4f06 	br	800f824 <__alt_data_end+0xf800f824>
 800fee8:	d8c02215 	stw	r3,136(sp)
 800feec:	002b883a 	mov	r21,zero
 800fef0:	003db806 	br	800f5d4 <__alt_data_end+0xf800f5d4>
 800fef4:	d811883a 	mov	r8,sp
 800fef8:	003e9606 	br	800f954 <__alt_data_end+0xf800f954>
 800fefc:	01020074 	movhi	r4,2049
 800ff00:	211a1704 	addi	r4,r4,26716
 800ff04:	d9002315 	stw	r4,140(sp)
 800ff08:	003e6306 	br	800f898 <__alt_data_end+0xf800f898>
 800ff0c:	b0c00043 	ldbu	r3,1(r22)
 800ff10:	8c400814 	ori	r17,r17,32
 800ff14:	b5800044 	addi	r22,r22,1
 800ff18:	18c03fcc 	andi	r3,r3,255
 800ff1c:	18c0201c 	xori	r3,r3,128
 800ff20:	18ffe004 	addi	r3,r3,-128
 800ff24:	003b9c06 	br	800ed98 <__alt_data_end+0xf800ed98>
 800ff28:	b809883a 	mov	r4,r23
 800ff2c:	da002a15 	stw	r8,168(sp)
 800ff30:	80076040 	call	8007604 <strlen>
 800ff34:	1029883a 	mov	r20,r2
 800ff38:	dd401d83 	ldbu	r21,118(sp)
 800ff3c:	df002215 	stw	fp,136(sp)
 800ff40:	0021883a 	mov	r16,zero
 800ff44:	da002a17 	ldw	r8,168(sp)
 800ff48:	003c3906 	br	800f030 <__alt_data_end+0xf800f030>
 800ff4c:	d9402017 	ldw	r5,128(sp)
 800ff50:	d9002117 	ldw	r4,132(sp)
 800ff54:	d9801a04 	addi	r6,sp,104
 800ff58:	800eb100 	call	800eb10 <__sprint_r.part.0>
 800ff5c:	103e691e 	bne	r2,zero,800f904 <__alt_data_end+0xf800f904>
 800ff60:	d9001b17 	ldw	r4,108(sp)
 800ff64:	d8801c17 	ldw	r2,112(sp)
 800ff68:	d811883a 	mov	r8,sp
 800ff6c:	21400044 	addi	r5,r4,1
 800ff70:	003e2e06 	br	800f82c <__alt_data_end+0xf800f82c>
 800ff74:	01020074 	movhi	r4,2049
 800ff78:	211a1b04 	addi	r4,r4,26732
 800ff7c:	d9002315 	stw	r4,140(sp)
 800ff80:	d9001b17 	ldw	r4,108(sp)
 800ff84:	21000044 	addi	r4,r4,1
 800ff88:	003c5e06 	br	800f104 <__alt_data_end+0xf800f104>
 800ff8c:	002b883a 	mov	r21,zero
 800ff90:	00800084 	movi	r2,2
 800ff94:	10803fcc 	andi	r2,r2,255
 800ff98:	01000044 	movi	r4,1
 800ff9c:	11002b26 	beq	r2,r4,801004c <___vfiprintf_internal_r+0x1428>
 800ffa0:	01000084 	movi	r4,2
 800ffa4:	11002b1e 	bne	r2,r4,8010054 <___vfiprintf_internal_r+0x1430>
 800ffa8:	1823883a 	mov	r17,r3
 800ffac:	003ee506 	br	800fb44 <__alt_data_end+0xf800fb44>
 800ffb0:	8807883a 	mov	r3,r17
 800ffb4:	00800044 	movi	r2,1
 800ffb8:	003ff606 	br	800ff94 <__alt_data_end+0xf800ff94>
 800ffbc:	00800184 	movi	r2,6
 800ffc0:	1400012e 	bgeu	r2,r16,800ffc8 <___vfiprintf_internal_r+0x13a4>
 800ffc4:	1021883a 	mov	r16,r2
 800ffc8:	8029883a 	mov	r20,r16
 800ffcc:	8027883a 	mov	r19,r16
 800ffd0:	80002216 	blt	r16,zero,801005c <___vfiprintf_internal_r+0x1438>
 800ffd4:	05c20074 	movhi	r23,2049
 800ffd8:	df002215 	stw	fp,136(sp)
 800ffdc:	bdd9bb04 	addi	r23,r23,26348
 800ffe0:	003cfb06 	br	800f3d0 <__alt_data_end+0xf800f3d0>
 800ffe4:	d9002217 	ldw	r4,136(sp)
 800ffe8:	d9402417 	ldw	r5,144(sp)
 800ffec:	20800017 	ldw	r2,0(r4)
 800fff0:	21000104 	addi	r4,r4,4
 800fff4:	d9002215 	stw	r4,136(sp)
 800fff8:	11400015 	stw	r5,0(r2)
 800fffc:	003b3d06 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 8010000:	01420074 	movhi	r5,2049
 8010004:	295a1b04 	addi	r5,r5,26732
 8010008:	d9402315 	stw	r5,140(sp)
 801000c:	d9401b17 	ldw	r5,108(sp)
 8010010:	29400044 	addi	r5,r5,1
 8010014:	003e6d06 	br	800f9cc <__alt_data_end+0xf800f9cc>
 8010018:	8029883a 	mov	r20,r16
 801001c:	dd401d83 	ldbu	r21,118(sp)
 8010020:	df002215 	stw	fp,136(sp)
 8010024:	0021883a 	mov	r16,zero
 8010028:	003c0106 	br	800f030 <__alt_data_end+0xf800f030>
 801002c:	00c20074 	movhi	r3,2049
 8010030:	18da1704 	addi	r3,r3,26716
 8010034:	d8c02315 	stw	r3,140(sp)
 8010038:	280d883a 	mov	r6,r5
 801003c:	003c6906 	br	800f1e4 <__alt_data_end+0xf800f1e4>
 8010040:	802d883a 	mov	r22,r16
 8010044:	0021883a 	mov	r16,zero
 8010048:	003b5406 	br	800ed9c <__alt_data_end+0xf800ed9c>
 801004c:	1823883a 	mov	r17,r3
 8010050:	003cf306 	br	800f420 <__alt_data_end+0xf800f420>
 8010054:	1823883a 	mov	r17,r3
 8010058:	003cad06 	br	800f310 <__alt_data_end+0xf800f310>
 801005c:	0027883a 	mov	r19,zero
 8010060:	003fdc06 	br	800ffd4 <__alt_data_end+0xf800ffd4>
 8010064:	d9402217 	ldw	r5,136(sp)
 8010068:	8005883a 	mov	r2,r16
 801006c:	b0c00043 	ldbu	r3,1(r22)
 8010070:	2c000017 	ldw	r16,0(r5)
 8010074:	29000104 	addi	r4,r5,4
 8010078:	d9002215 	stw	r4,136(sp)
 801007c:	102d883a 	mov	r22,r2
 8010080:	803fa50e 	bge	r16,zero,800ff18 <__alt_data_end+0xf800ff18>
 8010084:	18c03fcc 	andi	r3,r3,255
 8010088:	18c0201c 	xori	r3,r3,128
 801008c:	043fffc4 	movi	r16,-1
 8010090:	18ffe004 	addi	r3,r3,-128
 8010094:	003b4006 	br	800ed98 <__alt_data_end+0xf800ed98>
 8010098:	d9402303 	ldbu	r5,140(sp)
 801009c:	d9401d85 	stb	r5,118(sp)
 80100a0:	003cae06 	br	800f35c <__alt_data_end+0xf800f35c>
 80100a4:	d8c02303 	ldbu	r3,140(sp)
 80100a8:	d8c01d85 	stb	r3,118(sp)
 80100ac:	003d1406 	br	800f500 <__alt_data_end+0xf800f500>
 80100b0:	d8c02303 	ldbu	r3,140(sp)
 80100b4:	d8c01d85 	stb	r3,118(sp)
 80100b8:	003cca06 	br	800f3e4 <__alt_data_end+0xf800f3e4>
 80100bc:	8880004c 	andi	r2,r17,1
 80100c0:	002b883a 	mov	r21,zero
 80100c4:	10000526 	beq	r2,zero,80100dc <___vfiprintf_internal_r+0x14b8>
 80100c8:	00800c04 	movi	r2,48
 80100cc:	d88019c5 	stb	r2,103(sp)
 80100d0:	dd002817 	ldw	r20,160(sp)
 80100d4:	ddc019c4 	addi	r23,sp,103
 80100d8:	003bd506 	br	800f030 <__alt_data_end+0xf800f030>
 80100dc:	0029883a 	mov	r20,zero
 80100e0:	ddc01a04 	addi	r23,sp,104
 80100e4:	003bd206 	br	800f030 <__alt_data_end+0xf800f030>
 80100e8:	d9002303 	ldbu	r4,140(sp)
 80100ec:	d9001d85 	stb	r4,118(sp)
 80100f0:	003da606 	br	800f78c <__alt_data_end+0xf800f78c>
 80100f4:	d8c02303 	ldbu	r3,140(sp)
 80100f8:	d8c01d85 	stb	r3,118(sp)
 80100fc:	003c7606 	br	800f2d8 <__alt_data_end+0xf800f2d8>
 8010100:	d8c02303 	ldbu	r3,140(sp)
 8010104:	d8c01d85 	stb	r3,118(sp)
 8010108:	003c6506 	br	800f2a0 <__alt_data_end+0xf800f2a0>
 801010c:	d9002303 	ldbu	r4,140(sp)
 8010110:	d9001d85 	stb	r4,118(sp)
 8010114:	003d3d06 	br	800f60c <__alt_data_end+0xf800f60c>
 8010118:	d8c02303 	ldbu	r3,140(sp)
 801011c:	d8c01d85 	stb	r3,118(sp)
 8010120:	003d1d06 	br	800f598 <__alt_data_end+0xf800f598>
 8010124:	d8c02303 	ldbu	r3,140(sp)
 8010128:	d8c01d85 	stb	r3,118(sp)
 801012c:	003d0306 	br	800f53c <__alt_data_end+0xf800f53c>

08010130 <__vfiprintf_internal>:
 8010130:	008200b4 	movhi	r2,2050
 8010134:	10a11504 	addi	r2,r2,-31660
 8010138:	300f883a 	mov	r7,r6
 801013c:	280d883a 	mov	r6,r5
 8010140:	200b883a 	mov	r5,r4
 8010144:	11000017 	ldw	r4,0(r2)
 8010148:	800ec241 	jmpi	800ec24 <___vfiprintf_internal_r>

0801014c <__sbprintf>:
 801014c:	2880030b 	ldhu	r2,12(r5)
 8010150:	2ac01917 	ldw	r11,100(r5)
 8010154:	2a80038b 	ldhu	r10,14(r5)
 8010158:	2a400717 	ldw	r9,28(r5)
 801015c:	2a000917 	ldw	r8,36(r5)
 8010160:	defee204 	addi	sp,sp,-1144
 8010164:	00c10004 	movi	r3,1024
 8010168:	dc011a15 	stw	r16,1128(sp)
 801016c:	10bfff4c 	andi	r2,r2,65533
 8010170:	2821883a 	mov	r16,r5
 8010174:	d8cb883a 	add	r5,sp,r3
 8010178:	dc811c15 	stw	r18,1136(sp)
 801017c:	dc411b15 	stw	r17,1132(sp)
 8010180:	dfc11d15 	stw	ra,1140(sp)
 8010184:	2025883a 	mov	r18,r4
 8010188:	d881030d 	sth	r2,1036(sp)
 801018c:	dac11915 	stw	r11,1124(sp)
 8010190:	da81038d 	sth	r10,1038(sp)
 8010194:	da410715 	stw	r9,1052(sp)
 8010198:	da010915 	stw	r8,1060(sp)
 801019c:	dec10015 	stw	sp,1024(sp)
 80101a0:	dec10415 	stw	sp,1040(sp)
 80101a4:	d8c10215 	stw	r3,1032(sp)
 80101a8:	d8c10515 	stw	r3,1044(sp)
 80101ac:	d8010615 	stw	zero,1048(sp)
 80101b0:	800ec240 	call	800ec24 <___vfiprintf_internal_r>
 80101b4:	1023883a 	mov	r17,r2
 80101b8:	10000416 	blt	r2,zero,80101cc <__sbprintf+0x80>
 80101bc:	d9410004 	addi	r5,sp,1024
 80101c0:	9009883a 	mov	r4,r18
 80101c4:	800b6700 	call	800b670 <_fflush_r>
 80101c8:	10000d1e 	bne	r2,zero,8010200 <__sbprintf+0xb4>
 80101cc:	d881030b 	ldhu	r2,1036(sp)
 80101d0:	1080100c 	andi	r2,r2,64
 80101d4:	10000326 	beq	r2,zero,80101e4 <__sbprintf+0x98>
 80101d8:	8080030b 	ldhu	r2,12(r16)
 80101dc:	10801014 	ori	r2,r2,64
 80101e0:	8080030d 	sth	r2,12(r16)
 80101e4:	8805883a 	mov	r2,r17
 80101e8:	dfc11d17 	ldw	ra,1140(sp)
 80101ec:	dc811c17 	ldw	r18,1136(sp)
 80101f0:	dc411b17 	ldw	r17,1132(sp)
 80101f4:	dc011a17 	ldw	r16,1128(sp)
 80101f8:	dec11e04 	addi	sp,sp,1144
 80101fc:	f800283a 	ret
 8010200:	047fffc4 	movi	r17,-1
 8010204:	003ff106 	br	80101cc <__alt_data_end+0xf80101cc>

08010208 <_write_r>:
 8010208:	defffd04 	addi	sp,sp,-12
 801020c:	2805883a 	mov	r2,r5
 8010210:	dc000015 	stw	r16,0(sp)
 8010214:	040200b4 	movhi	r16,2050
 8010218:	dc400115 	stw	r17,4(sp)
 801021c:	300b883a 	mov	r5,r6
 8010220:	8427f704 	addi	r16,r16,-24612
 8010224:	2023883a 	mov	r17,r4
 8010228:	380d883a 	mov	r6,r7
 801022c:	1009883a 	mov	r4,r2
 8010230:	dfc00215 	stw	ra,8(sp)
 8010234:	80000015 	stw	zero,0(r16)
 8010238:	801484c0 	call	801484c <write>
 801023c:	00ffffc4 	movi	r3,-1
 8010240:	10c00526 	beq	r2,r3,8010258 <_write_r+0x50>
 8010244:	dfc00217 	ldw	ra,8(sp)
 8010248:	dc400117 	ldw	r17,4(sp)
 801024c:	dc000017 	ldw	r16,0(sp)
 8010250:	dec00304 	addi	sp,sp,12
 8010254:	f800283a 	ret
 8010258:	80c00017 	ldw	r3,0(r16)
 801025c:	183ff926 	beq	r3,zero,8010244 <__alt_data_end+0xf8010244>
 8010260:	88c00015 	stw	r3,0(r17)
 8010264:	003ff706 	br	8010244 <__alt_data_end+0xf8010244>

08010268 <_close_r>:
 8010268:	defffd04 	addi	sp,sp,-12
 801026c:	dc000015 	stw	r16,0(sp)
 8010270:	040200b4 	movhi	r16,2050
 8010274:	dc400115 	stw	r17,4(sp)
 8010278:	8427f704 	addi	r16,r16,-24612
 801027c:	2023883a 	mov	r17,r4
 8010280:	2809883a 	mov	r4,r5
 8010284:	dfc00215 	stw	ra,8(sp)
 8010288:	80000015 	stw	zero,0(r16)
 801028c:	8013ff40 	call	8013ff4 <close>
 8010290:	00ffffc4 	movi	r3,-1
 8010294:	10c00526 	beq	r2,r3,80102ac <_close_r+0x44>
 8010298:	dfc00217 	ldw	ra,8(sp)
 801029c:	dc400117 	ldw	r17,4(sp)
 80102a0:	dc000017 	ldw	r16,0(sp)
 80102a4:	dec00304 	addi	sp,sp,12
 80102a8:	f800283a 	ret
 80102ac:	80c00017 	ldw	r3,0(r16)
 80102b0:	183ff926 	beq	r3,zero,8010298 <__alt_data_end+0xf8010298>
 80102b4:	88c00015 	stw	r3,0(r17)
 80102b8:	003ff706 	br	8010298 <__alt_data_end+0xf8010298>

080102bc <_calloc_r>:
 80102bc:	defffe04 	addi	sp,sp,-8
 80102c0:	2805883a 	mov	r2,r5
 80102c4:	dc000015 	stw	r16,0(sp)
 80102c8:	300b883a 	mov	r5,r6
 80102cc:	2021883a 	mov	r16,r4
 80102d0:	1009883a 	mov	r4,r2
 80102d4:	dfc00115 	stw	ra,4(sp)
 80102d8:	800722c0 	call	800722c <__mulsi3>
 80102dc:	100b883a 	mov	r5,r2
 80102e0:	8009883a 	mov	r4,r16
 80102e4:	800c7c80 	call	800c7c8 <_malloc_r>
 80102e8:	10002926 	beq	r2,zero,8010390 <_calloc_r+0xd4>
 80102ec:	11bfff17 	ldw	r6,-4(r2)
 80102f0:	1021883a 	mov	r16,r2
 80102f4:	00bfff04 	movi	r2,-4
 80102f8:	308c703a 	and	r6,r6,r2
 80102fc:	00c00904 	movi	r3,36
 8010300:	308d883a 	add	r6,r6,r2
 8010304:	19801636 	bltu	r3,r6,8010360 <_calloc_r+0xa4>
 8010308:	008004c4 	movi	r2,19
 801030c:	11800b2e 	bgeu	r2,r6,801033c <_calloc_r+0x80>
 8010310:	80000015 	stw	zero,0(r16)
 8010314:	80000115 	stw	zero,4(r16)
 8010318:	008006c4 	movi	r2,27
 801031c:	11801a2e 	bgeu	r2,r6,8010388 <_calloc_r+0xcc>
 8010320:	80000215 	stw	zero,8(r16)
 8010324:	80000315 	stw	zero,12(r16)
 8010328:	30c0151e 	bne	r6,r3,8010380 <_calloc_r+0xc4>
 801032c:	80000415 	stw	zero,16(r16)
 8010330:	80800604 	addi	r2,r16,24
 8010334:	80000515 	stw	zero,20(r16)
 8010338:	00000106 	br	8010340 <_calloc_r+0x84>
 801033c:	8005883a 	mov	r2,r16
 8010340:	10000015 	stw	zero,0(r2)
 8010344:	10000115 	stw	zero,4(r2)
 8010348:	10000215 	stw	zero,8(r2)
 801034c:	8005883a 	mov	r2,r16
 8010350:	dfc00117 	ldw	ra,4(sp)
 8010354:	dc000017 	ldw	r16,0(sp)
 8010358:	dec00204 	addi	sp,sp,8
 801035c:	f800283a 	ret
 8010360:	000b883a 	mov	r5,zero
 8010364:	8009883a 	mov	r4,r16
 8010368:	800739c0 	call	800739c <memset>
 801036c:	8005883a 	mov	r2,r16
 8010370:	dfc00117 	ldw	ra,4(sp)
 8010374:	dc000017 	ldw	r16,0(sp)
 8010378:	dec00204 	addi	sp,sp,8
 801037c:	f800283a 	ret
 8010380:	80800404 	addi	r2,r16,16
 8010384:	003fee06 	br	8010340 <__alt_data_end+0xf8010340>
 8010388:	80800204 	addi	r2,r16,8
 801038c:	003fec06 	br	8010340 <__alt_data_end+0xf8010340>
 8010390:	0005883a 	mov	r2,zero
 8010394:	003fee06 	br	8010350 <__alt_data_end+0xf8010350>

08010398 <_fclose_r>:
 8010398:	28003926 	beq	r5,zero,8010480 <_fclose_r+0xe8>
 801039c:	defffc04 	addi	sp,sp,-16
 80103a0:	dc400115 	stw	r17,4(sp)
 80103a4:	dc000015 	stw	r16,0(sp)
 80103a8:	dfc00315 	stw	ra,12(sp)
 80103ac:	dc800215 	stw	r18,8(sp)
 80103b0:	2023883a 	mov	r17,r4
 80103b4:	2821883a 	mov	r16,r5
 80103b8:	20000226 	beq	r4,zero,80103c4 <_fclose_r+0x2c>
 80103bc:	20800e17 	ldw	r2,56(r4)
 80103c0:	10002726 	beq	r2,zero,8010460 <_fclose_r+0xc8>
 80103c4:	8080030f 	ldh	r2,12(r16)
 80103c8:	1000071e 	bne	r2,zero,80103e8 <_fclose_r+0x50>
 80103cc:	0005883a 	mov	r2,zero
 80103d0:	dfc00317 	ldw	ra,12(sp)
 80103d4:	dc800217 	ldw	r18,8(sp)
 80103d8:	dc400117 	ldw	r17,4(sp)
 80103dc:	dc000017 	ldw	r16,0(sp)
 80103e0:	dec00404 	addi	sp,sp,16
 80103e4:	f800283a 	ret
 80103e8:	800b883a 	mov	r5,r16
 80103ec:	8809883a 	mov	r4,r17
 80103f0:	800b4540 	call	800b454 <__sflush_r>
 80103f4:	1025883a 	mov	r18,r2
 80103f8:	80800b17 	ldw	r2,44(r16)
 80103fc:	10000426 	beq	r2,zero,8010410 <_fclose_r+0x78>
 8010400:	81400717 	ldw	r5,28(r16)
 8010404:	8809883a 	mov	r4,r17
 8010408:	103ee83a 	callr	r2
 801040c:	10001616 	blt	r2,zero,8010468 <_fclose_r+0xd0>
 8010410:	8080030b 	ldhu	r2,12(r16)
 8010414:	1080200c 	andi	r2,r2,128
 8010418:	1000151e 	bne	r2,zero,8010470 <_fclose_r+0xd8>
 801041c:	81400c17 	ldw	r5,48(r16)
 8010420:	28000526 	beq	r5,zero,8010438 <_fclose_r+0xa0>
 8010424:	80801004 	addi	r2,r16,64
 8010428:	28800226 	beq	r5,r2,8010434 <_fclose_r+0x9c>
 801042c:	8809883a 	mov	r4,r17
 8010430:	800bbd00 	call	800bbd0 <_free_r>
 8010434:	80000c15 	stw	zero,48(r16)
 8010438:	81401117 	ldw	r5,68(r16)
 801043c:	28000326 	beq	r5,zero,801044c <_fclose_r+0xb4>
 8010440:	8809883a 	mov	r4,r17
 8010444:	800bbd00 	call	800bbd0 <_free_r>
 8010448:	80001115 	stw	zero,68(r16)
 801044c:	800ba6c0 	call	800ba6c <__sfp_lock_acquire>
 8010450:	8000030d 	sth	zero,12(r16)
 8010454:	800ba700 	call	800ba70 <__sfp_lock_release>
 8010458:	9005883a 	mov	r2,r18
 801045c:	003fdc06 	br	80103d0 <__alt_data_end+0xf80103d0>
 8010460:	800ba5c0 	call	800ba5c <__sinit>
 8010464:	003fd706 	br	80103c4 <__alt_data_end+0xf80103c4>
 8010468:	04bfffc4 	movi	r18,-1
 801046c:	003fe806 	br	8010410 <__alt_data_end+0xf8010410>
 8010470:	81400417 	ldw	r5,16(r16)
 8010474:	8809883a 	mov	r4,r17
 8010478:	800bbd00 	call	800bbd0 <_free_r>
 801047c:	003fe706 	br	801041c <__alt_data_end+0xf801041c>
 8010480:	0005883a 	mov	r2,zero
 8010484:	f800283a 	ret

08010488 <fclose>:
 8010488:	008200b4 	movhi	r2,2050
 801048c:	10a11504 	addi	r2,r2,-31660
 8010490:	200b883a 	mov	r5,r4
 8010494:	11000017 	ldw	r4,0(r2)
 8010498:	80103981 	jmpi	8010398 <_fclose_r>

0801049c <__fputwc>:
 801049c:	defff804 	addi	sp,sp,-32
 80104a0:	dcc00415 	stw	r19,16(sp)
 80104a4:	dc800315 	stw	r18,12(sp)
 80104a8:	dc000115 	stw	r16,4(sp)
 80104ac:	dfc00715 	stw	ra,28(sp)
 80104b0:	dd400615 	stw	r21,24(sp)
 80104b4:	dd000515 	stw	r20,20(sp)
 80104b8:	dc400215 	stw	r17,8(sp)
 80104bc:	2027883a 	mov	r19,r4
 80104c0:	2825883a 	mov	r18,r5
 80104c4:	3021883a 	mov	r16,r6
 80104c8:	800c5b80 	call	800c5b8 <__locale_mb_cur_max>
 80104cc:	00c00044 	movi	r3,1
 80104d0:	10c03e26 	beq	r2,r3,80105cc <__fputwc+0x130>
 80104d4:	81c01704 	addi	r7,r16,92
 80104d8:	900d883a 	mov	r6,r18
 80104dc:	d80b883a 	mov	r5,sp
 80104e0:	9809883a 	mov	r4,r19
 80104e4:	801096c0 	call	801096c <_wcrtomb_r>
 80104e8:	1029883a 	mov	r20,r2
 80104ec:	00bfffc4 	movi	r2,-1
 80104f0:	a0802026 	beq	r20,r2,8010574 <__fputwc+0xd8>
 80104f4:	d9400003 	ldbu	r5,0(sp)
 80104f8:	a0001c26 	beq	r20,zero,801056c <__fputwc+0xd0>
 80104fc:	0023883a 	mov	r17,zero
 8010500:	05400284 	movi	r21,10
 8010504:	00000906 	br	801052c <__fputwc+0x90>
 8010508:	80800017 	ldw	r2,0(r16)
 801050c:	11400005 	stb	r5,0(r2)
 8010510:	80c00017 	ldw	r3,0(r16)
 8010514:	18c00044 	addi	r3,r3,1
 8010518:	80c00015 	stw	r3,0(r16)
 801051c:	8c400044 	addi	r17,r17,1
 8010520:	dc45883a 	add	r2,sp,r17
 8010524:	8d00112e 	bgeu	r17,r20,801056c <__fputwc+0xd0>
 8010528:	11400003 	ldbu	r5,0(r2)
 801052c:	80c00217 	ldw	r3,8(r16)
 8010530:	18ffffc4 	addi	r3,r3,-1
 8010534:	80c00215 	stw	r3,8(r16)
 8010538:	183ff30e 	bge	r3,zero,8010508 <__alt_data_end+0xf8010508>
 801053c:	80800617 	ldw	r2,24(r16)
 8010540:	18801916 	blt	r3,r2,80105a8 <__fputwc+0x10c>
 8010544:	80800017 	ldw	r2,0(r16)
 8010548:	11400005 	stb	r5,0(r2)
 801054c:	80800017 	ldw	r2,0(r16)
 8010550:	10c00003 	ldbu	r3,0(r2)
 8010554:	10800044 	addi	r2,r2,1
 8010558:	1d402326 	beq	r3,r21,80105e8 <__fputwc+0x14c>
 801055c:	80800015 	stw	r2,0(r16)
 8010560:	8c400044 	addi	r17,r17,1
 8010564:	dc45883a 	add	r2,sp,r17
 8010568:	8d3fef36 	bltu	r17,r20,8010528 <__alt_data_end+0xf8010528>
 801056c:	9005883a 	mov	r2,r18
 8010570:	00000406 	br	8010584 <__fputwc+0xe8>
 8010574:	80c0030b 	ldhu	r3,12(r16)
 8010578:	a005883a 	mov	r2,r20
 801057c:	18c01014 	ori	r3,r3,64
 8010580:	80c0030d 	sth	r3,12(r16)
 8010584:	dfc00717 	ldw	ra,28(sp)
 8010588:	dd400617 	ldw	r21,24(sp)
 801058c:	dd000517 	ldw	r20,20(sp)
 8010590:	dcc00417 	ldw	r19,16(sp)
 8010594:	dc800317 	ldw	r18,12(sp)
 8010598:	dc400217 	ldw	r17,8(sp)
 801059c:	dc000117 	ldw	r16,4(sp)
 80105a0:	dec00804 	addi	sp,sp,32
 80105a4:	f800283a 	ret
 80105a8:	800d883a 	mov	r6,r16
 80105ac:	29403fcc 	andi	r5,r5,255
 80105b0:	9809883a 	mov	r4,r19
 80105b4:	80108140 	call	8010814 <__swbuf_r>
 80105b8:	10bfffe0 	cmpeqi	r2,r2,-1
 80105bc:	10803fcc 	andi	r2,r2,255
 80105c0:	103fd626 	beq	r2,zero,801051c <__alt_data_end+0xf801051c>
 80105c4:	00bfffc4 	movi	r2,-1
 80105c8:	003fee06 	br	8010584 <__alt_data_end+0xf8010584>
 80105cc:	90ffffc4 	addi	r3,r18,-1
 80105d0:	01003f84 	movi	r4,254
 80105d4:	20ffbf36 	bltu	r4,r3,80104d4 <__alt_data_end+0xf80104d4>
 80105d8:	900b883a 	mov	r5,r18
 80105dc:	dc800005 	stb	r18,0(sp)
 80105e0:	1029883a 	mov	r20,r2
 80105e4:	003fc506 	br	80104fc <__alt_data_end+0xf80104fc>
 80105e8:	800d883a 	mov	r6,r16
 80105ec:	a80b883a 	mov	r5,r21
 80105f0:	9809883a 	mov	r4,r19
 80105f4:	80108140 	call	8010814 <__swbuf_r>
 80105f8:	10bfffe0 	cmpeqi	r2,r2,-1
 80105fc:	003fef06 	br	80105bc <__alt_data_end+0xf80105bc>

08010600 <_fputwc_r>:
 8010600:	3080030b 	ldhu	r2,12(r6)
 8010604:	10c8000c 	andi	r3,r2,8192
 8010608:	1800051e 	bne	r3,zero,8010620 <_fputwc_r+0x20>
 801060c:	30c01917 	ldw	r3,100(r6)
 8010610:	10880014 	ori	r2,r2,8192
 8010614:	3080030d 	sth	r2,12(r6)
 8010618:	18880014 	ori	r2,r3,8192
 801061c:	30801915 	stw	r2,100(r6)
 8010620:	801049c1 	jmpi	801049c <__fputwc>

08010624 <fputwc>:
 8010624:	008200b4 	movhi	r2,2050
 8010628:	defffc04 	addi	sp,sp,-16
 801062c:	10a11504 	addi	r2,r2,-31660
 8010630:	dc000115 	stw	r16,4(sp)
 8010634:	14000017 	ldw	r16,0(r2)
 8010638:	dc400215 	stw	r17,8(sp)
 801063c:	dfc00315 	stw	ra,12(sp)
 8010640:	2023883a 	mov	r17,r4
 8010644:	80000226 	beq	r16,zero,8010650 <fputwc+0x2c>
 8010648:	80800e17 	ldw	r2,56(r16)
 801064c:	10001026 	beq	r2,zero,8010690 <fputwc+0x6c>
 8010650:	2880030b 	ldhu	r2,12(r5)
 8010654:	10c8000c 	andi	r3,r2,8192
 8010658:	1800051e 	bne	r3,zero,8010670 <fputwc+0x4c>
 801065c:	28c01917 	ldw	r3,100(r5)
 8010660:	10880014 	ori	r2,r2,8192
 8010664:	2880030d 	sth	r2,12(r5)
 8010668:	18880014 	ori	r2,r3,8192
 801066c:	28801915 	stw	r2,100(r5)
 8010670:	280d883a 	mov	r6,r5
 8010674:	8009883a 	mov	r4,r16
 8010678:	880b883a 	mov	r5,r17
 801067c:	dfc00317 	ldw	ra,12(sp)
 8010680:	dc400217 	ldw	r17,8(sp)
 8010684:	dc000117 	ldw	r16,4(sp)
 8010688:	dec00404 	addi	sp,sp,16
 801068c:	801049c1 	jmpi	801049c <__fputwc>
 8010690:	8009883a 	mov	r4,r16
 8010694:	d9400015 	stw	r5,0(sp)
 8010698:	800ba5c0 	call	800ba5c <__sinit>
 801069c:	d9400017 	ldw	r5,0(sp)
 80106a0:	003feb06 	br	8010650 <__alt_data_end+0xf8010650>

080106a4 <_fstat_r>:
 80106a4:	defffd04 	addi	sp,sp,-12
 80106a8:	2805883a 	mov	r2,r5
 80106ac:	dc000015 	stw	r16,0(sp)
 80106b0:	040200b4 	movhi	r16,2050
 80106b4:	dc400115 	stw	r17,4(sp)
 80106b8:	8427f704 	addi	r16,r16,-24612
 80106bc:	2023883a 	mov	r17,r4
 80106c0:	300b883a 	mov	r5,r6
 80106c4:	1009883a 	mov	r4,r2
 80106c8:	dfc00215 	stw	ra,8(sp)
 80106cc:	80000015 	stw	zero,0(r16)
 80106d0:	80141340 	call	8014134 <fstat>
 80106d4:	00ffffc4 	movi	r3,-1
 80106d8:	10c00526 	beq	r2,r3,80106f0 <_fstat_r+0x4c>
 80106dc:	dfc00217 	ldw	ra,8(sp)
 80106e0:	dc400117 	ldw	r17,4(sp)
 80106e4:	dc000017 	ldw	r16,0(sp)
 80106e8:	dec00304 	addi	sp,sp,12
 80106ec:	f800283a 	ret
 80106f0:	80c00017 	ldw	r3,0(r16)
 80106f4:	183ff926 	beq	r3,zero,80106dc <__alt_data_end+0xf80106dc>
 80106f8:	88c00015 	stw	r3,0(r17)
 80106fc:	003ff706 	br	80106dc <__alt_data_end+0xf80106dc>

08010700 <_isatty_r>:
 8010700:	defffd04 	addi	sp,sp,-12
 8010704:	dc000015 	stw	r16,0(sp)
 8010708:	040200b4 	movhi	r16,2050
 801070c:	dc400115 	stw	r17,4(sp)
 8010710:	8427f704 	addi	r16,r16,-24612
 8010714:	2023883a 	mov	r17,r4
 8010718:	2809883a 	mov	r4,r5
 801071c:	dfc00215 	stw	ra,8(sp)
 8010720:	80000015 	stw	zero,0(r16)
 8010724:	80142280 	call	8014228 <isatty>
 8010728:	00ffffc4 	movi	r3,-1
 801072c:	10c00526 	beq	r2,r3,8010744 <_isatty_r+0x44>
 8010730:	dfc00217 	ldw	ra,8(sp)
 8010734:	dc400117 	ldw	r17,4(sp)
 8010738:	dc000017 	ldw	r16,0(sp)
 801073c:	dec00304 	addi	sp,sp,12
 8010740:	f800283a 	ret
 8010744:	80c00017 	ldw	r3,0(r16)
 8010748:	183ff926 	beq	r3,zero,8010730 <__alt_data_end+0xf8010730>
 801074c:	88c00015 	stw	r3,0(r17)
 8010750:	003ff706 	br	8010730 <__alt_data_end+0xf8010730>

08010754 <_lseek_r>:
 8010754:	defffd04 	addi	sp,sp,-12
 8010758:	2805883a 	mov	r2,r5
 801075c:	dc000015 	stw	r16,0(sp)
 8010760:	040200b4 	movhi	r16,2050
 8010764:	dc400115 	stw	r17,4(sp)
 8010768:	300b883a 	mov	r5,r6
 801076c:	8427f704 	addi	r16,r16,-24612
 8010770:	2023883a 	mov	r17,r4
 8010774:	380d883a 	mov	r6,r7
 8010778:	1009883a 	mov	r4,r2
 801077c:	dfc00215 	stw	ra,8(sp)
 8010780:	80000015 	stw	zero,0(r16)
 8010784:	80143fc0 	call	80143fc <lseek>
 8010788:	00ffffc4 	movi	r3,-1
 801078c:	10c00526 	beq	r2,r3,80107a4 <_lseek_r+0x50>
 8010790:	dfc00217 	ldw	ra,8(sp)
 8010794:	dc400117 	ldw	r17,4(sp)
 8010798:	dc000017 	ldw	r16,0(sp)
 801079c:	dec00304 	addi	sp,sp,12
 80107a0:	f800283a 	ret
 80107a4:	80c00017 	ldw	r3,0(r16)
 80107a8:	183ff926 	beq	r3,zero,8010790 <__alt_data_end+0xf8010790>
 80107ac:	88c00015 	stw	r3,0(r17)
 80107b0:	003ff706 	br	8010790 <__alt_data_end+0xf8010790>

080107b4 <_read_r>:
 80107b4:	defffd04 	addi	sp,sp,-12
 80107b8:	2805883a 	mov	r2,r5
 80107bc:	dc000015 	stw	r16,0(sp)
 80107c0:	040200b4 	movhi	r16,2050
 80107c4:	dc400115 	stw	r17,4(sp)
 80107c8:	300b883a 	mov	r5,r6
 80107cc:	8427f704 	addi	r16,r16,-24612
 80107d0:	2023883a 	mov	r17,r4
 80107d4:	380d883a 	mov	r6,r7
 80107d8:	1009883a 	mov	r4,r2
 80107dc:	dfc00215 	stw	ra,8(sp)
 80107e0:	80000015 	stw	zero,0(r16)
 80107e4:	80145d80 	call	80145d8 <read>
 80107e8:	00ffffc4 	movi	r3,-1
 80107ec:	10c00526 	beq	r2,r3,8010804 <_read_r+0x50>
 80107f0:	dfc00217 	ldw	ra,8(sp)
 80107f4:	dc400117 	ldw	r17,4(sp)
 80107f8:	dc000017 	ldw	r16,0(sp)
 80107fc:	dec00304 	addi	sp,sp,12
 8010800:	f800283a 	ret
 8010804:	80c00017 	ldw	r3,0(r16)
 8010808:	183ff926 	beq	r3,zero,80107f0 <__alt_data_end+0xf80107f0>
 801080c:	88c00015 	stw	r3,0(r17)
 8010810:	003ff706 	br	80107f0 <__alt_data_end+0xf80107f0>

08010814 <__swbuf_r>:
 8010814:	defffb04 	addi	sp,sp,-20
 8010818:	dcc00315 	stw	r19,12(sp)
 801081c:	dc800215 	stw	r18,8(sp)
 8010820:	dc000015 	stw	r16,0(sp)
 8010824:	dfc00415 	stw	ra,16(sp)
 8010828:	dc400115 	stw	r17,4(sp)
 801082c:	2025883a 	mov	r18,r4
 8010830:	2827883a 	mov	r19,r5
 8010834:	3021883a 	mov	r16,r6
 8010838:	20000226 	beq	r4,zero,8010844 <__swbuf_r+0x30>
 801083c:	20800e17 	ldw	r2,56(r4)
 8010840:	10004226 	beq	r2,zero,801094c <__swbuf_r+0x138>
 8010844:	80800617 	ldw	r2,24(r16)
 8010848:	8100030b 	ldhu	r4,12(r16)
 801084c:	80800215 	stw	r2,8(r16)
 8010850:	2080020c 	andi	r2,r4,8
 8010854:	10003626 	beq	r2,zero,8010930 <__swbuf_r+0x11c>
 8010858:	80c00417 	ldw	r3,16(r16)
 801085c:	18003426 	beq	r3,zero,8010930 <__swbuf_r+0x11c>
 8010860:	2088000c 	andi	r2,r4,8192
 8010864:	9c403fcc 	andi	r17,r19,255
 8010868:	10001a26 	beq	r2,zero,80108d4 <__swbuf_r+0xc0>
 801086c:	80800017 	ldw	r2,0(r16)
 8010870:	81000517 	ldw	r4,20(r16)
 8010874:	10c7c83a 	sub	r3,r2,r3
 8010878:	1900200e 	bge	r3,r4,80108fc <__swbuf_r+0xe8>
 801087c:	18c00044 	addi	r3,r3,1
 8010880:	81000217 	ldw	r4,8(r16)
 8010884:	11400044 	addi	r5,r2,1
 8010888:	81400015 	stw	r5,0(r16)
 801088c:	213fffc4 	addi	r4,r4,-1
 8010890:	81000215 	stw	r4,8(r16)
 8010894:	14c00005 	stb	r19,0(r2)
 8010898:	80800517 	ldw	r2,20(r16)
 801089c:	10c01e26 	beq	r2,r3,8010918 <__swbuf_r+0x104>
 80108a0:	8080030b 	ldhu	r2,12(r16)
 80108a4:	1080004c 	andi	r2,r2,1
 80108a8:	10000226 	beq	r2,zero,80108b4 <__swbuf_r+0xa0>
 80108ac:	00800284 	movi	r2,10
 80108b0:	88801926 	beq	r17,r2,8010918 <__swbuf_r+0x104>
 80108b4:	8805883a 	mov	r2,r17
 80108b8:	dfc00417 	ldw	ra,16(sp)
 80108bc:	dcc00317 	ldw	r19,12(sp)
 80108c0:	dc800217 	ldw	r18,8(sp)
 80108c4:	dc400117 	ldw	r17,4(sp)
 80108c8:	dc000017 	ldw	r16,0(sp)
 80108cc:	dec00504 	addi	sp,sp,20
 80108d0:	f800283a 	ret
 80108d4:	81401917 	ldw	r5,100(r16)
 80108d8:	00b7ffc4 	movi	r2,-8193
 80108dc:	21080014 	ori	r4,r4,8192
 80108e0:	2884703a 	and	r2,r5,r2
 80108e4:	80801915 	stw	r2,100(r16)
 80108e8:	80800017 	ldw	r2,0(r16)
 80108ec:	8100030d 	sth	r4,12(r16)
 80108f0:	81000517 	ldw	r4,20(r16)
 80108f4:	10c7c83a 	sub	r3,r2,r3
 80108f8:	193fe016 	blt	r3,r4,801087c <__alt_data_end+0xf801087c>
 80108fc:	800b883a 	mov	r5,r16
 8010900:	9009883a 	mov	r4,r18
 8010904:	800b6700 	call	800b670 <_fflush_r>
 8010908:	1000071e 	bne	r2,zero,8010928 <__swbuf_r+0x114>
 801090c:	80800017 	ldw	r2,0(r16)
 8010910:	00c00044 	movi	r3,1
 8010914:	003fda06 	br	8010880 <__alt_data_end+0xf8010880>
 8010918:	800b883a 	mov	r5,r16
 801091c:	9009883a 	mov	r4,r18
 8010920:	800b6700 	call	800b670 <_fflush_r>
 8010924:	103fe326 	beq	r2,zero,80108b4 <__alt_data_end+0xf80108b4>
 8010928:	00bfffc4 	movi	r2,-1
 801092c:	003fe206 	br	80108b8 <__alt_data_end+0xf80108b8>
 8010930:	800b883a 	mov	r5,r16
 8010934:	9009883a 	mov	r4,r18
 8010938:	8009a500 	call	8009a50 <__swsetup_r>
 801093c:	103ffa1e 	bne	r2,zero,8010928 <__alt_data_end+0xf8010928>
 8010940:	8100030b 	ldhu	r4,12(r16)
 8010944:	80c00417 	ldw	r3,16(r16)
 8010948:	003fc506 	br	8010860 <__alt_data_end+0xf8010860>
 801094c:	800ba5c0 	call	800ba5c <__sinit>
 8010950:	003fbc06 	br	8010844 <__alt_data_end+0xf8010844>

08010954 <__swbuf>:
 8010954:	008200b4 	movhi	r2,2050
 8010958:	10a11504 	addi	r2,r2,-31660
 801095c:	280d883a 	mov	r6,r5
 8010960:	200b883a 	mov	r5,r4
 8010964:	11000017 	ldw	r4,0(r2)
 8010968:	80108141 	jmpi	8010814 <__swbuf_r>

0801096c <_wcrtomb_r>:
 801096c:	defff604 	addi	sp,sp,-40
 8010970:	008200b4 	movhi	r2,2050
 8010974:	dc800815 	stw	r18,32(sp)
 8010978:	dc400715 	stw	r17,28(sp)
 801097c:	dc000615 	stw	r16,24(sp)
 8010980:	10a11904 	addi	r2,r2,-31644
 8010984:	dfc00915 	stw	ra,36(sp)
 8010988:	2021883a 	mov	r16,r4
 801098c:	3823883a 	mov	r17,r7
 8010990:	14800017 	ldw	r18,0(r2)
 8010994:	28001426 	beq	r5,zero,80109e8 <_wcrtomb_r+0x7c>
 8010998:	d9400415 	stw	r5,16(sp)
 801099c:	d9800515 	stw	r6,20(sp)
 80109a0:	800c5ac0 	call	800c5ac <__locale_charset>
 80109a4:	d9800517 	ldw	r6,20(sp)
 80109a8:	d9400417 	ldw	r5,16(sp)
 80109ac:	100f883a 	mov	r7,r2
 80109b0:	dc400015 	stw	r17,0(sp)
 80109b4:	8009883a 	mov	r4,r16
 80109b8:	903ee83a 	callr	r18
 80109bc:	00ffffc4 	movi	r3,-1
 80109c0:	10c0031e 	bne	r2,r3,80109d0 <_wcrtomb_r+0x64>
 80109c4:	88000015 	stw	zero,0(r17)
 80109c8:	00c02284 	movi	r3,138
 80109cc:	80c00015 	stw	r3,0(r16)
 80109d0:	dfc00917 	ldw	ra,36(sp)
 80109d4:	dc800817 	ldw	r18,32(sp)
 80109d8:	dc400717 	ldw	r17,28(sp)
 80109dc:	dc000617 	ldw	r16,24(sp)
 80109e0:	dec00a04 	addi	sp,sp,40
 80109e4:	f800283a 	ret
 80109e8:	800c5ac0 	call	800c5ac <__locale_charset>
 80109ec:	100f883a 	mov	r7,r2
 80109f0:	dc400015 	stw	r17,0(sp)
 80109f4:	000d883a 	mov	r6,zero
 80109f8:	d9400104 	addi	r5,sp,4
 80109fc:	8009883a 	mov	r4,r16
 8010a00:	903ee83a 	callr	r18
 8010a04:	003fed06 	br	80109bc <__alt_data_end+0xf80109bc>

08010a08 <wcrtomb>:
 8010a08:	defff604 	addi	sp,sp,-40
 8010a0c:	008200b4 	movhi	r2,2050
 8010a10:	dc800615 	stw	r18,24(sp)
 8010a14:	dc400515 	stw	r17,20(sp)
 8010a18:	10a11504 	addi	r2,r2,-31660
 8010a1c:	dfc00915 	stw	ra,36(sp)
 8010a20:	dd000815 	stw	r20,32(sp)
 8010a24:	dcc00715 	stw	r19,28(sp)
 8010a28:	dc000415 	stw	r16,16(sp)
 8010a2c:	3025883a 	mov	r18,r6
 8010a30:	14400017 	ldw	r17,0(r2)
 8010a34:	20001926 	beq	r4,zero,8010a9c <wcrtomb+0x94>
 8010a38:	008200b4 	movhi	r2,2050
 8010a3c:	10a11904 	addi	r2,r2,-31644
 8010a40:	15000017 	ldw	r20,0(r2)
 8010a44:	2021883a 	mov	r16,r4
 8010a48:	2827883a 	mov	r19,r5
 8010a4c:	800c5ac0 	call	800c5ac <__locale_charset>
 8010a50:	100f883a 	mov	r7,r2
 8010a54:	dc800015 	stw	r18,0(sp)
 8010a58:	980d883a 	mov	r6,r19
 8010a5c:	800b883a 	mov	r5,r16
 8010a60:	8809883a 	mov	r4,r17
 8010a64:	a03ee83a 	callr	r20
 8010a68:	00ffffc4 	movi	r3,-1
 8010a6c:	10c0031e 	bne	r2,r3,8010a7c <wcrtomb+0x74>
 8010a70:	90000015 	stw	zero,0(r18)
 8010a74:	00c02284 	movi	r3,138
 8010a78:	88c00015 	stw	r3,0(r17)
 8010a7c:	dfc00917 	ldw	ra,36(sp)
 8010a80:	dd000817 	ldw	r20,32(sp)
 8010a84:	dcc00717 	ldw	r19,28(sp)
 8010a88:	dc800617 	ldw	r18,24(sp)
 8010a8c:	dc400517 	ldw	r17,20(sp)
 8010a90:	dc000417 	ldw	r16,16(sp)
 8010a94:	dec00a04 	addi	sp,sp,40
 8010a98:	f800283a 	ret
 8010a9c:	008200b4 	movhi	r2,2050
 8010aa0:	10a11904 	addi	r2,r2,-31644
 8010aa4:	14000017 	ldw	r16,0(r2)
 8010aa8:	800c5ac0 	call	800c5ac <__locale_charset>
 8010aac:	100f883a 	mov	r7,r2
 8010ab0:	dc800015 	stw	r18,0(sp)
 8010ab4:	000d883a 	mov	r6,zero
 8010ab8:	d9400104 	addi	r5,sp,4
 8010abc:	8809883a 	mov	r4,r17
 8010ac0:	803ee83a 	callr	r16
 8010ac4:	003fe806 	br	8010a68 <__alt_data_end+0xf8010a68>

08010ac8 <__ascii_wctomb>:
 8010ac8:	28000526 	beq	r5,zero,8010ae0 <__ascii_wctomb+0x18>
 8010acc:	00803fc4 	movi	r2,255
 8010ad0:	11800536 	bltu	r2,r6,8010ae8 <__ascii_wctomb+0x20>
 8010ad4:	29800005 	stb	r6,0(r5)
 8010ad8:	00800044 	movi	r2,1
 8010adc:	f800283a 	ret
 8010ae0:	0005883a 	mov	r2,zero
 8010ae4:	f800283a 	ret
 8010ae8:	00802284 	movi	r2,138
 8010aec:	20800015 	stw	r2,0(r4)
 8010af0:	00bfffc4 	movi	r2,-1
 8010af4:	f800283a 	ret

08010af8 <_wctomb_r>:
 8010af8:	008200b4 	movhi	r2,2050
 8010afc:	defff904 	addi	sp,sp,-28
 8010b00:	10a11904 	addi	r2,r2,-31644
 8010b04:	dfc00615 	stw	ra,24(sp)
 8010b08:	dc400515 	stw	r17,20(sp)
 8010b0c:	dc000415 	stw	r16,16(sp)
 8010b10:	3823883a 	mov	r17,r7
 8010b14:	14000017 	ldw	r16,0(r2)
 8010b18:	d9000115 	stw	r4,4(sp)
 8010b1c:	d9400215 	stw	r5,8(sp)
 8010b20:	d9800315 	stw	r6,12(sp)
 8010b24:	800c5ac0 	call	800c5ac <__locale_charset>
 8010b28:	d9800317 	ldw	r6,12(sp)
 8010b2c:	d9400217 	ldw	r5,8(sp)
 8010b30:	d9000117 	ldw	r4,4(sp)
 8010b34:	100f883a 	mov	r7,r2
 8010b38:	dc400015 	stw	r17,0(sp)
 8010b3c:	803ee83a 	callr	r16
 8010b40:	dfc00617 	ldw	ra,24(sp)
 8010b44:	dc400517 	ldw	r17,20(sp)
 8010b48:	dc000417 	ldw	r16,16(sp)
 8010b4c:	dec00704 	addi	sp,sp,28
 8010b50:	f800283a 	ret

08010b54 <__udivdi3>:
 8010b54:	defff404 	addi	sp,sp,-48
 8010b58:	dcc00515 	stw	r19,20(sp)
 8010b5c:	dc000215 	stw	r16,8(sp)
 8010b60:	dfc00b15 	stw	ra,44(sp)
 8010b64:	df000a15 	stw	fp,40(sp)
 8010b68:	ddc00915 	stw	r23,36(sp)
 8010b6c:	dd800815 	stw	r22,32(sp)
 8010b70:	dd400715 	stw	r21,28(sp)
 8010b74:	dd000615 	stw	r20,24(sp)
 8010b78:	dc800415 	stw	r18,16(sp)
 8010b7c:	dc400315 	stw	r17,12(sp)
 8010b80:	2027883a 	mov	r19,r4
 8010b84:	2821883a 	mov	r16,r5
 8010b88:	3800461e 	bne	r7,zero,8010ca4 <__udivdi3+0x150>
 8010b8c:	3023883a 	mov	r17,r6
 8010b90:	2025883a 	mov	r18,r4
 8010b94:	2980572e 	bgeu	r5,r6,8010cf4 <__udivdi3+0x1a0>
 8010b98:	00bfffd4 	movui	r2,65535
 8010b9c:	282d883a 	mov	r22,r5
 8010ba0:	1180b236 	bltu	r2,r6,8010e6c <__udivdi3+0x318>
 8010ba4:	00803fc4 	movi	r2,255
 8010ba8:	1185803a 	cmpltu	r2,r2,r6
 8010bac:	100490fa 	slli	r2,r2,3
 8010bb0:	3086d83a 	srl	r3,r6,r2
 8010bb4:	01020074 	movhi	r4,2049
 8010bb8:	211a1f04 	addi	r4,r4,26748
 8010bbc:	20c7883a 	add	r3,r4,r3
 8010bc0:	18c00003 	ldbu	r3,0(r3)
 8010bc4:	1885883a 	add	r2,r3,r2
 8010bc8:	00c00804 	movi	r3,32
 8010bcc:	1887c83a 	sub	r3,r3,r2
 8010bd0:	18000526 	beq	r3,zero,8010be8 <__udivdi3+0x94>
 8010bd4:	80e0983a 	sll	r16,r16,r3
 8010bd8:	9884d83a 	srl	r2,r19,r2
 8010bdc:	30e2983a 	sll	r17,r6,r3
 8010be0:	98e4983a 	sll	r18,r19,r3
 8010be4:	142cb03a 	or	r22,r2,r16
 8010be8:	882ad43a 	srli	r21,r17,16
 8010bec:	b009883a 	mov	r4,r22
 8010bf0:	8d3fffcc 	andi	r20,r17,65535
 8010bf4:	a80b883a 	mov	r5,r21
 8010bf8:	80071d40 	call	80071d4 <__umodsi3>
 8010bfc:	b009883a 	mov	r4,r22
 8010c00:	a80b883a 	mov	r5,r21
 8010c04:	1027883a 	mov	r19,r2
 8010c08:	80071700 	call	8007170 <__udivsi3>
 8010c0c:	100b883a 	mov	r5,r2
 8010c10:	a009883a 	mov	r4,r20
 8010c14:	102d883a 	mov	r22,r2
 8010c18:	800722c0 	call	800722c <__mulsi3>
 8010c1c:	9826943a 	slli	r19,r19,16
 8010c20:	9006d43a 	srli	r3,r18,16
 8010c24:	1cc6b03a 	or	r3,r3,r19
 8010c28:	1880052e 	bgeu	r3,r2,8010c40 <__udivdi3+0xec>
 8010c2c:	1c47883a 	add	r3,r3,r17
 8010c30:	b13fffc4 	addi	r4,r22,-1
 8010c34:	1c400136 	bltu	r3,r17,8010c3c <__udivdi3+0xe8>
 8010c38:	18814236 	bltu	r3,r2,8011144 <__udivdi3+0x5f0>
 8010c3c:	202d883a 	mov	r22,r4
 8010c40:	18a1c83a 	sub	r16,r3,r2
 8010c44:	8009883a 	mov	r4,r16
 8010c48:	a80b883a 	mov	r5,r21
 8010c4c:	80071d40 	call	80071d4 <__umodsi3>
 8010c50:	1027883a 	mov	r19,r2
 8010c54:	8009883a 	mov	r4,r16
 8010c58:	a80b883a 	mov	r5,r21
 8010c5c:	9826943a 	slli	r19,r19,16
 8010c60:	80071700 	call	8007170 <__udivsi3>
 8010c64:	100b883a 	mov	r5,r2
 8010c68:	a009883a 	mov	r4,r20
 8010c6c:	94bfffcc 	andi	r18,r18,65535
 8010c70:	1021883a 	mov	r16,r2
 8010c74:	94e4b03a 	or	r18,r18,r19
 8010c78:	800722c0 	call	800722c <__mulsi3>
 8010c7c:	9080052e 	bgeu	r18,r2,8010c94 <__udivdi3+0x140>
 8010c80:	8ca5883a 	add	r18,r17,r18
 8010c84:	80ffffc4 	addi	r3,r16,-1
 8010c88:	94410c36 	bltu	r18,r17,80110bc <__udivdi3+0x568>
 8010c8c:	90810b2e 	bgeu	r18,r2,80110bc <__udivdi3+0x568>
 8010c90:	843fff84 	addi	r16,r16,-2
 8010c94:	b004943a 	slli	r2,r22,16
 8010c98:	0007883a 	mov	r3,zero
 8010c9c:	1404b03a 	or	r2,r2,r16
 8010ca0:	00005e06 	br	8010e1c <__udivdi3+0x2c8>
 8010ca4:	29c05b36 	bltu	r5,r7,8010e14 <__udivdi3+0x2c0>
 8010ca8:	00bfffd4 	movui	r2,65535
 8010cac:	11c0672e 	bgeu	r2,r7,8010e4c <__udivdi3+0x2f8>
 8010cb0:	00804034 	movhi	r2,256
 8010cb4:	10bfffc4 	addi	r2,r2,-1
 8010cb8:	11c10a36 	bltu	r2,r7,80110e4 <__udivdi3+0x590>
 8010cbc:	00800404 	movi	r2,16
 8010cc0:	3886d83a 	srl	r3,r7,r2
 8010cc4:	01020074 	movhi	r4,2049
 8010cc8:	211a1f04 	addi	r4,r4,26748
 8010ccc:	20c7883a 	add	r3,r4,r3
 8010cd0:	18c00003 	ldbu	r3,0(r3)
 8010cd4:	05c00804 	movi	r23,32
 8010cd8:	1885883a 	add	r2,r3,r2
 8010cdc:	b8afc83a 	sub	r23,r23,r2
 8010ce0:	b800671e 	bne	r23,zero,8010e80 <__udivdi3+0x32c>
 8010ce4:	3c010536 	bltu	r7,r16,80110fc <__udivdi3+0x5a8>
 8010ce8:	9985403a 	cmpgeu	r2,r19,r6
 8010cec:	0007883a 	mov	r3,zero
 8010cf0:	00004a06 	br	8010e1c <__udivdi3+0x2c8>
 8010cf4:	3000041e 	bne	r6,zero,8010d08 <__udivdi3+0x1b4>
 8010cf8:	000b883a 	mov	r5,zero
 8010cfc:	01000044 	movi	r4,1
 8010d00:	80071700 	call	8007170 <__udivsi3>
 8010d04:	1023883a 	mov	r17,r2
 8010d08:	00bfffd4 	movui	r2,65535
 8010d0c:	1440532e 	bgeu	r2,r17,8010e5c <__udivdi3+0x308>
 8010d10:	00804034 	movhi	r2,256
 8010d14:	10bfffc4 	addi	r2,r2,-1
 8010d18:	1440f436 	bltu	r2,r17,80110ec <__udivdi3+0x598>
 8010d1c:	00800404 	movi	r2,16
 8010d20:	8886d83a 	srl	r3,r17,r2
 8010d24:	01020074 	movhi	r4,2049
 8010d28:	211a1f04 	addi	r4,r4,26748
 8010d2c:	20c7883a 	add	r3,r4,r3
 8010d30:	18c00003 	ldbu	r3,0(r3)
 8010d34:	1885883a 	add	r2,r3,r2
 8010d38:	00c00804 	movi	r3,32
 8010d3c:	1887c83a 	sub	r3,r3,r2
 8010d40:	1800a51e 	bne	r3,zero,8010fd8 <__udivdi3+0x484>
 8010d44:	882ad43a 	srli	r21,r17,16
 8010d48:	8461c83a 	sub	r16,r16,r17
 8010d4c:	8d3fffcc 	andi	r20,r17,65535
 8010d50:	00c00044 	movi	r3,1
 8010d54:	a80b883a 	mov	r5,r21
 8010d58:	8009883a 	mov	r4,r16
 8010d5c:	d8c00115 	stw	r3,4(sp)
 8010d60:	80071d40 	call	80071d4 <__umodsi3>
 8010d64:	a80b883a 	mov	r5,r21
 8010d68:	8009883a 	mov	r4,r16
 8010d6c:	1027883a 	mov	r19,r2
 8010d70:	80071700 	call	8007170 <__udivsi3>
 8010d74:	a00b883a 	mov	r5,r20
 8010d78:	1009883a 	mov	r4,r2
 8010d7c:	102d883a 	mov	r22,r2
 8010d80:	800722c0 	call	800722c <__mulsi3>
 8010d84:	9826943a 	slli	r19,r19,16
 8010d88:	900ed43a 	srli	r7,r18,16
 8010d8c:	d8c00117 	ldw	r3,4(sp)
 8010d90:	3cceb03a 	or	r7,r7,r19
 8010d94:	3880052e 	bgeu	r7,r2,8010dac <__udivdi3+0x258>
 8010d98:	3c4f883a 	add	r7,r7,r17
 8010d9c:	b13fffc4 	addi	r4,r22,-1
 8010da0:	3c400136 	bltu	r7,r17,8010da8 <__udivdi3+0x254>
 8010da4:	3880e436 	bltu	r7,r2,8011138 <__udivdi3+0x5e4>
 8010da8:	202d883a 	mov	r22,r4
 8010dac:	38a1c83a 	sub	r16,r7,r2
 8010db0:	8009883a 	mov	r4,r16
 8010db4:	a80b883a 	mov	r5,r21
 8010db8:	d8c00115 	stw	r3,4(sp)
 8010dbc:	80071d40 	call	80071d4 <__umodsi3>
 8010dc0:	1027883a 	mov	r19,r2
 8010dc4:	8009883a 	mov	r4,r16
 8010dc8:	a80b883a 	mov	r5,r21
 8010dcc:	9826943a 	slli	r19,r19,16
 8010dd0:	80071700 	call	8007170 <__udivsi3>
 8010dd4:	a00b883a 	mov	r5,r20
 8010dd8:	1009883a 	mov	r4,r2
 8010ddc:	94bfffcc 	andi	r18,r18,65535
 8010de0:	1021883a 	mov	r16,r2
 8010de4:	94e4b03a 	or	r18,r18,r19
 8010de8:	800722c0 	call	800722c <__mulsi3>
 8010dec:	d8c00117 	ldw	r3,4(sp)
 8010df0:	9080052e 	bgeu	r18,r2,8010e08 <__udivdi3+0x2b4>
 8010df4:	8ca5883a 	add	r18,r17,r18
 8010df8:	813fffc4 	addi	r4,r16,-1
 8010dfc:	9440ad36 	bltu	r18,r17,80110b4 <__udivdi3+0x560>
 8010e00:	9080ac2e 	bgeu	r18,r2,80110b4 <__udivdi3+0x560>
 8010e04:	843fff84 	addi	r16,r16,-2
 8010e08:	b004943a 	slli	r2,r22,16
 8010e0c:	1404b03a 	or	r2,r2,r16
 8010e10:	00000206 	br	8010e1c <__udivdi3+0x2c8>
 8010e14:	0007883a 	mov	r3,zero
 8010e18:	0005883a 	mov	r2,zero
 8010e1c:	dfc00b17 	ldw	ra,44(sp)
 8010e20:	df000a17 	ldw	fp,40(sp)
 8010e24:	ddc00917 	ldw	r23,36(sp)
 8010e28:	dd800817 	ldw	r22,32(sp)
 8010e2c:	dd400717 	ldw	r21,28(sp)
 8010e30:	dd000617 	ldw	r20,24(sp)
 8010e34:	dcc00517 	ldw	r19,20(sp)
 8010e38:	dc800417 	ldw	r18,16(sp)
 8010e3c:	dc400317 	ldw	r17,12(sp)
 8010e40:	dc000217 	ldw	r16,8(sp)
 8010e44:	dec00c04 	addi	sp,sp,48
 8010e48:	f800283a 	ret
 8010e4c:	00803fc4 	movi	r2,255
 8010e50:	11c5803a 	cmpltu	r2,r2,r7
 8010e54:	100490fa 	slli	r2,r2,3
 8010e58:	003f9906 	br	8010cc0 <__alt_data_end+0xf8010cc0>
 8010e5c:	00803fc4 	movi	r2,255
 8010e60:	1445803a 	cmpltu	r2,r2,r17
 8010e64:	100490fa 	slli	r2,r2,3
 8010e68:	003fad06 	br	8010d20 <__alt_data_end+0xf8010d20>
 8010e6c:	00804034 	movhi	r2,256
 8010e70:	10bfffc4 	addi	r2,r2,-1
 8010e74:	11809f36 	bltu	r2,r6,80110f4 <__udivdi3+0x5a0>
 8010e78:	00800404 	movi	r2,16
 8010e7c:	003f4c06 	br	8010bb0 <__alt_data_end+0xf8010bb0>
 8010e80:	3dce983a 	sll	r7,r7,r23
 8010e84:	30b8d83a 	srl	fp,r6,r2
 8010e88:	80a2d83a 	srl	r17,r16,r2
 8010e8c:	35cc983a 	sll	r6,r6,r23
 8010e90:	3f38b03a 	or	fp,r7,fp
 8010e94:	e024d43a 	srli	r18,fp,16
 8010e98:	9884d83a 	srl	r2,r19,r2
 8010e9c:	85e0983a 	sll	r16,r16,r23
 8010ea0:	8809883a 	mov	r4,r17
 8010ea4:	900b883a 	mov	r5,r18
 8010ea8:	d9800015 	stw	r6,0(sp)
 8010eac:	1420b03a 	or	r16,r2,r16
 8010eb0:	80071d40 	call	80071d4 <__umodsi3>
 8010eb4:	900b883a 	mov	r5,r18
 8010eb8:	8809883a 	mov	r4,r17
 8010ebc:	1029883a 	mov	r20,r2
 8010ec0:	e5bfffcc 	andi	r22,fp,65535
 8010ec4:	80071700 	call	8007170 <__udivsi3>
 8010ec8:	100b883a 	mov	r5,r2
 8010ecc:	b009883a 	mov	r4,r22
 8010ed0:	102b883a 	mov	r21,r2
 8010ed4:	800722c0 	call	800722c <__mulsi3>
 8010ed8:	a028943a 	slli	r20,r20,16
 8010edc:	8006d43a 	srli	r3,r16,16
 8010ee0:	1d06b03a 	or	r3,r3,r20
 8010ee4:	1880042e 	bgeu	r3,r2,8010ef8 <__udivdi3+0x3a4>
 8010ee8:	1f07883a 	add	r3,r3,fp
 8010eec:	a93fffc4 	addi	r4,r21,-1
 8010ef0:	1f00892e 	bgeu	r3,fp,8011118 <__udivdi3+0x5c4>
 8010ef4:	202b883a 	mov	r21,r4
 8010ef8:	18a3c83a 	sub	r17,r3,r2
 8010efc:	8809883a 	mov	r4,r17
 8010f00:	900b883a 	mov	r5,r18
 8010f04:	80071d40 	call	80071d4 <__umodsi3>
 8010f08:	1029883a 	mov	r20,r2
 8010f0c:	8809883a 	mov	r4,r17
 8010f10:	900b883a 	mov	r5,r18
 8010f14:	a028943a 	slli	r20,r20,16
 8010f18:	80071700 	call	8007170 <__udivsi3>
 8010f1c:	100b883a 	mov	r5,r2
 8010f20:	b009883a 	mov	r4,r22
 8010f24:	843fffcc 	andi	r16,r16,65535
 8010f28:	1023883a 	mov	r17,r2
 8010f2c:	8520b03a 	or	r16,r16,r20
 8010f30:	800722c0 	call	800722c <__mulsi3>
 8010f34:	8080042e 	bgeu	r16,r2,8010f48 <__udivdi3+0x3f4>
 8010f38:	8721883a 	add	r16,r16,fp
 8010f3c:	88ffffc4 	addi	r3,r17,-1
 8010f40:	8700712e 	bgeu	r16,fp,8011108 <__udivdi3+0x5b4>
 8010f44:	1823883a 	mov	r17,r3
 8010f48:	a80e943a 	slli	r7,r21,16
 8010f4c:	d8c00017 	ldw	r3,0(sp)
 8010f50:	80a1c83a 	sub	r16,r16,r2
 8010f54:	3c64b03a 	or	r18,r7,r17
 8010f58:	1d3fffcc 	andi	r20,r3,65535
 8010f5c:	9022d43a 	srli	r17,r18,16
 8010f60:	95bfffcc 	andi	r22,r18,65535
 8010f64:	a00b883a 	mov	r5,r20
 8010f68:	b009883a 	mov	r4,r22
 8010f6c:	182ad43a 	srli	r21,r3,16
 8010f70:	800722c0 	call	800722c <__mulsi3>
 8010f74:	a00b883a 	mov	r5,r20
 8010f78:	8809883a 	mov	r4,r17
 8010f7c:	1039883a 	mov	fp,r2
 8010f80:	800722c0 	call	800722c <__mulsi3>
 8010f84:	8809883a 	mov	r4,r17
 8010f88:	a80b883a 	mov	r5,r21
 8010f8c:	1029883a 	mov	r20,r2
 8010f90:	800722c0 	call	800722c <__mulsi3>
 8010f94:	a80b883a 	mov	r5,r21
 8010f98:	b009883a 	mov	r4,r22
 8010f9c:	1023883a 	mov	r17,r2
 8010fa0:	800722c0 	call	800722c <__mulsi3>
 8010fa4:	e006d43a 	srli	r3,fp,16
 8010fa8:	1505883a 	add	r2,r2,r20
 8010fac:	1887883a 	add	r3,r3,r2
 8010fb0:	1d00022e 	bgeu	r3,r20,8010fbc <__udivdi3+0x468>
 8010fb4:	00800074 	movhi	r2,1
 8010fb8:	88a3883a 	add	r17,r17,r2
 8010fbc:	1804d43a 	srli	r2,r3,16
 8010fc0:	1463883a 	add	r17,r2,r17
 8010fc4:	84404436 	bltu	r16,r17,80110d8 <__udivdi3+0x584>
 8010fc8:	84403e26 	beq	r16,r17,80110c4 <__udivdi3+0x570>
 8010fcc:	9005883a 	mov	r2,r18
 8010fd0:	0007883a 	mov	r3,zero
 8010fd4:	003f9106 	br	8010e1c <__alt_data_end+0xf8010e1c>
 8010fd8:	88e2983a 	sll	r17,r17,r3
 8010fdc:	80aed83a 	srl	r23,r16,r2
 8010fe0:	80e0983a 	sll	r16,r16,r3
 8010fe4:	882ad43a 	srli	r21,r17,16
 8010fe8:	9884d83a 	srl	r2,r19,r2
 8010fec:	b809883a 	mov	r4,r23
 8010ff0:	a80b883a 	mov	r5,r21
 8010ff4:	98e4983a 	sll	r18,r19,r3
 8010ff8:	142cb03a 	or	r22,r2,r16
 8010ffc:	80071d40 	call	80071d4 <__umodsi3>
 8011000:	b809883a 	mov	r4,r23
 8011004:	a80b883a 	mov	r5,r21
 8011008:	1027883a 	mov	r19,r2
 801100c:	8d3fffcc 	andi	r20,r17,65535
 8011010:	80071700 	call	8007170 <__udivsi3>
 8011014:	a009883a 	mov	r4,r20
 8011018:	100b883a 	mov	r5,r2
 801101c:	102f883a 	mov	r23,r2
 8011020:	800722c0 	call	800722c <__mulsi3>
 8011024:	9826943a 	slli	r19,r19,16
 8011028:	b008d43a 	srli	r4,r22,16
 801102c:	24c8b03a 	or	r4,r4,r19
 8011030:	2080062e 	bgeu	r4,r2,801104c <__udivdi3+0x4f8>
 8011034:	2449883a 	add	r4,r4,r17
 8011038:	b8ffffc4 	addi	r3,r23,-1
 801103c:	24403c36 	bltu	r4,r17,8011130 <__udivdi3+0x5dc>
 8011040:	20803b2e 	bgeu	r4,r2,8011130 <__udivdi3+0x5dc>
 8011044:	bdffff84 	addi	r23,r23,-2
 8011048:	2449883a 	add	r4,r4,r17
 801104c:	20a1c83a 	sub	r16,r4,r2
 8011050:	a80b883a 	mov	r5,r21
 8011054:	8009883a 	mov	r4,r16
 8011058:	80071d40 	call	80071d4 <__umodsi3>
 801105c:	a80b883a 	mov	r5,r21
 8011060:	8009883a 	mov	r4,r16
 8011064:	1027883a 	mov	r19,r2
 8011068:	80071700 	call	8007170 <__udivsi3>
 801106c:	a009883a 	mov	r4,r20
 8011070:	100b883a 	mov	r5,r2
 8011074:	9826943a 	slli	r19,r19,16
 8011078:	1039883a 	mov	fp,r2
 801107c:	800722c0 	call	800722c <__mulsi3>
 8011080:	b13fffcc 	andi	r4,r22,65535
 8011084:	24c8b03a 	or	r4,r4,r19
 8011088:	2080062e 	bgeu	r4,r2,80110a4 <__udivdi3+0x550>
 801108c:	2449883a 	add	r4,r4,r17
 8011090:	e0ffffc4 	addi	r3,fp,-1
 8011094:	24402436 	bltu	r4,r17,8011128 <__udivdi3+0x5d4>
 8011098:	2080232e 	bgeu	r4,r2,8011128 <__udivdi3+0x5d4>
 801109c:	e73fff84 	addi	fp,fp,-2
 80110a0:	2449883a 	add	r4,r4,r17
 80110a4:	b82e943a 	slli	r23,r23,16
 80110a8:	20a1c83a 	sub	r16,r4,r2
 80110ac:	bf06b03a 	or	r3,r23,fp
 80110b0:	003f2806 	br	8010d54 <__alt_data_end+0xf8010d54>
 80110b4:	2021883a 	mov	r16,r4
 80110b8:	003f5306 	br	8010e08 <__alt_data_end+0xf8010e08>
 80110bc:	1821883a 	mov	r16,r3
 80110c0:	003ef406 	br	8010c94 <__alt_data_end+0xf8010c94>
 80110c4:	1806943a 	slli	r3,r3,16
 80110c8:	9de6983a 	sll	r19,r19,r23
 80110cc:	e73fffcc 	andi	fp,fp,65535
 80110d0:	1f07883a 	add	r3,r3,fp
 80110d4:	98ffbd2e 	bgeu	r19,r3,8010fcc <__alt_data_end+0xf8010fcc>
 80110d8:	90bfffc4 	addi	r2,r18,-1
 80110dc:	0007883a 	mov	r3,zero
 80110e0:	003f4e06 	br	8010e1c <__alt_data_end+0xf8010e1c>
 80110e4:	00800604 	movi	r2,24
 80110e8:	003ef506 	br	8010cc0 <__alt_data_end+0xf8010cc0>
 80110ec:	00800604 	movi	r2,24
 80110f0:	003f0b06 	br	8010d20 <__alt_data_end+0xf8010d20>
 80110f4:	00800604 	movi	r2,24
 80110f8:	003ead06 	br	8010bb0 <__alt_data_end+0xf8010bb0>
 80110fc:	0007883a 	mov	r3,zero
 8011100:	00800044 	movi	r2,1
 8011104:	003f4506 	br	8010e1c <__alt_data_end+0xf8010e1c>
 8011108:	80bf8e2e 	bgeu	r16,r2,8010f44 <__alt_data_end+0xf8010f44>
 801110c:	8c7fff84 	addi	r17,r17,-2
 8011110:	8721883a 	add	r16,r16,fp
 8011114:	003f8c06 	br	8010f48 <__alt_data_end+0xf8010f48>
 8011118:	18bf762e 	bgeu	r3,r2,8010ef4 <__alt_data_end+0xf8010ef4>
 801111c:	ad7fff84 	addi	r21,r21,-2
 8011120:	1f07883a 	add	r3,r3,fp
 8011124:	003f7406 	br	8010ef8 <__alt_data_end+0xf8010ef8>
 8011128:	1839883a 	mov	fp,r3
 801112c:	003fdd06 	br	80110a4 <__alt_data_end+0xf80110a4>
 8011130:	182f883a 	mov	r23,r3
 8011134:	003fc506 	br	801104c <__alt_data_end+0xf801104c>
 8011138:	b5bfff84 	addi	r22,r22,-2
 801113c:	3c4f883a 	add	r7,r7,r17
 8011140:	003f1a06 	br	8010dac <__alt_data_end+0xf8010dac>
 8011144:	b5bfff84 	addi	r22,r22,-2
 8011148:	1c47883a 	add	r3,r3,r17
 801114c:	003ebc06 	br	8010c40 <__alt_data_end+0xf8010c40>

08011150 <__umoddi3>:
 8011150:	defff304 	addi	sp,sp,-52
 8011154:	df000b15 	stw	fp,44(sp)
 8011158:	dc400415 	stw	r17,16(sp)
 801115c:	dc000315 	stw	r16,12(sp)
 8011160:	dfc00c15 	stw	ra,48(sp)
 8011164:	ddc00a15 	stw	r23,40(sp)
 8011168:	dd800915 	stw	r22,36(sp)
 801116c:	dd400815 	stw	r21,32(sp)
 8011170:	dd000715 	stw	r20,28(sp)
 8011174:	dcc00615 	stw	r19,24(sp)
 8011178:	dc800515 	stw	r18,20(sp)
 801117c:	2021883a 	mov	r16,r4
 8011180:	2823883a 	mov	r17,r5
 8011184:	2839883a 	mov	fp,r5
 8011188:	3800401e 	bne	r7,zero,801128c <__umoddi3+0x13c>
 801118c:	3027883a 	mov	r19,r6
 8011190:	2029883a 	mov	r20,r4
 8011194:	2980552e 	bgeu	r5,r6,80112ec <__umoddi3+0x19c>
 8011198:	00bfffd4 	movui	r2,65535
 801119c:	1180a236 	bltu	r2,r6,8011428 <__umoddi3+0x2d8>
 80111a0:	01003fc4 	movi	r4,255
 80111a4:	2189803a 	cmpltu	r4,r4,r6
 80111a8:	200890fa 	slli	r4,r4,3
 80111ac:	3104d83a 	srl	r2,r6,r4
 80111b0:	00c20074 	movhi	r3,2049
 80111b4:	18da1f04 	addi	r3,r3,26748
 80111b8:	1885883a 	add	r2,r3,r2
 80111bc:	10c00003 	ldbu	r3,0(r2)
 80111c0:	00800804 	movi	r2,32
 80111c4:	1909883a 	add	r4,r3,r4
 80111c8:	1125c83a 	sub	r18,r2,r4
 80111cc:	90000526 	beq	r18,zero,80111e4 <__umoddi3+0x94>
 80111d0:	8ca2983a 	sll	r17,r17,r18
 80111d4:	8108d83a 	srl	r4,r16,r4
 80111d8:	34a6983a 	sll	r19,r6,r18
 80111dc:	84a8983a 	sll	r20,r16,r18
 80111e0:	2478b03a 	or	fp,r4,r17
 80111e4:	982cd43a 	srli	r22,r19,16
 80111e8:	e009883a 	mov	r4,fp
 80111ec:	9dffffcc 	andi	r23,r19,65535
 80111f0:	b00b883a 	mov	r5,r22
 80111f4:	80071d40 	call	80071d4 <__umodsi3>
 80111f8:	b00b883a 	mov	r5,r22
 80111fc:	e009883a 	mov	r4,fp
 8011200:	102b883a 	mov	r21,r2
 8011204:	80071700 	call	8007170 <__udivsi3>
 8011208:	100b883a 	mov	r5,r2
 801120c:	b809883a 	mov	r4,r23
 8011210:	800722c0 	call	800722c <__mulsi3>
 8011214:	a82a943a 	slli	r21,r21,16
 8011218:	a006d43a 	srli	r3,r20,16
 801121c:	1d46b03a 	or	r3,r3,r21
 8011220:	1880032e 	bgeu	r3,r2,8011230 <__umoddi3+0xe0>
 8011224:	1cc7883a 	add	r3,r3,r19
 8011228:	1cc00136 	bltu	r3,r19,8011230 <__umoddi3+0xe0>
 801122c:	18813136 	bltu	r3,r2,80116f4 <__umoddi3+0x5a4>
 8011230:	18a1c83a 	sub	r16,r3,r2
 8011234:	b00b883a 	mov	r5,r22
 8011238:	8009883a 	mov	r4,r16
 801123c:	80071d40 	call	80071d4 <__umodsi3>
 8011240:	b00b883a 	mov	r5,r22
 8011244:	8009883a 	mov	r4,r16
 8011248:	1023883a 	mov	r17,r2
 801124c:	80071700 	call	8007170 <__udivsi3>
 8011250:	100b883a 	mov	r5,r2
 8011254:	b809883a 	mov	r4,r23
 8011258:	8822943a 	slli	r17,r17,16
 801125c:	800722c0 	call	800722c <__mulsi3>
 8011260:	a0ffffcc 	andi	r3,r20,65535
 8011264:	1c46b03a 	or	r3,r3,r17
 8011268:	1880042e 	bgeu	r3,r2,801127c <__umoddi3+0x12c>
 801126c:	1cc7883a 	add	r3,r3,r19
 8011270:	1cc00236 	bltu	r3,r19,801127c <__umoddi3+0x12c>
 8011274:	1880012e 	bgeu	r3,r2,801127c <__umoddi3+0x12c>
 8011278:	1cc7883a 	add	r3,r3,r19
 801127c:	1885c83a 	sub	r2,r3,r2
 8011280:	1484d83a 	srl	r2,r2,r18
 8011284:	0007883a 	mov	r3,zero
 8011288:	00005306 	br	80113d8 <__umoddi3+0x288>
 801128c:	29c05036 	bltu	r5,r7,80113d0 <__umoddi3+0x280>
 8011290:	00bfffd4 	movui	r2,65535
 8011294:	11c05c2e 	bgeu	r2,r7,8011408 <__umoddi3+0x2b8>
 8011298:	00804034 	movhi	r2,256
 801129c:	10bfffc4 	addi	r2,r2,-1
 80112a0:	11c10636 	bltu	r2,r7,80116bc <__umoddi3+0x56c>
 80112a4:	01000404 	movi	r4,16
 80112a8:	3904d83a 	srl	r2,r7,r4
 80112ac:	00c20074 	movhi	r3,2049
 80112b0:	18da1f04 	addi	r3,r3,26748
 80112b4:	1885883a 	add	r2,r3,r2
 80112b8:	14c00003 	ldbu	r19,0(r2)
 80112bc:	00c00804 	movi	r3,32
 80112c0:	9927883a 	add	r19,r19,r4
 80112c4:	1ce9c83a 	sub	r20,r3,r19
 80112c8:	a0005c1e 	bne	r20,zero,801143c <__umoddi3+0x2ec>
 80112cc:	3c400136 	bltu	r7,r17,80112d4 <__umoddi3+0x184>
 80112d0:	81810a36 	bltu	r16,r6,80116fc <__umoddi3+0x5ac>
 80112d4:	8185c83a 	sub	r2,r16,r6
 80112d8:	89e3c83a 	sub	r17,r17,r7
 80112dc:	8089803a 	cmpltu	r4,r16,r2
 80112e0:	8939c83a 	sub	fp,r17,r4
 80112e4:	e007883a 	mov	r3,fp
 80112e8:	00003b06 	br	80113d8 <__umoddi3+0x288>
 80112ec:	3000041e 	bne	r6,zero,8011300 <__umoddi3+0x1b0>
 80112f0:	000b883a 	mov	r5,zero
 80112f4:	01000044 	movi	r4,1
 80112f8:	80071700 	call	8007170 <__udivsi3>
 80112fc:	1027883a 	mov	r19,r2
 8011300:	00bfffd4 	movui	r2,65535
 8011304:	14c0442e 	bgeu	r2,r19,8011418 <__umoddi3+0x2c8>
 8011308:	00804034 	movhi	r2,256
 801130c:	10bfffc4 	addi	r2,r2,-1
 8011310:	14c0ec36 	bltu	r2,r19,80116c4 <__umoddi3+0x574>
 8011314:	00800404 	movi	r2,16
 8011318:	9886d83a 	srl	r3,r19,r2
 801131c:	01020074 	movhi	r4,2049
 8011320:	211a1f04 	addi	r4,r4,26748
 8011324:	20c7883a 	add	r3,r4,r3
 8011328:	18c00003 	ldbu	r3,0(r3)
 801132c:	1887883a 	add	r3,r3,r2
 8011330:	00800804 	movi	r2,32
 8011334:	10e5c83a 	sub	r18,r2,r3
 8011338:	9000ab1e 	bne	r18,zero,80115e8 <__umoddi3+0x498>
 801133c:	982cd43a 	srli	r22,r19,16
 8011340:	8ce3c83a 	sub	r17,r17,r19
 8011344:	9dffffcc 	andi	r23,r19,65535
 8011348:	b00b883a 	mov	r5,r22
 801134c:	8809883a 	mov	r4,r17
 8011350:	80071d40 	call	80071d4 <__umodsi3>
 8011354:	b00b883a 	mov	r5,r22
 8011358:	8809883a 	mov	r4,r17
 801135c:	102b883a 	mov	r21,r2
 8011360:	80071700 	call	8007170 <__udivsi3>
 8011364:	b80b883a 	mov	r5,r23
 8011368:	1009883a 	mov	r4,r2
 801136c:	800722c0 	call	800722c <__mulsi3>
 8011370:	a82a943a 	slli	r21,r21,16
 8011374:	a006d43a 	srli	r3,r20,16
 8011378:	1d46b03a 	or	r3,r3,r21
 801137c:	1880042e 	bgeu	r3,r2,8011390 <__umoddi3+0x240>
 8011380:	1cc7883a 	add	r3,r3,r19
 8011384:	1cc00236 	bltu	r3,r19,8011390 <__umoddi3+0x240>
 8011388:	1880012e 	bgeu	r3,r2,8011390 <__umoddi3+0x240>
 801138c:	1cc7883a 	add	r3,r3,r19
 8011390:	18a1c83a 	sub	r16,r3,r2
 8011394:	b00b883a 	mov	r5,r22
 8011398:	8009883a 	mov	r4,r16
 801139c:	80071d40 	call	80071d4 <__umodsi3>
 80113a0:	1023883a 	mov	r17,r2
 80113a4:	b00b883a 	mov	r5,r22
 80113a8:	8009883a 	mov	r4,r16
 80113ac:	80071700 	call	8007170 <__udivsi3>
 80113b0:	8822943a 	slli	r17,r17,16
 80113b4:	b80b883a 	mov	r5,r23
 80113b8:	1009883a 	mov	r4,r2
 80113bc:	800722c0 	call	800722c <__mulsi3>
 80113c0:	a53fffcc 	andi	r20,r20,65535
 80113c4:	a446b03a 	or	r3,r20,r17
 80113c8:	18bfac2e 	bgeu	r3,r2,801127c <__alt_data_end+0xf801127c>
 80113cc:	003fa706 	br	801126c <__alt_data_end+0xf801126c>
 80113d0:	2005883a 	mov	r2,r4
 80113d4:	2807883a 	mov	r3,r5
 80113d8:	dfc00c17 	ldw	ra,48(sp)
 80113dc:	df000b17 	ldw	fp,44(sp)
 80113e0:	ddc00a17 	ldw	r23,40(sp)
 80113e4:	dd800917 	ldw	r22,36(sp)
 80113e8:	dd400817 	ldw	r21,32(sp)
 80113ec:	dd000717 	ldw	r20,28(sp)
 80113f0:	dcc00617 	ldw	r19,24(sp)
 80113f4:	dc800517 	ldw	r18,20(sp)
 80113f8:	dc400417 	ldw	r17,16(sp)
 80113fc:	dc000317 	ldw	r16,12(sp)
 8011400:	dec00d04 	addi	sp,sp,52
 8011404:	f800283a 	ret
 8011408:	04c03fc4 	movi	r19,255
 801140c:	99c9803a 	cmpltu	r4,r19,r7
 8011410:	200890fa 	slli	r4,r4,3
 8011414:	003fa406 	br	80112a8 <__alt_data_end+0xf80112a8>
 8011418:	00803fc4 	movi	r2,255
 801141c:	14c5803a 	cmpltu	r2,r2,r19
 8011420:	100490fa 	slli	r2,r2,3
 8011424:	003fbc06 	br	8011318 <__alt_data_end+0xf8011318>
 8011428:	00804034 	movhi	r2,256
 801142c:	10bfffc4 	addi	r2,r2,-1
 8011430:	1180a636 	bltu	r2,r6,80116cc <__umoddi3+0x57c>
 8011434:	01000404 	movi	r4,16
 8011438:	003f5c06 	br	80111ac <__alt_data_end+0xf80111ac>
 801143c:	3d0e983a 	sll	r7,r7,r20
 8011440:	34ead83a 	srl	r21,r6,r19
 8011444:	8cc6d83a 	srl	r3,r17,r19
 8011448:	8d10983a 	sll	r8,r17,r20
 801144c:	3d6ab03a 	or	r21,r7,r21
 8011450:	a82cd43a 	srli	r22,r21,16
 8011454:	84e2d83a 	srl	r17,r16,r19
 8011458:	1809883a 	mov	r4,r3
 801145c:	b00b883a 	mov	r5,r22
 8011460:	8a22b03a 	or	r17,r17,r8
 8011464:	3524983a 	sll	r18,r6,r20
 8011468:	dc400015 	stw	r17,0(sp)
 801146c:	d8c00115 	stw	r3,4(sp)
 8011470:	80071d40 	call	80071d4 <__umodsi3>
 8011474:	d8c00117 	ldw	r3,4(sp)
 8011478:	b00b883a 	mov	r5,r22
 801147c:	1039883a 	mov	fp,r2
 8011480:	1809883a 	mov	r4,r3
 8011484:	80071700 	call	8007170 <__udivsi3>
 8011488:	adffffcc 	andi	r23,r21,65535
 801148c:	100b883a 	mov	r5,r2
 8011490:	b809883a 	mov	r4,r23
 8011494:	1023883a 	mov	r17,r2
 8011498:	800722c0 	call	800722c <__mulsi3>
 801149c:	d9400017 	ldw	r5,0(sp)
 80114a0:	e008943a 	slli	r4,fp,16
 80114a4:	8520983a 	sll	r16,r16,r20
 80114a8:	2806d43a 	srli	r3,r5,16
 80114ac:	1906b03a 	or	r3,r3,r4
 80114b0:	1880042e 	bgeu	r3,r2,80114c4 <__umoddi3+0x374>
 80114b4:	1d47883a 	add	r3,r3,r21
 80114b8:	893fffc4 	addi	r4,r17,-1
 80114bc:	1d40892e 	bgeu	r3,r21,80116e4 <__umoddi3+0x594>
 80114c0:	2023883a 	mov	r17,r4
 80114c4:	18b9c83a 	sub	fp,r3,r2
 80114c8:	b00b883a 	mov	r5,r22
 80114cc:	e009883a 	mov	r4,fp
 80114d0:	80071d40 	call	80071d4 <__umodsi3>
 80114d4:	b00b883a 	mov	r5,r22
 80114d8:	e009883a 	mov	r4,fp
 80114dc:	d8800215 	stw	r2,8(sp)
 80114e0:	80071700 	call	8007170 <__udivsi3>
 80114e4:	100b883a 	mov	r5,r2
 80114e8:	b809883a 	mov	r4,r23
 80114ec:	102d883a 	mov	r22,r2
 80114f0:	800722c0 	call	800722c <__mulsi3>
 80114f4:	d9800217 	ldw	r6,8(sp)
 80114f8:	d8c00017 	ldw	r3,0(sp)
 80114fc:	300c943a 	slli	r6,r6,16
 8011500:	1a3fffcc 	andi	r8,r3,65535
 8011504:	4190b03a 	or	r8,r8,r6
 8011508:	4080042e 	bgeu	r8,r2,801151c <__umoddi3+0x3cc>
 801150c:	4551883a 	add	r8,r8,r21
 8011510:	b0ffffc4 	addi	r3,r22,-1
 8011514:	45406f2e 	bgeu	r8,r21,80116d4 <__umoddi3+0x584>
 8011518:	182d883a 	mov	r22,r3
 801151c:	880e943a 	slli	r7,r17,16
 8011520:	9006d43a 	srli	r3,r18,16
 8011524:	91bfffcc 	andi	r6,r18,65535
 8011528:	3dacb03a 	or	r22,r7,r22
 801152c:	b02ed43a 	srli	r23,r22,16
 8011530:	b5bfffcc 	andi	r22,r22,65535
 8011534:	300b883a 	mov	r5,r6
 8011538:	b009883a 	mov	r4,r22
 801153c:	40a3c83a 	sub	r17,r8,r2
 8011540:	d8c00115 	stw	r3,4(sp)
 8011544:	d9800215 	stw	r6,8(sp)
 8011548:	800722c0 	call	800722c <__mulsi3>
 801154c:	d9800217 	ldw	r6,8(sp)
 8011550:	b809883a 	mov	r4,r23
 8011554:	1039883a 	mov	fp,r2
 8011558:	300b883a 	mov	r5,r6
 801155c:	800722c0 	call	800722c <__mulsi3>
 8011560:	d8c00117 	ldw	r3,4(sp)
 8011564:	b809883a 	mov	r4,r23
 8011568:	d8800215 	stw	r2,8(sp)
 801156c:	180b883a 	mov	r5,r3
 8011570:	800722c0 	call	800722c <__mulsi3>
 8011574:	d8c00117 	ldw	r3,4(sp)
 8011578:	b009883a 	mov	r4,r22
 801157c:	102f883a 	mov	r23,r2
 8011580:	180b883a 	mov	r5,r3
 8011584:	800722c0 	call	800722c <__mulsi3>
 8011588:	d9800217 	ldw	r6,8(sp)
 801158c:	e006d43a 	srli	r3,fp,16
 8011590:	1185883a 	add	r2,r2,r6
 8011594:	1885883a 	add	r2,r3,r2
 8011598:	1180022e 	bgeu	r2,r6,80115a4 <__umoddi3+0x454>
 801159c:	00c00074 	movhi	r3,1
 80115a0:	b8ef883a 	add	r23,r23,r3
 80115a4:	1006d43a 	srli	r3,r2,16
 80115a8:	1004943a 	slli	r2,r2,16
 80115ac:	e73fffcc 	andi	fp,fp,65535
 80115b0:	1dc7883a 	add	r3,r3,r23
 80115b4:	1739883a 	add	fp,r2,fp
 80115b8:	88c03a36 	bltu	r17,r3,80116a4 <__umoddi3+0x554>
 80115bc:	88c05126 	beq	r17,r3,8011704 <__umoddi3+0x5b4>
 80115c0:	88c9c83a 	sub	r4,r17,r3
 80115c4:	e00f883a 	mov	r7,fp
 80115c8:	81cfc83a 	sub	r7,r16,r7
 80115cc:	81c7803a 	cmpltu	r3,r16,r7
 80115d0:	20c7c83a 	sub	r3,r4,r3
 80115d4:	1cc4983a 	sll	r2,r3,r19
 80115d8:	3d0ed83a 	srl	r7,r7,r20
 80115dc:	1d06d83a 	srl	r3,r3,r20
 80115e0:	11c4b03a 	or	r2,r2,r7
 80115e4:	003f7c06 	br	80113d8 <__alt_data_end+0xf80113d8>
 80115e8:	9ca6983a 	sll	r19,r19,r18
 80115ec:	88f8d83a 	srl	fp,r17,r3
 80115f0:	80c4d83a 	srl	r2,r16,r3
 80115f4:	982cd43a 	srli	r22,r19,16
 80115f8:	8ca2983a 	sll	r17,r17,r18
 80115fc:	e009883a 	mov	r4,fp
 8011600:	b00b883a 	mov	r5,r22
 8011604:	146ab03a 	or	r21,r2,r17
 8011608:	80071d40 	call	80071d4 <__umodsi3>
 801160c:	b00b883a 	mov	r5,r22
 8011610:	e009883a 	mov	r4,fp
 8011614:	1029883a 	mov	r20,r2
 8011618:	9dffffcc 	andi	r23,r19,65535
 801161c:	80071700 	call	8007170 <__udivsi3>
 8011620:	b809883a 	mov	r4,r23
 8011624:	100b883a 	mov	r5,r2
 8011628:	800722c0 	call	800722c <__mulsi3>
 801162c:	a008943a 	slli	r4,r20,16
 8011630:	a806d43a 	srli	r3,r21,16
 8011634:	84a8983a 	sll	r20,r16,r18
 8011638:	1906b03a 	or	r3,r3,r4
 801163c:	1880042e 	bgeu	r3,r2,8011650 <__umoddi3+0x500>
 8011640:	1cc7883a 	add	r3,r3,r19
 8011644:	1cc00236 	bltu	r3,r19,8011650 <__umoddi3+0x500>
 8011648:	1880012e 	bgeu	r3,r2,8011650 <__umoddi3+0x500>
 801164c:	1cc7883a 	add	r3,r3,r19
 8011650:	18a3c83a 	sub	r17,r3,r2
 8011654:	b00b883a 	mov	r5,r22
 8011658:	8809883a 	mov	r4,r17
 801165c:	80071d40 	call	80071d4 <__umodsi3>
 8011660:	b00b883a 	mov	r5,r22
 8011664:	8809883a 	mov	r4,r17
 8011668:	1021883a 	mov	r16,r2
 801166c:	80071700 	call	8007170 <__udivsi3>
 8011670:	100b883a 	mov	r5,r2
 8011674:	b809883a 	mov	r4,r23
 8011678:	8020943a 	slli	r16,r16,16
 801167c:	800722c0 	call	800722c <__mulsi3>
 8011680:	a8ffffcc 	andi	r3,r21,65535
 8011684:	1c06b03a 	or	r3,r3,r16
 8011688:	1880042e 	bgeu	r3,r2,801169c <__umoddi3+0x54c>
 801168c:	1cc7883a 	add	r3,r3,r19
 8011690:	1cc00236 	bltu	r3,r19,801169c <__umoddi3+0x54c>
 8011694:	1880012e 	bgeu	r3,r2,801169c <__umoddi3+0x54c>
 8011698:	1cc7883a 	add	r3,r3,r19
 801169c:	18a3c83a 	sub	r17,r3,r2
 80116a0:	003f2906 	br	8011348 <__alt_data_end+0xf8011348>
 80116a4:	e48fc83a 	sub	r7,fp,r18
 80116a8:	1d49c83a 	sub	r4,r3,r21
 80116ac:	e1f9803a 	cmpltu	fp,fp,r7
 80116b0:	2739c83a 	sub	fp,r4,fp
 80116b4:	8f09c83a 	sub	r4,r17,fp
 80116b8:	003fc306 	br	80115c8 <__alt_data_end+0xf80115c8>
 80116bc:	01000604 	movi	r4,24
 80116c0:	003ef906 	br	80112a8 <__alt_data_end+0xf80112a8>
 80116c4:	00800604 	movi	r2,24
 80116c8:	003f1306 	br	8011318 <__alt_data_end+0xf8011318>
 80116cc:	01000604 	movi	r4,24
 80116d0:	003eb606 	br	80111ac <__alt_data_end+0xf80111ac>
 80116d4:	40bf902e 	bgeu	r8,r2,8011518 <__alt_data_end+0xf8011518>
 80116d8:	b5bfff84 	addi	r22,r22,-2
 80116dc:	4551883a 	add	r8,r8,r21
 80116e0:	003f8e06 	br	801151c <__alt_data_end+0xf801151c>
 80116e4:	18bf762e 	bgeu	r3,r2,80114c0 <__alt_data_end+0xf80114c0>
 80116e8:	8c7fff84 	addi	r17,r17,-2
 80116ec:	1d47883a 	add	r3,r3,r21
 80116f0:	003f7406 	br	80114c4 <__alt_data_end+0xf80114c4>
 80116f4:	1cc7883a 	add	r3,r3,r19
 80116f8:	003ecd06 	br	8011230 <__alt_data_end+0xf8011230>
 80116fc:	8005883a 	mov	r2,r16
 8011700:	003ef806 	br	80112e4 <__alt_data_end+0xf80112e4>
 8011704:	873fe736 	bltu	r16,fp,80116a4 <__alt_data_end+0xf80116a4>
 8011708:	e00f883a 	mov	r7,fp
 801170c:	0009883a 	mov	r4,zero
 8011710:	003fad06 	br	80115c8 <__alt_data_end+0xf80115c8>

08011714 <__adddf3>:
 8011714:	02c00434 	movhi	r11,16
 8011718:	5affffc4 	addi	r11,r11,-1
 801171c:	2806d7fa 	srli	r3,r5,31
 8011720:	2ad4703a 	and	r10,r5,r11
 8011724:	3ad2703a 	and	r9,r7,r11
 8011728:	3804d53a 	srli	r2,r7,20
 801172c:	3018d77a 	srli	r12,r6,29
 8011730:	280ad53a 	srli	r5,r5,20
 8011734:	501490fa 	slli	r10,r10,3
 8011738:	2010d77a 	srli	r8,r4,29
 801173c:	481290fa 	slli	r9,r9,3
 8011740:	380ed7fa 	srli	r7,r7,31
 8011744:	defffb04 	addi	sp,sp,-20
 8011748:	dc800215 	stw	r18,8(sp)
 801174c:	dc400115 	stw	r17,4(sp)
 8011750:	dc000015 	stw	r16,0(sp)
 8011754:	dfc00415 	stw	ra,16(sp)
 8011758:	dcc00315 	stw	r19,12(sp)
 801175c:	1c803fcc 	andi	r18,r3,255
 8011760:	2c01ffcc 	andi	r16,r5,2047
 8011764:	5210b03a 	or	r8,r10,r8
 8011768:	202290fa 	slli	r17,r4,3
 801176c:	1081ffcc 	andi	r2,r2,2047
 8011770:	4b12b03a 	or	r9,r9,r12
 8011774:	300c90fa 	slli	r6,r6,3
 8011778:	91c07526 	beq	r18,r7,8011950 <__adddf3+0x23c>
 801177c:	8087c83a 	sub	r3,r16,r2
 8011780:	00c0ab0e 	bge	zero,r3,8011a30 <__adddf3+0x31c>
 8011784:	10002a1e 	bne	r2,zero,8011830 <__adddf3+0x11c>
 8011788:	4984b03a 	or	r2,r9,r6
 801178c:	1000961e 	bne	r2,zero,80119e8 <__adddf3+0x2d4>
 8011790:	888001cc 	andi	r2,r17,7
 8011794:	10000726 	beq	r2,zero,80117b4 <__adddf3+0xa0>
 8011798:	888003cc 	andi	r2,r17,15
 801179c:	00c00104 	movi	r3,4
 80117a0:	10c00426 	beq	r2,r3,80117b4 <__adddf3+0xa0>
 80117a4:	88c7883a 	add	r3,r17,r3
 80117a8:	1c63803a 	cmpltu	r17,r3,r17
 80117ac:	4451883a 	add	r8,r8,r17
 80117b0:	1823883a 	mov	r17,r3
 80117b4:	4080202c 	andhi	r2,r8,128
 80117b8:	10005926 	beq	r2,zero,8011920 <__adddf3+0x20c>
 80117bc:	84000044 	addi	r16,r16,1
 80117c0:	0081ffc4 	movi	r2,2047
 80117c4:	8080ba26 	beq	r16,r2,8011ab0 <__adddf3+0x39c>
 80117c8:	00bfe034 	movhi	r2,65408
 80117cc:	10bfffc4 	addi	r2,r2,-1
 80117d0:	4090703a 	and	r8,r8,r2
 80117d4:	4004977a 	slli	r2,r8,29
 80117d8:	4010927a 	slli	r8,r8,9
 80117dc:	8822d0fa 	srli	r17,r17,3
 80117e0:	8401ffcc 	andi	r16,r16,2047
 80117e4:	4010d33a 	srli	r8,r8,12
 80117e8:	9007883a 	mov	r3,r18
 80117ec:	1444b03a 	or	r2,r2,r17
 80117f0:	8401ffcc 	andi	r16,r16,2047
 80117f4:	8020953a 	slli	r16,r16,20
 80117f8:	18c03fcc 	andi	r3,r3,255
 80117fc:	01000434 	movhi	r4,16
 8011800:	213fffc4 	addi	r4,r4,-1
 8011804:	180697fa 	slli	r3,r3,31
 8011808:	4110703a 	and	r8,r8,r4
 801180c:	4410b03a 	or	r8,r8,r16
 8011810:	40c6b03a 	or	r3,r8,r3
 8011814:	dfc00417 	ldw	ra,16(sp)
 8011818:	dcc00317 	ldw	r19,12(sp)
 801181c:	dc800217 	ldw	r18,8(sp)
 8011820:	dc400117 	ldw	r17,4(sp)
 8011824:	dc000017 	ldw	r16,0(sp)
 8011828:	dec00504 	addi	sp,sp,20
 801182c:	f800283a 	ret
 8011830:	0081ffc4 	movi	r2,2047
 8011834:	80bfd626 	beq	r16,r2,8011790 <__alt_data_end+0xf8011790>
 8011838:	4a402034 	orhi	r9,r9,128
 801183c:	00800e04 	movi	r2,56
 8011840:	10c09f16 	blt	r2,r3,8011ac0 <__adddf3+0x3ac>
 8011844:	008007c4 	movi	r2,31
 8011848:	10c0c216 	blt	r2,r3,8011b54 <__adddf3+0x440>
 801184c:	00800804 	movi	r2,32
 8011850:	10c5c83a 	sub	r2,r2,r3
 8011854:	488a983a 	sll	r5,r9,r2
 8011858:	30c8d83a 	srl	r4,r6,r3
 801185c:	3084983a 	sll	r2,r6,r2
 8011860:	48c6d83a 	srl	r3,r9,r3
 8011864:	290cb03a 	or	r6,r5,r4
 8011868:	1004c03a 	cmpne	r2,r2,zero
 801186c:	308cb03a 	or	r6,r6,r2
 8011870:	898dc83a 	sub	r6,r17,r6
 8011874:	89a3803a 	cmpltu	r17,r17,r6
 8011878:	40d1c83a 	sub	r8,r8,r3
 801187c:	4451c83a 	sub	r8,r8,r17
 8011880:	3023883a 	mov	r17,r6
 8011884:	4080202c 	andhi	r2,r8,128
 8011888:	10002326 	beq	r2,zero,8011918 <__adddf3+0x204>
 801188c:	04c02034 	movhi	r19,128
 8011890:	9cffffc4 	addi	r19,r19,-1
 8011894:	44e6703a 	and	r19,r8,r19
 8011898:	98007626 	beq	r19,zero,8011a74 <__adddf3+0x360>
 801189c:	9809883a 	mov	r4,r19
 80118a0:	8013f540 	call	8013f54 <__clzsi2>
 80118a4:	10fffe04 	addi	r3,r2,-8
 80118a8:	010007c4 	movi	r4,31
 80118ac:	20c07716 	blt	r4,r3,8011a8c <__adddf3+0x378>
 80118b0:	00800804 	movi	r2,32
 80118b4:	10c5c83a 	sub	r2,r2,r3
 80118b8:	8884d83a 	srl	r2,r17,r2
 80118bc:	98d0983a 	sll	r8,r19,r3
 80118c0:	88e2983a 	sll	r17,r17,r3
 80118c4:	1204b03a 	or	r2,r2,r8
 80118c8:	1c007416 	blt	r3,r16,8011a9c <__adddf3+0x388>
 80118cc:	1c21c83a 	sub	r16,r3,r16
 80118d0:	82000044 	addi	r8,r16,1
 80118d4:	00c007c4 	movi	r3,31
 80118d8:	1a009116 	blt	r3,r8,8011b20 <__adddf3+0x40c>
 80118dc:	00c00804 	movi	r3,32
 80118e0:	1a07c83a 	sub	r3,r3,r8
 80118e4:	8a08d83a 	srl	r4,r17,r8
 80118e8:	88e2983a 	sll	r17,r17,r3
 80118ec:	10c6983a 	sll	r3,r2,r3
 80118f0:	1210d83a 	srl	r8,r2,r8
 80118f4:	8804c03a 	cmpne	r2,r17,zero
 80118f8:	1906b03a 	or	r3,r3,r4
 80118fc:	18a2b03a 	or	r17,r3,r2
 8011900:	0021883a 	mov	r16,zero
 8011904:	003fa206 	br	8011790 <__alt_data_end+0xf8011790>
 8011908:	1890b03a 	or	r8,r3,r2
 801190c:	40017d26 	beq	r8,zero,8011f04 <__adddf3+0x7f0>
 8011910:	1011883a 	mov	r8,r2
 8011914:	1823883a 	mov	r17,r3
 8011918:	888001cc 	andi	r2,r17,7
 801191c:	103f9e1e 	bne	r2,zero,8011798 <__alt_data_end+0xf8011798>
 8011920:	4004977a 	slli	r2,r8,29
 8011924:	8822d0fa 	srli	r17,r17,3
 8011928:	4010d0fa 	srli	r8,r8,3
 801192c:	9007883a 	mov	r3,r18
 8011930:	1444b03a 	or	r2,r2,r17
 8011934:	0101ffc4 	movi	r4,2047
 8011938:	81002426 	beq	r16,r4,80119cc <__adddf3+0x2b8>
 801193c:	8120703a 	and	r16,r16,r4
 8011940:	01000434 	movhi	r4,16
 8011944:	213fffc4 	addi	r4,r4,-1
 8011948:	4110703a 	and	r8,r8,r4
 801194c:	003fa806 	br	80117f0 <__alt_data_end+0xf80117f0>
 8011950:	8089c83a 	sub	r4,r16,r2
 8011954:	01005e0e 	bge	zero,r4,8011ad0 <__adddf3+0x3bc>
 8011958:	10002b26 	beq	r2,zero,8011a08 <__adddf3+0x2f4>
 801195c:	0081ffc4 	movi	r2,2047
 8011960:	80bf8b26 	beq	r16,r2,8011790 <__alt_data_end+0xf8011790>
 8011964:	4a402034 	orhi	r9,r9,128
 8011968:	00800e04 	movi	r2,56
 801196c:	1100a40e 	bge	r2,r4,8011c00 <__adddf3+0x4ec>
 8011970:	498cb03a 	or	r6,r9,r6
 8011974:	300ac03a 	cmpne	r5,r6,zero
 8011978:	0013883a 	mov	r9,zero
 801197c:	2c4b883a 	add	r5,r5,r17
 8011980:	2c63803a 	cmpltu	r17,r5,r17
 8011984:	4a11883a 	add	r8,r9,r8
 8011988:	8a11883a 	add	r8,r17,r8
 801198c:	2823883a 	mov	r17,r5
 8011990:	4080202c 	andhi	r2,r8,128
 8011994:	103fe026 	beq	r2,zero,8011918 <__alt_data_end+0xf8011918>
 8011998:	84000044 	addi	r16,r16,1
 801199c:	0081ffc4 	movi	r2,2047
 80119a0:	8080d226 	beq	r16,r2,8011cec <__adddf3+0x5d8>
 80119a4:	00bfe034 	movhi	r2,65408
 80119a8:	10bfffc4 	addi	r2,r2,-1
 80119ac:	4090703a 	and	r8,r8,r2
 80119b0:	880ad07a 	srli	r5,r17,1
 80119b4:	400897fa 	slli	r4,r8,31
 80119b8:	88c0004c 	andi	r3,r17,1
 80119bc:	28e2b03a 	or	r17,r5,r3
 80119c0:	4010d07a 	srli	r8,r8,1
 80119c4:	2462b03a 	or	r17,r4,r17
 80119c8:	003f7106 	br	8011790 <__alt_data_end+0xf8011790>
 80119cc:	4088b03a 	or	r4,r8,r2
 80119d0:	20014526 	beq	r4,zero,8011ee8 <__adddf3+0x7d4>
 80119d4:	01000434 	movhi	r4,16
 80119d8:	42000234 	orhi	r8,r8,8
 80119dc:	213fffc4 	addi	r4,r4,-1
 80119e0:	4110703a 	and	r8,r8,r4
 80119e4:	003f8206 	br	80117f0 <__alt_data_end+0xf80117f0>
 80119e8:	18ffffc4 	addi	r3,r3,-1
 80119ec:	1800491e 	bne	r3,zero,8011b14 <__adddf3+0x400>
 80119f0:	898bc83a 	sub	r5,r17,r6
 80119f4:	8963803a 	cmpltu	r17,r17,r5
 80119f8:	4251c83a 	sub	r8,r8,r9
 80119fc:	4451c83a 	sub	r8,r8,r17
 8011a00:	2823883a 	mov	r17,r5
 8011a04:	003f9f06 	br	8011884 <__alt_data_end+0xf8011884>
 8011a08:	4984b03a 	or	r2,r9,r6
 8011a0c:	103f6026 	beq	r2,zero,8011790 <__alt_data_end+0xf8011790>
 8011a10:	213fffc4 	addi	r4,r4,-1
 8011a14:	2000931e 	bne	r4,zero,8011c64 <__adddf3+0x550>
 8011a18:	898d883a 	add	r6,r17,r6
 8011a1c:	3463803a 	cmpltu	r17,r6,r17
 8011a20:	4251883a 	add	r8,r8,r9
 8011a24:	8a11883a 	add	r8,r17,r8
 8011a28:	3023883a 	mov	r17,r6
 8011a2c:	003fd806 	br	8011990 <__alt_data_end+0xf8011990>
 8011a30:	1800541e 	bne	r3,zero,8011b84 <__adddf3+0x470>
 8011a34:	80800044 	addi	r2,r16,1
 8011a38:	1081ffcc 	andi	r2,r2,2047
 8011a3c:	00c00044 	movi	r3,1
 8011a40:	1880a00e 	bge	r3,r2,8011cc4 <__adddf3+0x5b0>
 8011a44:	8989c83a 	sub	r4,r17,r6
 8011a48:	8905803a 	cmpltu	r2,r17,r4
 8011a4c:	4267c83a 	sub	r19,r8,r9
 8011a50:	98a7c83a 	sub	r19,r19,r2
 8011a54:	9880202c 	andhi	r2,r19,128
 8011a58:	10006326 	beq	r2,zero,8011be8 <__adddf3+0x4d4>
 8011a5c:	3463c83a 	sub	r17,r6,r17
 8011a60:	4a07c83a 	sub	r3,r9,r8
 8011a64:	344d803a 	cmpltu	r6,r6,r17
 8011a68:	19a7c83a 	sub	r19,r3,r6
 8011a6c:	3825883a 	mov	r18,r7
 8011a70:	983f8a1e 	bne	r19,zero,801189c <__alt_data_end+0xf801189c>
 8011a74:	8809883a 	mov	r4,r17
 8011a78:	8013f540 	call	8013f54 <__clzsi2>
 8011a7c:	10800804 	addi	r2,r2,32
 8011a80:	10fffe04 	addi	r3,r2,-8
 8011a84:	010007c4 	movi	r4,31
 8011a88:	20ff890e 	bge	r4,r3,80118b0 <__alt_data_end+0xf80118b0>
 8011a8c:	10bff604 	addi	r2,r2,-40
 8011a90:	8884983a 	sll	r2,r17,r2
 8011a94:	0023883a 	mov	r17,zero
 8011a98:	1c3f8c0e 	bge	r3,r16,80118cc <__alt_data_end+0xf80118cc>
 8011a9c:	023fe034 	movhi	r8,65408
 8011aa0:	423fffc4 	addi	r8,r8,-1
 8011aa4:	80e1c83a 	sub	r16,r16,r3
 8011aa8:	1210703a 	and	r8,r2,r8
 8011aac:	003f3806 	br	8011790 <__alt_data_end+0xf8011790>
 8011ab0:	9007883a 	mov	r3,r18
 8011ab4:	0011883a 	mov	r8,zero
 8011ab8:	0005883a 	mov	r2,zero
 8011abc:	003f4c06 	br	80117f0 <__alt_data_end+0xf80117f0>
 8011ac0:	498cb03a 	or	r6,r9,r6
 8011ac4:	300cc03a 	cmpne	r6,r6,zero
 8011ac8:	0007883a 	mov	r3,zero
 8011acc:	003f6806 	br	8011870 <__alt_data_end+0xf8011870>
 8011ad0:	20009c1e 	bne	r4,zero,8011d44 <__adddf3+0x630>
 8011ad4:	80800044 	addi	r2,r16,1
 8011ad8:	1141ffcc 	andi	r5,r2,2047
 8011adc:	01000044 	movi	r4,1
 8011ae0:	2140670e 	bge	r4,r5,8011c80 <__adddf3+0x56c>
 8011ae4:	0101ffc4 	movi	r4,2047
 8011ae8:	11007f26 	beq	r2,r4,8011ce8 <__adddf3+0x5d4>
 8011aec:	898d883a 	add	r6,r17,r6
 8011af0:	4247883a 	add	r3,r8,r9
 8011af4:	3451803a 	cmpltu	r8,r6,r17
 8011af8:	40d1883a 	add	r8,r8,r3
 8011afc:	402297fa 	slli	r17,r8,31
 8011b00:	300cd07a 	srli	r6,r6,1
 8011b04:	4010d07a 	srli	r8,r8,1
 8011b08:	1021883a 	mov	r16,r2
 8011b0c:	89a2b03a 	or	r17,r17,r6
 8011b10:	003f1f06 	br	8011790 <__alt_data_end+0xf8011790>
 8011b14:	0081ffc4 	movi	r2,2047
 8011b18:	80bf481e 	bne	r16,r2,801183c <__alt_data_end+0xf801183c>
 8011b1c:	003f1c06 	br	8011790 <__alt_data_end+0xf8011790>
 8011b20:	843ff844 	addi	r16,r16,-31
 8011b24:	01000804 	movi	r4,32
 8011b28:	1406d83a 	srl	r3,r2,r16
 8011b2c:	41005026 	beq	r8,r4,8011c70 <__adddf3+0x55c>
 8011b30:	01001004 	movi	r4,64
 8011b34:	2211c83a 	sub	r8,r4,r8
 8011b38:	1204983a 	sll	r2,r2,r8
 8011b3c:	88a2b03a 	or	r17,r17,r2
 8011b40:	8822c03a 	cmpne	r17,r17,zero
 8011b44:	1c62b03a 	or	r17,r3,r17
 8011b48:	0011883a 	mov	r8,zero
 8011b4c:	0021883a 	mov	r16,zero
 8011b50:	003f7106 	br	8011918 <__alt_data_end+0xf8011918>
 8011b54:	193ff804 	addi	r4,r3,-32
 8011b58:	00800804 	movi	r2,32
 8011b5c:	4908d83a 	srl	r4,r9,r4
 8011b60:	18804526 	beq	r3,r2,8011c78 <__adddf3+0x564>
 8011b64:	00801004 	movi	r2,64
 8011b68:	10c5c83a 	sub	r2,r2,r3
 8011b6c:	4886983a 	sll	r3,r9,r2
 8011b70:	198cb03a 	or	r6,r3,r6
 8011b74:	300cc03a 	cmpne	r6,r6,zero
 8011b78:	218cb03a 	or	r6,r4,r6
 8011b7c:	0007883a 	mov	r3,zero
 8011b80:	003f3b06 	br	8011870 <__alt_data_end+0xf8011870>
 8011b84:	80002a26 	beq	r16,zero,8011c30 <__adddf3+0x51c>
 8011b88:	0101ffc4 	movi	r4,2047
 8011b8c:	11006826 	beq	r2,r4,8011d30 <__adddf3+0x61c>
 8011b90:	00c7c83a 	sub	r3,zero,r3
 8011b94:	42002034 	orhi	r8,r8,128
 8011b98:	01000e04 	movi	r4,56
 8011b9c:	20c07c16 	blt	r4,r3,8011d90 <__adddf3+0x67c>
 8011ba0:	010007c4 	movi	r4,31
 8011ba4:	20c0da16 	blt	r4,r3,8011f10 <__adddf3+0x7fc>
 8011ba8:	01000804 	movi	r4,32
 8011bac:	20c9c83a 	sub	r4,r4,r3
 8011bb0:	4114983a 	sll	r10,r8,r4
 8011bb4:	88cad83a 	srl	r5,r17,r3
 8011bb8:	8908983a 	sll	r4,r17,r4
 8011bbc:	40c6d83a 	srl	r3,r8,r3
 8011bc0:	5162b03a 	or	r17,r10,r5
 8011bc4:	2008c03a 	cmpne	r4,r4,zero
 8011bc8:	8922b03a 	or	r17,r17,r4
 8011bcc:	3463c83a 	sub	r17,r6,r17
 8011bd0:	48c7c83a 	sub	r3,r9,r3
 8011bd4:	344d803a 	cmpltu	r6,r6,r17
 8011bd8:	1991c83a 	sub	r8,r3,r6
 8011bdc:	1021883a 	mov	r16,r2
 8011be0:	3825883a 	mov	r18,r7
 8011be4:	003f2706 	br	8011884 <__alt_data_end+0xf8011884>
 8011be8:	24d0b03a 	or	r8,r4,r19
 8011bec:	40001b1e 	bne	r8,zero,8011c5c <__adddf3+0x548>
 8011bf0:	0005883a 	mov	r2,zero
 8011bf4:	0007883a 	mov	r3,zero
 8011bf8:	0021883a 	mov	r16,zero
 8011bfc:	003f4d06 	br	8011934 <__alt_data_end+0xf8011934>
 8011c00:	008007c4 	movi	r2,31
 8011c04:	11003c16 	blt	r2,r4,8011cf8 <__adddf3+0x5e4>
 8011c08:	00800804 	movi	r2,32
 8011c0c:	1105c83a 	sub	r2,r2,r4
 8011c10:	488e983a 	sll	r7,r9,r2
 8011c14:	310ad83a 	srl	r5,r6,r4
 8011c18:	3084983a 	sll	r2,r6,r2
 8011c1c:	4912d83a 	srl	r9,r9,r4
 8011c20:	394ab03a 	or	r5,r7,r5
 8011c24:	1004c03a 	cmpne	r2,r2,zero
 8011c28:	288ab03a 	or	r5,r5,r2
 8011c2c:	003f5306 	br	801197c <__alt_data_end+0xf801197c>
 8011c30:	4448b03a 	or	r4,r8,r17
 8011c34:	20003e26 	beq	r4,zero,8011d30 <__adddf3+0x61c>
 8011c38:	00c6303a 	nor	r3,zero,r3
 8011c3c:	18003a1e 	bne	r3,zero,8011d28 <__adddf3+0x614>
 8011c40:	3463c83a 	sub	r17,r6,r17
 8011c44:	4a07c83a 	sub	r3,r9,r8
 8011c48:	344d803a 	cmpltu	r6,r6,r17
 8011c4c:	1991c83a 	sub	r8,r3,r6
 8011c50:	1021883a 	mov	r16,r2
 8011c54:	3825883a 	mov	r18,r7
 8011c58:	003f0a06 	br	8011884 <__alt_data_end+0xf8011884>
 8011c5c:	2023883a 	mov	r17,r4
 8011c60:	003f0d06 	br	8011898 <__alt_data_end+0xf8011898>
 8011c64:	0081ffc4 	movi	r2,2047
 8011c68:	80bf3f1e 	bne	r16,r2,8011968 <__alt_data_end+0xf8011968>
 8011c6c:	003ec806 	br	8011790 <__alt_data_end+0xf8011790>
 8011c70:	0005883a 	mov	r2,zero
 8011c74:	003fb106 	br	8011b3c <__alt_data_end+0xf8011b3c>
 8011c78:	0007883a 	mov	r3,zero
 8011c7c:	003fbc06 	br	8011b70 <__alt_data_end+0xf8011b70>
 8011c80:	4444b03a 	or	r2,r8,r17
 8011c84:	8000871e 	bne	r16,zero,8011ea4 <__adddf3+0x790>
 8011c88:	1000ba26 	beq	r2,zero,8011f74 <__adddf3+0x860>
 8011c8c:	4984b03a 	or	r2,r9,r6
 8011c90:	103ebf26 	beq	r2,zero,8011790 <__alt_data_end+0xf8011790>
 8011c94:	8985883a 	add	r2,r17,r6
 8011c98:	4247883a 	add	r3,r8,r9
 8011c9c:	1451803a 	cmpltu	r8,r2,r17
 8011ca0:	40d1883a 	add	r8,r8,r3
 8011ca4:	40c0202c 	andhi	r3,r8,128
 8011ca8:	1023883a 	mov	r17,r2
 8011cac:	183f1a26 	beq	r3,zero,8011918 <__alt_data_end+0xf8011918>
 8011cb0:	00bfe034 	movhi	r2,65408
 8011cb4:	10bfffc4 	addi	r2,r2,-1
 8011cb8:	2021883a 	mov	r16,r4
 8011cbc:	4090703a 	and	r8,r8,r2
 8011cc0:	003eb306 	br	8011790 <__alt_data_end+0xf8011790>
 8011cc4:	4444b03a 	or	r2,r8,r17
 8011cc8:	8000291e 	bne	r16,zero,8011d70 <__adddf3+0x65c>
 8011ccc:	10004b1e 	bne	r2,zero,8011dfc <__adddf3+0x6e8>
 8011cd0:	4990b03a 	or	r8,r9,r6
 8011cd4:	40008b26 	beq	r8,zero,8011f04 <__adddf3+0x7f0>
 8011cd8:	4811883a 	mov	r8,r9
 8011cdc:	3023883a 	mov	r17,r6
 8011ce0:	3825883a 	mov	r18,r7
 8011ce4:	003eaa06 	br	8011790 <__alt_data_end+0xf8011790>
 8011ce8:	1021883a 	mov	r16,r2
 8011cec:	0011883a 	mov	r8,zero
 8011cf0:	0005883a 	mov	r2,zero
 8011cf4:	003f0f06 	br	8011934 <__alt_data_end+0xf8011934>
 8011cf8:	217ff804 	addi	r5,r4,-32
 8011cfc:	00800804 	movi	r2,32
 8011d00:	494ad83a 	srl	r5,r9,r5
 8011d04:	20807d26 	beq	r4,r2,8011efc <__adddf3+0x7e8>
 8011d08:	00801004 	movi	r2,64
 8011d0c:	1109c83a 	sub	r4,r2,r4
 8011d10:	4912983a 	sll	r9,r9,r4
 8011d14:	498cb03a 	or	r6,r9,r6
 8011d18:	300cc03a 	cmpne	r6,r6,zero
 8011d1c:	298ab03a 	or	r5,r5,r6
 8011d20:	0013883a 	mov	r9,zero
 8011d24:	003f1506 	br	801197c <__alt_data_end+0xf801197c>
 8011d28:	0101ffc4 	movi	r4,2047
 8011d2c:	113f9a1e 	bne	r2,r4,8011b98 <__alt_data_end+0xf8011b98>
 8011d30:	4811883a 	mov	r8,r9
 8011d34:	3023883a 	mov	r17,r6
 8011d38:	1021883a 	mov	r16,r2
 8011d3c:	3825883a 	mov	r18,r7
 8011d40:	003e9306 	br	8011790 <__alt_data_end+0xf8011790>
 8011d44:	8000161e 	bne	r16,zero,8011da0 <__adddf3+0x68c>
 8011d48:	444ab03a 	or	r5,r8,r17
 8011d4c:	28005126 	beq	r5,zero,8011e94 <__adddf3+0x780>
 8011d50:	0108303a 	nor	r4,zero,r4
 8011d54:	20004d1e 	bne	r4,zero,8011e8c <__adddf3+0x778>
 8011d58:	89a3883a 	add	r17,r17,r6
 8011d5c:	4253883a 	add	r9,r8,r9
 8011d60:	898d803a 	cmpltu	r6,r17,r6
 8011d64:	3251883a 	add	r8,r6,r9
 8011d68:	1021883a 	mov	r16,r2
 8011d6c:	003f0806 	br	8011990 <__alt_data_end+0xf8011990>
 8011d70:	1000301e 	bne	r2,zero,8011e34 <__adddf3+0x720>
 8011d74:	4984b03a 	or	r2,r9,r6
 8011d78:	10007126 	beq	r2,zero,8011f40 <__adddf3+0x82c>
 8011d7c:	4811883a 	mov	r8,r9
 8011d80:	3023883a 	mov	r17,r6
 8011d84:	3825883a 	mov	r18,r7
 8011d88:	0401ffc4 	movi	r16,2047
 8011d8c:	003e8006 	br	8011790 <__alt_data_end+0xf8011790>
 8011d90:	4462b03a 	or	r17,r8,r17
 8011d94:	8822c03a 	cmpne	r17,r17,zero
 8011d98:	0007883a 	mov	r3,zero
 8011d9c:	003f8b06 	br	8011bcc <__alt_data_end+0xf8011bcc>
 8011da0:	0141ffc4 	movi	r5,2047
 8011da4:	11403b26 	beq	r2,r5,8011e94 <__adddf3+0x780>
 8011da8:	0109c83a 	sub	r4,zero,r4
 8011dac:	42002034 	orhi	r8,r8,128
 8011db0:	01400e04 	movi	r5,56
 8011db4:	29006716 	blt	r5,r4,8011f54 <__adddf3+0x840>
 8011db8:	014007c4 	movi	r5,31
 8011dbc:	29007016 	blt	r5,r4,8011f80 <__adddf3+0x86c>
 8011dc0:	01400804 	movi	r5,32
 8011dc4:	290bc83a 	sub	r5,r5,r4
 8011dc8:	4154983a 	sll	r10,r8,r5
 8011dcc:	890ed83a 	srl	r7,r17,r4
 8011dd0:	894a983a 	sll	r5,r17,r5
 8011dd4:	4108d83a 	srl	r4,r8,r4
 8011dd8:	51e2b03a 	or	r17,r10,r7
 8011ddc:	280ac03a 	cmpne	r5,r5,zero
 8011de0:	8962b03a 	or	r17,r17,r5
 8011de4:	89a3883a 	add	r17,r17,r6
 8011de8:	2253883a 	add	r9,r4,r9
 8011dec:	898d803a 	cmpltu	r6,r17,r6
 8011df0:	3251883a 	add	r8,r6,r9
 8011df4:	1021883a 	mov	r16,r2
 8011df8:	003ee506 	br	8011990 <__alt_data_end+0xf8011990>
 8011dfc:	4984b03a 	or	r2,r9,r6
 8011e00:	103e6326 	beq	r2,zero,8011790 <__alt_data_end+0xf8011790>
 8011e04:	8987c83a 	sub	r3,r17,r6
 8011e08:	88c9803a 	cmpltu	r4,r17,r3
 8011e0c:	4245c83a 	sub	r2,r8,r9
 8011e10:	1105c83a 	sub	r2,r2,r4
 8011e14:	1100202c 	andhi	r4,r2,128
 8011e18:	203ebb26 	beq	r4,zero,8011908 <__alt_data_end+0xf8011908>
 8011e1c:	3463c83a 	sub	r17,r6,r17
 8011e20:	4a07c83a 	sub	r3,r9,r8
 8011e24:	344d803a 	cmpltu	r6,r6,r17
 8011e28:	1991c83a 	sub	r8,r3,r6
 8011e2c:	3825883a 	mov	r18,r7
 8011e30:	003e5706 	br	8011790 <__alt_data_end+0xf8011790>
 8011e34:	4984b03a 	or	r2,r9,r6
 8011e38:	10002e26 	beq	r2,zero,8011ef4 <__adddf3+0x7e0>
 8011e3c:	4004d0fa 	srli	r2,r8,3
 8011e40:	8822d0fa 	srli	r17,r17,3
 8011e44:	4010977a 	slli	r8,r8,29
 8011e48:	10c0022c 	andhi	r3,r2,8
 8011e4c:	4462b03a 	or	r17,r8,r17
 8011e50:	18000826 	beq	r3,zero,8011e74 <__adddf3+0x760>
 8011e54:	4808d0fa 	srli	r4,r9,3
 8011e58:	20c0022c 	andhi	r3,r4,8
 8011e5c:	1800051e 	bne	r3,zero,8011e74 <__adddf3+0x760>
 8011e60:	300cd0fa 	srli	r6,r6,3
 8011e64:	4806977a 	slli	r3,r9,29
 8011e68:	2005883a 	mov	r2,r4
 8011e6c:	3825883a 	mov	r18,r7
 8011e70:	19a2b03a 	or	r17,r3,r6
 8011e74:	8810d77a 	srli	r8,r17,29
 8011e78:	100490fa 	slli	r2,r2,3
 8011e7c:	882290fa 	slli	r17,r17,3
 8011e80:	0401ffc4 	movi	r16,2047
 8011e84:	4090b03a 	or	r8,r8,r2
 8011e88:	003e4106 	br	8011790 <__alt_data_end+0xf8011790>
 8011e8c:	0141ffc4 	movi	r5,2047
 8011e90:	117fc71e 	bne	r2,r5,8011db0 <__alt_data_end+0xf8011db0>
 8011e94:	4811883a 	mov	r8,r9
 8011e98:	3023883a 	mov	r17,r6
 8011e9c:	1021883a 	mov	r16,r2
 8011ea0:	003e3b06 	br	8011790 <__alt_data_end+0xf8011790>
 8011ea4:	10002f26 	beq	r2,zero,8011f64 <__adddf3+0x850>
 8011ea8:	4984b03a 	or	r2,r9,r6
 8011eac:	10001126 	beq	r2,zero,8011ef4 <__adddf3+0x7e0>
 8011eb0:	4004d0fa 	srli	r2,r8,3
 8011eb4:	8822d0fa 	srli	r17,r17,3
 8011eb8:	4010977a 	slli	r8,r8,29
 8011ebc:	10c0022c 	andhi	r3,r2,8
 8011ec0:	4462b03a 	or	r17,r8,r17
 8011ec4:	183feb26 	beq	r3,zero,8011e74 <__alt_data_end+0xf8011e74>
 8011ec8:	4808d0fa 	srli	r4,r9,3
 8011ecc:	20c0022c 	andhi	r3,r4,8
 8011ed0:	183fe81e 	bne	r3,zero,8011e74 <__alt_data_end+0xf8011e74>
 8011ed4:	300cd0fa 	srli	r6,r6,3
 8011ed8:	4806977a 	slli	r3,r9,29
 8011edc:	2005883a 	mov	r2,r4
 8011ee0:	19a2b03a 	or	r17,r3,r6
 8011ee4:	003fe306 	br	8011e74 <__alt_data_end+0xf8011e74>
 8011ee8:	0011883a 	mov	r8,zero
 8011eec:	0005883a 	mov	r2,zero
 8011ef0:	003e3f06 	br	80117f0 <__alt_data_end+0xf80117f0>
 8011ef4:	0401ffc4 	movi	r16,2047
 8011ef8:	003e2506 	br	8011790 <__alt_data_end+0xf8011790>
 8011efc:	0013883a 	mov	r9,zero
 8011f00:	003f8406 	br	8011d14 <__alt_data_end+0xf8011d14>
 8011f04:	0005883a 	mov	r2,zero
 8011f08:	0007883a 	mov	r3,zero
 8011f0c:	003e8906 	br	8011934 <__alt_data_end+0xf8011934>
 8011f10:	197ff804 	addi	r5,r3,-32
 8011f14:	01000804 	movi	r4,32
 8011f18:	414ad83a 	srl	r5,r8,r5
 8011f1c:	19002426 	beq	r3,r4,8011fb0 <__adddf3+0x89c>
 8011f20:	01001004 	movi	r4,64
 8011f24:	20c7c83a 	sub	r3,r4,r3
 8011f28:	40c6983a 	sll	r3,r8,r3
 8011f2c:	1c46b03a 	or	r3,r3,r17
 8011f30:	1806c03a 	cmpne	r3,r3,zero
 8011f34:	28e2b03a 	or	r17,r5,r3
 8011f38:	0007883a 	mov	r3,zero
 8011f3c:	003f2306 	br	8011bcc <__alt_data_end+0xf8011bcc>
 8011f40:	0007883a 	mov	r3,zero
 8011f44:	5811883a 	mov	r8,r11
 8011f48:	00bfffc4 	movi	r2,-1
 8011f4c:	0401ffc4 	movi	r16,2047
 8011f50:	003e7806 	br	8011934 <__alt_data_end+0xf8011934>
 8011f54:	4462b03a 	or	r17,r8,r17
 8011f58:	8822c03a 	cmpne	r17,r17,zero
 8011f5c:	0009883a 	mov	r4,zero
 8011f60:	003fa006 	br	8011de4 <__alt_data_end+0xf8011de4>
 8011f64:	4811883a 	mov	r8,r9
 8011f68:	3023883a 	mov	r17,r6
 8011f6c:	0401ffc4 	movi	r16,2047
 8011f70:	003e0706 	br	8011790 <__alt_data_end+0xf8011790>
 8011f74:	4811883a 	mov	r8,r9
 8011f78:	3023883a 	mov	r17,r6
 8011f7c:	003e0406 	br	8011790 <__alt_data_end+0xf8011790>
 8011f80:	21fff804 	addi	r7,r4,-32
 8011f84:	01400804 	movi	r5,32
 8011f88:	41ced83a 	srl	r7,r8,r7
 8011f8c:	21400a26 	beq	r4,r5,8011fb8 <__adddf3+0x8a4>
 8011f90:	01401004 	movi	r5,64
 8011f94:	2909c83a 	sub	r4,r5,r4
 8011f98:	4108983a 	sll	r4,r8,r4
 8011f9c:	2448b03a 	or	r4,r4,r17
 8011fa0:	2008c03a 	cmpne	r4,r4,zero
 8011fa4:	3922b03a 	or	r17,r7,r4
 8011fa8:	0009883a 	mov	r4,zero
 8011fac:	003f8d06 	br	8011de4 <__alt_data_end+0xf8011de4>
 8011fb0:	0007883a 	mov	r3,zero
 8011fb4:	003fdd06 	br	8011f2c <__alt_data_end+0xf8011f2c>
 8011fb8:	0009883a 	mov	r4,zero
 8011fbc:	003ff706 	br	8011f9c <__alt_data_end+0xf8011f9c>

08011fc0 <__divdf3>:
 8011fc0:	defff004 	addi	sp,sp,-64
 8011fc4:	dc800815 	stw	r18,32(sp)
 8011fc8:	2824d53a 	srli	r18,r5,20
 8011fcc:	dd800c15 	stw	r22,48(sp)
 8011fd0:	282cd7fa 	srli	r22,r5,31
 8011fd4:	dc000615 	stw	r16,24(sp)
 8011fd8:	04000434 	movhi	r16,16
 8011fdc:	843fffc4 	addi	r16,r16,-1
 8011fe0:	dfc00f15 	stw	ra,60(sp)
 8011fe4:	df000e15 	stw	fp,56(sp)
 8011fe8:	ddc00d15 	stw	r23,52(sp)
 8011fec:	dd400b15 	stw	r21,44(sp)
 8011ff0:	dd000a15 	stw	r20,40(sp)
 8011ff4:	dcc00915 	stw	r19,36(sp)
 8011ff8:	dc400715 	stw	r17,28(sp)
 8011ffc:	9481ffcc 	andi	r18,r18,2047
 8012000:	2c20703a 	and	r16,r5,r16
 8012004:	b2003fcc 	andi	r8,r22,255
 8012008:	90006126 	beq	r18,zero,8012190 <__divdf3+0x1d0>
 801200c:	0081ffc4 	movi	r2,2047
 8012010:	202b883a 	mov	r21,r4
 8012014:	90803726 	beq	r18,r2,80120f4 <__divdf3+0x134>
 8012018:	80800434 	orhi	r2,r16,16
 801201c:	100490fa 	slli	r2,r2,3
 8012020:	2020d77a 	srli	r16,r4,29
 8012024:	202a90fa 	slli	r21,r4,3
 8012028:	94bf0044 	addi	r18,r18,-1023
 801202c:	80a0b03a 	or	r16,r16,r2
 8012030:	0013883a 	mov	r9,zero
 8012034:	000b883a 	mov	r5,zero
 8012038:	3806d53a 	srli	r3,r7,20
 801203c:	382ed7fa 	srli	r23,r7,31
 8012040:	04400434 	movhi	r17,16
 8012044:	8c7fffc4 	addi	r17,r17,-1
 8012048:	18c1ffcc 	andi	r3,r3,2047
 801204c:	3029883a 	mov	r20,r6
 8012050:	3c62703a 	and	r17,r7,r17
 8012054:	bf003fcc 	andi	fp,r23,255
 8012058:	18006e26 	beq	r3,zero,8012214 <__divdf3+0x254>
 801205c:	0081ffc4 	movi	r2,2047
 8012060:	18806626 	beq	r3,r2,80121fc <__divdf3+0x23c>
 8012064:	88800434 	orhi	r2,r17,16
 8012068:	100490fa 	slli	r2,r2,3
 801206c:	3022d77a 	srli	r17,r6,29
 8012070:	302890fa 	slli	r20,r6,3
 8012074:	18ff0044 	addi	r3,r3,-1023
 8012078:	88a2b03a 	or	r17,r17,r2
 801207c:	000f883a 	mov	r7,zero
 8012080:	b5e6f03a 	xor	r19,r22,r23
 8012084:	3a4cb03a 	or	r6,r7,r9
 8012088:	008003c4 	movi	r2,15
 801208c:	9809883a 	mov	r4,r19
 8012090:	90c7c83a 	sub	r3,r18,r3
 8012094:	9cc03fcc 	andi	r19,r19,255
 8012098:	11809636 	bltu	r2,r6,80122f4 <__divdf3+0x334>
 801209c:	300c90ba 	slli	r6,r6,2
 80120a0:	00820074 	movhi	r2,2049
 80120a4:	10882d04 	addi	r2,r2,8372
 80120a8:	308d883a 	add	r6,r6,r2
 80120ac:	30800017 	ldw	r2,0(r6)
 80120b0:	1000683a 	jmp	r2
 80120b4:	080122f4 	orhi	zero,at,1163
 80120b8:	0801212c 	andhi	zero,at,1156
 80120bc:	080122e4 	muli	zero,at,1163
 80120c0:	08012120 	cmpeqi	zero,at,1156
 80120c4:	080122e4 	muli	zero,at,1163
 80120c8:	080122b8 	rdprs	zero,at,1162
 80120cc:	080122e4 	muli	zero,at,1163
 80120d0:	08012120 	cmpeqi	zero,at,1156
 80120d4:	0801212c 	andhi	zero,at,1156
 80120d8:	0801212c 	andhi	zero,at,1156
 80120dc:	080122b8 	rdprs	zero,at,1162
 80120e0:	08012120 	cmpeqi	zero,at,1156
 80120e4:	08012110 	cmplti	zero,at,1156
 80120e8:	08012110 	cmplti	zero,at,1156
 80120ec:	08012110 	cmplti	zero,at,1156
 80120f0:	0801267c 	xorhi	zero,at,1177
 80120f4:	2404b03a 	or	r2,r4,r16
 80120f8:	10006c1e 	bne	r2,zero,80122ac <__divdf3+0x2ec>
 80120fc:	02400204 	movi	r9,8
 8012100:	0021883a 	mov	r16,zero
 8012104:	002b883a 	mov	r21,zero
 8012108:	01400084 	movi	r5,2
 801210c:	003fca06 	br	8012038 <__alt_data_end+0xf8012038>
 8012110:	8023883a 	mov	r17,r16
 8012114:	a829883a 	mov	r20,r21
 8012118:	4039883a 	mov	fp,r8
 801211c:	280f883a 	mov	r7,r5
 8012120:	00800084 	movi	r2,2
 8012124:	3881601e 	bne	r7,r2,80126a8 <__divdf3+0x6e8>
 8012128:	e027883a 	mov	r19,fp
 801212c:	9900004c 	andi	r4,r19,1
 8012130:	0081ffc4 	movi	r2,2047
 8012134:	0021883a 	mov	r16,zero
 8012138:	002b883a 	mov	r21,zero
 801213c:	1004953a 	slli	r2,r2,20
 8012140:	20c03fcc 	andi	r3,r4,255
 8012144:	01400434 	movhi	r5,16
 8012148:	297fffc4 	addi	r5,r5,-1
 801214c:	180697fa 	slli	r3,r3,31
 8012150:	8160703a 	and	r16,r16,r5
 8012154:	80a0b03a 	or	r16,r16,r2
 8012158:	80c6b03a 	or	r3,r16,r3
 801215c:	a805883a 	mov	r2,r21
 8012160:	dfc00f17 	ldw	ra,60(sp)
 8012164:	df000e17 	ldw	fp,56(sp)
 8012168:	ddc00d17 	ldw	r23,52(sp)
 801216c:	dd800c17 	ldw	r22,48(sp)
 8012170:	dd400b17 	ldw	r21,44(sp)
 8012174:	dd000a17 	ldw	r20,40(sp)
 8012178:	dcc00917 	ldw	r19,36(sp)
 801217c:	dc800817 	ldw	r18,32(sp)
 8012180:	dc400717 	ldw	r17,28(sp)
 8012184:	dc000617 	ldw	r16,24(sp)
 8012188:	dec01004 	addi	sp,sp,64
 801218c:	f800283a 	ret
 8012190:	2404b03a 	or	r2,r4,r16
 8012194:	2023883a 	mov	r17,r4
 8012198:	10003f26 	beq	r2,zero,8012298 <__divdf3+0x2d8>
 801219c:	80015e26 	beq	r16,zero,8012718 <__divdf3+0x758>
 80121a0:	8009883a 	mov	r4,r16
 80121a4:	d9800215 	stw	r6,8(sp)
 80121a8:	d9c00515 	stw	r7,20(sp)
 80121ac:	da000415 	stw	r8,16(sp)
 80121b0:	8013f540 	call	8013f54 <__clzsi2>
 80121b4:	d9800217 	ldw	r6,8(sp)
 80121b8:	d9c00517 	ldw	r7,20(sp)
 80121bc:	da000417 	ldw	r8,16(sp)
 80121c0:	113ffd44 	addi	r4,r2,-11
 80121c4:	00c00704 	movi	r3,28
 80121c8:	19014f16 	blt	r3,r4,8012708 <__divdf3+0x748>
 80121cc:	00c00744 	movi	r3,29
 80121d0:	157ffe04 	addi	r21,r2,-8
 80121d4:	1907c83a 	sub	r3,r3,r4
 80121d8:	8560983a 	sll	r16,r16,r21
 80121dc:	88c6d83a 	srl	r3,r17,r3
 80121e0:	8d6a983a 	sll	r21,r17,r21
 80121e4:	1c20b03a 	or	r16,r3,r16
 80121e8:	1080fcc4 	addi	r2,r2,1011
 80121ec:	00a5c83a 	sub	r18,zero,r2
 80121f0:	0013883a 	mov	r9,zero
 80121f4:	000b883a 	mov	r5,zero
 80121f8:	003f8f06 	br	8012038 <__alt_data_end+0xf8012038>
 80121fc:	3444b03a 	or	r2,r6,r17
 8012200:	1000231e 	bne	r2,zero,8012290 <__divdf3+0x2d0>
 8012204:	0023883a 	mov	r17,zero
 8012208:	0029883a 	mov	r20,zero
 801220c:	01c00084 	movi	r7,2
 8012210:	003f9b06 	br	8012080 <__alt_data_end+0xf8012080>
 8012214:	3444b03a 	or	r2,r6,r17
 8012218:	10001926 	beq	r2,zero,8012280 <__divdf3+0x2c0>
 801221c:	88014b26 	beq	r17,zero,801274c <__divdf3+0x78c>
 8012220:	8809883a 	mov	r4,r17
 8012224:	d9400115 	stw	r5,4(sp)
 8012228:	d9800215 	stw	r6,8(sp)
 801222c:	da000415 	stw	r8,16(sp)
 8012230:	da400315 	stw	r9,12(sp)
 8012234:	8013f540 	call	8013f54 <__clzsi2>
 8012238:	d9400117 	ldw	r5,4(sp)
 801223c:	d9800217 	ldw	r6,8(sp)
 8012240:	da000417 	ldw	r8,16(sp)
 8012244:	da400317 	ldw	r9,12(sp)
 8012248:	113ffd44 	addi	r4,r2,-11
 801224c:	00c00704 	movi	r3,28
 8012250:	19013a16 	blt	r3,r4,801273c <__divdf3+0x77c>
 8012254:	00c00744 	movi	r3,29
 8012258:	153ffe04 	addi	r20,r2,-8
 801225c:	1907c83a 	sub	r3,r3,r4
 8012260:	8d22983a 	sll	r17,r17,r20
 8012264:	30c6d83a 	srl	r3,r6,r3
 8012268:	3528983a 	sll	r20,r6,r20
 801226c:	1c62b03a 	or	r17,r3,r17
 8012270:	1080fcc4 	addi	r2,r2,1011
 8012274:	0087c83a 	sub	r3,zero,r2
 8012278:	000f883a 	mov	r7,zero
 801227c:	003f8006 	br	8012080 <__alt_data_end+0xf8012080>
 8012280:	0023883a 	mov	r17,zero
 8012284:	0029883a 	mov	r20,zero
 8012288:	01c00044 	movi	r7,1
 801228c:	003f7c06 	br	8012080 <__alt_data_end+0xf8012080>
 8012290:	01c000c4 	movi	r7,3
 8012294:	003f7a06 	br	8012080 <__alt_data_end+0xf8012080>
 8012298:	02400104 	movi	r9,4
 801229c:	0021883a 	mov	r16,zero
 80122a0:	002b883a 	mov	r21,zero
 80122a4:	01400044 	movi	r5,1
 80122a8:	003f6306 	br	8012038 <__alt_data_end+0xf8012038>
 80122ac:	02400304 	movi	r9,12
 80122b0:	014000c4 	movi	r5,3
 80122b4:	003f6006 	br	8012038 <__alt_data_end+0xf8012038>
 80122b8:	04000434 	movhi	r16,16
 80122bc:	0009883a 	mov	r4,zero
 80122c0:	843fffc4 	addi	r16,r16,-1
 80122c4:	057fffc4 	movi	r21,-1
 80122c8:	0081ffc4 	movi	r2,2047
 80122cc:	003f9b06 	br	801213c <__alt_data_end+0xf801213c>
 80122d0:	00c00044 	movi	r3,1
 80122d4:	1887c83a 	sub	r3,r3,r2
 80122d8:	01000e04 	movi	r4,56
 80122dc:	20c1530e 	bge	r4,r3,801282c <__divdf3+0x86c>
 80122e0:	9900004c 	andi	r4,r19,1
 80122e4:	0005883a 	mov	r2,zero
 80122e8:	0021883a 	mov	r16,zero
 80122ec:	002b883a 	mov	r21,zero
 80122f0:	003f9206 	br	801213c <__alt_data_end+0xf801213c>
 80122f4:	8c012e36 	bltu	r17,r16,80127b0 <__divdf3+0x7f0>
 80122f8:	84412c26 	beq	r16,r17,80127ac <__divdf3+0x7ec>
 80122fc:	a82f883a 	mov	r23,r21
 8012300:	18ffffc4 	addi	r3,r3,-1
 8012304:	002b883a 	mov	r21,zero
 8012308:	a004d63a 	srli	r2,r20,24
 801230c:	8822923a 	slli	r17,r17,8
 8012310:	a028923a 	slli	r20,r20,8
 8012314:	8009883a 	mov	r4,r16
 8012318:	88acb03a 	or	r22,r17,r2
 801231c:	dd000015 	stw	r20,0(sp)
 8012320:	b028d43a 	srli	r20,r22,16
 8012324:	d8c00215 	stw	r3,8(sp)
 8012328:	b4bfffcc 	andi	r18,r22,65535
 801232c:	a00b883a 	mov	r5,r20
 8012330:	80071700 	call	8007170 <__udivsi3>
 8012334:	100b883a 	mov	r5,r2
 8012338:	9009883a 	mov	r4,r18
 801233c:	1023883a 	mov	r17,r2
 8012340:	800722c0 	call	800722c <__mulsi3>
 8012344:	8009883a 	mov	r4,r16
 8012348:	a00b883a 	mov	r5,r20
 801234c:	1039883a 	mov	fp,r2
 8012350:	80071d40 	call	80071d4 <__umodsi3>
 8012354:	1004943a 	slli	r2,r2,16
 8012358:	b808d43a 	srli	r4,r23,16
 801235c:	d8c00217 	ldw	r3,8(sp)
 8012360:	2084b03a 	or	r2,r4,r2
 8012364:	1700062e 	bgeu	r2,fp,8012380 <__divdf3+0x3c0>
 8012368:	1585883a 	add	r2,r2,r22
 801236c:	893fffc4 	addi	r4,r17,-1
 8012370:	15811d36 	bltu	r2,r22,80127e8 <__divdf3+0x828>
 8012374:	17011c2e 	bgeu	r2,fp,80127e8 <__divdf3+0x828>
 8012378:	8c7fff84 	addi	r17,r17,-2
 801237c:	1585883a 	add	r2,r2,r22
 8012380:	1739c83a 	sub	fp,r2,fp
 8012384:	a00b883a 	mov	r5,r20
 8012388:	e009883a 	mov	r4,fp
 801238c:	d8c00215 	stw	r3,8(sp)
 8012390:	80071700 	call	8007170 <__udivsi3>
 8012394:	100b883a 	mov	r5,r2
 8012398:	9009883a 	mov	r4,r18
 801239c:	1021883a 	mov	r16,r2
 80123a0:	800722c0 	call	800722c <__mulsi3>
 80123a4:	a00b883a 	mov	r5,r20
 80123a8:	e009883a 	mov	r4,fp
 80123ac:	d8800415 	stw	r2,16(sp)
 80123b0:	80071d40 	call	80071d4 <__umodsi3>
 80123b4:	1004943a 	slli	r2,r2,16
 80123b8:	da000417 	ldw	r8,16(sp)
 80123bc:	bdffffcc 	andi	r23,r23,65535
 80123c0:	b884b03a 	or	r2,r23,r2
 80123c4:	d8c00217 	ldw	r3,8(sp)
 80123c8:	1200062e 	bgeu	r2,r8,80123e4 <__divdf3+0x424>
 80123cc:	1585883a 	add	r2,r2,r22
 80123d0:	813fffc4 	addi	r4,r16,-1
 80123d4:	15810236 	bltu	r2,r22,80127e0 <__divdf3+0x820>
 80123d8:	1201012e 	bgeu	r2,r8,80127e0 <__divdf3+0x820>
 80123dc:	843fff84 	addi	r16,r16,-2
 80123e0:	1585883a 	add	r2,r2,r22
 80123e4:	8822943a 	slli	r17,r17,16
 80123e8:	d9800017 	ldw	r6,0(sp)
 80123ec:	1211c83a 	sub	r8,r2,r8
 80123f0:	8c22b03a 	or	r17,r17,r16
 80123f4:	373fffcc 	andi	fp,r6,65535
 80123f8:	8abfffcc 	andi	r10,r17,65535
 80123fc:	8820d43a 	srli	r16,r17,16
 8012400:	5009883a 	mov	r4,r10
 8012404:	e00b883a 	mov	r5,fp
 8012408:	302ed43a 	srli	r23,r6,16
 801240c:	d8c00215 	stw	r3,8(sp)
 8012410:	da000415 	stw	r8,16(sp)
 8012414:	da800115 	stw	r10,4(sp)
 8012418:	800722c0 	call	800722c <__mulsi3>
 801241c:	800b883a 	mov	r5,r16
 8012420:	e009883a 	mov	r4,fp
 8012424:	d8800515 	stw	r2,20(sp)
 8012428:	800722c0 	call	800722c <__mulsi3>
 801242c:	8009883a 	mov	r4,r16
 8012430:	b80b883a 	mov	r5,r23
 8012434:	d8800315 	stw	r2,12(sp)
 8012438:	800722c0 	call	800722c <__mulsi3>
 801243c:	da800117 	ldw	r10,4(sp)
 8012440:	b80b883a 	mov	r5,r23
 8012444:	1021883a 	mov	r16,r2
 8012448:	5009883a 	mov	r4,r10
 801244c:	800722c0 	call	800722c <__mulsi3>
 8012450:	d9c00517 	ldw	r7,20(sp)
 8012454:	da400317 	ldw	r9,12(sp)
 8012458:	d8c00217 	ldw	r3,8(sp)
 801245c:	3808d43a 	srli	r4,r7,16
 8012460:	1245883a 	add	r2,r2,r9
 8012464:	da000417 	ldw	r8,16(sp)
 8012468:	2085883a 	add	r2,r4,r2
 801246c:	1240022e 	bgeu	r2,r9,8012478 <__divdf3+0x4b8>
 8012470:	01000074 	movhi	r4,1
 8012474:	8121883a 	add	r16,r16,r4
 8012478:	1008d43a 	srli	r4,r2,16
 801247c:	1004943a 	slli	r2,r2,16
 8012480:	39ffffcc 	andi	r7,r7,65535
 8012484:	2409883a 	add	r4,r4,r16
 8012488:	11c5883a 	add	r2,r2,r7
 801248c:	4100bb36 	bltu	r8,r4,801277c <__divdf3+0x7bc>
 8012490:	4100d726 	beq	r8,r4,80127f0 <__divdf3+0x830>
 8012494:	4109c83a 	sub	r4,r8,r4
 8012498:	a8a1c83a 	sub	r16,r21,r2
 801249c:	ac2b803a 	cmpltu	r21,r21,r16
 80124a0:	256bc83a 	sub	r21,r4,r21
 80124a4:	b540d926 	beq	r22,r21,801280c <__divdf3+0x84c>
 80124a8:	a00b883a 	mov	r5,r20
 80124ac:	a809883a 	mov	r4,r21
 80124b0:	d8c00215 	stw	r3,8(sp)
 80124b4:	80071700 	call	8007170 <__udivsi3>
 80124b8:	100b883a 	mov	r5,r2
 80124bc:	9009883a 	mov	r4,r18
 80124c0:	d8800515 	stw	r2,20(sp)
 80124c4:	800722c0 	call	800722c <__mulsi3>
 80124c8:	a809883a 	mov	r4,r21
 80124cc:	a00b883a 	mov	r5,r20
 80124d0:	d8800415 	stw	r2,16(sp)
 80124d4:	80071d40 	call	80071d4 <__umodsi3>
 80124d8:	1004943a 	slli	r2,r2,16
 80124dc:	8008d43a 	srli	r4,r16,16
 80124e0:	da000417 	ldw	r8,16(sp)
 80124e4:	d8c00217 	ldw	r3,8(sp)
 80124e8:	2084b03a 	or	r2,r4,r2
 80124ec:	d9c00517 	ldw	r7,20(sp)
 80124f0:	1200062e 	bgeu	r2,r8,801250c <__divdf3+0x54c>
 80124f4:	1585883a 	add	r2,r2,r22
 80124f8:	393fffc4 	addi	r4,r7,-1
 80124fc:	1580c536 	bltu	r2,r22,8012814 <__divdf3+0x854>
 8012500:	1200c42e 	bgeu	r2,r8,8012814 <__divdf3+0x854>
 8012504:	39ffff84 	addi	r7,r7,-2
 8012508:	1585883a 	add	r2,r2,r22
 801250c:	122bc83a 	sub	r21,r2,r8
 8012510:	a00b883a 	mov	r5,r20
 8012514:	a809883a 	mov	r4,r21
 8012518:	d8c00215 	stw	r3,8(sp)
 801251c:	d9c00515 	stw	r7,20(sp)
 8012520:	80071700 	call	8007170 <__udivsi3>
 8012524:	9009883a 	mov	r4,r18
 8012528:	100b883a 	mov	r5,r2
 801252c:	d8800415 	stw	r2,16(sp)
 8012530:	800722c0 	call	800722c <__mulsi3>
 8012534:	a809883a 	mov	r4,r21
 8012538:	a00b883a 	mov	r5,r20
 801253c:	1025883a 	mov	r18,r2
 8012540:	80071d40 	call	80071d4 <__umodsi3>
 8012544:	1004943a 	slli	r2,r2,16
 8012548:	813fffcc 	andi	r4,r16,65535
 801254c:	d8c00217 	ldw	r3,8(sp)
 8012550:	20a0b03a 	or	r16,r4,r2
 8012554:	d9c00517 	ldw	r7,20(sp)
 8012558:	da000417 	ldw	r8,16(sp)
 801255c:	8480062e 	bgeu	r16,r18,8012578 <__divdf3+0x5b8>
 8012560:	85a1883a 	add	r16,r16,r22
 8012564:	40bfffc4 	addi	r2,r8,-1
 8012568:	8580ac36 	bltu	r16,r22,801281c <__divdf3+0x85c>
 801256c:	8480ab2e 	bgeu	r16,r18,801281c <__divdf3+0x85c>
 8012570:	423fff84 	addi	r8,r8,-2
 8012574:	85a1883a 	add	r16,r16,r22
 8012578:	3804943a 	slli	r2,r7,16
 801257c:	84a1c83a 	sub	r16,r16,r18
 8012580:	e009883a 	mov	r4,fp
 8012584:	1228b03a 	or	r20,r2,r8
 8012588:	a1ffffcc 	andi	r7,r20,65535
 801258c:	a024d43a 	srli	r18,r20,16
 8012590:	380b883a 	mov	r5,r7
 8012594:	d8c00215 	stw	r3,8(sp)
 8012598:	d9c00515 	stw	r7,20(sp)
 801259c:	800722c0 	call	800722c <__mulsi3>
 80125a0:	900b883a 	mov	r5,r18
 80125a4:	e009883a 	mov	r4,fp
 80125a8:	102b883a 	mov	r21,r2
 80125ac:	800722c0 	call	800722c <__mulsi3>
 80125b0:	900b883a 	mov	r5,r18
 80125b4:	b809883a 	mov	r4,r23
 80125b8:	1039883a 	mov	fp,r2
 80125bc:	800722c0 	call	800722c <__mulsi3>
 80125c0:	d9c00517 	ldw	r7,20(sp)
 80125c4:	b80b883a 	mov	r5,r23
 80125c8:	1025883a 	mov	r18,r2
 80125cc:	3809883a 	mov	r4,r7
 80125d0:	800722c0 	call	800722c <__mulsi3>
 80125d4:	a808d43a 	srli	r4,r21,16
 80125d8:	1705883a 	add	r2,r2,fp
 80125dc:	d8c00217 	ldw	r3,8(sp)
 80125e0:	2085883a 	add	r2,r4,r2
 80125e4:	1700022e 	bgeu	r2,fp,80125f0 <__divdf3+0x630>
 80125e8:	01000074 	movhi	r4,1
 80125ec:	9125883a 	add	r18,r18,r4
 80125f0:	1008d43a 	srli	r4,r2,16
 80125f4:	1004943a 	slli	r2,r2,16
 80125f8:	ad7fffcc 	andi	r21,r21,65535
 80125fc:	2489883a 	add	r4,r4,r18
 8012600:	1545883a 	add	r2,r2,r21
 8012604:	81003836 	bltu	r16,r4,80126e8 <__divdf3+0x728>
 8012608:	81003626 	beq	r16,r4,80126e4 <__divdf3+0x724>
 801260c:	a5000054 	ori	r20,r20,1
 8012610:	1880ffc4 	addi	r2,r3,1023
 8012614:	00bf2e0e 	bge	zero,r2,80122d0 <__alt_data_end+0xf80122d0>
 8012618:	a10001cc 	andi	r4,r20,7
 801261c:	20000726 	beq	r4,zero,801263c <__divdf3+0x67c>
 8012620:	a10003cc 	andi	r4,r20,15
 8012624:	01400104 	movi	r5,4
 8012628:	21400426 	beq	r4,r5,801263c <__divdf3+0x67c>
 801262c:	a149883a 	add	r4,r20,r5
 8012630:	2529803a 	cmpltu	r20,r4,r20
 8012634:	8d23883a 	add	r17,r17,r20
 8012638:	2029883a 	mov	r20,r4
 801263c:	8900402c 	andhi	r4,r17,256
 8012640:	20000426 	beq	r4,zero,8012654 <__divdf3+0x694>
 8012644:	18810004 	addi	r2,r3,1024
 8012648:	00ffc034 	movhi	r3,65280
 801264c:	18ffffc4 	addi	r3,r3,-1
 8012650:	88e2703a 	and	r17,r17,r3
 8012654:	00c1ff84 	movi	r3,2046
 8012658:	18beb416 	blt	r3,r2,801212c <__alt_data_end+0xf801212c>
 801265c:	a028d0fa 	srli	r20,r20,3
 8012660:	882a977a 	slli	r21,r17,29
 8012664:	8820927a 	slli	r16,r17,9
 8012668:	1081ffcc 	andi	r2,r2,2047
 801266c:	ad2ab03a 	or	r21,r21,r20
 8012670:	8020d33a 	srli	r16,r16,12
 8012674:	9900004c 	andi	r4,r19,1
 8012678:	003eb006 	br	801213c <__alt_data_end+0xf801213c>
 801267c:	8080022c 	andhi	r2,r16,8
 8012680:	10001226 	beq	r2,zero,80126cc <__divdf3+0x70c>
 8012684:	8880022c 	andhi	r2,r17,8
 8012688:	1000101e 	bne	r2,zero,80126cc <__divdf3+0x70c>
 801268c:	00800434 	movhi	r2,16
 8012690:	8c000234 	orhi	r16,r17,8
 8012694:	10bfffc4 	addi	r2,r2,-1
 8012698:	b809883a 	mov	r4,r23
 801269c:	80a0703a 	and	r16,r16,r2
 80126a0:	a02b883a 	mov	r21,r20
 80126a4:	003f0806 	br	80122c8 <__alt_data_end+0xf80122c8>
 80126a8:	008000c4 	movi	r2,3
 80126ac:	3880b126 	beq	r7,r2,8012974 <__divdf3+0x9b4>
 80126b0:	00800044 	movi	r2,1
 80126b4:	38805b1e 	bne	r7,r2,8012824 <__divdf3+0x864>
 80126b8:	e009883a 	mov	r4,fp
 80126bc:	0005883a 	mov	r2,zero
 80126c0:	0021883a 	mov	r16,zero
 80126c4:	002b883a 	mov	r21,zero
 80126c8:	003e9c06 	br	801213c <__alt_data_end+0xf801213c>
 80126cc:	00800434 	movhi	r2,16
 80126d0:	84000234 	orhi	r16,r16,8
 80126d4:	10bfffc4 	addi	r2,r2,-1
 80126d8:	b009883a 	mov	r4,r22
 80126dc:	80a0703a 	and	r16,r16,r2
 80126e0:	003ef906 	br	80122c8 <__alt_data_end+0xf80122c8>
 80126e4:	103fca26 	beq	r2,zero,8012610 <__alt_data_end+0xf8012610>
 80126e8:	b421883a 	add	r16,r22,r16
 80126ec:	a17fffc4 	addi	r5,r20,-1
 80126f0:	8580422e 	bgeu	r16,r22,80127fc <__divdf3+0x83c>
 80126f4:	2829883a 	mov	r20,r5
 80126f8:	813fc41e 	bne	r16,r4,801260c <__alt_data_end+0xf801260c>
 80126fc:	d9800017 	ldw	r6,0(sp)
 8012700:	30bfc21e 	bne	r6,r2,801260c <__alt_data_end+0xf801260c>
 8012704:	003fc206 	br	8012610 <__alt_data_end+0xf8012610>
 8012708:	143ff604 	addi	r16,r2,-40
 801270c:	8c20983a 	sll	r16,r17,r16
 8012710:	002b883a 	mov	r21,zero
 8012714:	003eb406 	br	80121e8 <__alt_data_end+0xf80121e8>
 8012718:	d9800215 	stw	r6,8(sp)
 801271c:	d9c00515 	stw	r7,20(sp)
 8012720:	da000415 	stw	r8,16(sp)
 8012724:	8013f540 	call	8013f54 <__clzsi2>
 8012728:	10800804 	addi	r2,r2,32
 801272c:	da000417 	ldw	r8,16(sp)
 8012730:	d9c00517 	ldw	r7,20(sp)
 8012734:	d9800217 	ldw	r6,8(sp)
 8012738:	003ea106 	br	80121c0 <__alt_data_end+0xf80121c0>
 801273c:	147ff604 	addi	r17,r2,-40
 8012740:	3462983a 	sll	r17,r6,r17
 8012744:	0029883a 	mov	r20,zero
 8012748:	003ec906 	br	8012270 <__alt_data_end+0xf8012270>
 801274c:	3009883a 	mov	r4,r6
 8012750:	d9400115 	stw	r5,4(sp)
 8012754:	d9800215 	stw	r6,8(sp)
 8012758:	da000415 	stw	r8,16(sp)
 801275c:	da400315 	stw	r9,12(sp)
 8012760:	8013f540 	call	8013f54 <__clzsi2>
 8012764:	10800804 	addi	r2,r2,32
 8012768:	da400317 	ldw	r9,12(sp)
 801276c:	da000417 	ldw	r8,16(sp)
 8012770:	d9800217 	ldw	r6,8(sp)
 8012774:	d9400117 	ldw	r5,4(sp)
 8012778:	003eb306 	br	8012248 <__alt_data_end+0xf8012248>
 801277c:	d9800017 	ldw	r6,0(sp)
 8012780:	a9ab883a 	add	r21,r21,r6
 8012784:	a98b803a 	cmpltu	r5,r21,r6
 8012788:	2d8b883a 	add	r5,r5,r22
 801278c:	2a11883a 	add	r8,r5,r8
 8012790:	897fffc4 	addi	r5,r17,-1
 8012794:	b2000c2e 	bgeu	r22,r8,80127c8 <__divdf3+0x808>
 8012798:	41003f36 	bltu	r8,r4,8012898 <__divdf3+0x8d8>
 801279c:	22006c26 	beq	r4,r8,8012950 <__divdf3+0x990>
 80127a0:	4109c83a 	sub	r4,r8,r4
 80127a4:	2823883a 	mov	r17,r5
 80127a8:	003f3b06 	br	8012498 <__alt_data_end+0xf8012498>
 80127ac:	ad3ed336 	bltu	r21,r20,80122fc <__alt_data_end+0xf80122fc>
 80127b0:	a804d07a 	srli	r2,r21,1
 80127b4:	802e97fa 	slli	r23,r16,31
 80127b8:	a82a97fa 	slli	r21,r21,31
 80127bc:	8020d07a 	srli	r16,r16,1
 80127c0:	b8aeb03a 	or	r23,r23,r2
 80127c4:	003ed006 	br	8012308 <__alt_data_end+0xf8012308>
 80127c8:	b23ff51e 	bne	r22,r8,80127a0 <__alt_data_end+0xf80127a0>
 80127cc:	d9800017 	ldw	r6,0(sp)
 80127d0:	a9bff12e 	bgeu	r21,r6,8012798 <__alt_data_end+0xf8012798>
 80127d4:	b109c83a 	sub	r4,r22,r4
 80127d8:	2823883a 	mov	r17,r5
 80127dc:	003f2e06 	br	8012498 <__alt_data_end+0xf8012498>
 80127e0:	2021883a 	mov	r16,r4
 80127e4:	003eff06 	br	80123e4 <__alt_data_end+0xf80123e4>
 80127e8:	2023883a 	mov	r17,r4
 80127ec:	003ee406 	br	8012380 <__alt_data_end+0xf8012380>
 80127f0:	a8bfe236 	bltu	r21,r2,801277c <__alt_data_end+0xf801277c>
 80127f4:	0009883a 	mov	r4,zero
 80127f8:	003f2706 	br	8012498 <__alt_data_end+0xf8012498>
 80127fc:	81002d36 	bltu	r16,r4,80128b4 <__divdf3+0x8f4>
 8012800:	24005626 	beq	r4,r16,801295c <__divdf3+0x99c>
 8012804:	2829883a 	mov	r20,r5
 8012808:	003f8006 	br	801260c <__alt_data_end+0xf801260c>
 801280c:	053fffc4 	movi	r20,-1
 8012810:	003f7f06 	br	8012610 <__alt_data_end+0xf8012610>
 8012814:	200f883a 	mov	r7,r4
 8012818:	003f3c06 	br	801250c <__alt_data_end+0xf801250c>
 801281c:	1011883a 	mov	r8,r2
 8012820:	003f5506 	br	8012578 <__alt_data_end+0xf8012578>
 8012824:	e027883a 	mov	r19,fp
 8012828:	003f7906 	br	8012610 <__alt_data_end+0xf8012610>
 801282c:	010007c4 	movi	r4,31
 8012830:	20c02816 	blt	r4,r3,80128d4 <__divdf3+0x914>
 8012834:	00800804 	movi	r2,32
 8012838:	10c5c83a 	sub	r2,r2,r3
 801283c:	888a983a 	sll	r5,r17,r2
 8012840:	a0c8d83a 	srl	r4,r20,r3
 8012844:	a084983a 	sll	r2,r20,r2
 8012848:	88e2d83a 	srl	r17,r17,r3
 801284c:	2906b03a 	or	r3,r5,r4
 8012850:	1004c03a 	cmpne	r2,r2,zero
 8012854:	1886b03a 	or	r3,r3,r2
 8012858:	188001cc 	andi	r2,r3,7
 801285c:	10000726 	beq	r2,zero,801287c <__divdf3+0x8bc>
 8012860:	188003cc 	andi	r2,r3,15
 8012864:	01000104 	movi	r4,4
 8012868:	11000426 	beq	r2,r4,801287c <__divdf3+0x8bc>
 801286c:	1805883a 	mov	r2,r3
 8012870:	10c00104 	addi	r3,r2,4
 8012874:	1885803a 	cmpltu	r2,r3,r2
 8012878:	88a3883a 	add	r17,r17,r2
 801287c:	8880202c 	andhi	r2,r17,128
 8012880:	10002926 	beq	r2,zero,8012928 <__divdf3+0x968>
 8012884:	9900004c 	andi	r4,r19,1
 8012888:	00800044 	movi	r2,1
 801288c:	0021883a 	mov	r16,zero
 8012890:	002b883a 	mov	r21,zero
 8012894:	003e2906 	br	801213c <__alt_data_end+0xf801213c>
 8012898:	d9800017 	ldw	r6,0(sp)
 801289c:	8c7fff84 	addi	r17,r17,-2
 80128a0:	a9ab883a 	add	r21,r21,r6
 80128a4:	a98b803a 	cmpltu	r5,r21,r6
 80128a8:	2d8b883a 	add	r5,r5,r22
 80128ac:	2a11883a 	add	r8,r5,r8
 80128b0:	003ef806 	br	8012494 <__alt_data_end+0xf8012494>
 80128b4:	d9800017 	ldw	r6,0(sp)
 80128b8:	318f883a 	add	r7,r6,r6
 80128bc:	398b803a 	cmpltu	r5,r7,r6
 80128c0:	2d8d883a 	add	r6,r5,r22
 80128c4:	81a1883a 	add	r16,r16,r6
 80128c8:	a17fff84 	addi	r5,r20,-2
 80128cc:	d9c00015 	stw	r7,0(sp)
 80128d0:	003f8806 	br	80126f4 <__alt_data_end+0xf80126f4>
 80128d4:	013ff844 	movi	r4,-31
 80128d8:	2085c83a 	sub	r2,r4,r2
 80128dc:	8888d83a 	srl	r4,r17,r2
 80128e0:	00800804 	movi	r2,32
 80128e4:	18802126 	beq	r3,r2,801296c <__divdf3+0x9ac>
 80128e8:	04001004 	movi	r16,64
 80128ec:	80c7c83a 	sub	r3,r16,r3
 80128f0:	88e0983a 	sll	r16,r17,r3
 80128f4:	8504b03a 	or	r2,r16,r20
 80128f8:	1004c03a 	cmpne	r2,r2,zero
 80128fc:	2084b03a 	or	r2,r4,r2
 8012900:	144001cc 	andi	r17,r2,7
 8012904:	88000d1e 	bne	r17,zero,801293c <__divdf3+0x97c>
 8012908:	0021883a 	mov	r16,zero
 801290c:	102ad0fa 	srli	r21,r2,3
 8012910:	9900004c 	andi	r4,r19,1
 8012914:	0005883a 	mov	r2,zero
 8012918:	ac6ab03a 	or	r21,r21,r17
 801291c:	003e0706 	br	801213c <__alt_data_end+0xf801213c>
 8012920:	1007883a 	mov	r3,r2
 8012924:	0023883a 	mov	r17,zero
 8012928:	8820927a 	slli	r16,r17,9
 801292c:	1805883a 	mov	r2,r3
 8012930:	8822977a 	slli	r17,r17,29
 8012934:	8020d33a 	srli	r16,r16,12
 8012938:	003ff406 	br	801290c <__alt_data_end+0xf801290c>
 801293c:	10c003cc 	andi	r3,r2,15
 8012940:	01000104 	movi	r4,4
 8012944:	193ff626 	beq	r3,r4,8012920 <__alt_data_end+0xf8012920>
 8012948:	0023883a 	mov	r17,zero
 801294c:	003fc806 	br	8012870 <__alt_data_end+0xf8012870>
 8012950:	a8bfd136 	bltu	r21,r2,8012898 <__alt_data_end+0xf8012898>
 8012954:	2823883a 	mov	r17,r5
 8012958:	003fa606 	br	80127f4 <__alt_data_end+0xf80127f4>
 801295c:	d9800017 	ldw	r6,0(sp)
 8012960:	30bfd436 	bltu	r6,r2,80128b4 <__alt_data_end+0xf80128b4>
 8012964:	2829883a 	mov	r20,r5
 8012968:	003f6406 	br	80126fc <__alt_data_end+0xf80126fc>
 801296c:	0021883a 	mov	r16,zero
 8012970:	003fe006 	br	80128f4 <__alt_data_end+0xf80128f4>
 8012974:	00800434 	movhi	r2,16
 8012978:	8c000234 	orhi	r16,r17,8
 801297c:	10bfffc4 	addi	r2,r2,-1
 8012980:	e009883a 	mov	r4,fp
 8012984:	80a0703a 	and	r16,r16,r2
 8012988:	a02b883a 	mov	r21,r20
 801298c:	003e4e06 	br	80122c8 <__alt_data_end+0xf80122c8>

08012990 <__eqdf2>:
 8012990:	2804d53a 	srli	r2,r5,20
 8012994:	3806d53a 	srli	r3,r7,20
 8012998:	02000434 	movhi	r8,16
 801299c:	423fffc4 	addi	r8,r8,-1
 80129a0:	1081ffcc 	andi	r2,r2,2047
 80129a4:	0281ffc4 	movi	r10,2047
 80129a8:	2a12703a 	and	r9,r5,r8
 80129ac:	18c1ffcc 	andi	r3,r3,2047
 80129b0:	3a10703a 	and	r8,r7,r8
 80129b4:	280ad7fa 	srli	r5,r5,31
 80129b8:	380ed7fa 	srli	r7,r7,31
 80129bc:	12801026 	beq	r2,r10,8012a00 <__eqdf2+0x70>
 80129c0:	0281ffc4 	movi	r10,2047
 80129c4:	1a800a26 	beq	r3,r10,80129f0 <__eqdf2+0x60>
 80129c8:	10c00226 	beq	r2,r3,80129d4 <__eqdf2+0x44>
 80129cc:	00800044 	movi	r2,1
 80129d0:	f800283a 	ret
 80129d4:	4a3ffd1e 	bne	r9,r8,80129cc <__alt_data_end+0xf80129cc>
 80129d8:	21bffc1e 	bne	r4,r6,80129cc <__alt_data_end+0xf80129cc>
 80129dc:	29c00c26 	beq	r5,r7,8012a10 <__eqdf2+0x80>
 80129e0:	103ffa1e 	bne	r2,zero,80129cc <__alt_data_end+0xf80129cc>
 80129e4:	2244b03a 	or	r2,r4,r9
 80129e8:	1004c03a 	cmpne	r2,r2,zero
 80129ec:	f800283a 	ret
 80129f0:	3214b03a 	or	r10,r6,r8
 80129f4:	503ff426 	beq	r10,zero,80129c8 <__alt_data_end+0xf80129c8>
 80129f8:	00800044 	movi	r2,1
 80129fc:	f800283a 	ret
 8012a00:	2254b03a 	or	r10,r4,r9
 8012a04:	503fee26 	beq	r10,zero,80129c0 <__alt_data_end+0xf80129c0>
 8012a08:	00800044 	movi	r2,1
 8012a0c:	f800283a 	ret
 8012a10:	0005883a 	mov	r2,zero
 8012a14:	f800283a 	ret

08012a18 <__gedf2>:
 8012a18:	2804d53a 	srli	r2,r5,20
 8012a1c:	3806d53a 	srli	r3,r7,20
 8012a20:	02000434 	movhi	r8,16
 8012a24:	423fffc4 	addi	r8,r8,-1
 8012a28:	1081ffcc 	andi	r2,r2,2047
 8012a2c:	0241ffc4 	movi	r9,2047
 8012a30:	2a14703a 	and	r10,r5,r8
 8012a34:	18c1ffcc 	andi	r3,r3,2047
 8012a38:	3a10703a 	and	r8,r7,r8
 8012a3c:	280ad7fa 	srli	r5,r5,31
 8012a40:	380ed7fa 	srli	r7,r7,31
 8012a44:	12401d26 	beq	r2,r9,8012abc <__gedf2+0xa4>
 8012a48:	0241ffc4 	movi	r9,2047
 8012a4c:	1a401226 	beq	r3,r9,8012a98 <__gedf2+0x80>
 8012a50:	1000081e 	bne	r2,zero,8012a74 <__gedf2+0x5c>
 8012a54:	2296b03a 	or	r11,r4,r10
 8012a58:	5813003a 	cmpeq	r9,r11,zero
 8012a5c:	1800091e 	bne	r3,zero,8012a84 <__gedf2+0x6c>
 8012a60:	3218b03a 	or	r12,r6,r8
 8012a64:	6000071e 	bne	r12,zero,8012a84 <__gedf2+0x6c>
 8012a68:	0005883a 	mov	r2,zero
 8012a6c:	5800101e 	bne	r11,zero,8012ab0 <__gedf2+0x98>
 8012a70:	f800283a 	ret
 8012a74:	18000c1e 	bne	r3,zero,8012aa8 <__gedf2+0x90>
 8012a78:	3212b03a 	or	r9,r6,r8
 8012a7c:	48000c26 	beq	r9,zero,8012ab0 <__gedf2+0x98>
 8012a80:	0013883a 	mov	r9,zero
 8012a84:	39c03fcc 	andi	r7,r7,255
 8012a88:	48000826 	beq	r9,zero,8012aac <__gedf2+0x94>
 8012a8c:	38000926 	beq	r7,zero,8012ab4 <__gedf2+0x9c>
 8012a90:	00800044 	movi	r2,1
 8012a94:	f800283a 	ret
 8012a98:	3212b03a 	or	r9,r6,r8
 8012a9c:	483fec26 	beq	r9,zero,8012a50 <__alt_data_end+0xf8012a50>
 8012aa0:	00bfff84 	movi	r2,-2
 8012aa4:	f800283a 	ret
 8012aa8:	39c03fcc 	andi	r7,r7,255
 8012aac:	29c00626 	beq	r5,r7,8012ac8 <__gedf2+0xb0>
 8012ab0:	283ff726 	beq	r5,zero,8012a90 <__alt_data_end+0xf8012a90>
 8012ab4:	00bfffc4 	movi	r2,-1
 8012ab8:	f800283a 	ret
 8012abc:	2292b03a 	or	r9,r4,r10
 8012ac0:	483fe126 	beq	r9,zero,8012a48 <__alt_data_end+0xf8012a48>
 8012ac4:	003ff606 	br	8012aa0 <__alt_data_end+0xf8012aa0>
 8012ac8:	18bff916 	blt	r3,r2,8012ab0 <__alt_data_end+0xf8012ab0>
 8012acc:	10c00316 	blt	r2,r3,8012adc <__gedf2+0xc4>
 8012ad0:	42bff736 	bltu	r8,r10,8012ab0 <__alt_data_end+0xf8012ab0>
 8012ad4:	52000326 	beq	r10,r8,8012ae4 <__gedf2+0xcc>
 8012ad8:	5200042e 	bgeu	r10,r8,8012aec <__gedf2+0xd4>
 8012adc:	283fec1e 	bne	r5,zero,8012a90 <__alt_data_end+0xf8012a90>
 8012ae0:	003ff406 	br	8012ab4 <__alt_data_end+0xf8012ab4>
 8012ae4:	313ff236 	bltu	r6,r4,8012ab0 <__alt_data_end+0xf8012ab0>
 8012ae8:	21bffc36 	bltu	r4,r6,8012adc <__alt_data_end+0xf8012adc>
 8012aec:	0005883a 	mov	r2,zero
 8012af0:	f800283a 	ret

08012af4 <__ledf2>:
 8012af4:	2804d53a 	srli	r2,r5,20
 8012af8:	3810d53a 	srli	r8,r7,20
 8012afc:	00c00434 	movhi	r3,16
 8012b00:	18ffffc4 	addi	r3,r3,-1
 8012b04:	1081ffcc 	andi	r2,r2,2047
 8012b08:	0241ffc4 	movi	r9,2047
 8012b0c:	28d4703a 	and	r10,r5,r3
 8012b10:	4201ffcc 	andi	r8,r8,2047
 8012b14:	38c6703a 	and	r3,r7,r3
 8012b18:	280ad7fa 	srli	r5,r5,31
 8012b1c:	380ed7fa 	srli	r7,r7,31
 8012b20:	12401f26 	beq	r2,r9,8012ba0 <__ledf2+0xac>
 8012b24:	0241ffc4 	movi	r9,2047
 8012b28:	42401426 	beq	r8,r9,8012b7c <__ledf2+0x88>
 8012b2c:	1000091e 	bne	r2,zero,8012b54 <__ledf2+0x60>
 8012b30:	2296b03a 	or	r11,r4,r10
 8012b34:	5813003a 	cmpeq	r9,r11,zero
 8012b38:	29403fcc 	andi	r5,r5,255
 8012b3c:	40000a1e 	bne	r8,zero,8012b68 <__ledf2+0x74>
 8012b40:	30d8b03a 	or	r12,r6,r3
 8012b44:	6000081e 	bne	r12,zero,8012b68 <__ledf2+0x74>
 8012b48:	0005883a 	mov	r2,zero
 8012b4c:	5800111e 	bne	r11,zero,8012b94 <__ledf2+0xa0>
 8012b50:	f800283a 	ret
 8012b54:	29403fcc 	andi	r5,r5,255
 8012b58:	40000c1e 	bne	r8,zero,8012b8c <__ledf2+0x98>
 8012b5c:	30d2b03a 	or	r9,r6,r3
 8012b60:	48000c26 	beq	r9,zero,8012b94 <__ledf2+0xa0>
 8012b64:	0013883a 	mov	r9,zero
 8012b68:	39c03fcc 	andi	r7,r7,255
 8012b6c:	48000826 	beq	r9,zero,8012b90 <__ledf2+0x9c>
 8012b70:	38001126 	beq	r7,zero,8012bb8 <__ledf2+0xc4>
 8012b74:	00800044 	movi	r2,1
 8012b78:	f800283a 	ret
 8012b7c:	30d2b03a 	or	r9,r6,r3
 8012b80:	483fea26 	beq	r9,zero,8012b2c <__alt_data_end+0xf8012b2c>
 8012b84:	00800084 	movi	r2,2
 8012b88:	f800283a 	ret
 8012b8c:	39c03fcc 	andi	r7,r7,255
 8012b90:	39400726 	beq	r7,r5,8012bb0 <__ledf2+0xbc>
 8012b94:	2800081e 	bne	r5,zero,8012bb8 <__ledf2+0xc4>
 8012b98:	00800044 	movi	r2,1
 8012b9c:	f800283a 	ret
 8012ba0:	2292b03a 	or	r9,r4,r10
 8012ba4:	483fdf26 	beq	r9,zero,8012b24 <__alt_data_end+0xf8012b24>
 8012ba8:	00800084 	movi	r2,2
 8012bac:	f800283a 	ret
 8012bb0:	4080030e 	bge	r8,r2,8012bc0 <__ledf2+0xcc>
 8012bb4:	383fef26 	beq	r7,zero,8012b74 <__alt_data_end+0xf8012b74>
 8012bb8:	00bfffc4 	movi	r2,-1
 8012bbc:	f800283a 	ret
 8012bc0:	123feb16 	blt	r2,r8,8012b70 <__alt_data_end+0xf8012b70>
 8012bc4:	1abff336 	bltu	r3,r10,8012b94 <__alt_data_end+0xf8012b94>
 8012bc8:	50c00326 	beq	r10,r3,8012bd8 <__ledf2+0xe4>
 8012bcc:	50c0042e 	bgeu	r10,r3,8012be0 <__ledf2+0xec>
 8012bd0:	283fe81e 	bne	r5,zero,8012b74 <__alt_data_end+0xf8012b74>
 8012bd4:	003ff806 	br	8012bb8 <__alt_data_end+0xf8012bb8>
 8012bd8:	313fee36 	bltu	r6,r4,8012b94 <__alt_data_end+0xf8012b94>
 8012bdc:	21bffc36 	bltu	r4,r6,8012bd0 <__alt_data_end+0xf8012bd0>
 8012be0:	0005883a 	mov	r2,zero
 8012be4:	f800283a 	ret

08012be8 <__muldf3>:
 8012be8:	deffee04 	addi	sp,sp,-72
 8012bec:	dd000c15 	stw	r20,48(sp)
 8012bf0:	2828d53a 	srli	r20,r5,20
 8012bf4:	ddc00f15 	stw	r23,60(sp)
 8012bf8:	282ed7fa 	srli	r23,r5,31
 8012bfc:	dc000815 	stw	r16,32(sp)
 8012c00:	04000434 	movhi	r16,16
 8012c04:	dcc00b15 	stw	r19,44(sp)
 8012c08:	843fffc4 	addi	r16,r16,-1
 8012c0c:	dfc01115 	stw	ra,68(sp)
 8012c10:	df001015 	stw	fp,64(sp)
 8012c14:	dd800e15 	stw	r22,56(sp)
 8012c18:	dd400d15 	stw	r21,52(sp)
 8012c1c:	dc800a15 	stw	r18,40(sp)
 8012c20:	dc400915 	stw	r17,36(sp)
 8012c24:	a501ffcc 	andi	r20,r20,2047
 8012c28:	2c20703a 	and	r16,r5,r16
 8012c2c:	b827883a 	mov	r19,r23
 8012c30:	ba403fcc 	andi	r9,r23,255
 8012c34:	a0006026 	beq	r20,zero,8012db8 <__muldf3+0x1d0>
 8012c38:	0081ffc4 	movi	r2,2047
 8012c3c:	202d883a 	mov	r22,r4
 8012c40:	a0803626 	beq	r20,r2,8012d1c <__muldf3+0x134>
 8012c44:	84000434 	orhi	r16,r16,16
 8012c48:	200ad77a 	srli	r5,r4,29
 8012c4c:	800490fa 	slli	r2,r16,3
 8012c50:	202c90fa 	slli	r22,r4,3
 8012c54:	a53f0044 	addi	r20,r20,-1023
 8012c58:	28a0b03a 	or	r16,r5,r2
 8012c5c:	002b883a 	mov	r21,zero
 8012c60:	000b883a 	mov	r5,zero
 8012c64:	3804d53a 	srli	r2,r7,20
 8012c68:	3838d7fa 	srli	fp,r7,31
 8012c6c:	04400434 	movhi	r17,16
 8012c70:	8c7fffc4 	addi	r17,r17,-1
 8012c74:	1081ffcc 	andi	r2,r2,2047
 8012c78:	3025883a 	mov	r18,r6
 8012c7c:	3c62703a 	and	r17,r7,r17
 8012c80:	e2803fcc 	andi	r10,fp,255
 8012c84:	10006d26 	beq	r2,zero,8012e3c <__muldf3+0x254>
 8012c88:	00c1ffc4 	movi	r3,2047
 8012c8c:	10c06526 	beq	r2,r3,8012e24 <__muldf3+0x23c>
 8012c90:	8c400434 	orhi	r17,r17,16
 8012c94:	300ed77a 	srli	r7,r6,29
 8012c98:	880690fa 	slli	r3,r17,3
 8012c9c:	302490fa 	slli	r18,r6,3
 8012ca0:	10bf0044 	addi	r2,r2,-1023
 8012ca4:	38e2b03a 	or	r17,r7,r3
 8012ca8:	000f883a 	mov	r7,zero
 8012cac:	a087883a 	add	r3,r20,r2
 8012cb0:	010003c4 	movi	r4,15
 8012cb4:	3d44b03a 	or	r2,r7,r21
 8012cb8:	e5ccf03a 	xor	r6,fp,r23
 8012cbc:	1a000044 	addi	r8,r3,1
 8012cc0:	20809b36 	bltu	r4,r2,8012f30 <__muldf3+0x348>
 8012cc4:	100490ba 	slli	r2,r2,2
 8012cc8:	01020074 	movhi	r4,2049
 8012ccc:	210b3704 	addi	r4,r4,11484
 8012cd0:	1105883a 	add	r2,r2,r4
 8012cd4:	10800017 	ldw	r2,0(r2)
 8012cd8:	1000683a 	jmp	r2
 8012cdc:	08012f30 	cmpltui	zero,at,1212
 8012ce0:	08012d3c 	xorhi	zero,at,1204
 8012ce4:	08012d3c 	xorhi	zero,at,1204
 8012ce8:	08012d38 	rdprs	zero,at,1204
 8012cec:	08012f0c 	andi	zero,at,1212
 8012cf0:	08012f0c 	andi	zero,at,1212
 8012cf4:	08012ef4 	orhi	zero,at,1211
 8012cf8:	08012d38 	rdprs	zero,at,1204
 8012cfc:	08012f0c 	andi	zero,at,1212
 8012d00:	08012ef4 	orhi	zero,at,1211
 8012d04:	08012f0c 	andi	zero,at,1212
 8012d08:	08012d38 	rdprs	zero,at,1204
 8012d0c:	08012f1c 	xori	zero,at,1212
 8012d10:	08012f1c 	xori	zero,at,1212
 8012d14:	08012f1c 	xori	zero,at,1212
 8012d18:	0801327c 	xorhi	zero,at,1225
 8012d1c:	2404b03a 	or	r2,r4,r16
 8012d20:	1000711e 	bne	r2,zero,8012ee8 <__muldf3+0x300>
 8012d24:	05400204 	movi	r21,8
 8012d28:	0021883a 	mov	r16,zero
 8012d2c:	002d883a 	mov	r22,zero
 8012d30:	01400084 	movi	r5,2
 8012d34:	003fcb06 	br	8012c64 <__alt_data_end+0xf8012c64>
 8012d38:	500d883a 	mov	r6,r10
 8012d3c:	00800084 	movi	r2,2
 8012d40:	38805926 	beq	r7,r2,8012ea8 <__muldf3+0x2c0>
 8012d44:	008000c4 	movi	r2,3
 8012d48:	3881bb26 	beq	r7,r2,8013438 <__muldf3+0x850>
 8012d4c:	00800044 	movi	r2,1
 8012d50:	3881961e 	bne	r7,r2,80133ac <__muldf3+0x7c4>
 8012d54:	3027883a 	mov	r19,r6
 8012d58:	0005883a 	mov	r2,zero
 8012d5c:	0021883a 	mov	r16,zero
 8012d60:	002d883a 	mov	r22,zero
 8012d64:	1004953a 	slli	r2,r2,20
 8012d68:	98c03fcc 	andi	r3,r19,255
 8012d6c:	04400434 	movhi	r17,16
 8012d70:	8c7fffc4 	addi	r17,r17,-1
 8012d74:	180697fa 	slli	r3,r3,31
 8012d78:	8460703a 	and	r16,r16,r17
 8012d7c:	80a0b03a 	or	r16,r16,r2
 8012d80:	80c6b03a 	or	r3,r16,r3
 8012d84:	b005883a 	mov	r2,r22
 8012d88:	dfc01117 	ldw	ra,68(sp)
 8012d8c:	df001017 	ldw	fp,64(sp)
 8012d90:	ddc00f17 	ldw	r23,60(sp)
 8012d94:	dd800e17 	ldw	r22,56(sp)
 8012d98:	dd400d17 	ldw	r21,52(sp)
 8012d9c:	dd000c17 	ldw	r20,48(sp)
 8012da0:	dcc00b17 	ldw	r19,44(sp)
 8012da4:	dc800a17 	ldw	r18,40(sp)
 8012da8:	dc400917 	ldw	r17,36(sp)
 8012dac:	dc000817 	ldw	r16,32(sp)
 8012db0:	dec01204 	addi	sp,sp,72
 8012db4:	f800283a 	ret
 8012db8:	2404b03a 	or	r2,r4,r16
 8012dbc:	202b883a 	mov	r21,r4
 8012dc0:	10004426 	beq	r2,zero,8012ed4 <__muldf3+0x2ec>
 8012dc4:	80015126 	beq	r16,zero,801330c <__muldf3+0x724>
 8012dc8:	8009883a 	mov	r4,r16
 8012dcc:	d9800715 	stw	r6,28(sp)
 8012dd0:	d9c00215 	stw	r7,8(sp)
 8012dd4:	da400415 	stw	r9,16(sp)
 8012dd8:	8013f540 	call	8013f54 <__clzsi2>
 8012ddc:	d9800717 	ldw	r6,28(sp)
 8012de0:	d9c00217 	ldw	r7,8(sp)
 8012de4:	da400417 	ldw	r9,16(sp)
 8012de8:	113ffd44 	addi	r4,r2,-11
 8012dec:	00c00704 	movi	r3,28
 8012df0:	19014216 	blt	r3,r4,80132fc <__muldf3+0x714>
 8012df4:	00c00744 	movi	r3,29
 8012df8:	15bffe04 	addi	r22,r2,-8
 8012dfc:	1907c83a 	sub	r3,r3,r4
 8012e00:	85a0983a 	sll	r16,r16,r22
 8012e04:	a8c6d83a 	srl	r3,r21,r3
 8012e08:	adac983a 	sll	r22,r21,r22
 8012e0c:	1c20b03a 	or	r16,r3,r16
 8012e10:	1080fcc4 	addi	r2,r2,1011
 8012e14:	00a9c83a 	sub	r20,zero,r2
 8012e18:	002b883a 	mov	r21,zero
 8012e1c:	000b883a 	mov	r5,zero
 8012e20:	003f9006 	br	8012c64 <__alt_data_end+0xf8012c64>
 8012e24:	3446b03a 	or	r3,r6,r17
 8012e28:	1800281e 	bne	r3,zero,8012ecc <__muldf3+0x2e4>
 8012e2c:	0023883a 	mov	r17,zero
 8012e30:	0025883a 	mov	r18,zero
 8012e34:	01c00084 	movi	r7,2
 8012e38:	003f9c06 	br	8012cac <__alt_data_end+0xf8012cac>
 8012e3c:	3446b03a 	or	r3,r6,r17
 8012e40:	18001e26 	beq	r3,zero,8012ebc <__muldf3+0x2d4>
 8012e44:	88012126 	beq	r17,zero,80132cc <__muldf3+0x6e4>
 8012e48:	8809883a 	mov	r4,r17
 8012e4c:	d9400215 	stw	r5,8(sp)
 8012e50:	d9800715 	stw	r6,28(sp)
 8012e54:	da400415 	stw	r9,16(sp)
 8012e58:	da800315 	stw	r10,12(sp)
 8012e5c:	8013f540 	call	8013f54 <__clzsi2>
 8012e60:	d9400217 	ldw	r5,8(sp)
 8012e64:	d9800717 	ldw	r6,28(sp)
 8012e68:	da400417 	ldw	r9,16(sp)
 8012e6c:	da800317 	ldw	r10,12(sp)
 8012e70:	113ffd44 	addi	r4,r2,-11
 8012e74:	00c00704 	movi	r3,28
 8012e78:	19011016 	blt	r3,r4,80132bc <__muldf3+0x6d4>
 8012e7c:	00c00744 	movi	r3,29
 8012e80:	14bffe04 	addi	r18,r2,-8
 8012e84:	1907c83a 	sub	r3,r3,r4
 8012e88:	8ca2983a 	sll	r17,r17,r18
 8012e8c:	30c6d83a 	srl	r3,r6,r3
 8012e90:	34a4983a 	sll	r18,r6,r18
 8012e94:	1c62b03a 	or	r17,r3,r17
 8012e98:	1080fcc4 	addi	r2,r2,1011
 8012e9c:	0085c83a 	sub	r2,zero,r2
 8012ea0:	000f883a 	mov	r7,zero
 8012ea4:	003f8106 	br	8012cac <__alt_data_end+0xf8012cac>
 8012ea8:	3027883a 	mov	r19,r6
 8012eac:	0081ffc4 	movi	r2,2047
 8012eb0:	0021883a 	mov	r16,zero
 8012eb4:	002d883a 	mov	r22,zero
 8012eb8:	003faa06 	br	8012d64 <__alt_data_end+0xf8012d64>
 8012ebc:	0023883a 	mov	r17,zero
 8012ec0:	0025883a 	mov	r18,zero
 8012ec4:	01c00044 	movi	r7,1
 8012ec8:	003f7806 	br	8012cac <__alt_data_end+0xf8012cac>
 8012ecc:	01c000c4 	movi	r7,3
 8012ed0:	003f7606 	br	8012cac <__alt_data_end+0xf8012cac>
 8012ed4:	05400104 	movi	r21,4
 8012ed8:	0021883a 	mov	r16,zero
 8012edc:	002d883a 	mov	r22,zero
 8012ee0:	01400044 	movi	r5,1
 8012ee4:	003f5f06 	br	8012c64 <__alt_data_end+0xf8012c64>
 8012ee8:	05400304 	movi	r21,12
 8012eec:	014000c4 	movi	r5,3
 8012ef0:	003f5c06 	br	8012c64 <__alt_data_end+0xf8012c64>
 8012ef4:	04000434 	movhi	r16,16
 8012ef8:	0027883a 	mov	r19,zero
 8012efc:	843fffc4 	addi	r16,r16,-1
 8012f00:	05bfffc4 	movi	r22,-1
 8012f04:	0081ffc4 	movi	r2,2047
 8012f08:	003f9606 	br	8012d64 <__alt_data_end+0xf8012d64>
 8012f0c:	8023883a 	mov	r17,r16
 8012f10:	b025883a 	mov	r18,r22
 8012f14:	280f883a 	mov	r7,r5
 8012f18:	003f8806 	br	8012d3c <__alt_data_end+0xf8012d3c>
 8012f1c:	8023883a 	mov	r17,r16
 8012f20:	b025883a 	mov	r18,r22
 8012f24:	480d883a 	mov	r6,r9
 8012f28:	280f883a 	mov	r7,r5
 8012f2c:	003f8306 	br	8012d3c <__alt_data_end+0xf8012d3c>
 8012f30:	b026d43a 	srli	r19,r22,16
 8012f34:	902ed43a 	srli	r23,r18,16
 8012f38:	b5bfffcc 	andi	r22,r22,65535
 8012f3c:	94bfffcc 	andi	r18,r18,65535
 8012f40:	b00b883a 	mov	r5,r22
 8012f44:	9009883a 	mov	r4,r18
 8012f48:	d8c00515 	stw	r3,20(sp)
 8012f4c:	d9800715 	stw	r6,28(sp)
 8012f50:	da000615 	stw	r8,24(sp)
 8012f54:	800722c0 	call	800722c <__mulsi3>
 8012f58:	980b883a 	mov	r5,r19
 8012f5c:	9009883a 	mov	r4,r18
 8012f60:	1029883a 	mov	r20,r2
 8012f64:	800722c0 	call	800722c <__mulsi3>
 8012f68:	b80b883a 	mov	r5,r23
 8012f6c:	9809883a 	mov	r4,r19
 8012f70:	102b883a 	mov	r21,r2
 8012f74:	800722c0 	call	800722c <__mulsi3>
 8012f78:	b809883a 	mov	r4,r23
 8012f7c:	b00b883a 	mov	r5,r22
 8012f80:	1039883a 	mov	fp,r2
 8012f84:	800722c0 	call	800722c <__mulsi3>
 8012f88:	a008d43a 	srli	r4,r20,16
 8012f8c:	1545883a 	add	r2,r2,r21
 8012f90:	d8c00517 	ldw	r3,20(sp)
 8012f94:	2085883a 	add	r2,r4,r2
 8012f98:	d9800717 	ldw	r6,28(sp)
 8012f9c:	da000617 	ldw	r8,24(sp)
 8012fa0:	1540022e 	bgeu	r2,r21,8012fac <__muldf3+0x3c4>
 8012fa4:	01000074 	movhi	r4,1
 8012fa8:	e139883a 	add	fp,fp,r4
 8012fac:	100e943a 	slli	r7,r2,16
 8012fb0:	1004d43a 	srli	r2,r2,16
 8012fb4:	882ad43a 	srli	r21,r17,16
 8012fb8:	a53fffcc 	andi	r20,r20,65535
 8012fbc:	8c7fffcc 	andi	r17,r17,65535
 8012fc0:	3d29883a 	add	r20,r7,r20
 8012fc4:	b00b883a 	mov	r5,r22
 8012fc8:	8809883a 	mov	r4,r17
 8012fcc:	d8c00515 	stw	r3,20(sp)
 8012fd0:	d9800715 	stw	r6,28(sp)
 8012fd4:	da000615 	stw	r8,24(sp)
 8012fd8:	dd000115 	stw	r20,4(sp)
 8012fdc:	d8800015 	stw	r2,0(sp)
 8012fe0:	800722c0 	call	800722c <__mulsi3>
 8012fe4:	980b883a 	mov	r5,r19
 8012fe8:	8809883a 	mov	r4,r17
 8012fec:	d8800215 	stw	r2,8(sp)
 8012ff0:	800722c0 	call	800722c <__mulsi3>
 8012ff4:	9809883a 	mov	r4,r19
 8012ff8:	a80b883a 	mov	r5,r21
 8012ffc:	1029883a 	mov	r20,r2
 8013000:	800722c0 	call	800722c <__mulsi3>
 8013004:	b00b883a 	mov	r5,r22
 8013008:	a809883a 	mov	r4,r21
 801300c:	d8800415 	stw	r2,16(sp)
 8013010:	800722c0 	call	800722c <__mulsi3>
 8013014:	d9c00217 	ldw	r7,8(sp)
 8013018:	1505883a 	add	r2,r2,r20
 801301c:	d8c00517 	ldw	r3,20(sp)
 8013020:	3826d43a 	srli	r19,r7,16
 8013024:	d9800717 	ldw	r6,28(sp)
 8013028:	da000617 	ldw	r8,24(sp)
 801302c:	9885883a 	add	r2,r19,r2
 8013030:	da400417 	ldw	r9,16(sp)
 8013034:	1500022e 	bgeu	r2,r20,8013040 <__muldf3+0x458>
 8013038:	01000074 	movhi	r4,1
 801303c:	4913883a 	add	r9,r9,r4
 8013040:	1028d43a 	srli	r20,r2,16
 8013044:	1004943a 	slli	r2,r2,16
 8013048:	802cd43a 	srli	r22,r16,16
 801304c:	843fffcc 	andi	r16,r16,65535
 8013050:	3cffffcc 	andi	r19,r7,65535
 8013054:	9009883a 	mov	r4,r18
 8013058:	800b883a 	mov	r5,r16
 801305c:	a269883a 	add	r20,r20,r9
 8013060:	d8c00515 	stw	r3,20(sp)
 8013064:	d9800715 	stw	r6,28(sp)
 8013068:	da000615 	stw	r8,24(sp)
 801306c:	14e7883a 	add	r19,r2,r19
 8013070:	800722c0 	call	800722c <__mulsi3>
 8013074:	9009883a 	mov	r4,r18
 8013078:	b00b883a 	mov	r5,r22
 801307c:	d8800315 	stw	r2,12(sp)
 8013080:	800722c0 	call	800722c <__mulsi3>
 8013084:	b809883a 	mov	r4,r23
 8013088:	b00b883a 	mov	r5,r22
 801308c:	d8800215 	stw	r2,8(sp)
 8013090:	800722c0 	call	800722c <__mulsi3>
 8013094:	b80b883a 	mov	r5,r23
 8013098:	8009883a 	mov	r4,r16
 801309c:	d8800415 	stw	r2,16(sp)
 80130a0:	800722c0 	call	800722c <__mulsi3>
 80130a4:	da800317 	ldw	r10,12(sp)
 80130a8:	d9c00217 	ldw	r7,8(sp)
 80130ac:	d9000017 	ldw	r4,0(sp)
 80130b0:	502ed43a 	srli	r23,r10,16
 80130b4:	11c5883a 	add	r2,r2,r7
 80130b8:	24e5883a 	add	r18,r4,r19
 80130bc:	b885883a 	add	r2,r23,r2
 80130c0:	d8c00517 	ldw	r3,20(sp)
 80130c4:	d9800717 	ldw	r6,28(sp)
 80130c8:	da000617 	ldw	r8,24(sp)
 80130cc:	da400417 	ldw	r9,16(sp)
 80130d0:	11c0022e 	bgeu	r2,r7,80130dc <__muldf3+0x4f4>
 80130d4:	01000074 	movhi	r4,1
 80130d8:	4913883a 	add	r9,r9,r4
 80130dc:	100ed43a 	srli	r7,r2,16
 80130e0:	1004943a 	slli	r2,r2,16
 80130e4:	55ffffcc 	andi	r23,r10,65535
 80130e8:	3a53883a 	add	r9,r7,r9
 80130ec:	8809883a 	mov	r4,r17
 80130f0:	800b883a 	mov	r5,r16
 80130f4:	d8c00515 	stw	r3,20(sp)
 80130f8:	d9800715 	stw	r6,28(sp)
 80130fc:	da000615 	stw	r8,24(sp)
 8013100:	da400415 	stw	r9,16(sp)
 8013104:	15ef883a 	add	r23,r2,r23
 8013108:	800722c0 	call	800722c <__mulsi3>
 801310c:	8809883a 	mov	r4,r17
 8013110:	b00b883a 	mov	r5,r22
 8013114:	d8800215 	stw	r2,8(sp)
 8013118:	800722c0 	call	800722c <__mulsi3>
 801311c:	b00b883a 	mov	r5,r22
 8013120:	a809883a 	mov	r4,r21
 8013124:	d8800315 	stw	r2,12(sp)
 8013128:	800722c0 	call	800722c <__mulsi3>
 801312c:	8009883a 	mov	r4,r16
 8013130:	a80b883a 	mov	r5,r21
 8013134:	1023883a 	mov	r17,r2
 8013138:	800722c0 	call	800722c <__mulsi3>
 801313c:	d9c00217 	ldw	r7,8(sp)
 8013140:	da800317 	ldw	r10,12(sp)
 8013144:	d8c00517 	ldw	r3,20(sp)
 8013148:	3808d43a 	srli	r4,r7,16
 801314c:	1285883a 	add	r2,r2,r10
 8013150:	d9800717 	ldw	r6,28(sp)
 8013154:	2085883a 	add	r2,r4,r2
 8013158:	da000617 	ldw	r8,24(sp)
 801315c:	da400417 	ldw	r9,16(sp)
 8013160:	1280022e 	bgeu	r2,r10,801316c <__muldf3+0x584>
 8013164:	01000074 	movhi	r4,1
 8013168:	8923883a 	add	r17,r17,r4
 801316c:	1008943a 	slli	r4,r2,16
 8013170:	39ffffcc 	andi	r7,r7,65535
 8013174:	e4b9883a 	add	fp,fp,r18
 8013178:	21cf883a 	add	r7,r4,r7
 801317c:	e4e7803a 	cmpltu	r19,fp,r19
 8013180:	3d0f883a 	add	r7,r7,r20
 8013184:	bf39883a 	add	fp,r23,fp
 8013188:	99c9883a 	add	r4,r19,r7
 801318c:	e5ef803a 	cmpltu	r23,fp,r23
 8013190:	490b883a 	add	r5,r9,r4
 8013194:	1004d43a 	srli	r2,r2,16
 8013198:	b965883a 	add	r18,r23,r5
 801319c:	24c9803a 	cmpltu	r4,r4,r19
 80131a0:	3d29803a 	cmpltu	r20,r7,r20
 80131a4:	a128b03a 	or	r20,r20,r4
 80131a8:	95ef803a 	cmpltu	r23,r18,r23
 80131ac:	2a53803a 	cmpltu	r9,r5,r9
 80131b0:	a0a9883a 	add	r20,r20,r2
 80131b4:	4deeb03a 	or	r23,r9,r23
 80131b8:	a5ef883a 	add	r23,r20,r23
 80131bc:	bc63883a 	add	r17,r23,r17
 80131c0:	e004927a 	slli	r2,fp,9
 80131c4:	d9000117 	ldw	r4,4(sp)
 80131c8:	882e927a 	slli	r23,r17,9
 80131cc:	9022d5fa 	srli	r17,r18,23
 80131d0:	e038d5fa 	srli	fp,fp,23
 80131d4:	1104b03a 	or	r2,r2,r4
 80131d8:	9024927a 	slli	r18,r18,9
 80131dc:	1004c03a 	cmpne	r2,r2,zero
 80131e0:	bc62b03a 	or	r17,r23,r17
 80131e4:	1738b03a 	or	fp,r2,fp
 80131e8:	8880402c 	andhi	r2,r17,256
 80131ec:	e4a4b03a 	or	r18,fp,r18
 80131f0:	10000726 	beq	r2,zero,8013210 <__muldf3+0x628>
 80131f4:	9006d07a 	srli	r3,r18,1
 80131f8:	880497fa 	slli	r2,r17,31
 80131fc:	9480004c 	andi	r18,r18,1
 8013200:	8822d07a 	srli	r17,r17,1
 8013204:	1ca4b03a 	or	r18,r3,r18
 8013208:	14a4b03a 	or	r18,r2,r18
 801320c:	4007883a 	mov	r3,r8
 8013210:	1880ffc4 	addi	r2,r3,1023
 8013214:	0080460e 	bge	zero,r2,8013330 <__muldf3+0x748>
 8013218:	910001cc 	andi	r4,r18,7
 801321c:	20000726 	beq	r4,zero,801323c <__muldf3+0x654>
 8013220:	910003cc 	andi	r4,r18,15
 8013224:	01400104 	movi	r5,4
 8013228:	21400426 	beq	r4,r5,801323c <__muldf3+0x654>
 801322c:	9149883a 	add	r4,r18,r5
 8013230:	24a5803a 	cmpltu	r18,r4,r18
 8013234:	8ca3883a 	add	r17,r17,r18
 8013238:	2025883a 	mov	r18,r4
 801323c:	8900402c 	andhi	r4,r17,256
 8013240:	20000426 	beq	r4,zero,8013254 <__muldf3+0x66c>
 8013244:	18810004 	addi	r2,r3,1024
 8013248:	00ffc034 	movhi	r3,65280
 801324c:	18ffffc4 	addi	r3,r3,-1
 8013250:	88e2703a 	and	r17,r17,r3
 8013254:	00c1ff84 	movi	r3,2046
 8013258:	18bf1316 	blt	r3,r2,8012ea8 <__alt_data_end+0xf8012ea8>
 801325c:	882c977a 	slli	r22,r17,29
 8013260:	9024d0fa 	srli	r18,r18,3
 8013264:	8822927a 	slli	r17,r17,9
 8013268:	1081ffcc 	andi	r2,r2,2047
 801326c:	b4acb03a 	or	r22,r22,r18
 8013270:	8820d33a 	srli	r16,r17,12
 8013274:	3027883a 	mov	r19,r6
 8013278:	003eba06 	br	8012d64 <__alt_data_end+0xf8012d64>
 801327c:	8080022c 	andhi	r2,r16,8
 8013280:	10000926 	beq	r2,zero,80132a8 <__muldf3+0x6c0>
 8013284:	8880022c 	andhi	r2,r17,8
 8013288:	1000071e 	bne	r2,zero,80132a8 <__muldf3+0x6c0>
 801328c:	00800434 	movhi	r2,16
 8013290:	8c000234 	orhi	r16,r17,8
 8013294:	10bfffc4 	addi	r2,r2,-1
 8013298:	e027883a 	mov	r19,fp
 801329c:	80a0703a 	and	r16,r16,r2
 80132a0:	902d883a 	mov	r22,r18
 80132a4:	003f1706 	br	8012f04 <__alt_data_end+0xf8012f04>
 80132a8:	00800434 	movhi	r2,16
 80132ac:	84000234 	orhi	r16,r16,8
 80132b0:	10bfffc4 	addi	r2,r2,-1
 80132b4:	80a0703a 	and	r16,r16,r2
 80132b8:	003f1206 	br	8012f04 <__alt_data_end+0xf8012f04>
 80132bc:	147ff604 	addi	r17,r2,-40
 80132c0:	3462983a 	sll	r17,r6,r17
 80132c4:	0025883a 	mov	r18,zero
 80132c8:	003ef306 	br	8012e98 <__alt_data_end+0xf8012e98>
 80132cc:	3009883a 	mov	r4,r6
 80132d0:	d9400215 	stw	r5,8(sp)
 80132d4:	d9800715 	stw	r6,28(sp)
 80132d8:	da400415 	stw	r9,16(sp)
 80132dc:	da800315 	stw	r10,12(sp)
 80132e0:	8013f540 	call	8013f54 <__clzsi2>
 80132e4:	10800804 	addi	r2,r2,32
 80132e8:	da800317 	ldw	r10,12(sp)
 80132ec:	da400417 	ldw	r9,16(sp)
 80132f0:	d9800717 	ldw	r6,28(sp)
 80132f4:	d9400217 	ldw	r5,8(sp)
 80132f8:	003edd06 	br	8012e70 <__alt_data_end+0xf8012e70>
 80132fc:	143ff604 	addi	r16,r2,-40
 8013300:	ac20983a 	sll	r16,r21,r16
 8013304:	002d883a 	mov	r22,zero
 8013308:	003ec106 	br	8012e10 <__alt_data_end+0xf8012e10>
 801330c:	d9800715 	stw	r6,28(sp)
 8013310:	d9c00215 	stw	r7,8(sp)
 8013314:	da400415 	stw	r9,16(sp)
 8013318:	8013f540 	call	8013f54 <__clzsi2>
 801331c:	10800804 	addi	r2,r2,32
 8013320:	da400417 	ldw	r9,16(sp)
 8013324:	d9c00217 	ldw	r7,8(sp)
 8013328:	d9800717 	ldw	r6,28(sp)
 801332c:	003eae06 	br	8012de8 <__alt_data_end+0xf8012de8>
 8013330:	00c00044 	movi	r3,1
 8013334:	1887c83a 	sub	r3,r3,r2
 8013338:	01000e04 	movi	r4,56
 801333c:	20fe8516 	blt	r4,r3,8012d54 <__alt_data_end+0xf8012d54>
 8013340:	010007c4 	movi	r4,31
 8013344:	20c01b16 	blt	r4,r3,80133b4 <__muldf3+0x7cc>
 8013348:	00800804 	movi	r2,32
 801334c:	10c5c83a 	sub	r2,r2,r3
 8013350:	888a983a 	sll	r5,r17,r2
 8013354:	90c8d83a 	srl	r4,r18,r3
 8013358:	9084983a 	sll	r2,r18,r2
 801335c:	88e2d83a 	srl	r17,r17,r3
 8013360:	2906b03a 	or	r3,r5,r4
 8013364:	1004c03a 	cmpne	r2,r2,zero
 8013368:	1886b03a 	or	r3,r3,r2
 801336c:	188001cc 	andi	r2,r3,7
 8013370:	10000726 	beq	r2,zero,8013390 <__muldf3+0x7a8>
 8013374:	188003cc 	andi	r2,r3,15
 8013378:	01000104 	movi	r4,4
 801337c:	11000426 	beq	r2,r4,8013390 <__muldf3+0x7a8>
 8013380:	1805883a 	mov	r2,r3
 8013384:	10c00104 	addi	r3,r2,4
 8013388:	1885803a 	cmpltu	r2,r3,r2
 801338c:	88a3883a 	add	r17,r17,r2
 8013390:	8880202c 	andhi	r2,r17,128
 8013394:	10001c26 	beq	r2,zero,8013408 <__muldf3+0x820>
 8013398:	3027883a 	mov	r19,r6
 801339c:	00800044 	movi	r2,1
 80133a0:	0021883a 	mov	r16,zero
 80133a4:	002d883a 	mov	r22,zero
 80133a8:	003e6e06 	br	8012d64 <__alt_data_end+0xf8012d64>
 80133ac:	4007883a 	mov	r3,r8
 80133b0:	003f9706 	br	8013210 <__alt_data_end+0xf8013210>
 80133b4:	017ff844 	movi	r5,-31
 80133b8:	2885c83a 	sub	r2,r5,r2
 80133bc:	888ad83a 	srl	r5,r17,r2
 80133c0:	00800804 	movi	r2,32
 80133c4:	18801a26 	beq	r3,r2,8013430 <__muldf3+0x848>
 80133c8:	01001004 	movi	r4,64
 80133cc:	20c7c83a 	sub	r3,r4,r3
 80133d0:	88e2983a 	sll	r17,r17,r3
 80133d4:	8ca4b03a 	or	r18,r17,r18
 80133d8:	9004c03a 	cmpne	r2,r18,zero
 80133dc:	2884b03a 	or	r2,r5,r2
 80133e0:	144001cc 	andi	r17,r2,7
 80133e4:	88000d1e 	bne	r17,zero,801341c <__muldf3+0x834>
 80133e8:	0021883a 	mov	r16,zero
 80133ec:	102cd0fa 	srli	r22,r2,3
 80133f0:	3027883a 	mov	r19,r6
 80133f4:	0005883a 	mov	r2,zero
 80133f8:	b46cb03a 	or	r22,r22,r17
 80133fc:	003e5906 	br	8012d64 <__alt_data_end+0xf8012d64>
 8013400:	1007883a 	mov	r3,r2
 8013404:	0023883a 	mov	r17,zero
 8013408:	8820927a 	slli	r16,r17,9
 801340c:	1805883a 	mov	r2,r3
 8013410:	8822977a 	slli	r17,r17,29
 8013414:	8020d33a 	srli	r16,r16,12
 8013418:	003ff406 	br	80133ec <__alt_data_end+0xf80133ec>
 801341c:	10c003cc 	andi	r3,r2,15
 8013420:	01000104 	movi	r4,4
 8013424:	193ff626 	beq	r3,r4,8013400 <__alt_data_end+0xf8013400>
 8013428:	0023883a 	mov	r17,zero
 801342c:	003fd506 	br	8013384 <__alt_data_end+0xf8013384>
 8013430:	0023883a 	mov	r17,zero
 8013434:	003fe706 	br	80133d4 <__alt_data_end+0xf80133d4>
 8013438:	00800434 	movhi	r2,16
 801343c:	8c000234 	orhi	r16,r17,8
 8013440:	10bfffc4 	addi	r2,r2,-1
 8013444:	3027883a 	mov	r19,r6
 8013448:	80a0703a 	and	r16,r16,r2
 801344c:	902d883a 	mov	r22,r18
 8013450:	003eac06 	br	8012f04 <__alt_data_end+0xf8012f04>

08013454 <__subdf3>:
 8013454:	02000434 	movhi	r8,16
 8013458:	423fffc4 	addi	r8,r8,-1
 801345c:	defffb04 	addi	sp,sp,-20
 8013460:	2a14703a 	and	r10,r5,r8
 8013464:	3812d53a 	srli	r9,r7,20
 8013468:	3a10703a 	and	r8,r7,r8
 801346c:	2006d77a 	srli	r3,r4,29
 8013470:	3004d77a 	srli	r2,r6,29
 8013474:	dc000015 	stw	r16,0(sp)
 8013478:	501490fa 	slli	r10,r10,3
 801347c:	2820d53a 	srli	r16,r5,20
 8013480:	401090fa 	slli	r8,r8,3
 8013484:	dc800215 	stw	r18,8(sp)
 8013488:	dc400115 	stw	r17,4(sp)
 801348c:	dfc00415 	stw	ra,16(sp)
 8013490:	202290fa 	slli	r17,r4,3
 8013494:	dcc00315 	stw	r19,12(sp)
 8013498:	4a41ffcc 	andi	r9,r9,2047
 801349c:	0101ffc4 	movi	r4,2047
 80134a0:	2824d7fa 	srli	r18,r5,31
 80134a4:	8401ffcc 	andi	r16,r16,2047
 80134a8:	50c6b03a 	or	r3,r10,r3
 80134ac:	380ed7fa 	srli	r7,r7,31
 80134b0:	408ab03a 	or	r5,r8,r2
 80134b4:	300c90fa 	slli	r6,r6,3
 80134b8:	49009626 	beq	r9,r4,8013714 <__subdf3+0x2c0>
 80134bc:	39c0005c 	xori	r7,r7,1
 80134c0:	8245c83a 	sub	r2,r16,r9
 80134c4:	3c807426 	beq	r7,r18,8013698 <__subdf3+0x244>
 80134c8:	0080af0e 	bge	zero,r2,8013788 <__subdf3+0x334>
 80134cc:	48002a1e 	bne	r9,zero,8013578 <__subdf3+0x124>
 80134d0:	2988b03a 	or	r4,r5,r6
 80134d4:	20009a1e 	bne	r4,zero,8013740 <__subdf3+0x2ec>
 80134d8:	888001cc 	andi	r2,r17,7
 80134dc:	10000726 	beq	r2,zero,80134fc <__subdf3+0xa8>
 80134e0:	888003cc 	andi	r2,r17,15
 80134e4:	01000104 	movi	r4,4
 80134e8:	11000426 	beq	r2,r4,80134fc <__subdf3+0xa8>
 80134ec:	890b883a 	add	r5,r17,r4
 80134f0:	2c63803a 	cmpltu	r17,r5,r17
 80134f4:	1c47883a 	add	r3,r3,r17
 80134f8:	2823883a 	mov	r17,r5
 80134fc:	1880202c 	andhi	r2,r3,128
 8013500:	10005926 	beq	r2,zero,8013668 <__subdf3+0x214>
 8013504:	84000044 	addi	r16,r16,1
 8013508:	0081ffc4 	movi	r2,2047
 801350c:	8080be26 	beq	r16,r2,8013808 <__subdf3+0x3b4>
 8013510:	017fe034 	movhi	r5,65408
 8013514:	297fffc4 	addi	r5,r5,-1
 8013518:	1946703a 	and	r3,r3,r5
 801351c:	1804977a 	slli	r2,r3,29
 8013520:	1806927a 	slli	r3,r3,9
 8013524:	8822d0fa 	srli	r17,r17,3
 8013528:	8401ffcc 	andi	r16,r16,2047
 801352c:	180ad33a 	srli	r5,r3,12
 8013530:	9100004c 	andi	r4,r18,1
 8013534:	1444b03a 	or	r2,r2,r17
 8013538:	80c1ffcc 	andi	r3,r16,2047
 801353c:	1820953a 	slli	r16,r3,20
 8013540:	20c03fcc 	andi	r3,r4,255
 8013544:	180897fa 	slli	r4,r3,31
 8013548:	00c00434 	movhi	r3,16
 801354c:	18ffffc4 	addi	r3,r3,-1
 8013550:	28c6703a 	and	r3,r5,r3
 8013554:	1c06b03a 	or	r3,r3,r16
 8013558:	1906b03a 	or	r3,r3,r4
 801355c:	dfc00417 	ldw	ra,16(sp)
 8013560:	dcc00317 	ldw	r19,12(sp)
 8013564:	dc800217 	ldw	r18,8(sp)
 8013568:	dc400117 	ldw	r17,4(sp)
 801356c:	dc000017 	ldw	r16,0(sp)
 8013570:	dec00504 	addi	sp,sp,20
 8013574:	f800283a 	ret
 8013578:	0101ffc4 	movi	r4,2047
 801357c:	813fd626 	beq	r16,r4,80134d8 <__alt_data_end+0xf80134d8>
 8013580:	29402034 	orhi	r5,r5,128
 8013584:	01000e04 	movi	r4,56
 8013588:	2080a316 	blt	r4,r2,8013818 <__subdf3+0x3c4>
 801358c:	010007c4 	movi	r4,31
 8013590:	2080c616 	blt	r4,r2,80138ac <__subdf3+0x458>
 8013594:	01000804 	movi	r4,32
 8013598:	2089c83a 	sub	r4,r4,r2
 801359c:	2910983a 	sll	r8,r5,r4
 80135a0:	308ed83a 	srl	r7,r6,r2
 80135a4:	3108983a 	sll	r4,r6,r4
 80135a8:	2884d83a 	srl	r2,r5,r2
 80135ac:	41ccb03a 	or	r6,r8,r7
 80135b0:	2008c03a 	cmpne	r4,r4,zero
 80135b4:	310cb03a 	or	r6,r6,r4
 80135b8:	898dc83a 	sub	r6,r17,r6
 80135bc:	89a3803a 	cmpltu	r17,r17,r6
 80135c0:	1887c83a 	sub	r3,r3,r2
 80135c4:	1c47c83a 	sub	r3,r3,r17
 80135c8:	3023883a 	mov	r17,r6
 80135cc:	1880202c 	andhi	r2,r3,128
 80135d0:	10002326 	beq	r2,zero,8013660 <__subdf3+0x20c>
 80135d4:	04c02034 	movhi	r19,128
 80135d8:	9cffffc4 	addi	r19,r19,-1
 80135dc:	1ce6703a 	and	r19,r3,r19
 80135e0:	98007a26 	beq	r19,zero,80137cc <__subdf3+0x378>
 80135e4:	9809883a 	mov	r4,r19
 80135e8:	8013f540 	call	8013f54 <__clzsi2>
 80135ec:	113ffe04 	addi	r4,r2,-8
 80135f0:	00c007c4 	movi	r3,31
 80135f4:	19007b16 	blt	r3,r4,80137e4 <__subdf3+0x390>
 80135f8:	00800804 	movi	r2,32
 80135fc:	1105c83a 	sub	r2,r2,r4
 8013600:	8884d83a 	srl	r2,r17,r2
 8013604:	9906983a 	sll	r3,r19,r4
 8013608:	8922983a 	sll	r17,r17,r4
 801360c:	10c4b03a 	or	r2,r2,r3
 8013610:	24007816 	blt	r4,r16,80137f4 <__subdf3+0x3a0>
 8013614:	2421c83a 	sub	r16,r4,r16
 8013618:	80c00044 	addi	r3,r16,1
 801361c:	010007c4 	movi	r4,31
 8013620:	20c09516 	blt	r4,r3,8013878 <__subdf3+0x424>
 8013624:	01400804 	movi	r5,32
 8013628:	28cbc83a 	sub	r5,r5,r3
 801362c:	88c8d83a 	srl	r4,r17,r3
 8013630:	8962983a 	sll	r17,r17,r5
 8013634:	114a983a 	sll	r5,r2,r5
 8013638:	10c6d83a 	srl	r3,r2,r3
 801363c:	8804c03a 	cmpne	r2,r17,zero
 8013640:	290ab03a 	or	r5,r5,r4
 8013644:	28a2b03a 	or	r17,r5,r2
 8013648:	0021883a 	mov	r16,zero
 801364c:	003fa206 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013650:	2090b03a 	or	r8,r4,r2
 8013654:	40018e26 	beq	r8,zero,8013c90 <__subdf3+0x83c>
 8013658:	1007883a 	mov	r3,r2
 801365c:	2023883a 	mov	r17,r4
 8013660:	888001cc 	andi	r2,r17,7
 8013664:	103f9e1e 	bne	r2,zero,80134e0 <__alt_data_end+0xf80134e0>
 8013668:	1804977a 	slli	r2,r3,29
 801366c:	8822d0fa 	srli	r17,r17,3
 8013670:	1810d0fa 	srli	r8,r3,3
 8013674:	9100004c 	andi	r4,r18,1
 8013678:	1444b03a 	or	r2,r2,r17
 801367c:	00c1ffc4 	movi	r3,2047
 8013680:	80c02826 	beq	r16,r3,8013724 <__subdf3+0x2d0>
 8013684:	01400434 	movhi	r5,16
 8013688:	297fffc4 	addi	r5,r5,-1
 801368c:	80e0703a 	and	r16,r16,r3
 8013690:	414a703a 	and	r5,r8,r5
 8013694:	003fa806 	br	8013538 <__alt_data_end+0xf8013538>
 8013698:	0080630e 	bge	zero,r2,8013828 <__subdf3+0x3d4>
 801369c:	48003026 	beq	r9,zero,8013760 <__subdf3+0x30c>
 80136a0:	0101ffc4 	movi	r4,2047
 80136a4:	813f8c26 	beq	r16,r4,80134d8 <__alt_data_end+0xf80134d8>
 80136a8:	29402034 	orhi	r5,r5,128
 80136ac:	01000e04 	movi	r4,56
 80136b0:	2080a90e 	bge	r4,r2,8013958 <__subdf3+0x504>
 80136b4:	298cb03a 	or	r6,r5,r6
 80136b8:	3012c03a 	cmpne	r9,r6,zero
 80136bc:	0005883a 	mov	r2,zero
 80136c0:	4c53883a 	add	r9,r9,r17
 80136c4:	4c63803a 	cmpltu	r17,r9,r17
 80136c8:	10c7883a 	add	r3,r2,r3
 80136cc:	88c7883a 	add	r3,r17,r3
 80136d0:	4823883a 	mov	r17,r9
 80136d4:	1880202c 	andhi	r2,r3,128
 80136d8:	1000d026 	beq	r2,zero,8013a1c <__subdf3+0x5c8>
 80136dc:	84000044 	addi	r16,r16,1
 80136e0:	0081ffc4 	movi	r2,2047
 80136e4:	8080fe26 	beq	r16,r2,8013ae0 <__subdf3+0x68c>
 80136e8:	00bfe034 	movhi	r2,65408
 80136ec:	10bfffc4 	addi	r2,r2,-1
 80136f0:	1886703a 	and	r3,r3,r2
 80136f4:	880ad07a 	srli	r5,r17,1
 80136f8:	180497fa 	slli	r2,r3,31
 80136fc:	8900004c 	andi	r4,r17,1
 8013700:	2922b03a 	or	r17,r5,r4
 8013704:	1806d07a 	srli	r3,r3,1
 8013708:	1462b03a 	or	r17,r2,r17
 801370c:	3825883a 	mov	r18,r7
 8013710:	003f7106 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013714:	2984b03a 	or	r2,r5,r6
 8013718:	103f6826 	beq	r2,zero,80134bc <__alt_data_end+0xf80134bc>
 801371c:	39c03fcc 	andi	r7,r7,255
 8013720:	003f6706 	br	80134c0 <__alt_data_end+0xf80134c0>
 8013724:	4086b03a 	or	r3,r8,r2
 8013728:	18015226 	beq	r3,zero,8013c74 <__subdf3+0x820>
 801372c:	00c00434 	movhi	r3,16
 8013730:	41400234 	orhi	r5,r8,8
 8013734:	18ffffc4 	addi	r3,r3,-1
 8013738:	28ca703a 	and	r5,r5,r3
 801373c:	003f7e06 	br	8013538 <__alt_data_end+0xf8013538>
 8013740:	10bfffc4 	addi	r2,r2,-1
 8013744:	1000491e 	bne	r2,zero,801386c <__subdf3+0x418>
 8013748:	898fc83a 	sub	r7,r17,r6
 801374c:	89e3803a 	cmpltu	r17,r17,r7
 8013750:	1947c83a 	sub	r3,r3,r5
 8013754:	1c47c83a 	sub	r3,r3,r17
 8013758:	3823883a 	mov	r17,r7
 801375c:	003f9b06 	br	80135cc <__alt_data_end+0xf80135cc>
 8013760:	2988b03a 	or	r4,r5,r6
 8013764:	203f5c26 	beq	r4,zero,80134d8 <__alt_data_end+0xf80134d8>
 8013768:	10bfffc4 	addi	r2,r2,-1
 801376c:	1000931e 	bne	r2,zero,80139bc <__subdf3+0x568>
 8013770:	898d883a 	add	r6,r17,r6
 8013774:	3463803a 	cmpltu	r17,r6,r17
 8013778:	1947883a 	add	r3,r3,r5
 801377c:	88c7883a 	add	r3,r17,r3
 8013780:	3023883a 	mov	r17,r6
 8013784:	003fd306 	br	80136d4 <__alt_data_end+0xf80136d4>
 8013788:	1000541e 	bne	r2,zero,80138dc <__subdf3+0x488>
 801378c:	80800044 	addi	r2,r16,1
 8013790:	1081ffcc 	andi	r2,r2,2047
 8013794:	01000044 	movi	r4,1
 8013798:	2080a20e 	bge	r4,r2,8013a24 <__subdf3+0x5d0>
 801379c:	8989c83a 	sub	r4,r17,r6
 80137a0:	8905803a 	cmpltu	r2,r17,r4
 80137a4:	1967c83a 	sub	r19,r3,r5
 80137a8:	98a7c83a 	sub	r19,r19,r2
 80137ac:	9880202c 	andhi	r2,r19,128
 80137b0:	10006326 	beq	r2,zero,8013940 <__subdf3+0x4ec>
 80137b4:	3463c83a 	sub	r17,r6,r17
 80137b8:	28c7c83a 	sub	r3,r5,r3
 80137bc:	344d803a 	cmpltu	r6,r6,r17
 80137c0:	19a7c83a 	sub	r19,r3,r6
 80137c4:	3825883a 	mov	r18,r7
 80137c8:	983f861e 	bne	r19,zero,80135e4 <__alt_data_end+0xf80135e4>
 80137cc:	8809883a 	mov	r4,r17
 80137d0:	8013f540 	call	8013f54 <__clzsi2>
 80137d4:	10800804 	addi	r2,r2,32
 80137d8:	113ffe04 	addi	r4,r2,-8
 80137dc:	00c007c4 	movi	r3,31
 80137e0:	193f850e 	bge	r3,r4,80135f8 <__alt_data_end+0xf80135f8>
 80137e4:	10bff604 	addi	r2,r2,-40
 80137e8:	8884983a 	sll	r2,r17,r2
 80137ec:	0023883a 	mov	r17,zero
 80137f0:	243f880e 	bge	r4,r16,8013614 <__alt_data_end+0xf8013614>
 80137f4:	00ffe034 	movhi	r3,65408
 80137f8:	18ffffc4 	addi	r3,r3,-1
 80137fc:	8121c83a 	sub	r16,r16,r4
 8013800:	10c6703a 	and	r3,r2,r3
 8013804:	003f3406 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013808:	9100004c 	andi	r4,r18,1
 801380c:	000b883a 	mov	r5,zero
 8013810:	0005883a 	mov	r2,zero
 8013814:	003f4806 	br	8013538 <__alt_data_end+0xf8013538>
 8013818:	298cb03a 	or	r6,r5,r6
 801381c:	300cc03a 	cmpne	r6,r6,zero
 8013820:	0005883a 	mov	r2,zero
 8013824:	003f6406 	br	80135b8 <__alt_data_end+0xf80135b8>
 8013828:	10009a1e 	bne	r2,zero,8013a94 <__subdf3+0x640>
 801382c:	82400044 	addi	r9,r16,1
 8013830:	4881ffcc 	andi	r2,r9,2047
 8013834:	02800044 	movi	r10,1
 8013838:	5080670e 	bge	r10,r2,80139d8 <__subdf3+0x584>
 801383c:	0081ffc4 	movi	r2,2047
 8013840:	4880af26 	beq	r9,r2,8013b00 <__subdf3+0x6ac>
 8013844:	898d883a 	add	r6,r17,r6
 8013848:	1945883a 	add	r2,r3,r5
 801384c:	3447803a 	cmpltu	r3,r6,r17
 8013850:	1887883a 	add	r3,r3,r2
 8013854:	182297fa 	slli	r17,r3,31
 8013858:	300cd07a 	srli	r6,r6,1
 801385c:	1806d07a 	srli	r3,r3,1
 8013860:	4821883a 	mov	r16,r9
 8013864:	89a2b03a 	or	r17,r17,r6
 8013868:	003f1b06 	br	80134d8 <__alt_data_end+0xf80134d8>
 801386c:	0101ffc4 	movi	r4,2047
 8013870:	813f441e 	bne	r16,r4,8013584 <__alt_data_end+0xf8013584>
 8013874:	003f1806 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013878:	843ff844 	addi	r16,r16,-31
 801387c:	01400804 	movi	r5,32
 8013880:	1408d83a 	srl	r4,r2,r16
 8013884:	19405026 	beq	r3,r5,80139c8 <__subdf3+0x574>
 8013888:	01401004 	movi	r5,64
 801388c:	28c7c83a 	sub	r3,r5,r3
 8013890:	10c4983a 	sll	r2,r2,r3
 8013894:	88a2b03a 	or	r17,r17,r2
 8013898:	8822c03a 	cmpne	r17,r17,zero
 801389c:	2462b03a 	or	r17,r4,r17
 80138a0:	0007883a 	mov	r3,zero
 80138a4:	0021883a 	mov	r16,zero
 80138a8:	003f6d06 	br	8013660 <__alt_data_end+0xf8013660>
 80138ac:	11fff804 	addi	r7,r2,-32
 80138b0:	01000804 	movi	r4,32
 80138b4:	29ced83a 	srl	r7,r5,r7
 80138b8:	11004526 	beq	r2,r4,80139d0 <__subdf3+0x57c>
 80138bc:	01001004 	movi	r4,64
 80138c0:	2089c83a 	sub	r4,r4,r2
 80138c4:	2904983a 	sll	r2,r5,r4
 80138c8:	118cb03a 	or	r6,r2,r6
 80138cc:	300cc03a 	cmpne	r6,r6,zero
 80138d0:	398cb03a 	or	r6,r7,r6
 80138d4:	0005883a 	mov	r2,zero
 80138d8:	003f3706 	br	80135b8 <__alt_data_end+0xf80135b8>
 80138dc:	80002a26 	beq	r16,zero,8013988 <__subdf3+0x534>
 80138e0:	0101ffc4 	movi	r4,2047
 80138e4:	49006626 	beq	r9,r4,8013a80 <__subdf3+0x62c>
 80138e8:	0085c83a 	sub	r2,zero,r2
 80138ec:	18c02034 	orhi	r3,r3,128
 80138f0:	01000e04 	movi	r4,56
 80138f4:	20807e16 	blt	r4,r2,8013af0 <__subdf3+0x69c>
 80138f8:	010007c4 	movi	r4,31
 80138fc:	2080e716 	blt	r4,r2,8013c9c <__subdf3+0x848>
 8013900:	01000804 	movi	r4,32
 8013904:	2089c83a 	sub	r4,r4,r2
 8013908:	1914983a 	sll	r10,r3,r4
 801390c:	8890d83a 	srl	r8,r17,r2
 8013910:	8908983a 	sll	r4,r17,r4
 8013914:	1884d83a 	srl	r2,r3,r2
 8013918:	5222b03a 	or	r17,r10,r8
 801391c:	2006c03a 	cmpne	r3,r4,zero
 8013920:	88e2b03a 	or	r17,r17,r3
 8013924:	3463c83a 	sub	r17,r6,r17
 8013928:	2885c83a 	sub	r2,r5,r2
 801392c:	344d803a 	cmpltu	r6,r6,r17
 8013930:	1187c83a 	sub	r3,r2,r6
 8013934:	4821883a 	mov	r16,r9
 8013938:	3825883a 	mov	r18,r7
 801393c:	003f2306 	br	80135cc <__alt_data_end+0xf80135cc>
 8013940:	24d0b03a 	or	r8,r4,r19
 8013944:	40001b1e 	bne	r8,zero,80139b4 <__subdf3+0x560>
 8013948:	0005883a 	mov	r2,zero
 801394c:	0009883a 	mov	r4,zero
 8013950:	0021883a 	mov	r16,zero
 8013954:	003f4906 	br	801367c <__alt_data_end+0xf801367c>
 8013958:	010007c4 	movi	r4,31
 801395c:	20803a16 	blt	r4,r2,8013a48 <__subdf3+0x5f4>
 8013960:	01000804 	movi	r4,32
 8013964:	2089c83a 	sub	r4,r4,r2
 8013968:	2912983a 	sll	r9,r5,r4
 801396c:	3090d83a 	srl	r8,r6,r2
 8013970:	3108983a 	sll	r4,r6,r4
 8013974:	2884d83a 	srl	r2,r5,r2
 8013978:	4a12b03a 	or	r9,r9,r8
 801397c:	2008c03a 	cmpne	r4,r4,zero
 8013980:	4912b03a 	or	r9,r9,r4
 8013984:	003f4e06 	br	80136c0 <__alt_data_end+0xf80136c0>
 8013988:	1c48b03a 	or	r4,r3,r17
 801398c:	20003c26 	beq	r4,zero,8013a80 <__subdf3+0x62c>
 8013990:	0084303a 	nor	r2,zero,r2
 8013994:	1000381e 	bne	r2,zero,8013a78 <__subdf3+0x624>
 8013998:	3463c83a 	sub	r17,r6,r17
 801399c:	28c5c83a 	sub	r2,r5,r3
 80139a0:	344d803a 	cmpltu	r6,r6,r17
 80139a4:	1187c83a 	sub	r3,r2,r6
 80139a8:	4821883a 	mov	r16,r9
 80139ac:	3825883a 	mov	r18,r7
 80139b0:	003f0606 	br	80135cc <__alt_data_end+0xf80135cc>
 80139b4:	2023883a 	mov	r17,r4
 80139b8:	003f0906 	br	80135e0 <__alt_data_end+0xf80135e0>
 80139bc:	0101ffc4 	movi	r4,2047
 80139c0:	813f3a1e 	bne	r16,r4,80136ac <__alt_data_end+0xf80136ac>
 80139c4:	003ec406 	br	80134d8 <__alt_data_end+0xf80134d8>
 80139c8:	0005883a 	mov	r2,zero
 80139cc:	003fb106 	br	8013894 <__alt_data_end+0xf8013894>
 80139d0:	0005883a 	mov	r2,zero
 80139d4:	003fbc06 	br	80138c8 <__alt_data_end+0xf80138c8>
 80139d8:	1c44b03a 	or	r2,r3,r17
 80139dc:	80008e1e 	bne	r16,zero,8013c18 <__subdf3+0x7c4>
 80139e0:	1000c826 	beq	r2,zero,8013d04 <__subdf3+0x8b0>
 80139e4:	2984b03a 	or	r2,r5,r6
 80139e8:	103ebb26 	beq	r2,zero,80134d8 <__alt_data_end+0xf80134d8>
 80139ec:	8989883a 	add	r4,r17,r6
 80139f0:	1945883a 	add	r2,r3,r5
 80139f4:	2447803a 	cmpltu	r3,r4,r17
 80139f8:	1887883a 	add	r3,r3,r2
 80139fc:	1880202c 	andhi	r2,r3,128
 8013a00:	2023883a 	mov	r17,r4
 8013a04:	103f1626 	beq	r2,zero,8013660 <__alt_data_end+0xf8013660>
 8013a08:	00bfe034 	movhi	r2,65408
 8013a0c:	10bfffc4 	addi	r2,r2,-1
 8013a10:	5021883a 	mov	r16,r10
 8013a14:	1886703a 	and	r3,r3,r2
 8013a18:	003eaf06 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013a1c:	3825883a 	mov	r18,r7
 8013a20:	003f0f06 	br	8013660 <__alt_data_end+0xf8013660>
 8013a24:	1c44b03a 	or	r2,r3,r17
 8013a28:	8000251e 	bne	r16,zero,8013ac0 <__subdf3+0x66c>
 8013a2c:	1000661e 	bne	r2,zero,8013bc8 <__subdf3+0x774>
 8013a30:	2990b03a 	or	r8,r5,r6
 8013a34:	40009626 	beq	r8,zero,8013c90 <__subdf3+0x83c>
 8013a38:	2807883a 	mov	r3,r5
 8013a3c:	3023883a 	mov	r17,r6
 8013a40:	3825883a 	mov	r18,r7
 8013a44:	003ea406 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013a48:	127ff804 	addi	r9,r2,-32
 8013a4c:	01000804 	movi	r4,32
 8013a50:	2a52d83a 	srl	r9,r5,r9
 8013a54:	11008c26 	beq	r2,r4,8013c88 <__subdf3+0x834>
 8013a58:	01001004 	movi	r4,64
 8013a5c:	2085c83a 	sub	r2,r4,r2
 8013a60:	2884983a 	sll	r2,r5,r2
 8013a64:	118cb03a 	or	r6,r2,r6
 8013a68:	300cc03a 	cmpne	r6,r6,zero
 8013a6c:	4992b03a 	or	r9,r9,r6
 8013a70:	0005883a 	mov	r2,zero
 8013a74:	003f1206 	br	80136c0 <__alt_data_end+0xf80136c0>
 8013a78:	0101ffc4 	movi	r4,2047
 8013a7c:	493f9c1e 	bne	r9,r4,80138f0 <__alt_data_end+0xf80138f0>
 8013a80:	2807883a 	mov	r3,r5
 8013a84:	3023883a 	mov	r17,r6
 8013a88:	4821883a 	mov	r16,r9
 8013a8c:	3825883a 	mov	r18,r7
 8013a90:	003e9106 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013a94:	80001f1e 	bne	r16,zero,8013b14 <__subdf3+0x6c0>
 8013a98:	1c48b03a 	or	r4,r3,r17
 8013a9c:	20005a26 	beq	r4,zero,8013c08 <__subdf3+0x7b4>
 8013aa0:	0084303a 	nor	r2,zero,r2
 8013aa4:	1000561e 	bne	r2,zero,8013c00 <__subdf3+0x7ac>
 8013aa8:	89a3883a 	add	r17,r17,r6
 8013aac:	1945883a 	add	r2,r3,r5
 8013ab0:	898d803a 	cmpltu	r6,r17,r6
 8013ab4:	3087883a 	add	r3,r6,r2
 8013ab8:	4821883a 	mov	r16,r9
 8013abc:	003f0506 	br	80136d4 <__alt_data_end+0xf80136d4>
 8013ac0:	10002b1e 	bne	r2,zero,8013b70 <__subdf3+0x71c>
 8013ac4:	2984b03a 	or	r2,r5,r6
 8013ac8:	10008026 	beq	r2,zero,8013ccc <__subdf3+0x878>
 8013acc:	2807883a 	mov	r3,r5
 8013ad0:	3023883a 	mov	r17,r6
 8013ad4:	3825883a 	mov	r18,r7
 8013ad8:	0401ffc4 	movi	r16,2047
 8013adc:	003e7e06 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013ae0:	3809883a 	mov	r4,r7
 8013ae4:	0011883a 	mov	r8,zero
 8013ae8:	0005883a 	mov	r2,zero
 8013aec:	003ee306 	br	801367c <__alt_data_end+0xf801367c>
 8013af0:	1c62b03a 	or	r17,r3,r17
 8013af4:	8822c03a 	cmpne	r17,r17,zero
 8013af8:	0005883a 	mov	r2,zero
 8013afc:	003f8906 	br	8013924 <__alt_data_end+0xf8013924>
 8013b00:	3809883a 	mov	r4,r7
 8013b04:	4821883a 	mov	r16,r9
 8013b08:	0011883a 	mov	r8,zero
 8013b0c:	0005883a 	mov	r2,zero
 8013b10:	003eda06 	br	801367c <__alt_data_end+0xf801367c>
 8013b14:	0101ffc4 	movi	r4,2047
 8013b18:	49003b26 	beq	r9,r4,8013c08 <__subdf3+0x7b4>
 8013b1c:	0085c83a 	sub	r2,zero,r2
 8013b20:	18c02034 	orhi	r3,r3,128
 8013b24:	01000e04 	movi	r4,56
 8013b28:	20806e16 	blt	r4,r2,8013ce4 <__subdf3+0x890>
 8013b2c:	010007c4 	movi	r4,31
 8013b30:	20807716 	blt	r4,r2,8013d10 <__subdf3+0x8bc>
 8013b34:	01000804 	movi	r4,32
 8013b38:	2089c83a 	sub	r4,r4,r2
 8013b3c:	1914983a 	sll	r10,r3,r4
 8013b40:	8890d83a 	srl	r8,r17,r2
 8013b44:	8908983a 	sll	r4,r17,r4
 8013b48:	1884d83a 	srl	r2,r3,r2
 8013b4c:	5222b03a 	or	r17,r10,r8
 8013b50:	2006c03a 	cmpne	r3,r4,zero
 8013b54:	88e2b03a 	or	r17,r17,r3
 8013b58:	89a3883a 	add	r17,r17,r6
 8013b5c:	1145883a 	add	r2,r2,r5
 8013b60:	898d803a 	cmpltu	r6,r17,r6
 8013b64:	3087883a 	add	r3,r6,r2
 8013b68:	4821883a 	mov	r16,r9
 8013b6c:	003ed906 	br	80136d4 <__alt_data_end+0xf80136d4>
 8013b70:	2984b03a 	or	r2,r5,r6
 8013b74:	10004226 	beq	r2,zero,8013c80 <__subdf3+0x82c>
 8013b78:	1808d0fa 	srli	r4,r3,3
 8013b7c:	8822d0fa 	srli	r17,r17,3
 8013b80:	1806977a 	slli	r3,r3,29
 8013b84:	2080022c 	andhi	r2,r4,8
 8013b88:	1c62b03a 	or	r17,r3,r17
 8013b8c:	10000826 	beq	r2,zero,8013bb0 <__subdf3+0x75c>
 8013b90:	2812d0fa 	srli	r9,r5,3
 8013b94:	4880022c 	andhi	r2,r9,8
 8013b98:	1000051e 	bne	r2,zero,8013bb0 <__subdf3+0x75c>
 8013b9c:	300cd0fa 	srli	r6,r6,3
 8013ba0:	2804977a 	slli	r2,r5,29
 8013ba4:	4809883a 	mov	r4,r9
 8013ba8:	3825883a 	mov	r18,r7
 8013bac:	11a2b03a 	or	r17,r2,r6
 8013bb0:	8806d77a 	srli	r3,r17,29
 8013bb4:	200890fa 	slli	r4,r4,3
 8013bb8:	882290fa 	slli	r17,r17,3
 8013bbc:	0401ffc4 	movi	r16,2047
 8013bc0:	1906b03a 	or	r3,r3,r4
 8013bc4:	003e4406 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013bc8:	2984b03a 	or	r2,r5,r6
 8013bcc:	103e4226 	beq	r2,zero,80134d8 <__alt_data_end+0xf80134d8>
 8013bd0:	8989c83a 	sub	r4,r17,r6
 8013bd4:	8911803a 	cmpltu	r8,r17,r4
 8013bd8:	1945c83a 	sub	r2,r3,r5
 8013bdc:	1205c83a 	sub	r2,r2,r8
 8013be0:	1200202c 	andhi	r8,r2,128
 8013be4:	403e9a26 	beq	r8,zero,8013650 <__alt_data_end+0xf8013650>
 8013be8:	3463c83a 	sub	r17,r6,r17
 8013bec:	28c5c83a 	sub	r2,r5,r3
 8013bf0:	344d803a 	cmpltu	r6,r6,r17
 8013bf4:	1187c83a 	sub	r3,r2,r6
 8013bf8:	3825883a 	mov	r18,r7
 8013bfc:	003e3606 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013c00:	0101ffc4 	movi	r4,2047
 8013c04:	493fc71e 	bne	r9,r4,8013b24 <__alt_data_end+0xf8013b24>
 8013c08:	2807883a 	mov	r3,r5
 8013c0c:	3023883a 	mov	r17,r6
 8013c10:	4821883a 	mov	r16,r9
 8013c14:	003e3006 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013c18:	10003626 	beq	r2,zero,8013cf4 <__subdf3+0x8a0>
 8013c1c:	2984b03a 	or	r2,r5,r6
 8013c20:	10001726 	beq	r2,zero,8013c80 <__subdf3+0x82c>
 8013c24:	1808d0fa 	srli	r4,r3,3
 8013c28:	8822d0fa 	srli	r17,r17,3
 8013c2c:	1806977a 	slli	r3,r3,29
 8013c30:	2080022c 	andhi	r2,r4,8
 8013c34:	1c62b03a 	or	r17,r3,r17
 8013c38:	10000726 	beq	r2,zero,8013c58 <__subdf3+0x804>
 8013c3c:	2812d0fa 	srli	r9,r5,3
 8013c40:	4880022c 	andhi	r2,r9,8
 8013c44:	1000041e 	bne	r2,zero,8013c58 <__subdf3+0x804>
 8013c48:	300cd0fa 	srli	r6,r6,3
 8013c4c:	2804977a 	slli	r2,r5,29
 8013c50:	4809883a 	mov	r4,r9
 8013c54:	11a2b03a 	or	r17,r2,r6
 8013c58:	8806d77a 	srli	r3,r17,29
 8013c5c:	200890fa 	slli	r4,r4,3
 8013c60:	882290fa 	slli	r17,r17,3
 8013c64:	3825883a 	mov	r18,r7
 8013c68:	1906b03a 	or	r3,r3,r4
 8013c6c:	0401ffc4 	movi	r16,2047
 8013c70:	003e1906 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013c74:	000b883a 	mov	r5,zero
 8013c78:	0005883a 	mov	r2,zero
 8013c7c:	003e2e06 	br	8013538 <__alt_data_end+0xf8013538>
 8013c80:	0401ffc4 	movi	r16,2047
 8013c84:	003e1406 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013c88:	0005883a 	mov	r2,zero
 8013c8c:	003f7506 	br	8013a64 <__alt_data_end+0xf8013a64>
 8013c90:	0005883a 	mov	r2,zero
 8013c94:	0009883a 	mov	r4,zero
 8013c98:	003e7806 	br	801367c <__alt_data_end+0xf801367c>
 8013c9c:	123ff804 	addi	r8,r2,-32
 8013ca0:	01000804 	movi	r4,32
 8013ca4:	1a10d83a 	srl	r8,r3,r8
 8013ca8:	11002526 	beq	r2,r4,8013d40 <__subdf3+0x8ec>
 8013cac:	01001004 	movi	r4,64
 8013cb0:	2085c83a 	sub	r2,r4,r2
 8013cb4:	1884983a 	sll	r2,r3,r2
 8013cb8:	1444b03a 	or	r2,r2,r17
 8013cbc:	1004c03a 	cmpne	r2,r2,zero
 8013cc0:	40a2b03a 	or	r17,r8,r2
 8013cc4:	0005883a 	mov	r2,zero
 8013cc8:	003f1606 	br	8013924 <__alt_data_end+0xf8013924>
 8013ccc:	02000434 	movhi	r8,16
 8013cd0:	0009883a 	mov	r4,zero
 8013cd4:	423fffc4 	addi	r8,r8,-1
 8013cd8:	00bfffc4 	movi	r2,-1
 8013cdc:	0401ffc4 	movi	r16,2047
 8013ce0:	003e6606 	br	801367c <__alt_data_end+0xf801367c>
 8013ce4:	1c62b03a 	or	r17,r3,r17
 8013ce8:	8822c03a 	cmpne	r17,r17,zero
 8013cec:	0005883a 	mov	r2,zero
 8013cf0:	003f9906 	br	8013b58 <__alt_data_end+0xf8013b58>
 8013cf4:	2807883a 	mov	r3,r5
 8013cf8:	3023883a 	mov	r17,r6
 8013cfc:	0401ffc4 	movi	r16,2047
 8013d00:	003df506 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013d04:	2807883a 	mov	r3,r5
 8013d08:	3023883a 	mov	r17,r6
 8013d0c:	003df206 	br	80134d8 <__alt_data_end+0xf80134d8>
 8013d10:	123ff804 	addi	r8,r2,-32
 8013d14:	01000804 	movi	r4,32
 8013d18:	1a10d83a 	srl	r8,r3,r8
 8013d1c:	11000a26 	beq	r2,r4,8013d48 <__subdf3+0x8f4>
 8013d20:	01001004 	movi	r4,64
 8013d24:	2085c83a 	sub	r2,r4,r2
 8013d28:	1884983a 	sll	r2,r3,r2
 8013d2c:	1444b03a 	or	r2,r2,r17
 8013d30:	1004c03a 	cmpne	r2,r2,zero
 8013d34:	40a2b03a 	or	r17,r8,r2
 8013d38:	0005883a 	mov	r2,zero
 8013d3c:	003f8606 	br	8013b58 <__alt_data_end+0xf8013b58>
 8013d40:	0005883a 	mov	r2,zero
 8013d44:	003fdc06 	br	8013cb8 <__alt_data_end+0xf8013cb8>
 8013d48:	0005883a 	mov	r2,zero
 8013d4c:	003ff706 	br	8013d2c <__alt_data_end+0xf8013d2c>

08013d50 <__fixdfsi>:
 8013d50:	280cd53a 	srli	r6,r5,20
 8013d54:	00c00434 	movhi	r3,16
 8013d58:	18ffffc4 	addi	r3,r3,-1
 8013d5c:	3181ffcc 	andi	r6,r6,2047
 8013d60:	01c0ff84 	movi	r7,1022
 8013d64:	28c6703a 	and	r3,r5,r3
 8013d68:	280ad7fa 	srli	r5,r5,31
 8013d6c:	3980120e 	bge	r7,r6,8013db8 <__fixdfsi+0x68>
 8013d70:	00810744 	movi	r2,1053
 8013d74:	11800c16 	blt	r2,r6,8013da8 <__fixdfsi+0x58>
 8013d78:	00810cc4 	movi	r2,1075
 8013d7c:	1185c83a 	sub	r2,r2,r6
 8013d80:	01c007c4 	movi	r7,31
 8013d84:	18c00434 	orhi	r3,r3,16
 8013d88:	38800d16 	blt	r7,r2,8013dc0 <__fixdfsi+0x70>
 8013d8c:	31befb44 	addi	r6,r6,-1043
 8013d90:	2084d83a 	srl	r2,r4,r2
 8013d94:	1986983a 	sll	r3,r3,r6
 8013d98:	1884b03a 	or	r2,r3,r2
 8013d9c:	28000726 	beq	r5,zero,8013dbc <__fixdfsi+0x6c>
 8013da0:	0085c83a 	sub	r2,zero,r2
 8013da4:	f800283a 	ret
 8013da8:	00a00034 	movhi	r2,32768
 8013dac:	10bfffc4 	addi	r2,r2,-1
 8013db0:	2885883a 	add	r2,r5,r2
 8013db4:	f800283a 	ret
 8013db8:	0005883a 	mov	r2,zero
 8013dbc:	f800283a 	ret
 8013dc0:	008104c4 	movi	r2,1043
 8013dc4:	1185c83a 	sub	r2,r2,r6
 8013dc8:	1884d83a 	srl	r2,r3,r2
 8013dcc:	003ff306 	br	8013d9c <__alt_data_end+0xf8013d9c>

08013dd0 <__floatsidf>:
 8013dd0:	defffd04 	addi	sp,sp,-12
 8013dd4:	dfc00215 	stw	ra,8(sp)
 8013dd8:	dc400115 	stw	r17,4(sp)
 8013ddc:	dc000015 	stw	r16,0(sp)
 8013de0:	20002b26 	beq	r4,zero,8013e90 <__floatsidf+0xc0>
 8013de4:	2023883a 	mov	r17,r4
 8013de8:	2020d7fa 	srli	r16,r4,31
 8013dec:	20002d16 	blt	r4,zero,8013ea4 <__floatsidf+0xd4>
 8013df0:	8809883a 	mov	r4,r17
 8013df4:	8013f540 	call	8013f54 <__clzsi2>
 8013df8:	01410784 	movi	r5,1054
 8013dfc:	288bc83a 	sub	r5,r5,r2
 8013e00:	01010cc4 	movi	r4,1075
 8013e04:	2149c83a 	sub	r4,r4,r5
 8013e08:	00c007c4 	movi	r3,31
 8013e0c:	1900160e 	bge	r3,r4,8013e68 <__floatsidf+0x98>
 8013e10:	00c104c4 	movi	r3,1043
 8013e14:	1947c83a 	sub	r3,r3,r5
 8013e18:	88c6983a 	sll	r3,r17,r3
 8013e1c:	00800434 	movhi	r2,16
 8013e20:	10bfffc4 	addi	r2,r2,-1
 8013e24:	1886703a 	and	r3,r3,r2
 8013e28:	2941ffcc 	andi	r5,r5,2047
 8013e2c:	800d883a 	mov	r6,r16
 8013e30:	0005883a 	mov	r2,zero
 8013e34:	280a953a 	slli	r5,r5,20
 8013e38:	31803fcc 	andi	r6,r6,255
 8013e3c:	01000434 	movhi	r4,16
 8013e40:	300c97fa 	slli	r6,r6,31
 8013e44:	213fffc4 	addi	r4,r4,-1
 8013e48:	1906703a 	and	r3,r3,r4
 8013e4c:	1946b03a 	or	r3,r3,r5
 8013e50:	1986b03a 	or	r3,r3,r6
 8013e54:	dfc00217 	ldw	ra,8(sp)
 8013e58:	dc400117 	ldw	r17,4(sp)
 8013e5c:	dc000017 	ldw	r16,0(sp)
 8013e60:	dec00304 	addi	sp,sp,12
 8013e64:	f800283a 	ret
 8013e68:	00c002c4 	movi	r3,11
 8013e6c:	1887c83a 	sub	r3,r3,r2
 8013e70:	88c6d83a 	srl	r3,r17,r3
 8013e74:	8904983a 	sll	r2,r17,r4
 8013e78:	01000434 	movhi	r4,16
 8013e7c:	213fffc4 	addi	r4,r4,-1
 8013e80:	2941ffcc 	andi	r5,r5,2047
 8013e84:	1906703a 	and	r3,r3,r4
 8013e88:	800d883a 	mov	r6,r16
 8013e8c:	003fe906 	br	8013e34 <__alt_data_end+0xf8013e34>
 8013e90:	000d883a 	mov	r6,zero
 8013e94:	000b883a 	mov	r5,zero
 8013e98:	0007883a 	mov	r3,zero
 8013e9c:	0005883a 	mov	r2,zero
 8013ea0:	003fe406 	br	8013e34 <__alt_data_end+0xf8013e34>
 8013ea4:	0123c83a 	sub	r17,zero,r4
 8013ea8:	003fd106 	br	8013df0 <__alt_data_end+0xf8013df0>

08013eac <__floatunsidf>:
 8013eac:	defffe04 	addi	sp,sp,-8
 8013eb0:	dc000015 	stw	r16,0(sp)
 8013eb4:	dfc00115 	stw	ra,4(sp)
 8013eb8:	2021883a 	mov	r16,r4
 8013ebc:	20002226 	beq	r4,zero,8013f48 <__floatunsidf+0x9c>
 8013ec0:	8013f540 	call	8013f54 <__clzsi2>
 8013ec4:	01010784 	movi	r4,1054
 8013ec8:	2089c83a 	sub	r4,r4,r2
 8013ecc:	01810cc4 	movi	r6,1075
 8013ed0:	310dc83a 	sub	r6,r6,r4
 8013ed4:	00c007c4 	movi	r3,31
 8013ed8:	1980120e 	bge	r3,r6,8013f24 <__floatunsidf+0x78>
 8013edc:	00c104c4 	movi	r3,1043
 8013ee0:	1907c83a 	sub	r3,r3,r4
 8013ee4:	80ca983a 	sll	r5,r16,r3
 8013ee8:	00800434 	movhi	r2,16
 8013eec:	10bfffc4 	addi	r2,r2,-1
 8013ef0:	2101ffcc 	andi	r4,r4,2047
 8013ef4:	0021883a 	mov	r16,zero
 8013ef8:	288a703a 	and	r5,r5,r2
 8013efc:	2008953a 	slli	r4,r4,20
 8013f00:	00c00434 	movhi	r3,16
 8013f04:	18ffffc4 	addi	r3,r3,-1
 8013f08:	28c6703a 	and	r3,r5,r3
 8013f0c:	8005883a 	mov	r2,r16
 8013f10:	1906b03a 	or	r3,r3,r4
 8013f14:	dfc00117 	ldw	ra,4(sp)
 8013f18:	dc000017 	ldw	r16,0(sp)
 8013f1c:	dec00204 	addi	sp,sp,8
 8013f20:	f800283a 	ret
 8013f24:	00c002c4 	movi	r3,11
 8013f28:	188bc83a 	sub	r5,r3,r2
 8013f2c:	814ad83a 	srl	r5,r16,r5
 8013f30:	00c00434 	movhi	r3,16
 8013f34:	18ffffc4 	addi	r3,r3,-1
 8013f38:	81a0983a 	sll	r16,r16,r6
 8013f3c:	2101ffcc 	andi	r4,r4,2047
 8013f40:	28ca703a 	and	r5,r5,r3
 8013f44:	003fed06 	br	8013efc <__alt_data_end+0xf8013efc>
 8013f48:	0009883a 	mov	r4,zero
 8013f4c:	000b883a 	mov	r5,zero
 8013f50:	003fea06 	br	8013efc <__alt_data_end+0xf8013efc>

08013f54 <__clzsi2>:
 8013f54:	00bfffd4 	movui	r2,65535
 8013f58:	11000536 	bltu	r2,r4,8013f70 <__clzsi2+0x1c>
 8013f5c:	00803fc4 	movi	r2,255
 8013f60:	11000f36 	bltu	r2,r4,8013fa0 <__clzsi2+0x4c>
 8013f64:	00800804 	movi	r2,32
 8013f68:	0007883a 	mov	r3,zero
 8013f6c:	00000506 	br	8013f84 <__clzsi2+0x30>
 8013f70:	00804034 	movhi	r2,256
 8013f74:	10bfffc4 	addi	r2,r2,-1
 8013f78:	11000c2e 	bgeu	r2,r4,8013fac <__clzsi2+0x58>
 8013f7c:	00800204 	movi	r2,8
 8013f80:	00c00604 	movi	r3,24
 8013f84:	20c8d83a 	srl	r4,r4,r3
 8013f88:	00c20074 	movhi	r3,2049
 8013f8c:	18da1f04 	addi	r3,r3,26748
 8013f90:	1909883a 	add	r4,r3,r4
 8013f94:	20c00003 	ldbu	r3,0(r4)
 8013f98:	10c5c83a 	sub	r2,r2,r3
 8013f9c:	f800283a 	ret
 8013fa0:	00800604 	movi	r2,24
 8013fa4:	00c00204 	movi	r3,8
 8013fa8:	003ff606 	br	8013f84 <__alt_data_end+0xf8013f84>
 8013fac:	00800404 	movi	r2,16
 8013fb0:	1007883a 	mov	r3,r2
 8013fb4:	003ff306 	br	8013f84 <__alt_data_end+0xf8013f84>

08013fb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013fb8:	defffe04 	addi	sp,sp,-8
 8013fbc:	dfc00115 	stw	ra,4(sp)
 8013fc0:	df000015 	stw	fp,0(sp)
 8013fc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013fc8:	d0a00c17 	ldw	r2,-32720(gp)
 8013fcc:	10000326 	beq	r2,zero,8013fdc <alt_get_errno+0x24>
 8013fd0:	d0a00c17 	ldw	r2,-32720(gp)
 8013fd4:	103ee83a 	callr	r2
 8013fd8:	00000106 	br	8013fe0 <alt_get_errno+0x28>
 8013fdc:	d0a6e404 	addi	r2,gp,-25712
}
 8013fe0:	e037883a 	mov	sp,fp
 8013fe4:	dfc00117 	ldw	ra,4(sp)
 8013fe8:	df000017 	ldw	fp,0(sp)
 8013fec:	dec00204 	addi	sp,sp,8
 8013ff0:	f800283a 	ret

08013ff4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8013ff4:	defffb04 	addi	sp,sp,-20
 8013ff8:	dfc00415 	stw	ra,16(sp)
 8013ffc:	df000315 	stw	fp,12(sp)
 8014000:	df000304 	addi	fp,sp,12
 8014004:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8014008:	e0bfff17 	ldw	r2,-4(fp)
 801400c:	10000816 	blt	r2,zero,8014030 <close+0x3c>
 8014010:	01400304 	movi	r5,12
 8014014:	e13fff17 	ldw	r4,-4(fp)
 8014018:	800722c0 	call	800722c <__mulsi3>
 801401c:	1007883a 	mov	r3,r2
 8014020:	00820074 	movhi	r2,2049
 8014024:	109c9b04 	addi	r2,r2,29292
 8014028:	1885883a 	add	r2,r3,r2
 801402c:	00000106 	br	8014034 <close+0x40>
 8014030:	0005883a 	mov	r2,zero
 8014034:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8014038:	e0bffd17 	ldw	r2,-12(fp)
 801403c:	10001926 	beq	r2,zero,80140a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8014040:	e0bffd17 	ldw	r2,-12(fp)
 8014044:	10800017 	ldw	r2,0(r2)
 8014048:	10800417 	ldw	r2,16(r2)
 801404c:	10000626 	beq	r2,zero,8014068 <close+0x74>
 8014050:	e0bffd17 	ldw	r2,-12(fp)
 8014054:	10800017 	ldw	r2,0(r2)
 8014058:	10800417 	ldw	r2,16(r2)
 801405c:	e13ffd17 	ldw	r4,-12(fp)
 8014060:	103ee83a 	callr	r2
 8014064:	00000106 	br	801406c <close+0x78>
 8014068:	0005883a 	mov	r2,zero
 801406c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8014070:	e13fff17 	ldw	r4,-4(fp)
 8014074:	80146dc0 	call	80146dc <alt_release_fd>
    if (rval < 0)
 8014078:	e0bffe17 	ldw	r2,-8(fp)
 801407c:	1000070e 	bge	r2,zero,801409c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8014080:	8013fb80 	call	8013fb8 <alt_get_errno>
 8014084:	1007883a 	mov	r3,r2
 8014088:	e0bffe17 	ldw	r2,-8(fp)
 801408c:	0085c83a 	sub	r2,zero,r2
 8014090:	18800015 	stw	r2,0(r3)
      return -1;
 8014094:	00bfffc4 	movi	r2,-1
 8014098:	00000706 	br	80140b8 <close+0xc4>
    }
    return 0;
 801409c:	0005883a 	mov	r2,zero
 80140a0:	00000506 	br	80140b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80140a4:	8013fb80 	call	8013fb8 <alt_get_errno>
 80140a8:	1007883a 	mov	r3,r2
 80140ac:	00801444 	movi	r2,81
 80140b0:	18800015 	stw	r2,0(r3)
    return -1;
 80140b4:	00bfffc4 	movi	r2,-1
  }
}
 80140b8:	e037883a 	mov	sp,fp
 80140bc:	dfc00117 	ldw	ra,4(sp)
 80140c0:	df000017 	ldw	fp,0(sp)
 80140c4:	dec00204 	addi	sp,sp,8
 80140c8:	f800283a 	ret

080140cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80140cc:	defffc04 	addi	sp,sp,-16
 80140d0:	df000315 	stw	fp,12(sp)
 80140d4:	df000304 	addi	fp,sp,12
 80140d8:	e13ffd15 	stw	r4,-12(fp)
 80140dc:	e17ffe15 	stw	r5,-8(fp)
 80140e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80140e4:	e0bfff17 	ldw	r2,-4(fp)
}
 80140e8:	e037883a 	mov	sp,fp
 80140ec:	df000017 	ldw	fp,0(sp)
 80140f0:	dec00104 	addi	sp,sp,4
 80140f4:	f800283a 	ret

080140f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80140f8:	defffe04 	addi	sp,sp,-8
 80140fc:	dfc00115 	stw	ra,4(sp)
 8014100:	df000015 	stw	fp,0(sp)
 8014104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014108:	d0a00c17 	ldw	r2,-32720(gp)
 801410c:	10000326 	beq	r2,zero,801411c <alt_get_errno+0x24>
 8014110:	d0a00c17 	ldw	r2,-32720(gp)
 8014114:	103ee83a 	callr	r2
 8014118:	00000106 	br	8014120 <alt_get_errno+0x28>
 801411c:	d0a6e404 	addi	r2,gp,-25712
}
 8014120:	e037883a 	mov	sp,fp
 8014124:	dfc00117 	ldw	ra,4(sp)
 8014128:	df000017 	ldw	fp,0(sp)
 801412c:	dec00204 	addi	sp,sp,8
 8014130:	f800283a 	ret

08014134 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8014134:	defffb04 	addi	sp,sp,-20
 8014138:	dfc00415 	stw	ra,16(sp)
 801413c:	df000315 	stw	fp,12(sp)
 8014140:	df000304 	addi	fp,sp,12
 8014144:	e13ffe15 	stw	r4,-8(fp)
 8014148:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801414c:	e0bffe17 	ldw	r2,-8(fp)
 8014150:	10000816 	blt	r2,zero,8014174 <fstat+0x40>
 8014154:	01400304 	movi	r5,12
 8014158:	e13ffe17 	ldw	r4,-8(fp)
 801415c:	800722c0 	call	800722c <__mulsi3>
 8014160:	1007883a 	mov	r3,r2
 8014164:	00820074 	movhi	r2,2049
 8014168:	109c9b04 	addi	r2,r2,29292
 801416c:	1885883a 	add	r2,r3,r2
 8014170:	00000106 	br	8014178 <fstat+0x44>
 8014174:	0005883a 	mov	r2,zero
 8014178:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 801417c:	e0bffd17 	ldw	r2,-12(fp)
 8014180:	10001026 	beq	r2,zero,80141c4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8014184:	e0bffd17 	ldw	r2,-12(fp)
 8014188:	10800017 	ldw	r2,0(r2)
 801418c:	10800817 	ldw	r2,32(r2)
 8014190:	10000726 	beq	r2,zero,80141b0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8014194:	e0bffd17 	ldw	r2,-12(fp)
 8014198:	10800017 	ldw	r2,0(r2)
 801419c:	10800817 	ldw	r2,32(r2)
 80141a0:	e17fff17 	ldw	r5,-4(fp)
 80141a4:	e13ffd17 	ldw	r4,-12(fp)
 80141a8:	103ee83a 	callr	r2
 80141ac:	00000a06 	br	80141d8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80141b0:	e0bfff17 	ldw	r2,-4(fp)
 80141b4:	00c80004 	movi	r3,8192
 80141b8:	10c00115 	stw	r3,4(r2)
      return 0;
 80141bc:	0005883a 	mov	r2,zero
 80141c0:	00000506 	br	80141d8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80141c4:	80140f80 	call	80140f8 <alt_get_errno>
 80141c8:	1007883a 	mov	r3,r2
 80141cc:	00801444 	movi	r2,81
 80141d0:	18800015 	stw	r2,0(r3)
    return -1;
 80141d4:	00bfffc4 	movi	r2,-1
  }
}
 80141d8:	e037883a 	mov	sp,fp
 80141dc:	dfc00117 	ldw	ra,4(sp)
 80141e0:	df000017 	ldw	fp,0(sp)
 80141e4:	dec00204 	addi	sp,sp,8
 80141e8:	f800283a 	ret

080141ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80141ec:	defffe04 	addi	sp,sp,-8
 80141f0:	dfc00115 	stw	ra,4(sp)
 80141f4:	df000015 	stw	fp,0(sp)
 80141f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80141fc:	d0a00c17 	ldw	r2,-32720(gp)
 8014200:	10000326 	beq	r2,zero,8014210 <alt_get_errno+0x24>
 8014204:	d0a00c17 	ldw	r2,-32720(gp)
 8014208:	103ee83a 	callr	r2
 801420c:	00000106 	br	8014214 <alt_get_errno+0x28>
 8014210:	d0a6e404 	addi	r2,gp,-25712
}
 8014214:	e037883a 	mov	sp,fp
 8014218:	dfc00117 	ldw	ra,4(sp)
 801421c:	df000017 	ldw	fp,0(sp)
 8014220:	dec00204 	addi	sp,sp,8
 8014224:	f800283a 	ret

08014228 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8014228:	deffed04 	addi	sp,sp,-76
 801422c:	dfc01215 	stw	ra,72(sp)
 8014230:	df001115 	stw	fp,68(sp)
 8014234:	df001104 	addi	fp,sp,68
 8014238:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801423c:	e0bfff17 	ldw	r2,-4(fp)
 8014240:	10000816 	blt	r2,zero,8014264 <isatty+0x3c>
 8014244:	01400304 	movi	r5,12
 8014248:	e13fff17 	ldw	r4,-4(fp)
 801424c:	800722c0 	call	800722c <__mulsi3>
 8014250:	1007883a 	mov	r3,r2
 8014254:	00820074 	movhi	r2,2049
 8014258:	109c9b04 	addi	r2,r2,29292
 801425c:	1885883a 	add	r2,r3,r2
 8014260:	00000106 	br	8014268 <isatty+0x40>
 8014264:	0005883a 	mov	r2,zero
 8014268:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801426c:	e0bfef17 	ldw	r2,-68(fp)
 8014270:	10000e26 	beq	r2,zero,80142ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8014274:	e0bfef17 	ldw	r2,-68(fp)
 8014278:	10800017 	ldw	r2,0(r2)
 801427c:	10800817 	ldw	r2,32(r2)
 8014280:	1000021e 	bne	r2,zero,801428c <isatty+0x64>
    {
      return 1;
 8014284:	00800044 	movi	r2,1
 8014288:	00000d06 	br	80142c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 801428c:	e0bff004 	addi	r2,fp,-64
 8014290:	100b883a 	mov	r5,r2
 8014294:	e13fff17 	ldw	r4,-4(fp)
 8014298:	80141340 	call	8014134 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 801429c:	e0bff117 	ldw	r2,-60(fp)
 80142a0:	10880020 	cmpeqi	r2,r2,8192
 80142a4:	10803fcc 	andi	r2,r2,255
 80142a8:	00000506 	br	80142c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80142ac:	80141ec0 	call	80141ec <alt_get_errno>
 80142b0:	1007883a 	mov	r3,r2
 80142b4:	00801444 	movi	r2,81
 80142b8:	18800015 	stw	r2,0(r3)
    return 0;
 80142bc:	0005883a 	mov	r2,zero
  }
}
 80142c0:	e037883a 	mov	sp,fp
 80142c4:	dfc00117 	ldw	ra,4(sp)
 80142c8:	df000017 	ldw	fp,0(sp)
 80142cc:	dec00204 	addi	sp,sp,8
 80142d0:	f800283a 	ret

080142d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80142d4:	defffc04 	addi	sp,sp,-16
 80142d8:	df000315 	stw	fp,12(sp)
 80142dc:	df000304 	addi	fp,sp,12
 80142e0:	e13ffd15 	stw	r4,-12(fp)
 80142e4:	e17ffe15 	stw	r5,-8(fp)
 80142e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80142ec:	e0fffe17 	ldw	r3,-8(fp)
 80142f0:	e0bffd17 	ldw	r2,-12(fp)
 80142f4:	18800c26 	beq	r3,r2,8014328 <alt_load_section+0x54>
  {
    while( to != end )
 80142f8:	00000806 	br	801431c <alt_load_section+0x48>
    {
      *to++ = *from++;
 80142fc:	e0bffe17 	ldw	r2,-8(fp)
 8014300:	10c00104 	addi	r3,r2,4
 8014304:	e0fffe15 	stw	r3,-8(fp)
 8014308:	e0fffd17 	ldw	r3,-12(fp)
 801430c:	19000104 	addi	r4,r3,4
 8014310:	e13ffd15 	stw	r4,-12(fp)
 8014314:	18c00017 	ldw	r3,0(r3)
 8014318:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 801431c:	e0fffe17 	ldw	r3,-8(fp)
 8014320:	e0bfff17 	ldw	r2,-4(fp)
 8014324:	18bff51e 	bne	r3,r2,80142fc <__alt_data_end+0xf80142fc>
    {
      *to++ = *from++;
    }
  }
}
 8014328:	0001883a 	nop
 801432c:	e037883a 	mov	sp,fp
 8014330:	df000017 	ldw	fp,0(sp)
 8014334:	dec00104 	addi	sp,sp,4
 8014338:	f800283a 	ret

0801433c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 801433c:	defffe04 	addi	sp,sp,-8
 8014340:	dfc00115 	stw	ra,4(sp)
 8014344:	df000015 	stw	fp,0(sp)
 8014348:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 801434c:	018200b4 	movhi	r6,2050
 8014350:	31a12404 	addi	r6,r6,-31600
 8014354:	01420074 	movhi	r5,2049
 8014358:	295a6804 	addi	r5,r5,27040
 801435c:	010200b4 	movhi	r4,2050
 8014360:	21212404 	addi	r4,r4,-31600
 8014364:	80142d40 	call	80142d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8014368:	01820034 	movhi	r6,2048
 801436c:	3180dd04 	addi	r6,r6,884
 8014370:	01420034 	movhi	r5,2048
 8014374:	29400804 	addi	r5,r5,32
 8014378:	01020034 	movhi	r4,2048
 801437c:	21000804 	addi	r4,r4,32
 8014380:	80142d40 	call	80142d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8014384:	01820074 	movhi	r6,2049
 8014388:	319a6804 	addi	r6,r6,27040
 801438c:	01420074 	movhi	r5,2049
 8014390:	29598b04 	addi	r5,r5,26156
 8014394:	01020074 	movhi	r4,2049
 8014398:	21198b04 	addi	r4,r4,26156
 801439c:	80142d40 	call	80142d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80143a0:	80156940 	call	8015694 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80143a4:	80158540 	call	8015854 <alt_icache_flush_all>
}
 80143a8:	0001883a 	nop
 80143ac:	e037883a 	mov	sp,fp
 80143b0:	dfc00117 	ldw	ra,4(sp)
 80143b4:	df000017 	ldw	fp,0(sp)
 80143b8:	dec00204 	addi	sp,sp,8
 80143bc:	f800283a 	ret

080143c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80143c0:	defffe04 	addi	sp,sp,-8
 80143c4:	dfc00115 	stw	ra,4(sp)
 80143c8:	df000015 	stw	fp,0(sp)
 80143cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80143d0:	d0a00c17 	ldw	r2,-32720(gp)
 80143d4:	10000326 	beq	r2,zero,80143e4 <alt_get_errno+0x24>
 80143d8:	d0a00c17 	ldw	r2,-32720(gp)
 80143dc:	103ee83a 	callr	r2
 80143e0:	00000106 	br	80143e8 <alt_get_errno+0x28>
 80143e4:	d0a6e404 	addi	r2,gp,-25712
}
 80143e8:	e037883a 	mov	sp,fp
 80143ec:	dfc00117 	ldw	ra,4(sp)
 80143f0:	df000017 	ldw	fp,0(sp)
 80143f4:	dec00204 	addi	sp,sp,8
 80143f8:	f800283a 	ret

080143fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80143fc:	defff904 	addi	sp,sp,-28
 8014400:	dfc00615 	stw	ra,24(sp)
 8014404:	df000515 	stw	fp,20(sp)
 8014408:	df000504 	addi	fp,sp,20
 801440c:	e13ffd15 	stw	r4,-12(fp)
 8014410:	e17ffe15 	stw	r5,-8(fp)
 8014414:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8014418:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801441c:	e0bffd17 	ldw	r2,-12(fp)
 8014420:	10000816 	blt	r2,zero,8014444 <lseek+0x48>
 8014424:	01400304 	movi	r5,12
 8014428:	e13ffd17 	ldw	r4,-12(fp)
 801442c:	800722c0 	call	800722c <__mulsi3>
 8014430:	1007883a 	mov	r3,r2
 8014434:	00820074 	movhi	r2,2049
 8014438:	109c9b04 	addi	r2,r2,29292
 801443c:	1885883a 	add	r2,r3,r2
 8014440:	00000106 	br	8014448 <lseek+0x4c>
 8014444:	0005883a 	mov	r2,zero
 8014448:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801444c:	e0bffc17 	ldw	r2,-16(fp)
 8014450:	10001026 	beq	r2,zero,8014494 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8014454:	e0bffc17 	ldw	r2,-16(fp)
 8014458:	10800017 	ldw	r2,0(r2)
 801445c:	10800717 	ldw	r2,28(r2)
 8014460:	10000926 	beq	r2,zero,8014488 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8014464:	e0bffc17 	ldw	r2,-16(fp)
 8014468:	10800017 	ldw	r2,0(r2)
 801446c:	10800717 	ldw	r2,28(r2)
 8014470:	e1bfff17 	ldw	r6,-4(fp)
 8014474:	e17ffe17 	ldw	r5,-8(fp)
 8014478:	e13ffc17 	ldw	r4,-16(fp)
 801447c:	103ee83a 	callr	r2
 8014480:	e0bffb15 	stw	r2,-20(fp)
 8014484:	00000506 	br	801449c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8014488:	00bfde84 	movi	r2,-134
 801448c:	e0bffb15 	stw	r2,-20(fp)
 8014490:	00000206 	br	801449c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8014494:	00bfebc4 	movi	r2,-81
 8014498:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 801449c:	e0bffb17 	ldw	r2,-20(fp)
 80144a0:	1000070e 	bge	r2,zero,80144c0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80144a4:	80143c00 	call	80143c0 <alt_get_errno>
 80144a8:	1007883a 	mov	r3,r2
 80144ac:	e0bffb17 	ldw	r2,-20(fp)
 80144b0:	0085c83a 	sub	r2,zero,r2
 80144b4:	18800015 	stw	r2,0(r3)
    rc = -1;
 80144b8:	00bfffc4 	movi	r2,-1
 80144bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80144c0:	e0bffb17 	ldw	r2,-20(fp)
}
 80144c4:	e037883a 	mov	sp,fp
 80144c8:	dfc00117 	ldw	ra,4(sp)
 80144cc:	df000017 	ldw	fp,0(sp)
 80144d0:	dec00204 	addi	sp,sp,8
 80144d4:	f800283a 	ret

080144d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80144d8:	defffd04 	addi	sp,sp,-12
 80144dc:	dfc00215 	stw	ra,8(sp)
 80144e0:	df000115 	stw	fp,4(sp)
 80144e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80144e8:	0009883a 	mov	r4,zero
 80144ec:	80149800 	call	8014980 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80144f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80144f4:	80149b80 	call	80149b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80144f8:	01820074 	movhi	r6,2049
 80144fc:	319a6204 	addi	r6,r6,27016
 8014500:	01420074 	movhi	r5,2049
 8014504:	295a6204 	addi	r5,r5,27016
 8014508:	01020074 	movhi	r4,2049
 801450c:	211a6204 	addi	r4,r4,27016
 8014510:	80159580 	call	8015958 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8014514:	80157940 	call	8015794 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8014518:	01020074 	movhi	r4,2049
 801451c:	2115fd04 	addi	r4,r4,22516
 8014520:	80162980 	call	8016298 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8014524:	d0a6e617 	ldw	r2,-25704(gp)
 8014528:	d0e6e717 	ldw	r3,-25700(gp)
 801452c:	d126e817 	ldw	r4,-25696(gp)
 8014530:	200d883a 	mov	r6,r4
 8014534:	180b883a 	mov	r5,r3
 8014538:	1009883a 	mov	r4,r2
 801453c:	8006f3c0 	call	8006f3c <main>
 8014540:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8014544:	01000044 	movi	r4,1
 8014548:	8013ff40 	call	8013ff4 <close>
  exit (result);
 801454c:	e13fff17 	ldw	r4,-4(fp)
 8014550:	80162ac0 	call	80162ac <exit>

08014554 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8014554:	defffe04 	addi	sp,sp,-8
 8014558:	df000115 	stw	fp,4(sp)
 801455c:	df000104 	addi	fp,sp,4
 8014560:	e13fff15 	stw	r4,-4(fp)
}
 8014564:	0001883a 	nop
 8014568:	e037883a 	mov	sp,fp
 801456c:	df000017 	ldw	fp,0(sp)
 8014570:	dec00104 	addi	sp,sp,4
 8014574:	f800283a 	ret

08014578 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8014578:	defffe04 	addi	sp,sp,-8
 801457c:	df000115 	stw	fp,4(sp)
 8014580:	df000104 	addi	fp,sp,4
 8014584:	e13fff15 	stw	r4,-4(fp)
}
 8014588:	0001883a 	nop
 801458c:	e037883a 	mov	sp,fp
 8014590:	df000017 	ldw	fp,0(sp)
 8014594:	dec00104 	addi	sp,sp,4
 8014598:	f800283a 	ret

0801459c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801459c:	defffe04 	addi	sp,sp,-8
 80145a0:	dfc00115 	stw	ra,4(sp)
 80145a4:	df000015 	stw	fp,0(sp)
 80145a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80145ac:	d0a00c17 	ldw	r2,-32720(gp)
 80145b0:	10000326 	beq	r2,zero,80145c0 <alt_get_errno+0x24>
 80145b4:	d0a00c17 	ldw	r2,-32720(gp)
 80145b8:	103ee83a 	callr	r2
 80145bc:	00000106 	br	80145c4 <alt_get_errno+0x28>
 80145c0:	d0a6e404 	addi	r2,gp,-25712
}
 80145c4:	e037883a 	mov	sp,fp
 80145c8:	dfc00117 	ldw	ra,4(sp)
 80145cc:	df000017 	ldw	fp,0(sp)
 80145d0:	dec00204 	addi	sp,sp,8
 80145d4:	f800283a 	ret

080145d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80145d8:	defff904 	addi	sp,sp,-28
 80145dc:	dfc00615 	stw	ra,24(sp)
 80145e0:	df000515 	stw	fp,20(sp)
 80145e4:	df000504 	addi	fp,sp,20
 80145e8:	e13ffd15 	stw	r4,-12(fp)
 80145ec:	e17ffe15 	stw	r5,-8(fp)
 80145f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80145f4:	e0bffd17 	ldw	r2,-12(fp)
 80145f8:	10000816 	blt	r2,zero,801461c <read+0x44>
 80145fc:	01400304 	movi	r5,12
 8014600:	e13ffd17 	ldw	r4,-12(fp)
 8014604:	800722c0 	call	800722c <__mulsi3>
 8014608:	1007883a 	mov	r3,r2
 801460c:	00820074 	movhi	r2,2049
 8014610:	109c9b04 	addi	r2,r2,29292
 8014614:	1885883a 	add	r2,r3,r2
 8014618:	00000106 	br	8014620 <read+0x48>
 801461c:	0005883a 	mov	r2,zero
 8014620:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8014624:	e0bffb17 	ldw	r2,-20(fp)
 8014628:	10002226 	beq	r2,zero,80146b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801462c:	e0bffb17 	ldw	r2,-20(fp)
 8014630:	10800217 	ldw	r2,8(r2)
 8014634:	108000cc 	andi	r2,r2,3
 8014638:	10800060 	cmpeqi	r2,r2,1
 801463c:	1000181e 	bne	r2,zero,80146a0 <read+0xc8>
        (fd->dev->read))
 8014640:	e0bffb17 	ldw	r2,-20(fp)
 8014644:	10800017 	ldw	r2,0(r2)
 8014648:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801464c:	10001426 	beq	r2,zero,80146a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8014650:	e0bffb17 	ldw	r2,-20(fp)
 8014654:	10800017 	ldw	r2,0(r2)
 8014658:	10800517 	ldw	r2,20(r2)
 801465c:	e0ffff17 	ldw	r3,-4(fp)
 8014660:	180d883a 	mov	r6,r3
 8014664:	e17ffe17 	ldw	r5,-8(fp)
 8014668:	e13ffb17 	ldw	r4,-20(fp)
 801466c:	103ee83a 	callr	r2
 8014670:	e0bffc15 	stw	r2,-16(fp)
 8014674:	e0bffc17 	ldw	r2,-16(fp)
 8014678:	1000070e 	bge	r2,zero,8014698 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 801467c:	801459c0 	call	801459c <alt_get_errno>
 8014680:	1007883a 	mov	r3,r2
 8014684:	e0bffc17 	ldw	r2,-16(fp)
 8014688:	0085c83a 	sub	r2,zero,r2
 801468c:	18800015 	stw	r2,0(r3)
          return -1;
 8014690:	00bfffc4 	movi	r2,-1
 8014694:	00000c06 	br	80146c8 <read+0xf0>
        }
        return rval;
 8014698:	e0bffc17 	ldw	r2,-16(fp)
 801469c:	00000a06 	br	80146c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80146a0:	801459c0 	call	801459c <alt_get_errno>
 80146a4:	1007883a 	mov	r3,r2
 80146a8:	00800344 	movi	r2,13
 80146ac:	18800015 	stw	r2,0(r3)
 80146b0:	00000406 	br	80146c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80146b4:	801459c0 	call	801459c <alt_get_errno>
 80146b8:	1007883a 	mov	r3,r2
 80146bc:	00801444 	movi	r2,81
 80146c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80146c4:	00bfffc4 	movi	r2,-1
}
 80146c8:	e037883a 	mov	sp,fp
 80146cc:	dfc00117 	ldw	ra,4(sp)
 80146d0:	df000017 	ldw	fp,0(sp)
 80146d4:	dec00204 	addi	sp,sp,8
 80146d8:	f800283a 	ret

080146dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80146dc:	defffc04 	addi	sp,sp,-16
 80146e0:	dfc00315 	stw	ra,12(sp)
 80146e4:	df000215 	stw	fp,8(sp)
 80146e8:	dc000115 	stw	r16,4(sp)
 80146ec:	df000204 	addi	fp,sp,8
 80146f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80146f4:	e0bffe17 	ldw	r2,-8(fp)
 80146f8:	108000d0 	cmplti	r2,r2,3
 80146fc:	1000111e 	bne	r2,zero,8014744 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8014700:	04020074 	movhi	r16,2049
 8014704:	841c9b04 	addi	r16,r16,29292
 8014708:	e0bffe17 	ldw	r2,-8(fp)
 801470c:	01400304 	movi	r5,12
 8014710:	1009883a 	mov	r4,r2
 8014714:	800722c0 	call	800722c <__mulsi3>
 8014718:	8085883a 	add	r2,r16,r2
 801471c:	10800204 	addi	r2,r2,8
 8014720:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8014724:	04020074 	movhi	r16,2049
 8014728:	841c9b04 	addi	r16,r16,29292
 801472c:	e0bffe17 	ldw	r2,-8(fp)
 8014730:	01400304 	movi	r5,12
 8014734:	1009883a 	mov	r4,r2
 8014738:	800722c0 	call	800722c <__mulsi3>
 801473c:	8085883a 	add	r2,r16,r2
 8014740:	10000015 	stw	zero,0(r2)
  }
}
 8014744:	0001883a 	nop
 8014748:	e6ffff04 	addi	sp,fp,-4
 801474c:	dfc00217 	ldw	ra,8(sp)
 8014750:	df000117 	ldw	fp,4(sp)
 8014754:	dc000017 	ldw	r16,0(sp)
 8014758:	dec00304 	addi	sp,sp,12
 801475c:	f800283a 	ret

08014760 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8014760:	defff904 	addi	sp,sp,-28
 8014764:	df000615 	stw	fp,24(sp)
 8014768:	df000604 	addi	fp,sp,24
 801476c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014770:	0005303a 	rdctl	r2,status
 8014774:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014778:	e0fffe17 	ldw	r3,-8(fp)
 801477c:	00bfff84 	movi	r2,-2
 8014780:	1884703a 	and	r2,r3,r2
 8014784:	1001703a 	wrctl	status,r2
  
  return context;
 8014788:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 801478c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8014790:	d0a00e17 	ldw	r2,-32712(gp)
 8014794:	10c000c4 	addi	r3,r2,3
 8014798:	00bfff04 	movi	r2,-4
 801479c:	1884703a 	and	r2,r3,r2
 80147a0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80147a4:	d0e00e17 	ldw	r3,-32712(gp)
 80147a8:	e0bfff17 	ldw	r2,-4(fp)
 80147ac:	1887883a 	add	r3,r3,r2
 80147b0:	00840034 	movhi	r2,4096
 80147b4:	10800004 	addi	r2,r2,0
 80147b8:	10c0062e 	bgeu	r2,r3,80147d4 <sbrk+0x74>
 80147bc:	e0bffb17 	ldw	r2,-20(fp)
 80147c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80147c4:	e0bffa17 	ldw	r2,-24(fp)
 80147c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80147cc:	00bfffc4 	movi	r2,-1
 80147d0:	00000b06 	br	8014800 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80147d4:	d0a00e17 	ldw	r2,-32712(gp)
 80147d8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 80147dc:	d0e00e17 	ldw	r3,-32712(gp)
 80147e0:	e0bfff17 	ldw	r2,-4(fp)
 80147e4:	1885883a 	add	r2,r3,r2
 80147e8:	d0a00e15 	stw	r2,-32712(gp)
 80147ec:	e0bffb17 	ldw	r2,-20(fp)
 80147f0:	e0bffc15 	stw	r2,-16(fp)
 80147f4:	e0bffc17 	ldw	r2,-16(fp)
 80147f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80147fc:	e0bffd17 	ldw	r2,-12(fp)
} 
 8014800:	e037883a 	mov	sp,fp
 8014804:	df000017 	ldw	fp,0(sp)
 8014808:	dec00104 	addi	sp,sp,4
 801480c:	f800283a 	ret

08014810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014810:	defffe04 	addi	sp,sp,-8
 8014814:	dfc00115 	stw	ra,4(sp)
 8014818:	df000015 	stw	fp,0(sp)
 801481c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014820:	d0a00c17 	ldw	r2,-32720(gp)
 8014824:	10000326 	beq	r2,zero,8014834 <alt_get_errno+0x24>
 8014828:	d0a00c17 	ldw	r2,-32720(gp)
 801482c:	103ee83a 	callr	r2
 8014830:	00000106 	br	8014838 <alt_get_errno+0x28>
 8014834:	d0a6e404 	addi	r2,gp,-25712
}
 8014838:	e037883a 	mov	sp,fp
 801483c:	dfc00117 	ldw	ra,4(sp)
 8014840:	df000017 	ldw	fp,0(sp)
 8014844:	dec00204 	addi	sp,sp,8
 8014848:	f800283a 	ret

0801484c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 801484c:	defff904 	addi	sp,sp,-28
 8014850:	dfc00615 	stw	ra,24(sp)
 8014854:	df000515 	stw	fp,20(sp)
 8014858:	df000504 	addi	fp,sp,20
 801485c:	e13ffd15 	stw	r4,-12(fp)
 8014860:	e17ffe15 	stw	r5,-8(fp)
 8014864:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014868:	e0bffd17 	ldw	r2,-12(fp)
 801486c:	10000816 	blt	r2,zero,8014890 <write+0x44>
 8014870:	01400304 	movi	r5,12
 8014874:	e13ffd17 	ldw	r4,-12(fp)
 8014878:	800722c0 	call	800722c <__mulsi3>
 801487c:	1007883a 	mov	r3,r2
 8014880:	00820074 	movhi	r2,2049
 8014884:	109c9b04 	addi	r2,r2,29292
 8014888:	1885883a 	add	r2,r3,r2
 801488c:	00000106 	br	8014894 <write+0x48>
 8014890:	0005883a 	mov	r2,zero
 8014894:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8014898:	e0bffb17 	ldw	r2,-20(fp)
 801489c:	10002126 	beq	r2,zero,8014924 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80148a0:	e0bffb17 	ldw	r2,-20(fp)
 80148a4:	10800217 	ldw	r2,8(r2)
 80148a8:	108000cc 	andi	r2,r2,3
 80148ac:	10001826 	beq	r2,zero,8014910 <write+0xc4>
 80148b0:	e0bffb17 	ldw	r2,-20(fp)
 80148b4:	10800017 	ldw	r2,0(r2)
 80148b8:	10800617 	ldw	r2,24(r2)
 80148bc:	10001426 	beq	r2,zero,8014910 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80148c0:	e0bffb17 	ldw	r2,-20(fp)
 80148c4:	10800017 	ldw	r2,0(r2)
 80148c8:	10800617 	ldw	r2,24(r2)
 80148cc:	e0ffff17 	ldw	r3,-4(fp)
 80148d0:	180d883a 	mov	r6,r3
 80148d4:	e17ffe17 	ldw	r5,-8(fp)
 80148d8:	e13ffb17 	ldw	r4,-20(fp)
 80148dc:	103ee83a 	callr	r2
 80148e0:	e0bffc15 	stw	r2,-16(fp)
 80148e4:	e0bffc17 	ldw	r2,-16(fp)
 80148e8:	1000070e 	bge	r2,zero,8014908 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80148ec:	80148100 	call	8014810 <alt_get_errno>
 80148f0:	1007883a 	mov	r3,r2
 80148f4:	e0bffc17 	ldw	r2,-16(fp)
 80148f8:	0085c83a 	sub	r2,zero,r2
 80148fc:	18800015 	stw	r2,0(r3)
        return -1;
 8014900:	00bfffc4 	movi	r2,-1
 8014904:	00000c06 	br	8014938 <write+0xec>
      }
      return rval;
 8014908:	e0bffc17 	ldw	r2,-16(fp)
 801490c:	00000a06 	br	8014938 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8014910:	80148100 	call	8014810 <alt_get_errno>
 8014914:	1007883a 	mov	r3,r2
 8014918:	00800344 	movi	r2,13
 801491c:	18800015 	stw	r2,0(r3)
 8014920:	00000406 	br	8014934 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8014924:	80148100 	call	8014810 <alt_get_errno>
 8014928:	1007883a 	mov	r3,r2
 801492c:	00801444 	movi	r2,81
 8014930:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8014934:	00bfffc4 	movi	r2,-1
}
 8014938:	e037883a 	mov	sp,fp
 801493c:	dfc00117 	ldw	ra,4(sp)
 8014940:	df000017 	ldw	fp,0(sp)
 8014944:	dec00204 	addi	sp,sp,8
 8014948:	f800283a 	ret

0801494c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 801494c:	defffd04 	addi	sp,sp,-12
 8014950:	dfc00215 	stw	ra,8(sp)
 8014954:	df000115 	stw	fp,4(sp)
 8014958:	df000104 	addi	fp,sp,4
 801495c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8014960:	d1600904 	addi	r5,gp,-32732
 8014964:	e13fff17 	ldw	r4,-4(fp)
 8014968:	80156f00 	call	80156f0 <alt_dev_llist_insert>
}
 801496c:	e037883a 	mov	sp,fp
 8014970:	dfc00117 	ldw	ra,4(sp)
 8014974:	df000017 	ldw	fp,0(sp)
 8014978:	dec00204 	addi	sp,sp,8
 801497c:	f800283a 	ret

08014980 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8014980:	defffd04 	addi	sp,sp,-12
 8014984:	dfc00215 	stw	ra,8(sp)
 8014988:	df000115 	stw	fp,4(sp)
 801498c:	df000104 	addi	fp,sp,4
 8014990:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8014994:	8015f7c0 	call	8015f7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8014998:	00800044 	movi	r2,1
 801499c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80149a0:	0001883a 	nop
 80149a4:	e037883a 	mov	sp,fp
 80149a8:	dfc00117 	ldw	ra,4(sp)
 80149ac:	df000017 	ldw	fp,0(sp)
 80149b0:	dec00204 	addi	sp,sp,8
 80149b4:	f800283a 	ret

080149b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80149b8:	defffe04 	addi	sp,sp,-8
 80149bc:	dfc00115 	stw	ra,4(sp)
 80149c0:	df000015 	stw	fp,0(sp)
 80149c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
 80149c8:	01c0fa04 	movi	r7,1000
 80149cc:	000d883a 	mov	r6,zero
 80149d0:	000b883a 	mov	r5,zero
 80149d4:	01040034 	movhi	r4,4096
 80149d8:	21040004 	addi	r4,r4,4096
 80149dc:	80154f40 	call	80154f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, debug);
 80149e0:	01800044 	movi	r6,1
 80149e4:	000b883a 	mov	r5,zero
 80149e8:	01020074 	movhi	r4,2049
 80149ec:	211d0504 	addi	r4,r4,29716
 80149f0:	8014b7c0 	call	8014b7c <altera_avalon_jtag_uart_init>
 80149f4:	01020074 	movhi	r4,2049
 80149f8:	211cfb04 	addi	r4,r4,29676
 80149fc:	801494c0 	call	801494c <alt_dev_reg>
}
 8014a00:	0001883a 	nop
 8014a04:	e037883a 	mov	sp,fp
 8014a08:	dfc00117 	ldw	ra,4(sp)
 8014a0c:	df000017 	ldw	fp,0(sp)
 8014a10:	dec00204 	addi	sp,sp,8
 8014a14:	f800283a 	ret

08014a18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8014a18:	defffa04 	addi	sp,sp,-24
 8014a1c:	dfc00515 	stw	ra,20(sp)
 8014a20:	df000415 	stw	fp,16(sp)
 8014a24:	df000404 	addi	fp,sp,16
 8014a28:	e13ffd15 	stw	r4,-12(fp)
 8014a2c:	e17ffe15 	stw	r5,-8(fp)
 8014a30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8014a34:	e0bffd17 	ldw	r2,-12(fp)
 8014a38:	10800017 	ldw	r2,0(r2)
 8014a3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8014a40:	e0bffc17 	ldw	r2,-16(fp)
 8014a44:	10c00a04 	addi	r3,r2,40
 8014a48:	e0bffd17 	ldw	r2,-12(fp)
 8014a4c:	10800217 	ldw	r2,8(r2)
 8014a50:	100f883a 	mov	r7,r2
 8014a54:	e1bfff17 	ldw	r6,-4(fp)
 8014a58:	e17ffe17 	ldw	r5,-8(fp)
 8014a5c:	1809883a 	mov	r4,r3
 8014a60:	80150380 	call	8015038 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8014a64:	e037883a 	mov	sp,fp
 8014a68:	dfc00117 	ldw	ra,4(sp)
 8014a6c:	df000017 	ldw	fp,0(sp)
 8014a70:	dec00204 	addi	sp,sp,8
 8014a74:	f800283a 	ret

08014a78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8014a78:	defffa04 	addi	sp,sp,-24
 8014a7c:	dfc00515 	stw	ra,20(sp)
 8014a80:	df000415 	stw	fp,16(sp)
 8014a84:	df000404 	addi	fp,sp,16
 8014a88:	e13ffd15 	stw	r4,-12(fp)
 8014a8c:	e17ffe15 	stw	r5,-8(fp)
 8014a90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8014a94:	e0bffd17 	ldw	r2,-12(fp)
 8014a98:	10800017 	ldw	r2,0(r2)
 8014a9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8014aa0:	e0bffc17 	ldw	r2,-16(fp)
 8014aa4:	10c00a04 	addi	r3,r2,40
 8014aa8:	e0bffd17 	ldw	r2,-12(fp)
 8014aac:	10800217 	ldw	r2,8(r2)
 8014ab0:	100f883a 	mov	r7,r2
 8014ab4:	e1bfff17 	ldw	r6,-4(fp)
 8014ab8:	e17ffe17 	ldw	r5,-8(fp)
 8014abc:	1809883a 	mov	r4,r3
 8014ac0:	80152540 	call	8015254 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8014ac4:	e037883a 	mov	sp,fp
 8014ac8:	dfc00117 	ldw	ra,4(sp)
 8014acc:	df000017 	ldw	fp,0(sp)
 8014ad0:	dec00204 	addi	sp,sp,8
 8014ad4:	f800283a 	ret

08014ad8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8014ad8:	defffc04 	addi	sp,sp,-16
 8014adc:	dfc00315 	stw	ra,12(sp)
 8014ae0:	df000215 	stw	fp,8(sp)
 8014ae4:	df000204 	addi	fp,sp,8
 8014ae8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8014aec:	e0bfff17 	ldw	r2,-4(fp)
 8014af0:	10800017 	ldw	r2,0(r2)
 8014af4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8014af8:	e0bffe17 	ldw	r2,-8(fp)
 8014afc:	10c00a04 	addi	r3,r2,40
 8014b00:	e0bfff17 	ldw	r2,-4(fp)
 8014b04:	10800217 	ldw	r2,8(r2)
 8014b08:	100b883a 	mov	r5,r2
 8014b0c:	1809883a 	mov	r4,r3
 8014b10:	8014ee00 	call	8014ee0 <altera_avalon_jtag_uart_close>
}
 8014b14:	e037883a 	mov	sp,fp
 8014b18:	dfc00117 	ldw	ra,4(sp)
 8014b1c:	df000017 	ldw	fp,0(sp)
 8014b20:	dec00204 	addi	sp,sp,8
 8014b24:	f800283a 	ret

08014b28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8014b28:	defffa04 	addi	sp,sp,-24
 8014b2c:	dfc00515 	stw	ra,20(sp)
 8014b30:	df000415 	stw	fp,16(sp)
 8014b34:	df000404 	addi	fp,sp,16
 8014b38:	e13ffd15 	stw	r4,-12(fp)
 8014b3c:	e17ffe15 	stw	r5,-8(fp)
 8014b40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8014b44:	e0bffd17 	ldw	r2,-12(fp)
 8014b48:	10800017 	ldw	r2,0(r2)
 8014b4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8014b50:	e0bffc17 	ldw	r2,-16(fp)
 8014b54:	10800a04 	addi	r2,r2,40
 8014b58:	e1bfff17 	ldw	r6,-4(fp)
 8014b5c:	e17ffe17 	ldw	r5,-8(fp)
 8014b60:	1009883a 	mov	r4,r2
 8014b64:	8014f480 	call	8014f48 <altera_avalon_jtag_uart_ioctl>
}
 8014b68:	e037883a 	mov	sp,fp
 8014b6c:	dfc00117 	ldw	ra,4(sp)
 8014b70:	df000017 	ldw	fp,0(sp)
 8014b74:	dec00204 	addi	sp,sp,8
 8014b78:	f800283a 	ret

08014b7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8014b7c:	defffb04 	addi	sp,sp,-20
 8014b80:	dfc00415 	stw	ra,16(sp)
 8014b84:	df000315 	stw	fp,12(sp)
 8014b88:	df000304 	addi	fp,sp,12
 8014b8c:	e13ffd15 	stw	r4,-12(fp)
 8014b90:	e17ffe15 	stw	r5,-8(fp)
 8014b94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8014b98:	e0bffd17 	ldw	r2,-12(fp)
 8014b9c:	00c00044 	movi	r3,1
 8014ba0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8014ba4:	e0bffd17 	ldw	r2,-12(fp)
 8014ba8:	10800017 	ldw	r2,0(r2)
 8014bac:	10800104 	addi	r2,r2,4
 8014bb0:	1007883a 	mov	r3,r2
 8014bb4:	e0bffd17 	ldw	r2,-12(fp)
 8014bb8:	10800817 	ldw	r2,32(r2)
 8014bbc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 8014bc0:	e0bfff17 	ldw	r2,-4(fp)
 8014bc4:	01820074 	movhi	r6,2049
 8014bc8:	31930c04 	addi	r6,r6,19504
 8014bcc:	e17ffd17 	ldw	r5,-12(fp)
 8014bd0:	1009883a 	mov	r4,r2
 8014bd4:	80159d40 	call	80159d4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8014bd8:	e0bffd17 	ldw	r2,-12(fp)
 8014bdc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8014be0:	e0bffd17 	ldw	r2,-12(fp)
 8014be4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8014be8:	d0e6e917 	ldw	r3,-25692(gp)
 8014bec:	e1fffd17 	ldw	r7,-12(fp)
 8014bf0:	01820074 	movhi	r6,2049
 8014bf4:	31939004 	addi	r6,r6,20032
 8014bf8:	180b883a 	mov	r5,r3
 8014bfc:	1009883a 	mov	r4,r2
 8014c00:	80155680 	call	8015568 <alt_alarm_start>
 8014c04:	1000040e 	bge	r2,zero,8014c18 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8014c08:	e0fffd17 	ldw	r3,-12(fp)
 8014c0c:	00a00034 	movhi	r2,32768
 8014c10:	10bfffc4 	addi	r2,r2,-1
 8014c14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8014c18:	0001883a 	nop
 8014c1c:	e037883a 	mov	sp,fp
 8014c20:	dfc00117 	ldw	ra,4(sp)
 8014c24:	df000017 	ldw	fp,0(sp)
 8014c28:	dec00204 	addi	sp,sp,8
 8014c2c:	f800283a 	ret

08014c30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8014c30:	defff704 	addi	sp,sp,-36
 8014c34:	df000815 	stw	fp,32(sp)
 8014c38:	df000804 	addi	fp,sp,32
 8014c3c:	e13ffe15 	stw	r4,-8(fp)
 8014c40:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8014c44:	e0bffe17 	ldw	r2,-8(fp)
 8014c48:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 8014c4c:	e0bffa17 	ldw	r2,-24(fp)
 8014c50:	10800017 	ldw	r2,0(r2)
 8014c54:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8014c58:	e0bffb17 	ldw	r2,-20(fp)
 8014c5c:	10800104 	addi	r2,r2,4
 8014c60:	10800037 	ldwio	r2,0(r2)
 8014c64:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8014c68:	e0bffc17 	ldw	r2,-16(fp)
 8014c6c:	1080c00c 	andi	r2,r2,768
 8014c70:	10006d26 	beq	r2,zero,8014e28 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8014c74:	e0bffc17 	ldw	r2,-16(fp)
 8014c78:	1080400c 	andi	r2,r2,256
 8014c7c:	10003526 	beq	r2,zero,8014d54 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8014c80:	00800074 	movhi	r2,1
 8014c84:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014c88:	e0bffa17 	ldw	r2,-24(fp)
 8014c8c:	10800a17 	ldw	r2,40(r2)
 8014c90:	10800044 	addi	r2,r2,1
 8014c94:	1081ffcc 	andi	r2,r2,2047
 8014c98:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 8014c9c:	e0bffa17 	ldw	r2,-24(fp)
 8014ca0:	10c00b17 	ldw	r3,44(r2)
 8014ca4:	e0bffd17 	ldw	r2,-12(fp)
 8014ca8:	18801526 	beq	r3,r2,8014d00 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8014cac:	e0bffb17 	ldw	r2,-20(fp)
 8014cb0:	10800037 	ldwio	r2,0(r2)
 8014cb4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8014cb8:	e0bff817 	ldw	r2,-32(fp)
 8014cbc:	10a0000c 	andi	r2,r2,32768
 8014cc0:	10001126 	beq	r2,zero,8014d08 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8014cc4:	e0bffa17 	ldw	r2,-24(fp)
 8014cc8:	10800a17 	ldw	r2,40(r2)
 8014ccc:	e0fff817 	ldw	r3,-32(fp)
 8014cd0:	1809883a 	mov	r4,r3
 8014cd4:	e0fffa17 	ldw	r3,-24(fp)
 8014cd8:	1885883a 	add	r2,r3,r2
 8014cdc:	10800e04 	addi	r2,r2,56
 8014ce0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014ce4:	e0bffa17 	ldw	r2,-24(fp)
 8014ce8:	10800a17 	ldw	r2,40(r2)
 8014cec:	10800044 	addi	r2,r2,1
 8014cf0:	10c1ffcc 	andi	r3,r2,2047
 8014cf4:	e0bffa17 	ldw	r2,-24(fp)
 8014cf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8014cfc:	003fe206 	br	8014c88 <__alt_data_end+0xf8014c88>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8014d00:	0001883a 	nop
 8014d04:	00000106 	br	8014d0c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8014d08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8014d0c:	e0bff817 	ldw	r2,-32(fp)
 8014d10:	10bfffec 	andhi	r2,r2,65535
 8014d14:	10000f26 	beq	r2,zero,8014d54 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8014d18:	e0bffa17 	ldw	r2,-24(fp)
 8014d1c:	10c00817 	ldw	r3,32(r2)
 8014d20:	00bfff84 	movi	r2,-2
 8014d24:	1886703a 	and	r3,r3,r2
 8014d28:	e0bffa17 	ldw	r2,-24(fp)
 8014d2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8014d30:	e0bffb17 	ldw	r2,-20(fp)
 8014d34:	10800104 	addi	r2,r2,4
 8014d38:	1007883a 	mov	r3,r2
 8014d3c:	e0bffa17 	ldw	r2,-24(fp)
 8014d40:	10800817 	ldw	r2,32(r2)
 8014d44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8014d48:	e0bffb17 	ldw	r2,-20(fp)
 8014d4c:	10800104 	addi	r2,r2,4
 8014d50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8014d54:	e0bffc17 	ldw	r2,-16(fp)
 8014d58:	1080800c 	andi	r2,r2,512
 8014d5c:	103fbe26 	beq	r2,zero,8014c58 <__alt_data_end+0xf8014c58>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8014d60:	e0bffc17 	ldw	r2,-16(fp)
 8014d64:	1004d43a 	srli	r2,r2,16
 8014d68:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8014d6c:	00001406 	br	8014dc0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8014d70:	e0bffb17 	ldw	r2,-20(fp)
 8014d74:	e0fffa17 	ldw	r3,-24(fp)
 8014d78:	18c00d17 	ldw	r3,52(r3)
 8014d7c:	e13ffa17 	ldw	r4,-24(fp)
 8014d80:	20c7883a 	add	r3,r4,r3
 8014d84:	18c20e04 	addi	r3,r3,2104
 8014d88:	18c00003 	ldbu	r3,0(r3)
 8014d8c:	18c03fcc 	andi	r3,r3,255
 8014d90:	18c0201c 	xori	r3,r3,128
 8014d94:	18ffe004 	addi	r3,r3,-128
 8014d98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014d9c:	e0bffa17 	ldw	r2,-24(fp)
 8014da0:	10800d17 	ldw	r2,52(r2)
 8014da4:	10800044 	addi	r2,r2,1
 8014da8:	10c1ffcc 	andi	r3,r2,2047
 8014dac:	e0bffa17 	ldw	r2,-24(fp)
 8014db0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8014db4:	e0bff917 	ldw	r2,-28(fp)
 8014db8:	10bfffc4 	addi	r2,r2,-1
 8014dbc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8014dc0:	e0bff917 	ldw	r2,-28(fp)
 8014dc4:	10000526 	beq	r2,zero,8014ddc <altera_avalon_jtag_uart_irq+0x1ac>
 8014dc8:	e0bffa17 	ldw	r2,-24(fp)
 8014dcc:	10c00d17 	ldw	r3,52(r2)
 8014dd0:	e0bffa17 	ldw	r2,-24(fp)
 8014dd4:	10800c17 	ldw	r2,48(r2)
 8014dd8:	18bfe51e 	bne	r3,r2,8014d70 <__alt_data_end+0xf8014d70>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8014ddc:	e0bff917 	ldw	r2,-28(fp)
 8014de0:	103f9d26 	beq	r2,zero,8014c58 <__alt_data_end+0xf8014c58>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8014de4:	e0bffa17 	ldw	r2,-24(fp)
 8014de8:	10c00817 	ldw	r3,32(r2)
 8014dec:	00bfff44 	movi	r2,-3
 8014df0:	1886703a 	and	r3,r3,r2
 8014df4:	e0bffa17 	ldw	r2,-24(fp)
 8014df8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8014dfc:	e0bffa17 	ldw	r2,-24(fp)
 8014e00:	10800017 	ldw	r2,0(r2)
 8014e04:	10800104 	addi	r2,r2,4
 8014e08:	1007883a 	mov	r3,r2
 8014e0c:	e0bffa17 	ldw	r2,-24(fp)
 8014e10:	10800817 	ldw	r2,32(r2)
 8014e14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8014e18:	e0bffb17 	ldw	r2,-20(fp)
 8014e1c:	10800104 	addi	r2,r2,4
 8014e20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8014e24:	003f8c06 	br	8014c58 <__alt_data_end+0xf8014c58>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8014e28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8014e2c:	0001883a 	nop
 8014e30:	e037883a 	mov	sp,fp
 8014e34:	df000017 	ldw	fp,0(sp)
 8014e38:	dec00104 	addi	sp,sp,4
 8014e3c:	f800283a 	ret

08014e40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8014e40:	defff804 	addi	sp,sp,-32
 8014e44:	df000715 	stw	fp,28(sp)
 8014e48:	df000704 	addi	fp,sp,28
 8014e4c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8014e50:	e0bffb17 	ldw	r2,-20(fp)
 8014e54:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8014e58:	e0bff917 	ldw	r2,-28(fp)
 8014e5c:	10800017 	ldw	r2,0(r2)
 8014e60:	10800104 	addi	r2,r2,4
 8014e64:	10800037 	ldwio	r2,0(r2)
 8014e68:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8014e6c:	e0bffa17 	ldw	r2,-24(fp)
 8014e70:	1081000c 	andi	r2,r2,1024
 8014e74:	10000b26 	beq	r2,zero,8014ea4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8014e78:	e0bff917 	ldw	r2,-28(fp)
 8014e7c:	10800017 	ldw	r2,0(r2)
 8014e80:	10800104 	addi	r2,r2,4
 8014e84:	1007883a 	mov	r3,r2
 8014e88:	e0bff917 	ldw	r2,-28(fp)
 8014e8c:	10800817 	ldw	r2,32(r2)
 8014e90:	10810014 	ori	r2,r2,1024
 8014e94:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8014e98:	e0bff917 	ldw	r2,-28(fp)
 8014e9c:	10000915 	stw	zero,36(r2)
 8014ea0:	00000a06 	br	8014ecc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8014ea4:	e0bff917 	ldw	r2,-28(fp)
 8014ea8:	10c00917 	ldw	r3,36(r2)
 8014eac:	00a00034 	movhi	r2,32768
 8014eb0:	10bfff04 	addi	r2,r2,-4
 8014eb4:	10c00536 	bltu	r2,r3,8014ecc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8014eb8:	e0bff917 	ldw	r2,-28(fp)
 8014ebc:	10800917 	ldw	r2,36(r2)
 8014ec0:	10c00044 	addi	r3,r2,1
 8014ec4:	e0bff917 	ldw	r2,-28(fp)
 8014ec8:	10c00915 	stw	r3,36(r2)
 8014ecc:	d0a6e917 	ldw	r2,-25692(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8014ed0:	e037883a 	mov	sp,fp
 8014ed4:	df000017 	ldw	fp,0(sp)
 8014ed8:	dec00104 	addi	sp,sp,4
 8014edc:	f800283a 	ret

08014ee0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8014ee0:	defffd04 	addi	sp,sp,-12
 8014ee4:	df000215 	stw	fp,8(sp)
 8014ee8:	df000204 	addi	fp,sp,8
 8014eec:	e13ffe15 	stw	r4,-8(fp)
 8014ef0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8014ef4:	00000506 	br	8014f0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8014ef8:	e0bfff17 	ldw	r2,-4(fp)
 8014efc:	1090000c 	andi	r2,r2,16384
 8014f00:	10000226 	beq	r2,zero,8014f0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8014f04:	00bffd44 	movi	r2,-11
 8014f08:	00000b06 	br	8014f38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8014f0c:	e0bffe17 	ldw	r2,-8(fp)
 8014f10:	10c00d17 	ldw	r3,52(r2)
 8014f14:	e0bffe17 	ldw	r2,-8(fp)
 8014f18:	10800c17 	ldw	r2,48(r2)
 8014f1c:	18800526 	beq	r3,r2,8014f34 <altera_avalon_jtag_uart_close+0x54>
 8014f20:	e0bffe17 	ldw	r2,-8(fp)
 8014f24:	10c00917 	ldw	r3,36(r2)
 8014f28:	e0bffe17 	ldw	r2,-8(fp)
 8014f2c:	10800117 	ldw	r2,4(r2)
 8014f30:	18bff136 	bltu	r3,r2,8014ef8 <__alt_data_end+0xf8014ef8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8014f34:	0005883a 	mov	r2,zero
}
 8014f38:	e037883a 	mov	sp,fp
 8014f3c:	df000017 	ldw	fp,0(sp)
 8014f40:	dec00104 	addi	sp,sp,4
 8014f44:	f800283a 	ret

08014f48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8014f48:	defffa04 	addi	sp,sp,-24
 8014f4c:	df000515 	stw	fp,20(sp)
 8014f50:	df000504 	addi	fp,sp,20
 8014f54:	e13ffd15 	stw	r4,-12(fp)
 8014f58:	e17ffe15 	stw	r5,-8(fp)
 8014f5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8014f60:	00bff9c4 	movi	r2,-25
 8014f64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8014f68:	e0bffe17 	ldw	r2,-8(fp)
 8014f6c:	10da8060 	cmpeqi	r3,r2,27137
 8014f70:	1800031e 	bne	r3,zero,8014f80 <altera_avalon_jtag_uart_ioctl+0x38>
 8014f74:	109a80a0 	cmpeqi	r2,r2,27138
 8014f78:	1000181e 	bne	r2,zero,8014fdc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8014f7c:	00002906 	br	8015024 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8014f80:	e0bffd17 	ldw	r2,-12(fp)
 8014f84:	10c00117 	ldw	r3,4(r2)
 8014f88:	00a00034 	movhi	r2,32768
 8014f8c:	10bfffc4 	addi	r2,r2,-1
 8014f90:	18802126 	beq	r3,r2,8015018 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8014f94:	e0bfff17 	ldw	r2,-4(fp)
 8014f98:	10800017 	ldw	r2,0(r2)
 8014f9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8014fa0:	e0bffc17 	ldw	r2,-16(fp)
 8014fa4:	10800090 	cmplti	r2,r2,2
 8014fa8:	1000061e 	bne	r2,zero,8014fc4 <altera_avalon_jtag_uart_ioctl+0x7c>
 8014fac:	e0fffc17 	ldw	r3,-16(fp)
 8014fb0:	00a00034 	movhi	r2,32768
 8014fb4:	10bfffc4 	addi	r2,r2,-1
 8014fb8:	18800226 	beq	r3,r2,8014fc4 <altera_avalon_jtag_uart_ioctl+0x7c>
 8014fbc:	e0bffc17 	ldw	r2,-16(fp)
 8014fc0:	00000206 	br	8014fcc <altera_avalon_jtag_uart_ioctl+0x84>
 8014fc4:	00a00034 	movhi	r2,32768
 8014fc8:	10bfff84 	addi	r2,r2,-2
 8014fcc:	e0fffd17 	ldw	r3,-12(fp)
 8014fd0:	18800115 	stw	r2,4(r3)
      rc = 0;
 8014fd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8014fd8:	00000f06 	br	8015018 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8014fdc:	e0bffd17 	ldw	r2,-12(fp)
 8014fe0:	10c00117 	ldw	r3,4(r2)
 8014fe4:	00a00034 	movhi	r2,32768
 8014fe8:	10bfffc4 	addi	r2,r2,-1
 8014fec:	18800c26 	beq	r3,r2,8015020 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8014ff0:	e0bffd17 	ldw	r2,-12(fp)
 8014ff4:	10c00917 	ldw	r3,36(r2)
 8014ff8:	e0bffd17 	ldw	r2,-12(fp)
 8014ffc:	10800117 	ldw	r2,4(r2)
 8015000:	1885803a 	cmpltu	r2,r3,r2
 8015004:	10c03fcc 	andi	r3,r2,255
 8015008:	e0bfff17 	ldw	r2,-4(fp)
 801500c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8015010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8015014:	00000206 	br	8015020 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8015018:	0001883a 	nop
 801501c:	00000106 	br	8015024 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8015020:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8015024:	e0bffb17 	ldw	r2,-20(fp)
}
 8015028:	e037883a 	mov	sp,fp
 801502c:	df000017 	ldw	fp,0(sp)
 8015030:	dec00104 	addi	sp,sp,4
 8015034:	f800283a 	ret

08015038 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8015038:	defff304 	addi	sp,sp,-52
 801503c:	dfc00c15 	stw	ra,48(sp)
 8015040:	df000b15 	stw	fp,44(sp)
 8015044:	df000b04 	addi	fp,sp,44
 8015048:	e13ffc15 	stw	r4,-16(fp)
 801504c:	e17ffd15 	stw	r5,-12(fp)
 8015050:	e1bffe15 	stw	r6,-8(fp)
 8015054:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8015058:	e0bffd17 	ldw	r2,-12(fp)
 801505c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8015060:	00004706 	br	8015180 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8015064:	e0bffc17 	ldw	r2,-16(fp)
 8015068:	10800a17 	ldw	r2,40(r2)
 801506c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8015070:	e0bffc17 	ldw	r2,-16(fp)
 8015074:	10800b17 	ldw	r2,44(r2)
 8015078:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801507c:	e0fff717 	ldw	r3,-36(fp)
 8015080:	e0bff817 	ldw	r2,-32(fp)
 8015084:	18800536 	bltu	r3,r2,801509c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8015088:	e0fff717 	ldw	r3,-36(fp)
 801508c:	e0bff817 	ldw	r2,-32(fp)
 8015090:	1885c83a 	sub	r2,r3,r2
 8015094:	e0bff615 	stw	r2,-40(fp)
 8015098:	00000406 	br	80150ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801509c:	00c20004 	movi	r3,2048
 80150a0:	e0bff817 	ldw	r2,-32(fp)
 80150a4:	1885c83a 	sub	r2,r3,r2
 80150a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80150ac:	e0bff617 	ldw	r2,-40(fp)
 80150b0:	10001e26 	beq	r2,zero,801512c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80150b4:	e0fffe17 	ldw	r3,-8(fp)
 80150b8:	e0bff617 	ldw	r2,-40(fp)
 80150bc:	1880022e 	bgeu	r3,r2,80150c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80150c0:	e0bffe17 	ldw	r2,-8(fp)
 80150c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80150c8:	e0bffc17 	ldw	r2,-16(fp)
 80150cc:	10c00e04 	addi	r3,r2,56
 80150d0:	e0bff817 	ldw	r2,-32(fp)
 80150d4:	1885883a 	add	r2,r3,r2
 80150d8:	e1bff617 	ldw	r6,-40(fp)
 80150dc:	100b883a 	mov	r5,r2
 80150e0:	e13ff517 	ldw	r4,-44(fp)
 80150e4:	80072540 	call	8007254 <memcpy>
      ptr   += n;
 80150e8:	e0fff517 	ldw	r3,-44(fp)
 80150ec:	e0bff617 	ldw	r2,-40(fp)
 80150f0:	1885883a 	add	r2,r3,r2
 80150f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80150f8:	e0fffe17 	ldw	r3,-8(fp)
 80150fc:	e0bff617 	ldw	r2,-40(fp)
 8015100:	1885c83a 	sub	r2,r3,r2
 8015104:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015108:	e0fff817 	ldw	r3,-32(fp)
 801510c:	e0bff617 	ldw	r2,-40(fp)
 8015110:	1885883a 	add	r2,r3,r2
 8015114:	10c1ffcc 	andi	r3,r2,2047
 8015118:	e0bffc17 	ldw	r2,-16(fp)
 801511c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8015120:	e0bffe17 	ldw	r2,-8(fp)
 8015124:	00bfcf16 	blt	zero,r2,8015064 <__alt_data_end+0xf8015064>
 8015128:	00000106 	br	8015130 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 801512c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8015130:	e0fff517 	ldw	r3,-44(fp)
 8015134:	e0bffd17 	ldw	r2,-12(fp)
 8015138:	1880141e 	bne	r3,r2,801518c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801513c:	e0bfff17 	ldw	r2,-4(fp)
 8015140:	1090000c 	andi	r2,r2,16384
 8015144:	1000131e 	bne	r2,zero,8015194 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8015148:	0001883a 	nop
 801514c:	e0bffc17 	ldw	r2,-16(fp)
 8015150:	10c00a17 	ldw	r3,40(r2)
 8015154:	e0bff717 	ldw	r2,-36(fp)
 8015158:	1880051e 	bne	r3,r2,8015170 <altera_avalon_jtag_uart_read+0x138>
 801515c:	e0bffc17 	ldw	r2,-16(fp)
 8015160:	10c00917 	ldw	r3,36(r2)
 8015164:	e0bffc17 	ldw	r2,-16(fp)
 8015168:	10800117 	ldw	r2,4(r2)
 801516c:	18bff736 	bltu	r3,r2,801514c <__alt_data_end+0xf801514c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8015170:	e0bffc17 	ldw	r2,-16(fp)
 8015174:	10c00a17 	ldw	r3,40(r2)
 8015178:	e0bff717 	ldw	r2,-36(fp)
 801517c:	18800726 	beq	r3,r2,801519c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8015180:	e0bffe17 	ldw	r2,-8(fp)
 8015184:	00bfb716 	blt	zero,r2,8015064 <__alt_data_end+0xf8015064>
 8015188:	00000506 	br	80151a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 801518c:	0001883a 	nop
 8015190:	00000306 	br	80151a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8015194:	0001883a 	nop
 8015198:	00000106 	br	80151a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 801519c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80151a0:	e0fff517 	ldw	r3,-44(fp)
 80151a4:	e0bffd17 	ldw	r2,-12(fp)
 80151a8:	18801826 	beq	r3,r2,801520c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80151ac:	0005303a 	rdctl	r2,status
 80151b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80151b4:	e0fffb17 	ldw	r3,-20(fp)
 80151b8:	00bfff84 	movi	r2,-2
 80151bc:	1884703a 	and	r2,r3,r2
 80151c0:	1001703a 	wrctl	status,r2
  
  return context;
 80151c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80151c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80151cc:	e0bffc17 	ldw	r2,-16(fp)
 80151d0:	10800817 	ldw	r2,32(r2)
 80151d4:	10c00054 	ori	r3,r2,1
 80151d8:	e0bffc17 	ldw	r2,-16(fp)
 80151dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80151e0:	e0bffc17 	ldw	r2,-16(fp)
 80151e4:	10800017 	ldw	r2,0(r2)
 80151e8:	10800104 	addi	r2,r2,4
 80151ec:	1007883a 	mov	r3,r2
 80151f0:	e0bffc17 	ldw	r2,-16(fp)
 80151f4:	10800817 	ldw	r2,32(r2)
 80151f8:	18800035 	stwio	r2,0(r3)
 80151fc:	e0bffa17 	ldw	r2,-24(fp)
 8015200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015204:	e0bff917 	ldw	r2,-28(fp)
 8015208:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801520c:	e0fff517 	ldw	r3,-44(fp)
 8015210:	e0bffd17 	ldw	r2,-12(fp)
 8015214:	18800426 	beq	r3,r2,8015228 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8015218:	e0fff517 	ldw	r3,-44(fp)
 801521c:	e0bffd17 	ldw	r2,-12(fp)
 8015220:	1885c83a 	sub	r2,r3,r2
 8015224:	00000606 	br	8015240 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8015228:	e0bfff17 	ldw	r2,-4(fp)
 801522c:	1090000c 	andi	r2,r2,16384
 8015230:	10000226 	beq	r2,zero,801523c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8015234:	00bffd44 	movi	r2,-11
 8015238:	00000106 	br	8015240 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 801523c:	00bffec4 	movi	r2,-5
}
 8015240:	e037883a 	mov	sp,fp
 8015244:	dfc00117 	ldw	ra,4(sp)
 8015248:	df000017 	ldw	fp,0(sp)
 801524c:	dec00204 	addi	sp,sp,8
 8015250:	f800283a 	ret

08015254 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8015254:	defff304 	addi	sp,sp,-52
 8015258:	dfc00c15 	stw	ra,48(sp)
 801525c:	df000b15 	stw	fp,44(sp)
 8015260:	df000b04 	addi	fp,sp,44
 8015264:	e13ffc15 	stw	r4,-16(fp)
 8015268:	e17ffd15 	stw	r5,-12(fp)
 801526c:	e1bffe15 	stw	r6,-8(fp)
 8015270:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8015274:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8015278:	e0bffd17 	ldw	r2,-12(fp)
 801527c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8015280:	00003706 	br	8015360 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8015284:	e0bffc17 	ldw	r2,-16(fp)
 8015288:	10800c17 	ldw	r2,48(r2)
 801528c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8015290:	e0bffc17 	ldw	r2,-16(fp)
 8015294:	10800d17 	ldw	r2,52(r2)
 8015298:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801529c:	e0fff917 	ldw	r3,-28(fp)
 80152a0:	e0bff517 	ldw	r2,-44(fp)
 80152a4:	1880062e 	bgeu	r3,r2,80152c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80152a8:	e0fff517 	ldw	r3,-44(fp)
 80152ac:	e0bff917 	ldw	r2,-28(fp)
 80152b0:	1885c83a 	sub	r2,r3,r2
 80152b4:	10bfffc4 	addi	r2,r2,-1
 80152b8:	e0bff615 	stw	r2,-40(fp)
 80152bc:	00000b06 	br	80152ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80152c0:	e0bff517 	ldw	r2,-44(fp)
 80152c4:	10000526 	beq	r2,zero,80152dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80152c8:	00c20004 	movi	r3,2048
 80152cc:	e0bff917 	ldw	r2,-28(fp)
 80152d0:	1885c83a 	sub	r2,r3,r2
 80152d4:	e0bff615 	stw	r2,-40(fp)
 80152d8:	00000406 	br	80152ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80152dc:	00c1ffc4 	movi	r3,2047
 80152e0:	e0bff917 	ldw	r2,-28(fp)
 80152e4:	1885c83a 	sub	r2,r3,r2
 80152e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80152ec:	e0bff617 	ldw	r2,-40(fp)
 80152f0:	10001e26 	beq	r2,zero,801536c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80152f4:	e0fffe17 	ldw	r3,-8(fp)
 80152f8:	e0bff617 	ldw	r2,-40(fp)
 80152fc:	1880022e 	bgeu	r3,r2,8015308 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8015300:	e0bffe17 	ldw	r2,-8(fp)
 8015304:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8015308:	e0bffc17 	ldw	r2,-16(fp)
 801530c:	10c20e04 	addi	r3,r2,2104
 8015310:	e0bff917 	ldw	r2,-28(fp)
 8015314:	1885883a 	add	r2,r3,r2
 8015318:	e1bff617 	ldw	r6,-40(fp)
 801531c:	e17ffd17 	ldw	r5,-12(fp)
 8015320:	1009883a 	mov	r4,r2
 8015324:	80072540 	call	8007254 <memcpy>
      ptr   += n;
 8015328:	e0fffd17 	ldw	r3,-12(fp)
 801532c:	e0bff617 	ldw	r2,-40(fp)
 8015330:	1885883a 	add	r2,r3,r2
 8015334:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8015338:	e0fffe17 	ldw	r3,-8(fp)
 801533c:	e0bff617 	ldw	r2,-40(fp)
 8015340:	1885c83a 	sub	r2,r3,r2
 8015344:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015348:	e0fff917 	ldw	r3,-28(fp)
 801534c:	e0bff617 	ldw	r2,-40(fp)
 8015350:	1885883a 	add	r2,r3,r2
 8015354:	10c1ffcc 	andi	r3,r2,2047
 8015358:	e0bffc17 	ldw	r2,-16(fp)
 801535c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8015360:	e0bffe17 	ldw	r2,-8(fp)
 8015364:	00bfc716 	blt	zero,r2,8015284 <__alt_data_end+0xf8015284>
 8015368:	00000106 	br	8015370 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 801536c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015370:	0005303a 	rdctl	r2,status
 8015374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015378:	e0fffb17 	ldw	r3,-20(fp)
 801537c:	00bfff84 	movi	r2,-2
 8015380:	1884703a 	and	r2,r3,r2
 8015384:	1001703a 	wrctl	status,r2
  
  return context;
 8015388:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801538c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8015390:	e0bffc17 	ldw	r2,-16(fp)
 8015394:	10800817 	ldw	r2,32(r2)
 8015398:	10c00094 	ori	r3,r2,2
 801539c:	e0bffc17 	ldw	r2,-16(fp)
 80153a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80153a4:	e0bffc17 	ldw	r2,-16(fp)
 80153a8:	10800017 	ldw	r2,0(r2)
 80153ac:	10800104 	addi	r2,r2,4
 80153b0:	1007883a 	mov	r3,r2
 80153b4:	e0bffc17 	ldw	r2,-16(fp)
 80153b8:	10800817 	ldw	r2,32(r2)
 80153bc:	18800035 	stwio	r2,0(r3)
 80153c0:	e0bffa17 	ldw	r2,-24(fp)
 80153c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80153c8:	e0bff817 	ldw	r2,-32(fp)
 80153cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80153d0:	e0bffe17 	ldw	r2,-8(fp)
 80153d4:	0080100e 	bge	zero,r2,8015418 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80153d8:	e0bfff17 	ldw	r2,-4(fp)
 80153dc:	1090000c 	andi	r2,r2,16384
 80153e0:	1000101e 	bne	r2,zero,8015424 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80153e4:	0001883a 	nop
 80153e8:	e0bffc17 	ldw	r2,-16(fp)
 80153ec:	10c00d17 	ldw	r3,52(r2)
 80153f0:	e0bff517 	ldw	r2,-44(fp)
 80153f4:	1880051e 	bne	r3,r2,801540c <altera_avalon_jtag_uart_write+0x1b8>
 80153f8:	e0bffc17 	ldw	r2,-16(fp)
 80153fc:	10c00917 	ldw	r3,36(r2)
 8015400:	e0bffc17 	ldw	r2,-16(fp)
 8015404:	10800117 	ldw	r2,4(r2)
 8015408:	18bff736 	bltu	r3,r2,80153e8 <__alt_data_end+0xf80153e8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801540c:	e0bffc17 	ldw	r2,-16(fp)
 8015410:	10800917 	ldw	r2,36(r2)
 8015414:	1000051e 	bne	r2,zero,801542c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8015418:	e0bffe17 	ldw	r2,-8(fp)
 801541c:	00bfd016 	blt	zero,r2,8015360 <__alt_data_end+0xf8015360>
 8015420:	00000306 	br	8015430 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8015424:	0001883a 	nop
 8015428:	00000106 	br	8015430 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 801542c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8015430:	e0fffd17 	ldw	r3,-12(fp)
 8015434:	e0bff717 	ldw	r2,-36(fp)
 8015438:	18800426 	beq	r3,r2,801544c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 801543c:	e0fffd17 	ldw	r3,-12(fp)
 8015440:	e0bff717 	ldw	r2,-36(fp)
 8015444:	1885c83a 	sub	r2,r3,r2
 8015448:	00000606 	br	8015464 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 801544c:	e0bfff17 	ldw	r2,-4(fp)
 8015450:	1090000c 	andi	r2,r2,16384
 8015454:	10000226 	beq	r2,zero,8015460 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8015458:	00bffd44 	movi	r2,-11
 801545c:	00000106 	br	8015464 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8015460:	00bffec4 	movi	r2,-5
}
 8015464:	e037883a 	mov	sp,fp
 8015468:	dfc00117 	ldw	ra,4(sp)
 801546c:	df000017 	ldw	fp,0(sp)
 8015470:	dec00204 	addi	sp,sp,8
 8015474:	f800283a 	ret

08015478 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8015478:	defff904 	addi	sp,sp,-28
 801547c:	dfc00615 	stw	ra,24(sp)
 8015480:	df000515 	stw	fp,20(sp)
 8015484:	df000504 	addi	fp,sp,20
 8015488:	e13ffe15 	stw	r4,-8(fp)
 801548c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8015490:	0007883a 	mov	r3,zero
 8015494:	e0bffe17 	ldw	r2,-8(fp)
 8015498:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801549c:	e0bffe17 	ldw	r2,-8(fp)
 80154a0:	10800104 	addi	r2,r2,4
 80154a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80154a8:	0005303a 	rdctl	r2,status
 80154ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80154b0:	e0fffc17 	ldw	r3,-16(fp)
 80154b4:	00bfff84 	movi	r2,-2
 80154b8:	1884703a 	and	r2,r3,r2
 80154bc:	1001703a 	wrctl	status,r2
  
  return context;
 80154c0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80154c4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 80154c8:	8015e740 	call	8015e74 <alt_tick>
 80154cc:	e0bffb17 	ldw	r2,-20(fp)
 80154d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80154d4:	e0bffd17 	ldw	r2,-12(fp)
 80154d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80154dc:	0001883a 	nop
 80154e0:	e037883a 	mov	sp,fp
 80154e4:	dfc00117 	ldw	ra,4(sp)
 80154e8:	df000017 	ldw	fp,0(sp)
 80154ec:	dec00204 	addi	sp,sp,8
 80154f0:	f800283a 	ret

080154f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80154f4:	defff904 	addi	sp,sp,-28
 80154f8:	dfc00615 	stw	ra,24(sp)
 80154fc:	df000515 	stw	fp,20(sp)
 8015500:	df000504 	addi	fp,sp,20
 8015504:	e13ffc15 	stw	r4,-16(fp)
 8015508:	e17ffd15 	stw	r5,-12(fp)
 801550c:	e1bffe15 	stw	r6,-8(fp)
 8015510:	e1ffff15 	stw	r7,-4(fp)
 8015514:	e0bfff17 	ldw	r2,-4(fp)
 8015518:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801551c:	d0a6e917 	ldw	r2,-25692(gp)
 8015520:	1000021e 	bne	r2,zero,801552c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8015524:	e0bffb17 	ldw	r2,-20(fp)
 8015528:	d0a6e915 	stw	r2,-25692(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801552c:	e0bffc17 	ldw	r2,-16(fp)
 8015530:	10800104 	addi	r2,r2,4
 8015534:	00c001c4 	movi	r3,7
 8015538:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 801553c:	01820074 	movhi	r6,2049
 8015540:	31951e04 	addi	r6,r6,21624
 8015544:	e17ffc17 	ldw	r5,-16(fp)
 8015548:	e13ffe17 	ldw	r4,-8(fp)
 801554c:	80159d40 	call	80159d4 <alt_irq_register>
#endif  
}
 8015550:	0001883a 	nop
 8015554:	e037883a 	mov	sp,fp
 8015558:	dfc00117 	ldw	ra,4(sp)
 801555c:	df000017 	ldw	fp,0(sp)
 8015560:	dec00204 	addi	sp,sp,8
 8015564:	f800283a 	ret

08015568 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8015568:	defff504 	addi	sp,sp,-44
 801556c:	df000a15 	stw	fp,40(sp)
 8015570:	df000a04 	addi	fp,sp,40
 8015574:	e13ffc15 	stw	r4,-16(fp)
 8015578:	e17ffd15 	stw	r5,-12(fp)
 801557c:	e1bffe15 	stw	r6,-8(fp)
 8015580:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8015584:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015588:	d0a6e917 	ldw	r2,-25692(gp)
  
  if (alt_ticks_per_second ())
 801558c:	10003c26 	beq	r2,zero,8015680 <alt_alarm_start+0x118>
  {
    if (alarm)
 8015590:	e0bffc17 	ldw	r2,-16(fp)
 8015594:	10003826 	beq	r2,zero,8015678 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8015598:	e0bffc17 	ldw	r2,-16(fp)
 801559c:	e0fffe17 	ldw	r3,-8(fp)
 80155a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80155a4:	e0bffc17 	ldw	r2,-16(fp)
 80155a8:	e0ffff17 	ldw	r3,-4(fp)
 80155ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80155b0:	0005303a 	rdctl	r2,status
 80155b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80155b8:	e0fff917 	ldw	r3,-28(fp)
 80155bc:	00bfff84 	movi	r2,-2
 80155c0:	1884703a 	and	r2,r3,r2
 80155c4:	1001703a 	wrctl	status,r2
  
  return context;
 80155c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80155cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80155d0:	d0a6ea17 	ldw	r2,-25688(gp)
      
      current_nticks = alt_nticks();
 80155d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80155d8:	e0fffd17 	ldw	r3,-12(fp)
 80155dc:	e0bff617 	ldw	r2,-40(fp)
 80155e0:	1885883a 	add	r2,r3,r2
 80155e4:	10c00044 	addi	r3,r2,1
 80155e8:	e0bffc17 	ldw	r2,-16(fp)
 80155ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80155f0:	e0bffc17 	ldw	r2,-16(fp)
 80155f4:	10c00217 	ldw	r3,8(r2)
 80155f8:	e0bff617 	ldw	r2,-40(fp)
 80155fc:	1880042e 	bgeu	r3,r2,8015610 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8015600:	e0bffc17 	ldw	r2,-16(fp)
 8015604:	00c00044 	movi	r3,1
 8015608:	10c00405 	stb	r3,16(r2)
 801560c:	00000206 	br	8015618 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8015610:	e0bffc17 	ldw	r2,-16(fp)
 8015614:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8015618:	e0bffc17 	ldw	r2,-16(fp)
 801561c:	d0e00f04 	addi	r3,gp,-32708
 8015620:	e0fffa15 	stw	r3,-24(fp)
 8015624:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8015628:	e0bffb17 	ldw	r2,-20(fp)
 801562c:	e0fffa17 	ldw	r3,-24(fp)
 8015630:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8015634:	e0bffa17 	ldw	r2,-24(fp)
 8015638:	10c00017 	ldw	r3,0(r2)
 801563c:	e0bffb17 	ldw	r2,-20(fp)
 8015640:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8015644:	e0bffa17 	ldw	r2,-24(fp)
 8015648:	10800017 	ldw	r2,0(r2)
 801564c:	e0fffb17 	ldw	r3,-20(fp)
 8015650:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8015654:	e0bffa17 	ldw	r2,-24(fp)
 8015658:	e0fffb17 	ldw	r3,-20(fp)
 801565c:	10c00015 	stw	r3,0(r2)
 8015660:	e0bff817 	ldw	r2,-32(fp)
 8015664:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015668:	e0bff717 	ldw	r2,-36(fp)
 801566c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8015670:	0005883a 	mov	r2,zero
 8015674:	00000306 	br	8015684 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8015678:	00bffa84 	movi	r2,-22
 801567c:	00000106 	br	8015684 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8015680:	00bfde84 	movi	r2,-134
  }
}
 8015684:	e037883a 	mov	sp,fp
 8015688:	df000017 	ldw	fp,0(sp)
 801568c:	dec00104 	addi	sp,sp,4
 8015690:	f800283a 	ret

08015694 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8015694:	deffff04 	addi	sp,sp,-4
 8015698:	df000015 	stw	fp,0(sp)
 801569c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80156a0:	0001883a 	nop
 80156a4:	e037883a 	mov	sp,fp
 80156a8:	df000017 	ldw	fp,0(sp)
 80156ac:	dec00104 	addi	sp,sp,4
 80156b0:	f800283a 	ret

080156b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80156b4:	defffe04 	addi	sp,sp,-8
 80156b8:	dfc00115 	stw	ra,4(sp)
 80156bc:	df000015 	stw	fp,0(sp)
 80156c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80156c4:	d0a00c17 	ldw	r2,-32720(gp)
 80156c8:	10000326 	beq	r2,zero,80156d8 <alt_get_errno+0x24>
 80156cc:	d0a00c17 	ldw	r2,-32720(gp)
 80156d0:	103ee83a 	callr	r2
 80156d4:	00000106 	br	80156dc <alt_get_errno+0x28>
 80156d8:	d0a6e404 	addi	r2,gp,-25712
}
 80156dc:	e037883a 	mov	sp,fp
 80156e0:	dfc00117 	ldw	ra,4(sp)
 80156e4:	df000017 	ldw	fp,0(sp)
 80156e8:	dec00204 	addi	sp,sp,8
 80156ec:	f800283a 	ret

080156f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80156f0:	defffa04 	addi	sp,sp,-24
 80156f4:	dfc00515 	stw	ra,20(sp)
 80156f8:	df000415 	stw	fp,16(sp)
 80156fc:	df000404 	addi	fp,sp,16
 8015700:	e13ffe15 	stw	r4,-8(fp)
 8015704:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8015708:	e0bffe17 	ldw	r2,-8(fp)
 801570c:	10000326 	beq	r2,zero,801571c <alt_dev_llist_insert+0x2c>
 8015710:	e0bffe17 	ldw	r2,-8(fp)
 8015714:	10800217 	ldw	r2,8(r2)
 8015718:	1000061e 	bne	r2,zero,8015734 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801571c:	80156b40 	call	80156b4 <alt_get_errno>
 8015720:	1007883a 	mov	r3,r2
 8015724:	00800584 	movi	r2,22
 8015728:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801572c:	00bffa84 	movi	r2,-22
 8015730:	00001306 	br	8015780 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8015734:	e0bffe17 	ldw	r2,-8(fp)
 8015738:	e0ffff17 	ldw	r3,-4(fp)
 801573c:	e0fffc15 	stw	r3,-16(fp)
 8015740:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8015744:	e0bffd17 	ldw	r2,-12(fp)
 8015748:	e0fffc17 	ldw	r3,-16(fp)
 801574c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8015750:	e0bffc17 	ldw	r2,-16(fp)
 8015754:	10c00017 	ldw	r3,0(r2)
 8015758:	e0bffd17 	ldw	r2,-12(fp)
 801575c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8015760:	e0bffc17 	ldw	r2,-16(fp)
 8015764:	10800017 	ldw	r2,0(r2)
 8015768:	e0fffd17 	ldw	r3,-12(fp)
 801576c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8015770:	e0bffc17 	ldw	r2,-16(fp)
 8015774:	e0fffd17 	ldw	r3,-12(fp)
 8015778:	10c00015 	stw	r3,0(r2)

  return 0;  
 801577c:	0005883a 	mov	r2,zero
}
 8015780:	e037883a 	mov	sp,fp
 8015784:	dfc00117 	ldw	ra,4(sp)
 8015788:	df000017 	ldw	fp,0(sp)
 801578c:	dec00204 	addi	sp,sp,8
 8015790:	f800283a 	ret

08015794 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8015794:	defffd04 	addi	sp,sp,-12
 8015798:	dfc00215 	stw	ra,8(sp)
 801579c:	df000115 	stw	fp,4(sp)
 80157a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80157a4:	00820074 	movhi	r2,2049
 80157a8:	10998a04 	addi	r2,r2,26152
 80157ac:	e0bfff15 	stw	r2,-4(fp)
 80157b0:	00000606 	br	80157cc <_do_ctors+0x38>
        (*ctor) (); 
 80157b4:	e0bfff17 	ldw	r2,-4(fp)
 80157b8:	10800017 	ldw	r2,0(r2)
 80157bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80157c0:	e0bfff17 	ldw	r2,-4(fp)
 80157c4:	10bfff04 	addi	r2,r2,-4
 80157c8:	e0bfff15 	stw	r2,-4(fp)
 80157cc:	e0ffff17 	ldw	r3,-4(fp)
 80157d0:	00820074 	movhi	r2,2049
 80157d4:	10998b04 	addi	r2,r2,26156
 80157d8:	18bff62e 	bgeu	r3,r2,80157b4 <__alt_data_end+0xf80157b4>
        (*ctor) (); 
}
 80157dc:	0001883a 	nop
 80157e0:	e037883a 	mov	sp,fp
 80157e4:	dfc00117 	ldw	ra,4(sp)
 80157e8:	df000017 	ldw	fp,0(sp)
 80157ec:	dec00204 	addi	sp,sp,8
 80157f0:	f800283a 	ret

080157f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80157f4:	defffd04 	addi	sp,sp,-12
 80157f8:	dfc00215 	stw	ra,8(sp)
 80157fc:	df000115 	stw	fp,4(sp)
 8015800:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8015804:	00820074 	movhi	r2,2049
 8015808:	10998a04 	addi	r2,r2,26152
 801580c:	e0bfff15 	stw	r2,-4(fp)
 8015810:	00000606 	br	801582c <_do_dtors+0x38>
        (*dtor) (); 
 8015814:	e0bfff17 	ldw	r2,-4(fp)
 8015818:	10800017 	ldw	r2,0(r2)
 801581c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8015820:	e0bfff17 	ldw	r2,-4(fp)
 8015824:	10bfff04 	addi	r2,r2,-4
 8015828:	e0bfff15 	stw	r2,-4(fp)
 801582c:	e0ffff17 	ldw	r3,-4(fp)
 8015830:	00820074 	movhi	r2,2049
 8015834:	10998b04 	addi	r2,r2,26156
 8015838:	18bff62e 	bgeu	r3,r2,8015814 <__alt_data_end+0xf8015814>
        (*dtor) (); 
}
 801583c:	0001883a 	nop
 8015840:	e037883a 	mov	sp,fp
 8015844:	dfc00117 	ldw	ra,4(sp)
 8015848:	df000017 	ldw	fp,0(sp)
 801584c:	dec00204 	addi	sp,sp,8
 8015850:	f800283a 	ret

08015854 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8015854:	deffff04 	addi	sp,sp,-4
 8015858:	df000015 	stw	fp,0(sp)
 801585c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8015860:	0001883a 	nop
 8015864:	e037883a 	mov	sp,fp
 8015868:	df000017 	ldw	fp,0(sp)
 801586c:	dec00104 	addi	sp,sp,4
 8015870:	f800283a 	ret

08015874 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8015874:	defff804 	addi	sp,sp,-32
 8015878:	dfc00715 	stw	ra,28(sp)
 801587c:	df000615 	stw	fp,24(sp)
 8015880:	dc000515 	stw	r16,20(sp)
 8015884:	df000604 	addi	fp,sp,24
 8015888:	e13ffb15 	stw	r4,-20(fp)
 801588c:	e17ffc15 	stw	r5,-16(fp)
 8015890:	e1bffd15 	stw	r6,-12(fp)
 8015894:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8015898:	e1bffe17 	ldw	r6,-8(fp)
 801589c:	e17ffd17 	ldw	r5,-12(fp)
 80158a0:	e13ffc17 	ldw	r4,-16(fp)
 80158a4:	8015c7c0 	call	8015c7c <open>
 80158a8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80158ac:	e0bffa17 	ldw	r2,-24(fp)
 80158b0:	10002216 	blt	r2,zero,801593c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80158b4:	04020074 	movhi	r16,2049
 80158b8:	841c9b04 	addi	r16,r16,29292
 80158bc:	e0bffa17 	ldw	r2,-24(fp)
 80158c0:	01400304 	movi	r5,12
 80158c4:	1009883a 	mov	r4,r2
 80158c8:	800722c0 	call	800722c <__mulsi3>
 80158cc:	8085883a 	add	r2,r16,r2
 80158d0:	10c00017 	ldw	r3,0(r2)
 80158d4:	e0bffb17 	ldw	r2,-20(fp)
 80158d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80158dc:	04020074 	movhi	r16,2049
 80158e0:	841c9b04 	addi	r16,r16,29292
 80158e4:	e0bffa17 	ldw	r2,-24(fp)
 80158e8:	01400304 	movi	r5,12
 80158ec:	1009883a 	mov	r4,r2
 80158f0:	800722c0 	call	800722c <__mulsi3>
 80158f4:	8085883a 	add	r2,r16,r2
 80158f8:	10800104 	addi	r2,r2,4
 80158fc:	10c00017 	ldw	r3,0(r2)
 8015900:	e0bffb17 	ldw	r2,-20(fp)
 8015904:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8015908:	04020074 	movhi	r16,2049
 801590c:	841c9b04 	addi	r16,r16,29292
 8015910:	e0bffa17 	ldw	r2,-24(fp)
 8015914:	01400304 	movi	r5,12
 8015918:	1009883a 	mov	r4,r2
 801591c:	800722c0 	call	800722c <__mulsi3>
 8015920:	8085883a 	add	r2,r16,r2
 8015924:	10800204 	addi	r2,r2,8
 8015928:	10c00017 	ldw	r3,0(r2)
 801592c:	e0bffb17 	ldw	r2,-20(fp)
 8015930:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8015934:	e13ffa17 	ldw	r4,-24(fp)
 8015938:	80146dc0 	call	80146dc <alt_release_fd>
  }
} 
 801593c:	0001883a 	nop
 8015940:	e6ffff04 	addi	sp,fp,-4
 8015944:	dfc00217 	ldw	ra,8(sp)
 8015948:	df000117 	ldw	fp,4(sp)
 801594c:	dc000017 	ldw	r16,0(sp)
 8015950:	dec00304 	addi	sp,sp,12
 8015954:	f800283a 	ret

08015958 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8015958:	defffb04 	addi	sp,sp,-20
 801595c:	dfc00415 	stw	ra,16(sp)
 8015960:	df000315 	stw	fp,12(sp)
 8015964:	df000304 	addi	fp,sp,12
 8015968:	e13ffd15 	stw	r4,-12(fp)
 801596c:	e17ffe15 	stw	r5,-8(fp)
 8015970:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8015974:	01c07fc4 	movi	r7,511
 8015978:	01800044 	movi	r6,1
 801597c:	e17ffd17 	ldw	r5,-12(fp)
 8015980:	01020074 	movhi	r4,2049
 8015984:	211c9e04 	addi	r4,r4,29304
 8015988:	80158740 	call	8015874 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801598c:	01c07fc4 	movi	r7,511
 8015990:	000d883a 	mov	r6,zero
 8015994:	e17ffe17 	ldw	r5,-8(fp)
 8015998:	01020074 	movhi	r4,2049
 801599c:	211c9b04 	addi	r4,r4,29292
 80159a0:	80158740 	call	8015874 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80159a4:	01c07fc4 	movi	r7,511
 80159a8:	01800044 	movi	r6,1
 80159ac:	e17fff17 	ldw	r5,-4(fp)
 80159b0:	01020074 	movhi	r4,2049
 80159b4:	211ca104 	addi	r4,r4,29316
 80159b8:	80158740 	call	8015874 <alt_open_fd>
}  
 80159bc:	0001883a 	nop
 80159c0:	e037883a 	mov	sp,fp
 80159c4:	dfc00117 	ldw	ra,4(sp)
 80159c8:	df000017 	ldw	fp,0(sp)
 80159cc:	dec00204 	addi	sp,sp,8
 80159d0:	f800283a 	ret

080159d4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 80159d4:	defff004 	addi	sp,sp,-64
 80159d8:	df000f15 	stw	fp,60(sp)
 80159dc:	df000f04 	addi	fp,sp,60
 80159e0:	e13ffd15 	stw	r4,-12(fp)
 80159e4:	e17ffe15 	stw	r5,-8(fp)
 80159e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 80159ec:	00bffa84 	movi	r2,-22
 80159f0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80159f4:	e0bffd17 	ldw	r2,-12(fp)
 80159f8:	10800828 	cmpgeui	r2,r2,32
 80159fc:	1000501e 	bne	r2,zero,8015b40 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a00:	0005303a 	rdctl	r2,status
 8015a04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a08:	e0fff617 	ldw	r3,-40(fp)
 8015a0c:	00bfff84 	movi	r2,-2
 8015a10:	1884703a 	and	r2,r3,r2
 8015a14:	1001703a 	wrctl	status,r2
  
  return context;
 8015a18:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8015a1c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 8015a20:	008220b4 	movhi	r2,2178
 8015a24:	10a83b04 	addi	r2,r2,-24340
 8015a28:	e0fffd17 	ldw	r3,-12(fp)
 8015a2c:	180690fa 	slli	r3,r3,3
 8015a30:	10c5883a 	add	r2,r2,r3
 8015a34:	e0ffff17 	ldw	r3,-4(fp)
 8015a38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8015a3c:	008220b4 	movhi	r2,2178
 8015a40:	10a83b04 	addi	r2,r2,-24340
 8015a44:	e0fffd17 	ldw	r3,-12(fp)
 8015a48:	180690fa 	slli	r3,r3,3
 8015a4c:	10c5883a 	add	r2,r2,r3
 8015a50:	10800104 	addi	r2,r2,4
 8015a54:	e0fffe17 	ldw	r3,-8(fp)
 8015a58:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8015a5c:	e0bfff17 	ldw	r2,-4(fp)
 8015a60:	10001926 	beq	r2,zero,8015ac8 <alt_irq_register+0xf4>
 8015a64:	e0bffd17 	ldw	r2,-12(fp)
 8015a68:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a6c:	0005303a 	rdctl	r2,status
 8015a70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a74:	e0fff717 	ldw	r3,-36(fp)
 8015a78:	00bfff84 	movi	r2,-2
 8015a7c:	1884703a 	and	r2,r3,r2
 8015a80:	1001703a 	wrctl	status,r2
  
  return context;
 8015a84:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8015a88:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 8015a8c:	00c00044 	movi	r3,1
 8015a90:	e0bff217 	ldw	r2,-56(fp)
 8015a94:	1884983a 	sll	r2,r3,r2
 8015a98:	1007883a 	mov	r3,r2
 8015a9c:	d0a6e517 	ldw	r2,-25708(gp)
 8015aa0:	1884b03a 	or	r2,r3,r2
 8015aa4:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8015aa8:	d0a6e517 	ldw	r2,-25708(gp)
 8015aac:	100170fa 	wrctl	ienable,r2
 8015ab0:	e0bff817 	ldw	r2,-32(fp)
 8015ab4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015ab8:	e0bff917 	ldw	r2,-28(fp)
 8015abc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8015ac0:	0005883a 	mov	r2,zero
 8015ac4:	00001906 	br	8015b2c <alt_irq_register+0x158>
 8015ac8:	e0bffd17 	ldw	r2,-12(fp)
 8015acc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015ad0:	0005303a 	rdctl	r2,status
 8015ad4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015ad8:	e0fffa17 	ldw	r3,-24(fp)
 8015adc:	00bfff84 	movi	r2,-2
 8015ae0:	1884703a 	and	r2,r3,r2
 8015ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8015ae8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8015aec:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8015af0:	00c00044 	movi	r3,1
 8015af4:	e0bff417 	ldw	r2,-48(fp)
 8015af8:	1884983a 	sll	r2,r3,r2
 8015afc:	0084303a 	nor	r2,zero,r2
 8015b00:	1007883a 	mov	r3,r2
 8015b04:	d0a6e517 	ldw	r2,-25708(gp)
 8015b08:	1884703a 	and	r2,r3,r2
 8015b0c:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8015b10:	d0a6e517 	ldw	r2,-25708(gp)
 8015b14:	100170fa 	wrctl	ienable,r2
 8015b18:	e0bffb17 	ldw	r2,-20(fp)
 8015b1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015b20:	e0bffc17 	ldw	r2,-16(fp)
 8015b24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8015b28:	0005883a 	mov	r2,zero
 8015b2c:	e0bff115 	stw	r2,-60(fp)
 8015b30:	e0bff317 	ldw	r2,-52(fp)
 8015b34:	e0bff515 	stw	r2,-44(fp)
 8015b38:	e0bff517 	ldw	r2,-44(fp)
 8015b3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8015b40:	e0bff117 	ldw	r2,-60(fp)
}
 8015b44:	e037883a 	mov	sp,fp
 8015b48:	df000017 	ldw	fp,0(sp)
 8015b4c:	dec00104 	addi	sp,sp,4
 8015b50:	f800283a 	ret

08015b54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015b54:	defffe04 	addi	sp,sp,-8
 8015b58:	dfc00115 	stw	ra,4(sp)
 8015b5c:	df000015 	stw	fp,0(sp)
 8015b60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015b64:	d0a00c17 	ldw	r2,-32720(gp)
 8015b68:	10000326 	beq	r2,zero,8015b78 <alt_get_errno+0x24>
 8015b6c:	d0a00c17 	ldw	r2,-32720(gp)
 8015b70:	103ee83a 	callr	r2
 8015b74:	00000106 	br	8015b7c <alt_get_errno+0x28>
 8015b78:	d0a6e404 	addi	r2,gp,-25712
}
 8015b7c:	e037883a 	mov	sp,fp
 8015b80:	dfc00117 	ldw	ra,4(sp)
 8015b84:	df000017 	ldw	fp,0(sp)
 8015b88:	dec00204 	addi	sp,sp,8
 8015b8c:	f800283a 	ret

08015b90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8015b90:	defffb04 	addi	sp,sp,-20
 8015b94:	dfc00415 	stw	ra,16(sp)
 8015b98:	df000315 	stw	fp,12(sp)
 8015b9c:	dc000215 	stw	r16,8(sp)
 8015ba0:	df000304 	addi	fp,sp,12
 8015ba4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8015ba8:	e0bffe17 	ldw	r2,-8(fp)
 8015bac:	10800217 	ldw	r2,8(r2)
 8015bb0:	10d00034 	orhi	r3,r2,16384
 8015bb4:	e0bffe17 	ldw	r2,-8(fp)
 8015bb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8015bbc:	e03ffd15 	stw	zero,-12(fp)
 8015bc0:	00002306 	br	8015c50 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8015bc4:	04020074 	movhi	r16,2049
 8015bc8:	841c9b04 	addi	r16,r16,29292
 8015bcc:	e0bffd17 	ldw	r2,-12(fp)
 8015bd0:	01400304 	movi	r5,12
 8015bd4:	1009883a 	mov	r4,r2
 8015bd8:	800722c0 	call	800722c <__mulsi3>
 8015bdc:	8085883a 	add	r2,r16,r2
 8015be0:	10c00017 	ldw	r3,0(r2)
 8015be4:	e0bffe17 	ldw	r2,-8(fp)
 8015be8:	10800017 	ldw	r2,0(r2)
 8015bec:	1880151e 	bne	r3,r2,8015c44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015bf0:	04020074 	movhi	r16,2049
 8015bf4:	841c9b04 	addi	r16,r16,29292
 8015bf8:	e0bffd17 	ldw	r2,-12(fp)
 8015bfc:	01400304 	movi	r5,12
 8015c00:	1009883a 	mov	r4,r2
 8015c04:	800722c0 	call	800722c <__mulsi3>
 8015c08:	8085883a 	add	r2,r16,r2
 8015c0c:	10800204 	addi	r2,r2,8
 8015c10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8015c14:	10000b0e 	bge	r2,zero,8015c44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8015c18:	01400304 	movi	r5,12
 8015c1c:	e13ffd17 	ldw	r4,-12(fp)
 8015c20:	800722c0 	call	800722c <__mulsi3>
 8015c24:	1007883a 	mov	r3,r2
 8015c28:	00820074 	movhi	r2,2049
 8015c2c:	109c9b04 	addi	r2,r2,29292
 8015c30:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015c34:	e0bffe17 	ldw	r2,-8(fp)
 8015c38:	18800226 	beq	r3,r2,8015c44 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8015c3c:	00bffcc4 	movi	r2,-13
 8015c40:	00000806 	br	8015c64 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8015c44:	e0bffd17 	ldw	r2,-12(fp)
 8015c48:	10800044 	addi	r2,r2,1
 8015c4c:	e0bffd15 	stw	r2,-12(fp)
 8015c50:	d0a00b17 	ldw	r2,-32724(gp)
 8015c54:	1007883a 	mov	r3,r2
 8015c58:	e0bffd17 	ldw	r2,-12(fp)
 8015c5c:	18bfd92e 	bgeu	r3,r2,8015bc4 <__alt_data_end+0xf8015bc4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8015c60:	0005883a 	mov	r2,zero
}
 8015c64:	e6ffff04 	addi	sp,fp,-4
 8015c68:	dfc00217 	ldw	ra,8(sp)
 8015c6c:	df000117 	ldw	fp,4(sp)
 8015c70:	dc000017 	ldw	r16,0(sp)
 8015c74:	dec00304 	addi	sp,sp,12
 8015c78:	f800283a 	ret

08015c7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8015c7c:	defff604 	addi	sp,sp,-40
 8015c80:	dfc00915 	stw	ra,36(sp)
 8015c84:	df000815 	stw	fp,32(sp)
 8015c88:	df000804 	addi	fp,sp,32
 8015c8c:	e13ffd15 	stw	r4,-12(fp)
 8015c90:	e17ffe15 	stw	r5,-8(fp)
 8015c94:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8015c98:	00bfffc4 	movi	r2,-1
 8015c9c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8015ca0:	00bffb44 	movi	r2,-19
 8015ca4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8015ca8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8015cac:	d1600904 	addi	r5,gp,-32732
 8015cb0:	e13ffd17 	ldw	r4,-12(fp)
 8015cb4:	8015fa00 	call	8015fa0 <alt_find_dev>
 8015cb8:	e0bff815 	stw	r2,-32(fp)
 8015cbc:	e0bff817 	ldw	r2,-32(fp)
 8015cc0:	1000051e 	bne	r2,zero,8015cd8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8015cc4:	e13ffd17 	ldw	r4,-12(fp)
 8015cc8:	80160300 	call	8016030 <alt_find_file>
 8015ccc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8015cd0:	00800044 	movi	r2,1
 8015cd4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8015cd8:	e0bff817 	ldw	r2,-32(fp)
 8015cdc:	10002b26 	beq	r2,zero,8015d8c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8015ce0:	e13ff817 	ldw	r4,-32(fp)
 8015ce4:	80161380 	call	8016138 <alt_get_fd>
 8015ce8:	e0bff915 	stw	r2,-28(fp)
 8015cec:	e0bff917 	ldw	r2,-28(fp)
 8015cf0:	1000030e 	bge	r2,zero,8015d00 <open+0x84>
    {
      status = index;
 8015cf4:	e0bff917 	ldw	r2,-28(fp)
 8015cf8:	e0bffa15 	stw	r2,-24(fp)
 8015cfc:	00002506 	br	8015d94 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8015d00:	01400304 	movi	r5,12
 8015d04:	e13ff917 	ldw	r4,-28(fp)
 8015d08:	800722c0 	call	800722c <__mulsi3>
 8015d0c:	1007883a 	mov	r3,r2
 8015d10:	00820074 	movhi	r2,2049
 8015d14:	109c9b04 	addi	r2,r2,29292
 8015d18:	1885883a 	add	r2,r3,r2
 8015d1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8015d20:	e0fffe17 	ldw	r3,-8(fp)
 8015d24:	00900034 	movhi	r2,16384
 8015d28:	10bfffc4 	addi	r2,r2,-1
 8015d2c:	1886703a 	and	r3,r3,r2
 8015d30:	e0bffc17 	ldw	r2,-16(fp)
 8015d34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8015d38:	e0bffb17 	ldw	r2,-20(fp)
 8015d3c:	1000051e 	bne	r2,zero,8015d54 <open+0xd8>
 8015d40:	e13ffc17 	ldw	r4,-16(fp)
 8015d44:	8015b900 	call	8015b90 <alt_file_locked>
 8015d48:	e0bffa15 	stw	r2,-24(fp)
 8015d4c:	e0bffa17 	ldw	r2,-24(fp)
 8015d50:	10001016 	blt	r2,zero,8015d94 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8015d54:	e0bff817 	ldw	r2,-32(fp)
 8015d58:	10800317 	ldw	r2,12(r2)
 8015d5c:	10000826 	beq	r2,zero,8015d80 <open+0x104>
 8015d60:	e0bff817 	ldw	r2,-32(fp)
 8015d64:	10800317 	ldw	r2,12(r2)
 8015d68:	e1ffff17 	ldw	r7,-4(fp)
 8015d6c:	e1bffe17 	ldw	r6,-8(fp)
 8015d70:	e17ffd17 	ldw	r5,-12(fp)
 8015d74:	e13ffc17 	ldw	r4,-16(fp)
 8015d78:	103ee83a 	callr	r2
 8015d7c:	00000106 	br	8015d84 <open+0x108>
 8015d80:	0005883a 	mov	r2,zero
 8015d84:	e0bffa15 	stw	r2,-24(fp)
 8015d88:	00000206 	br	8015d94 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8015d8c:	00bffb44 	movi	r2,-19
 8015d90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8015d94:	e0bffa17 	ldw	r2,-24(fp)
 8015d98:	1000090e 	bge	r2,zero,8015dc0 <open+0x144>
  {
    alt_release_fd (index);  
 8015d9c:	e13ff917 	ldw	r4,-28(fp)
 8015da0:	80146dc0 	call	80146dc <alt_release_fd>
    ALT_ERRNO = -status;
 8015da4:	8015b540 	call	8015b54 <alt_get_errno>
 8015da8:	1007883a 	mov	r3,r2
 8015dac:	e0bffa17 	ldw	r2,-24(fp)
 8015db0:	0085c83a 	sub	r2,zero,r2
 8015db4:	18800015 	stw	r2,0(r3)
    return -1;
 8015db8:	00bfffc4 	movi	r2,-1
 8015dbc:	00000106 	br	8015dc4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8015dc0:	e0bff917 	ldw	r2,-28(fp)
}
 8015dc4:	e037883a 	mov	sp,fp
 8015dc8:	dfc00117 	ldw	ra,4(sp)
 8015dcc:	df000017 	ldw	fp,0(sp)
 8015dd0:	dec00204 	addi	sp,sp,8
 8015dd4:	f800283a 	ret

08015dd8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8015dd8:	defffa04 	addi	sp,sp,-24
 8015ddc:	df000515 	stw	fp,20(sp)
 8015de0:	df000504 	addi	fp,sp,20
 8015de4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015de8:	0005303a 	rdctl	r2,status
 8015dec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015df0:	e0fffc17 	ldw	r3,-16(fp)
 8015df4:	00bfff84 	movi	r2,-2
 8015df8:	1884703a 	and	r2,r3,r2
 8015dfc:	1001703a 	wrctl	status,r2
  
  return context;
 8015e00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015e04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015e08:	e0bfff17 	ldw	r2,-4(fp)
 8015e0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8015e10:	e0bffd17 	ldw	r2,-12(fp)
 8015e14:	10800017 	ldw	r2,0(r2)
 8015e18:	e0fffd17 	ldw	r3,-12(fp)
 8015e1c:	18c00117 	ldw	r3,4(r3)
 8015e20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015e24:	e0bffd17 	ldw	r2,-12(fp)
 8015e28:	10800117 	ldw	r2,4(r2)
 8015e2c:	e0fffd17 	ldw	r3,-12(fp)
 8015e30:	18c00017 	ldw	r3,0(r3)
 8015e34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015e38:	e0bffd17 	ldw	r2,-12(fp)
 8015e3c:	e0fffd17 	ldw	r3,-12(fp)
 8015e40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015e44:	e0bffd17 	ldw	r2,-12(fp)
 8015e48:	e0fffd17 	ldw	r3,-12(fp)
 8015e4c:	10c00015 	stw	r3,0(r2)
 8015e50:	e0bffb17 	ldw	r2,-20(fp)
 8015e54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015e58:	e0bffe17 	ldw	r2,-8(fp)
 8015e5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8015e60:	0001883a 	nop
 8015e64:	e037883a 	mov	sp,fp
 8015e68:	df000017 	ldw	fp,0(sp)
 8015e6c:	dec00104 	addi	sp,sp,4
 8015e70:	f800283a 	ret

08015e74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8015e74:	defffb04 	addi	sp,sp,-20
 8015e78:	dfc00415 	stw	ra,16(sp)
 8015e7c:	df000315 	stw	fp,12(sp)
 8015e80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8015e84:	d0a00f17 	ldw	r2,-32708(gp)
 8015e88:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8015e8c:	d0a6ea17 	ldw	r2,-25688(gp)
 8015e90:	10800044 	addi	r2,r2,1
 8015e94:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015e98:	00002e06 	br	8015f54 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8015e9c:	e0bffd17 	ldw	r2,-12(fp)
 8015ea0:	10800017 	ldw	r2,0(r2)
 8015ea4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8015ea8:	e0bffd17 	ldw	r2,-12(fp)
 8015eac:	10800403 	ldbu	r2,16(r2)
 8015eb0:	10803fcc 	andi	r2,r2,255
 8015eb4:	10000426 	beq	r2,zero,8015ec8 <alt_tick+0x54>
 8015eb8:	d0a6ea17 	ldw	r2,-25688(gp)
 8015ebc:	1000021e 	bne	r2,zero,8015ec8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8015ec0:	e0bffd17 	ldw	r2,-12(fp)
 8015ec4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015ec8:	e0bffd17 	ldw	r2,-12(fp)
 8015ecc:	10800217 	ldw	r2,8(r2)
 8015ed0:	d0e6ea17 	ldw	r3,-25688(gp)
 8015ed4:	18801d36 	bltu	r3,r2,8015f4c <alt_tick+0xd8>
 8015ed8:	e0bffd17 	ldw	r2,-12(fp)
 8015edc:	10800403 	ldbu	r2,16(r2)
 8015ee0:	10803fcc 	andi	r2,r2,255
 8015ee4:	1000191e 	bne	r2,zero,8015f4c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015ee8:	e0bffd17 	ldw	r2,-12(fp)
 8015eec:	10800317 	ldw	r2,12(r2)
 8015ef0:	e0fffd17 	ldw	r3,-12(fp)
 8015ef4:	18c00517 	ldw	r3,20(r3)
 8015ef8:	1809883a 	mov	r4,r3
 8015efc:	103ee83a 	callr	r2
 8015f00:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015f04:	e0bfff17 	ldw	r2,-4(fp)
 8015f08:	1000031e 	bne	r2,zero,8015f18 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015f0c:	e13ffd17 	ldw	r4,-12(fp)
 8015f10:	8015dd80 	call	8015dd8 <alt_alarm_stop>
 8015f14:	00000d06 	br	8015f4c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015f18:	e0bffd17 	ldw	r2,-12(fp)
 8015f1c:	10c00217 	ldw	r3,8(r2)
 8015f20:	e0bfff17 	ldw	r2,-4(fp)
 8015f24:	1887883a 	add	r3,r3,r2
 8015f28:	e0bffd17 	ldw	r2,-12(fp)
 8015f2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8015f30:	e0bffd17 	ldw	r2,-12(fp)
 8015f34:	10c00217 	ldw	r3,8(r2)
 8015f38:	d0a6ea17 	ldw	r2,-25688(gp)
 8015f3c:	1880032e 	bgeu	r3,r2,8015f4c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8015f40:	e0bffd17 	ldw	r2,-12(fp)
 8015f44:	00c00044 	movi	r3,1
 8015f48:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015f4c:	e0bffe17 	ldw	r2,-8(fp)
 8015f50:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015f54:	e0fffd17 	ldw	r3,-12(fp)
 8015f58:	d0a00f04 	addi	r2,gp,-32708
 8015f5c:	18bfcf1e 	bne	r3,r2,8015e9c <__alt_data_end+0xf8015e9c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8015f60:	0001883a 	nop
}
 8015f64:	0001883a 	nop
 8015f68:	e037883a 	mov	sp,fp
 8015f6c:	dfc00117 	ldw	ra,4(sp)
 8015f70:	df000017 	ldw	fp,0(sp)
 8015f74:	dec00204 	addi	sp,sp,8
 8015f78:	f800283a 	ret

08015f7c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8015f7c:	deffff04 	addi	sp,sp,-4
 8015f80:	df000015 	stw	fp,0(sp)
 8015f84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8015f88:	000170fa 	wrctl	ienable,zero
}
 8015f8c:	0001883a 	nop
 8015f90:	e037883a 	mov	sp,fp
 8015f94:	df000017 	ldw	fp,0(sp)
 8015f98:	dec00104 	addi	sp,sp,4
 8015f9c:	f800283a 	ret

08015fa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8015fa0:	defffa04 	addi	sp,sp,-24
 8015fa4:	dfc00515 	stw	ra,20(sp)
 8015fa8:	df000415 	stw	fp,16(sp)
 8015fac:	df000404 	addi	fp,sp,16
 8015fb0:	e13ffe15 	stw	r4,-8(fp)
 8015fb4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8015fb8:	e0bfff17 	ldw	r2,-4(fp)
 8015fbc:	10800017 	ldw	r2,0(r2)
 8015fc0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8015fc4:	e13ffe17 	ldw	r4,-8(fp)
 8015fc8:	80076040 	call	8007604 <strlen>
 8015fcc:	10800044 	addi	r2,r2,1
 8015fd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8015fd4:	00000d06 	br	801600c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8015fd8:	e0bffc17 	ldw	r2,-16(fp)
 8015fdc:	10800217 	ldw	r2,8(r2)
 8015fe0:	e0fffd17 	ldw	r3,-12(fp)
 8015fe4:	180d883a 	mov	r6,r3
 8015fe8:	e17ffe17 	ldw	r5,-8(fp)
 8015fec:	1009883a 	mov	r4,r2
 8015ff0:	80162e40 	call	80162e4 <memcmp>
 8015ff4:	1000021e 	bne	r2,zero,8016000 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8015ff8:	e0bffc17 	ldw	r2,-16(fp)
 8015ffc:	00000706 	br	801601c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8016000:	e0bffc17 	ldw	r2,-16(fp)
 8016004:	10800017 	ldw	r2,0(r2)
 8016008:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801600c:	e0fffc17 	ldw	r3,-16(fp)
 8016010:	e0bfff17 	ldw	r2,-4(fp)
 8016014:	18bff01e 	bne	r3,r2,8015fd8 <__alt_data_end+0xf8015fd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8016018:	0005883a 	mov	r2,zero
}
 801601c:	e037883a 	mov	sp,fp
 8016020:	dfc00117 	ldw	ra,4(sp)
 8016024:	df000017 	ldw	fp,0(sp)
 8016028:	dec00204 	addi	sp,sp,8
 801602c:	f800283a 	ret

08016030 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8016030:	defffb04 	addi	sp,sp,-20
 8016034:	dfc00415 	stw	ra,16(sp)
 8016038:	df000315 	stw	fp,12(sp)
 801603c:	df000304 	addi	fp,sp,12
 8016040:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8016044:	d0a00717 	ldw	r2,-32740(gp)
 8016048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801604c:	00003106 	br	8016114 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8016050:	e0bffd17 	ldw	r2,-12(fp)
 8016054:	10800217 	ldw	r2,8(r2)
 8016058:	1009883a 	mov	r4,r2
 801605c:	80076040 	call	8007604 <strlen>
 8016060:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8016064:	e0bffd17 	ldw	r2,-12(fp)
 8016068:	10c00217 	ldw	r3,8(r2)
 801606c:	e0bffe17 	ldw	r2,-8(fp)
 8016070:	10bfffc4 	addi	r2,r2,-1
 8016074:	1885883a 	add	r2,r3,r2
 8016078:	10800003 	ldbu	r2,0(r2)
 801607c:	10803fcc 	andi	r2,r2,255
 8016080:	1080201c 	xori	r2,r2,128
 8016084:	10bfe004 	addi	r2,r2,-128
 8016088:	10800bd8 	cmpnei	r2,r2,47
 801608c:	1000031e 	bne	r2,zero,801609c <alt_find_file+0x6c>
    {
      len -= 1;
 8016090:	e0bffe17 	ldw	r2,-8(fp)
 8016094:	10bfffc4 	addi	r2,r2,-1
 8016098:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801609c:	e0bffe17 	ldw	r2,-8(fp)
 80160a0:	e0ffff17 	ldw	r3,-4(fp)
 80160a4:	1885883a 	add	r2,r3,r2
 80160a8:	10800003 	ldbu	r2,0(r2)
 80160ac:	10803fcc 	andi	r2,r2,255
 80160b0:	1080201c 	xori	r2,r2,128
 80160b4:	10bfe004 	addi	r2,r2,-128
 80160b8:	10800be0 	cmpeqi	r2,r2,47
 80160bc:	1000081e 	bne	r2,zero,80160e0 <alt_find_file+0xb0>
 80160c0:	e0bffe17 	ldw	r2,-8(fp)
 80160c4:	e0ffff17 	ldw	r3,-4(fp)
 80160c8:	1885883a 	add	r2,r3,r2
 80160cc:	10800003 	ldbu	r2,0(r2)
 80160d0:	10803fcc 	andi	r2,r2,255
 80160d4:	1080201c 	xori	r2,r2,128
 80160d8:	10bfe004 	addi	r2,r2,-128
 80160dc:	10000a1e 	bne	r2,zero,8016108 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80160e0:	e0bffd17 	ldw	r2,-12(fp)
 80160e4:	10800217 	ldw	r2,8(r2)
 80160e8:	e0fffe17 	ldw	r3,-8(fp)
 80160ec:	180d883a 	mov	r6,r3
 80160f0:	e17fff17 	ldw	r5,-4(fp)
 80160f4:	1009883a 	mov	r4,r2
 80160f8:	80162e40 	call	80162e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80160fc:	1000021e 	bne	r2,zero,8016108 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8016100:	e0bffd17 	ldw	r2,-12(fp)
 8016104:	00000706 	br	8016124 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8016108:	e0bffd17 	ldw	r2,-12(fp)
 801610c:	10800017 	ldw	r2,0(r2)
 8016110:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8016114:	e0fffd17 	ldw	r3,-12(fp)
 8016118:	d0a00704 	addi	r2,gp,-32740
 801611c:	18bfcc1e 	bne	r3,r2,8016050 <__alt_data_end+0xf8016050>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8016120:	0005883a 	mov	r2,zero
}
 8016124:	e037883a 	mov	sp,fp
 8016128:	dfc00117 	ldw	ra,4(sp)
 801612c:	df000017 	ldw	fp,0(sp)
 8016130:	dec00204 	addi	sp,sp,8
 8016134:	f800283a 	ret

08016138 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8016138:	defffa04 	addi	sp,sp,-24
 801613c:	dfc00515 	stw	ra,20(sp)
 8016140:	df000415 	stw	fp,16(sp)
 8016144:	dc000315 	stw	r16,12(sp)
 8016148:	df000404 	addi	fp,sp,16
 801614c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8016150:	00bffa04 	movi	r2,-24
 8016154:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8016158:	e03ffc15 	stw	zero,-16(fp)
 801615c:	00001d06 	br	80161d4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8016160:	04020074 	movhi	r16,2049
 8016164:	841c9b04 	addi	r16,r16,29292
 8016168:	e0bffc17 	ldw	r2,-16(fp)
 801616c:	01400304 	movi	r5,12
 8016170:	1009883a 	mov	r4,r2
 8016174:	800722c0 	call	800722c <__mulsi3>
 8016178:	8085883a 	add	r2,r16,r2
 801617c:	10800017 	ldw	r2,0(r2)
 8016180:	1000111e 	bne	r2,zero,80161c8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8016184:	04020074 	movhi	r16,2049
 8016188:	841c9b04 	addi	r16,r16,29292
 801618c:	e0bffc17 	ldw	r2,-16(fp)
 8016190:	01400304 	movi	r5,12
 8016194:	1009883a 	mov	r4,r2
 8016198:	800722c0 	call	800722c <__mulsi3>
 801619c:	8085883a 	add	r2,r16,r2
 80161a0:	e0fffe17 	ldw	r3,-8(fp)
 80161a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80161a8:	d0e00b17 	ldw	r3,-32724(gp)
 80161ac:	e0bffc17 	ldw	r2,-16(fp)
 80161b0:	1880020e 	bge	r3,r2,80161bc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80161b4:	e0bffc17 	ldw	r2,-16(fp)
 80161b8:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 80161bc:	e0bffc17 	ldw	r2,-16(fp)
 80161c0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80161c4:	00000606 	br	80161e0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80161c8:	e0bffc17 	ldw	r2,-16(fp)
 80161cc:	10800044 	addi	r2,r2,1
 80161d0:	e0bffc15 	stw	r2,-16(fp)
 80161d4:	e0bffc17 	ldw	r2,-16(fp)
 80161d8:	10800810 	cmplti	r2,r2,32
 80161dc:	103fe01e 	bne	r2,zero,8016160 <__alt_data_end+0xf8016160>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80161e0:	e0bffd17 	ldw	r2,-12(fp)
}
 80161e4:	e6ffff04 	addi	sp,fp,-4
 80161e8:	dfc00217 	ldw	ra,8(sp)
 80161ec:	df000117 	ldw	fp,4(sp)
 80161f0:	dc000017 	ldw	r16,0(sp)
 80161f4:	dec00304 	addi	sp,sp,12
 80161f8:	f800283a 	ret

080161fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80161fc:	defffe04 	addi	sp,sp,-8
 8016200:	df000115 	stw	fp,4(sp)
 8016204:	df000104 	addi	fp,sp,4
 8016208:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801620c:	e0bfff17 	ldw	r2,-4(fp)
 8016210:	10bffe84 	addi	r2,r2,-6
 8016214:	10c00428 	cmpgeui	r3,r2,16
 8016218:	18001a1e 	bne	r3,zero,8016284 <alt_exception_cause_generated_bad_addr+0x88>
 801621c:	100690ba 	slli	r3,r2,2
 8016220:	00820074 	movhi	r2,2049
 8016224:	10988d04 	addi	r2,r2,25140
 8016228:	1885883a 	add	r2,r3,r2
 801622c:	10800017 	ldw	r2,0(r2)
 8016230:	1000683a 	jmp	r2
 8016234:	08016274 	orhi	zero,at,1417
 8016238:	08016274 	orhi	zero,at,1417
 801623c:	08016284 	addi	zero,at,1418
 8016240:	08016284 	addi	zero,at,1418
 8016244:	08016284 	addi	zero,at,1418
 8016248:	08016274 	orhi	zero,at,1417
 801624c:	0801627c 	xorhi	zero,at,1417
 8016250:	08016284 	addi	zero,at,1418
 8016254:	08016274 	orhi	zero,at,1417
 8016258:	08016274 	orhi	zero,at,1417
 801625c:	08016284 	addi	zero,at,1418
 8016260:	08016274 	orhi	zero,at,1417
 8016264:	0801627c 	xorhi	zero,at,1417
 8016268:	08016284 	addi	zero,at,1418
 801626c:	08016284 	addi	zero,at,1418
 8016270:	08016274 	orhi	zero,at,1417
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8016274:	00800044 	movi	r2,1
 8016278:	00000306 	br	8016288 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801627c:	0005883a 	mov	r2,zero
 8016280:	00000106 	br	8016288 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8016284:	0005883a 	mov	r2,zero
  }
}
 8016288:	e037883a 	mov	sp,fp
 801628c:	df000017 	ldw	fp,0(sp)
 8016290:	dec00104 	addi	sp,sp,4
 8016294:	f800283a 	ret

08016298 <atexit>:
 8016298:	200b883a 	mov	r5,r4
 801629c:	000f883a 	mov	r7,zero
 80162a0:	000d883a 	mov	r6,zero
 80162a4:	0009883a 	mov	r4,zero
 80162a8:	80163601 	jmpi	8016360 <__register_exitproc>

080162ac <exit>:
 80162ac:	defffe04 	addi	sp,sp,-8
 80162b0:	000b883a 	mov	r5,zero
 80162b4:	dc000015 	stw	r16,0(sp)
 80162b8:	dfc00115 	stw	ra,4(sp)
 80162bc:	2021883a 	mov	r16,r4
 80162c0:	80164780 	call	8016478 <__call_exitprocs>
 80162c4:	008200b4 	movhi	r2,2050
 80162c8:	10a11404 	addi	r2,r2,-31664
 80162cc:	11000017 	ldw	r4,0(r2)
 80162d0:	20800f17 	ldw	r2,60(r4)
 80162d4:	10000126 	beq	r2,zero,80162dc <exit+0x30>
 80162d8:	103ee83a 	callr	r2
 80162dc:	8009883a 	mov	r4,r16
 80162e0:	80165f80 	call	80165f8 <_exit>

080162e4 <memcmp>:
 80162e4:	01c000c4 	movi	r7,3
 80162e8:	3980192e 	bgeu	r7,r6,8016350 <memcmp+0x6c>
 80162ec:	2144b03a 	or	r2,r4,r5
 80162f0:	11c4703a 	and	r2,r2,r7
 80162f4:	10000f26 	beq	r2,zero,8016334 <memcmp+0x50>
 80162f8:	20800003 	ldbu	r2,0(r4)
 80162fc:	28c00003 	ldbu	r3,0(r5)
 8016300:	10c0151e 	bne	r2,r3,8016358 <memcmp+0x74>
 8016304:	31bfff84 	addi	r6,r6,-2
 8016308:	01ffffc4 	movi	r7,-1
 801630c:	00000406 	br	8016320 <memcmp+0x3c>
 8016310:	20800003 	ldbu	r2,0(r4)
 8016314:	28c00003 	ldbu	r3,0(r5)
 8016318:	31bfffc4 	addi	r6,r6,-1
 801631c:	10c00e1e 	bne	r2,r3,8016358 <memcmp+0x74>
 8016320:	21000044 	addi	r4,r4,1
 8016324:	29400044 	addi	r5,r5,1
 8016328:	31fff91e 	bne	r6,r7,8016310 <__alt_data_end+0xf8016310>
 801632c:	0005883a 	mov	r2,zero
 8016330:	f800283a 	ret
 8016334:	20c00017 	ldw	r3,0(r4)
 8016338:	28800017 	ldw	r2,0(r5)
 801633c:	18bfee1e 	bne	r3,r2,80162f8 <__alt_data_end+0xf80162f8>
 8016340:	31bfff04 	addi	r6,r6,-4
 8016344:	21000104 	addi	r4,r4,4
 8016348:	29400104 	addi	r5,r5,4
 801634c:	39bff936 	bltu	r7,r6,8016334 <__alt_data_end+0xf8016334>
 8016350:	303fe91e 	bne	r6,zero,80162f8 <__alt_data_end+0xf80162f8>
 8016354:	003ff506 	br	801632c <__alt_data_end+0xf801632c>
 8016358:	10c5c83a 	sub	r2,r2,r3
 801635c:	f800283a 	ret

08016360 <__register_exitproc>:
 8016360:	defffa04 	addi	sp,sp,-24
 8016364:	dc000315 	stw	r16,12(sp)
 8016368:	040200b4 	movhi	r16,2050
 801636c:	84211404 	addi	r16,r16,-31664
 8016370:	80c00017 	ldw	r3,0(r16)
 8016374:	dc400415 	stw	r17,16(sp)
 8016378:	dfc00515 	stw	ra,20(sp)
 801637c:	18805217 	ldw	r2,328(r3)
 8016380:	2023883a 	mov	r17,r4
 8016384:	10003726 	beq	r2,zero,8016464 <__register_exitproc+0x104>
 8016388:	10c00117 	ldw	r3,4(r2)
 801638c:	010007c4 	movi	r4,31
 8016390:	20c00e16 	blt	r4,r3,80163cc <__register_exitproc+0x6c>
 8016394:	1a000044 	addi	r8,r3,1
 8016398:	8800221e 	bne	r17,zero,8016424 <__register_exitproc+0xc4>
 801639c:	18c00084 	addi	r3,r3,2
 80163a0:	18c7883a 	add	r3,r3,r3
 80163a4:	18c7883a 	add	r3,r3,r3
 80163a8:	12000115 	stw	r8,4(r2)
 80163ac:	10c7883a 	add	r3,r2,r3
 80163b0:	19400015 	stw	r5,0(r3)
 80163b4:	0005883a 	mov	r2,zero
 80163b8:	dfc00517 	ldw	ra,20(sp)
 80163bc:	dc400417 	ldw	r17,16(sp)
 80163c0:	dc000317 	ldw	r16,12(sp)
 80163c4:	dec00604 	addi	sp,sp,24
 80163c8:	f800283a 	ret
 80163cc:	00800034 	movhi	r2,0
 80163d0:	10800004 	addi	r2,r2,0
 80163d4:	10002626 	beq	r2,zero,8016470 <__register_exitproc+0x110>
 80163d8:	01006404 	movi	r4,400
 80163dc:	d9400015 	stw	r5,0(sp)
 80163e0:	d9800115 	stw	r6,4(sp)
 80163e4:	d9c00215 	stw	r7,8(sp)
 80163e8:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80163ec:	d9400017 	ldw	r5,0(sp)
 80163f0:	d9800117 	ldw	r6,4(sp)
 80163f4:	d9c00217 	ldw	r7,8(sp)
 80163f8:	10001d26 	beq	r2,zero,8016470 <__register_exitproc+0x110>
 80163fc:	81000017 	ldw	r4,0(r16)
 8016400:	10000115 	stw	zero,4(r2)
 8016404:	02000044 	movi	r8,1
 8016408:	22405217 	ldw	r9,328(r4)
 801640c:	0007883a 	mov	r3,zero
 8016410:	12400015 	stw	r9,0(r2)
 8016414:	20805215 	stw	r2,328(r4)
 8016418:	10006215 	stw	zero,392(r2)
 801641c:	10006315 	stw	zero,396(r2)
 8016420:	883fde26 	beq	r17,zero,801639c <__alt_data_end+0xf801639c>
 8016424:	18c9883a 	add	r4,r3,r3
 8016428:	2109883a 	add	r4,r4,r4
 801642c:	1109883a 	add	r4,r2,r4
 8016430:	21802215 	stw	r6,136(r4)
 8016434:	01800044 	movi	r6,1
 8016438:	12406217 	ldw	r9,392(r2)
 801643c:	30cc983a 	sll	r6,r6,r3
 8016440:	4992b03a 	or	r9,r9,r6
 8016444:	12406215 	stw	r9,392(r2)
 8016448:	21c04215 	stw	r7,264(r4)
 801644c:	01000084 	movi	r4,2
 8016450:	893fd21e 	bne	r17,r4,801639c <__alt_data_end+0xf801639c>
 8016454:	11006317 	ldw	r4,396(r2)
 8016458:	218cb03a 	or	r6,r4,r6
 801645c:	11806315 	stw	r6,396(r2)
 8016460:	003fce06 	br	801639c <__alt_data_end+0xf801639c>
 8016464:	18805304 	addi	r2,r3,332
 8016468:	18805215 	stw	r2,328(r3)
 801646c:	003fc606 	br	8016388 <__alt_data_end+0xf8016388>
 8016470:	00bfffc4 	movi	r2,-1
 8016474:	003fd006 	br	80163b8 <__alt_data_end+0xf80163b8>

08016478 <__call_exitprocs>:
 8016478:	defff504 	addi	sp,sp,-44
 801647c:	df000915 	stw	fp,36(sp)
 8016480:	dd400615 	stw	r21,24(sp)
 8016484:	dc800315 	stw	r18,12(sp)
 8016488:	dfc00a15 	stw	ra,40(sp)
 801648c:	ddc00815 	stw	r23,32(sp)
 8016490:	dd800715 	stw	r22,28(sp)
 8016494:	dd000515 	stw	r20,20(sp)
 8016498:	dcc00415 	stw	r19,16(sp)
 801649c:	dc400215 	stw	r17,8(sp)
 80164a0:	dc000115 	stw	r16,4(sp)
 80164a4:	d9000015 	stw	r4,0(sp)
 80164a8:	2839883a 	mov	fp,r5
 80164ac:	04800044 	movi	r18,1
 80164b0:	057fffc4 	movi	r21,-1
 80164b4:	008200b4 	movhi	r2,2050
 80164b8:	10a11404 	addi	r2,r2,-31664
 80164bc:	12000017 	ldw	r8,0(r2)
 80164c0:	45005217 	ldw	r20,328(r8)
 80164c4:	44c05204 	addi	r19,r8,328
 80164c8:	a0001c26 	beq	r20,zero,801653c <__call_exitprocs+0xc4>
 80164cc:	a0800117 	ldw	r2,4(r20)
 80164d0:	15ffffc4 	addi	r23,r2,-1
 80164d4:	b8000d16 	blt	r23,zero,801650c <__call_exitprocs+0x94>
 80164d8:	14000044 	addi	r16,r2,1
 80164dc:	8421883a 	add	r16,r16,r16
 80164e0:	8421883a 	add	r16,r16,r16
 80164e4:	84402004 	addi	r17,r16,128
 80164e8:	a463883a 	add	r17,r20,r17
 80164ec:	a421883a 	add	r16,r20,r16
 80164f0:	e0001e26 	beq	fp,zero,801656c <__call_exitprocs+0xf4>
 80164f4:	80804017 	ldw	r2,256(r16)
 80164f8:	e0801c26 	beq	fp,r2,801656c <__call_exitprocs+0xf4>
 80164fc:	bdffffc4 	addi	r23,r23,-1
 8016500:	843fff04 	addi	r16,r16,-4
 8016504:	8c7fff04 	addi	r17,r17,-4
 8016508:	bd7ff91e 	bne	r23,r21,80164f0 <__alt_data_end+0xf80164f0>
 801650c:	00800034 	movhi	r2,0
 8016510:	10800004 	addi	r2,r2,0
 8016514:	10000926 	beq	r2,zero,801653c <__call_exitprocs+0xc4>
 8016518:	a0800117 	ldw	r2,4(r20)
 801651c:	1000301e 	bne	r2,zero,80165e0 <__call_exitprocs+0x168>
 8016520:	a0800017 	ldw	r2,0(r20)
 8016524:	10003226 	beq	r2,zero,80165f0 <__call_exitprocs+0x178>
 8016528:	a009883a 	mov	r4,r20
 801652c:	98800015 	stw	r2,0(r19)
 8016530:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8016534:	9d000017 	ldw	r20,0(r19)
 8016538:	a03fe41e 	bne	r20,zero,80164cc <__alt_data_end+0xf80164cc>
 801653c:	dfc00a17 	ldw	ra,40(sp)
 8016540:	df000917 	ldw	fp,36(sp)
 8016544:	ddc00817 	ldw	r23,32(sp)
 8016548:	dd800717 	ldw	r22,28(sp)
 801654c:	dd400617 	ldw	r21,24(sp)
 8016550:	dd000517 	ldw	r20,20(sp)
 8016554:	dcc00417 	ldw	r19,16(sp)
 8016558:	dc800317 	ldw	r18,12(sp)
 801655c:	dc400217 	ldw	r17,8(sp)
 8016560:	dc000117 	ldw	r16,4(sp)
 8016564:	dec00b04 	addi	sp,sp,44
 8016568:	f800283a 	ret
 801656c:	a0800117 	ldw	r2,4(r20)
 8016570:	80c00017 	ldw	r3,0(r16)
 8016574:	10bfffc4 	addi	r2,r2,-1
 8016578:	15c01426 	beq	r2,r23,80165cc <__call_exitprocs+0x154>
 801657c:	80000015 	stw	zero,0(r16)
 8016580:	183fde26 	beq	r3,zero,80164fc <__alt_data_end+0xf80164fc>
 8016584:	95c8983a 	sll	r4,r18,r23
 8016588:	a0806217 	ldw	r2,392(r20)
 801658c:	a5800117 	ldw	r22,4(r20)
 8016590:	2084703a 	and	r2,r4,r2
 8016594:	10000b26 	beq	r2,zero,80165c4 <__call_exitprocs+0x14c>
 8016598:	a0806317 	ldw	r2,396(r20)
 801659c:	2088703a 	and	r4,r4,r2
 80165a0:	20000c1e 	bne	r4,zero,80165d4 <__call_exitprocs+0x15c>
 80165a4:	89400017 	ldw	r5,0(r17)
 80165a8:	d9000017 	ldw	r4,0(sp)
 80165ac:	183ee83a 	callr	r3
 80165b0:	a0800117 	ldw	r2,4(r20)
 80165b4:	15bfbf1e 	bne	r2,r22,80164b4 <__alt_data_end+0xf80164b4>
 80165b8:	98800017 	ldw	r2,0(r19)
 80165bc:	153fcf26 	beq	r2,r20,80164fc <__alt_data_end+0xf80164fc>
 80165c0:	003fbc06 	br	80164b4 <__alt_data_end+0xf80164b4>
 80165c4:	183ee83a 	callr	r3
 80165c8:	003ff906 	br	80165b0 <__alt_data_end+0xf80165b0>
 80165cc:	a5c00115 	stw	r23,4(r20)
 80165d0:	003feb06 	br	8016580 <__alt_data_end+0xf8016580>
 80165d4:	89000017 	ldw	r4,0(r17)
 80165d8:	183ee83a 	callr	r3
 80165dc:	003ff406 	br	80165b0 <__alt_data_end+0xf80165b0>
 80165e0:	a0800017 	ldw	r2,0(r20)
 80165e4:	a027883a 	mov	r19,r20
 80165e8:	1029883a 	mov	r20,r2
 80165ec:	003fb606 	br	80164c8 <__alt_data_end+0xf80164c8>
 80165f0:	0005883a 	mov	r2,zero
 80165f4:	003ffb06 	br	80165e4 <__alt_data_end+0xf80165e4>

080165f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80165f8:	defffd04 	addi	sp,sp,-12
 80165fc:	df000215 	stw	fp,8(sp)
 8016600:	df000204 	addi	fp,sp,8
 8016604:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8016608:	0001883a 	nop
 801660c:	e0bfff17 	ldw	r2,-4(fp)
 8016610:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8016614:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8016618:	10000226 	beq	r2,zero,8016624 <_exit+0x2c>
    ALT_SIM_FAIL();
 801661c:	002af070 	cmpltui	zero,zero,43969
 8016620:	00000106 	br	8016628 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8016624:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8016628:	003fff06 	br	8016628 <__alt_data_end+0xf8016628>
